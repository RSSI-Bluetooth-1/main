
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 5d 00 20 35 35 01 00 2f cf 01 00 09 35 01 00     .]. 55../....5..
  10:	09 35 01 00 09 35 01 00 09 35 01 00 00 00 00 00     .5...5...5......
	...
  2c:	31 2d 01 00 09 35 01 00 00 00 00 00 dd 2c 01 00     1-...5.......,..
  3c:	09 35 01 00                                         .5..

00000040 <_irq_vector_table>:
  40:	e1 2d 01 00 73 da 01 00 e1 2d 01 00 e1 2d 01 00     .-..s....-...-..
  50:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  60:	21 da 01 00 e1 2d 01 00 e1 2d 01 00 59 da 01 00     !....-...-..Y...
  70:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  80:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  90:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  a0:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  b0:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  c0:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  d0:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  e0:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..
  f0:	e1 2d 01 00 e1 2d 01 00 e1 2d 01 00 e1 2d 01 00     .-...-...-...-..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fcd8 	bl	cad4 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop
     134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     136:	4c1a      	ldr	r4, [pc, #104]	; (1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>)
     138:	7a20      	ldrb	r0, [r4, #8]
     13a:	f88d 0001 	strb.w	r0, [sp, #1]
     13e:	79e0      	ldrb	r0, [r4, #7]
     140:	f88d 0000 	strb.w	r0, [sp]
     144:	79a0      	ldrb	r0, [r4, #6]
     146:	f8ad 0004 	strh.w	r0, [sp, #4]
     14a:	7960      	ldrb	r0, [r4, #5]
     14c:	f8ad 0002 	strh.w	r0, [sp, #2]
     150:	4668      	mov	r0, sp
     152:	f006 fca1 	bl	6a98 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     156:	b108      	cbz	r0, 15c <CONFIG_IDLE_STACK_SIZE+0x1c>
     158:	21a7      	movs	r1, #167	; 0xa7
     15a:	e01c      	b.n	196 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x29>
     15c:	68e0      	ldr	r0, [r4, #12]
     15e:	9002      	str	r0, [sp, #8]
     160:	a802      	add	r0, sp, #8
     162:	f006 fcaf 	bl	6ac4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     166:	b108      	cbz	r0, 16c <CONFIG_IDLE_STACK_SIZE+0x2c>
     168:	21ab      	movs	r1, #171	; 0xab
     16a:	e014      	b.n	196 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x29>
     16c:	480d      	ldr	r0, [pc, #52]	; (1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>)
     16e:	6800      	ldr	r0, [r0, #0]
     170:	9003      	str	r0, [sp, #12]
     172:	a803      	add	r0, sp, #12
     174:	f00f fb05 	bl	f782 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     178:	b108      	cbz	r0, 17e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11>
     17a:	21af      	movs	r1, #175	; 0xaf
     17c:	e00b      	b.n	196 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x29>
     17e:	7e60      	ldrb	r0, [r4, #25]
     180:	f006 fcd2 	bl	6b28 <sym_BLF47GKHG6ZQOW3KS7Z2FM5ECAJ3LF5DPZBMLNA>
     184:	b108      	cbz	r0, 18a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d>
     186:	21b8      	movs	r1, #184	; 0xb8
     188:	e005      	b.n	196 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x29>
     18a:	7e20      	ldrb	r0, [r4, #24]
     18c:	f006 fcc6 	bl	6b1c <sym_AZDVN5NCVR7WZFBQMTBKDS4ZECELF7HJDO5FKMQ>
     190:	2800      	cmp	r0, #0
     192:	d003      	beq.n	19c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2f>
     194:	21b9      	movs	r1, #185	; 0xb9
     196:	2003      	movs	r0, #3
     198:	f000 fa34 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     19c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     19e:	0000      	.short	0x0000
     1a0:	20000850 	.word	0x20000850
     1a4:	000006b0 	.word	0x000006b0
     1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
     1ac:	4681      	mov	r9, r0
     1ae:	460c      	mov	r4, r1
     1b0:	1cc0      	adds	r0, r0, #3
     1b2:	4690      	mov	r8, r2
     1b4:	4611      	mov	r1, r2
     1b6:	2200      	movs	r2, #0
     1b8:	f020 0003 	bic.w	r0, r0, #3
     1bc:	e9cd 0200 	strd	r0, r2, [sp]
     1c0:	9202      	str	r2, [sp, #8]
     1c2:	9203      	str	r2, [sp, #12]
     1c4:	7822      	ldrb	r2, [r4, #0]
     1c6:	f88d 2005 	strb.w	r2, [sp, #5]
     1ca:	7862      	ldrb	r2, [r4, #1]
     1cc:	f88d 2006 	strb.w	r2, [sp, #6]
     1d0:	78a2      	ldrb	r2, [r4, #2]
     1d2:	f88d 2007 	strb.w	r2, [sp, #7]
     1d6:	78e2      	ldrb	r2, [r4, #3]
     1d8:	f88d 2008 	strb.w	r2, [sp, #8]
     1dc:	7922      	ldrb	r2, [r4, #4]
     1de:	f88d 2009 	strb.w	r2, [sp, #9]
     1e2:	7da2      	ldrb	r2, [r4, #22]
     1e4:	f88d 200a 	strb.w	r2, [sp, #10]
     1e8:	7ee2      	ldrb	r2, [r4, #27]
     1ea:	f88d 200c 	strb.w	r2, [sp, #12]
     1ee:	7f22      	ldrb	r2, [r4, #28]
     1f0:	f88d 200d 	strb.w	r2, [sp, #13]
     1f4:	4a1f      	ldr	r2, [pc, #124]	; (274 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x107>)
     1f6:	7952      	ldrb	r2, [r2, #5]
     1f8:	b112      	cbz	r2, 200 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x93>
     1fa:	7922      	ldrb	r2, [r4, #4]
     1fc:	f88d 200b 	strb.w	r2, [sp, #11]
     200:	b101      	cbz	r1, 204 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x97>
     202:	2000      	movs	r0, #0
     204:	a901      	add	r1, sp, #4
     206:	f000 fc0b 	bl	a20 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     20a:	9900      	ldr	r1, [sp, #0]
     20c:	2600      	movs	r6, #0
     20e:	4408      	add	r0, r1
     210:	9000      	str	r0, [sp, #0]
     212:	7820      	ldrb	r0, [r4, #0]
     214:	7861      	ldrb	r1, [r4, #1]
     216:	4635      	mov	r5, r6
     218:	4408      	add	r0, r1
     21a:	b2c7      	uxtb	r7, r0
     21c:	e008      	b.n	230 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc3>
     21e:	7a23      	ldrb	r3, [r4, #8]
     220:	79e2      	ldrb	r2, [r4, #7]
     222:	79a1      	ldrb	r1, [r4, #6]
     224:	7960      	ldrb	r0, [r4, #5]
     226:	f00d fcbf 	bl	dba8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     22a:	1c6d      	adds	r5, r5, #1
     22c:	4406      	add	r6, r0
     22e:	b2ed      	uxtb	r5, r5
     230:	42bd      	cmp	r5, r7
     232:	d3f4      	bcc.n	21e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb1>
     234:	9800      	ldr	r0, [sp, #0]
     236:	1cc0      	adds	r0, r0, #3
     238:	f020 0003 	bic.w	r0, r0, #3
     23c:	9000      	str	r0, [sp, #0]
     23e:	f1b8 0f00 	cmp.w	r8, #0
     242:	d000      	beq.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     244:	2000      	movs	r0, #0
     246:	4632      	mov	r2, r6
     248:	4639      	mov	r1, r7
     24a:	f000 fe3d 	bl	ec8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     24e:	9900      	ldr	r1, [sp, #0]
     250:	4642      	mov	r2, r8
     252:	4408      	add	r0, r1
     254:	9000      	str	r0, [sp, #0]
     256:	4621      	mov	r1, r4
     258:	4668      	mov	r0, sp
     25a:	f000 f80d 	bl	278 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x10b>
     25e:	9800      	ldr	r0, [sp, #0]
     260:	1dc0      	adds	r0, r0, #7
     262:	f020 0007 	bic.w	r0, r0, #7
     266:	9000      	str	r0, [sp, #0]
     268:	b004      	add	sp, #16
     26a:	eba0 0009 	sub.w	r0, r0, r9
     26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     272:	0000      	.short	0x0000
     274:	20000028 	.word	0x20000028
     278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     27a:	4604      	mov	r4, r0
     27c:	7888      	ldrb	r0, [r1, #2]
     27e:	4616      	mov	r6, r2
     280:	460d      	mov	r5, r1
     282:	b170      	cbz	r0, 2a2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x135>
     284:	6820      	ldr	r0, [r4, #0]
     286:	1cc0      	adds	r0, r0, #3
     288:	f020 0003 	bic.w	r0, r0, #3
     28c:	6020      	str	r0, [r4, #0]
     28e:	8a6b      	ldrh	r3, [r5, #18]
     290:	78ea      	ldrb	r2, [r5, #3]
     292:	78a9      	ldrb	r1, [r5, #2]
     294:	b106      	cbz	r6, 298 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x12b>
     296:	2000      	movs	r0, #0
     298:	f000 fe9e 	bl	fd8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
     29c:	6821      	ldr	r1, [r4, #0]
     29e:	4408      	add	r0, r1
     2a0:	6020      	str	r0, [r4, #0]
     2a2:	4f49      	ldr	r7, [pc, #292]	; (3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>)
     2a4:	78f8      	ldrb	r0, [r7, #3]
     2a6:	b198      	cbz	r0, 2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     2a8:	7c28      	ldrb	r0, [r5, #16]
     2aa:	b188      	cbz	r0, 2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     2ac:	7938      	ldrb	r0, [r7, #4]
     2ae:	b108      	cbz	r0, 2b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x147>
     2b0:	22ff      	movs	r2, #255	; 0xff
     2b2:	e000      	b.n	2b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x149>
     2b4:	2225      	movs	r2, #37	; 0x25
     2b6:	6820      	ldr	r0, [r4, #0]
     2b8:	1cc0      	adds	r0, r0, #3
     2ba:	f020 0003 	bic.w	r0, r0, #3
     2be:	6020      	str	r0, [r4, #0]
     2c0:	7c29      	ldrb	r1, [r5, #16]
     2c2:	b106      	cbz	r6, 2c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x159>
     2c4:	2000      	movs	r0, #0
     2c6:	f000 ff1b 	bl	1100 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     2ca:	6821      	ldr	r1, [r4, #0]
     2cc:	4408      	add	r0, r1
     2ce:	6020      	str	r0, [r4, #0]
     2d0:	483e      	ldr	r0, [pc, #248]	; (3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>)
     2d2:	6803      	ldr	r3, [r0, #0]
     2d4:	b173      	cbz	r3, 2f4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x187>
     2d6:	7928      	ldrb	r0, [r5, #4]
     2d8:	b160      	cbz	r0, 2f4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x187>
     2da:	6820      	ldr	r0, [r4, #0]
     2dc:	1cc0      	adds	r0, r0, #3
     2de:	f020 0003 	bic.w	r0, r0, #3
     2e2:	6020      	str	r0, [r4, #0]
     2e4:	7d2a      	ldrb	r2, [r5, #20]
     2e6:	7929      	ldrb	r1, [r5, #4]
     2e8:	b106      	cbz	r6, 2ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17f>
     2ea:	2000      	movs	r0, #0
     2ec:	4798      	blx	r3
     2ee:	6821      	ldr	r1, [r4, #0]
     2f0:	4408      	add	r0, r1
     2f2:	6020      	str	r0, [r4, #0]
     2f4:	4836      	ldr	r0, [pc, #216]	; (3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>)
     2f6:	6802      	ldr	r2, [r0, #0]
     2f8:	b16a      	cbz	r2, 316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     2fa:	7d68      	ldrb	r0, [r5, #21]
     2fc:	b158      	cbz	r0, 316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     2fe:	6820      	ldr	r0, [r4, #0]
     300:	1cc0      	adds	r0, r0, #3
     302:	f020 0003 	bic.w	r0, r0, #3
     306:	6020      	str	r0, [r4, #0]
     308:	7d69      	ldrb	r1, [r5, #21]
     30a:	b106      	cbz	r6, 30e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe>
     30c:	2000      	movs	r0, #0
     30e:	4790      	blx	r2
     310:	6821      	ldr	r1, [r4, #0]
     312:	4408      	add	r0, r1
     314:	6020      	str	r0, [r4, #0]
     316:	482f      	ldr	r0, [pc, #188]	; (3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>)
     318:	f8d0 c000 	ldr.w	ip, [r0]
     31c:	f1bc 0f00 	cmp.w	ip, #0
     320:	d011      	beq.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     322:	7da8      	ldrb	r0, [r5, #22]
     324:	b178      	cbz	r0, 346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     326:	6820      	ldr	r0, [r4, #0]
     328:	1cc0      	adds	r0, r0, #3
     32a:	f020 0003 	bic.w	r0, r0, #3
     32e:	6020      	str	r0, [r4, #0]
     330:	7e69      	ldrb	r1, [r5, #25]
     332:	9100      	str	r1, [sp, #0]
     334:	7e2b      	ldrb	r3, [r5, #24]
     336:	7dea      	ldrb	r2, [r5, #23]
     338:	7da9      	ldrb	r1, [r5, #22]
     33a:	b106      	cbz	r6, 33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     33c:	2000      	movs	r0, #0
     33e:	47e0      	blx	ip
     340:	6821      	ldr	r1, [r4, #0]
     342:	4408      	add	r0, r1
     344:	6020      	str	r0, [r4, #0]
     346:	7978      	ldrb	r0, [r7, #5]
     348:	b178      	cbz	r0, 36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     34a:	7928      	ldrb	r0, [r5, #4]
     34c:	b168      	cbz	r0, 36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     34e:	6820      	ldr	r0, [r4, #0]
     350:	1cc0      	adds	r0, r0, #3
     352:	f020 0003 	bic.w	r0, r0, #3
     356:	6020      	str	r0, [r4, #0]
     358:	7eaa      	ldrb	r2, [r5, #26]
     35a:	7929      	ldrb	r1, [r5, #4]
     35c:	b106      	cbz	r6, 360 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x60>
     35e:	2000      	movs	r0, #0
     360:	f000 ff08 	bl	1174 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ>
     364:	6821      	ldr	r1, [r4, #0]
     366:	4408      	add	r0, r1
     368:	6020      	str	r0, [r4, #0]
     36a:	7f68      	ldrb	r0, [r5, #29]
     36c:	f44f 778c 	mov.w	r7, #280	; 0x118
     370:	b168      	cbz	r0, 38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     372:	6820      	ldr	r0, [r4, #0]
     374:	1cc0      	adds	r0, r0, #3
     376:	f020 0003 	bic.w	r0, r0, #3
     37a:	6020      	str	r0, [r4, #0]
     37c:	b1ce      	cbz	r6, 3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     37e:	7f69      	ldrb	r1, [r5, #29]
     380:	2000      	movs	r0, #0
     382:	463a      	mov	r2, r7
     384:	f00d fc33 	bl	dbee <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ>
     388:	6821      	ldr	r1, [r4, #0]
     38a:	4408      	add	r0, r1
     38c:	6020      	str	r0, [r4, #0]
     38e:	7fa8      	ldrb	r0, [r5, #30]
     390:	2800      	cmp	r0, #0
     392:	d00d      	beq.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     394:	6820      	ldr	r0, [r4, #0]
     396:	1cc0      	adds	r0, r0, #3
     398:	f020 0003 	bic.w	r0, r0, #3
     39c:	6020      	str	r0, [r4, #0]
     39e:	b16e      	cbz	r6, 3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     3a0:	7fa9      	ldrb	r1, [r5, #30]
     3a2:	2000      	movs	r0, #0
     3a4:	463a      	mov	r2, r7
     3a6:	f00d fc22 	bl	dbee <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ>
     3aa:	6821      	ldr	r1, [r4, #0]
     3ac:	4408      	add	r0, r1
     3ae:	6020      	str	r0, [r4, #0]
     3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3b2:	f008 fd21 	bl	8df8 <sym_J56TGVTWOJVG4QNSVN7ORTC7AKSOICPGYZ3JG6A>
     3b6:	7f69      	ldrb	r1, [r5, #29]
     3b8:	6820      	ldr	r0, [r4, #0]
     3ba:	e7e2      	b.n	382 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x82>
     3bc:	f008 fd22 	bl	8e04 <sym_GNNG3GPFBTJTB7WCYU4SVHQQOQZGAXXXZFSD6PY>
     3c0:	7fa9      	ldrb	r1, [r5, #30]
     3c2:	6820      	ldr	r0, [r4, #0]
     3c4:	e7ee      	b.n	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     3c6:	0000      	.short	0x0000
     3c8:	20000028 	.word	0x20000028
     3cc:	20000034 	.word	0x20000034
     3d0:	2000003c 	.word	0x2000003c
     3d4:	20000038 	.word	0x20000038

000003d8 <sdc_build_revision_get>:
     3d8:	b510      	push	{r4, lr}
     3da:	b128      	cbz	r0, 3e8 <CONFIG_LOG_FAILURE_REPORT_PERIOD>
     3dc:	2214      	movs	r2, #20
     3de:	4904      	ldr	r1, [pc, #16]	; (3f0 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x8>)
     3e0:	f010 f863 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     3e4:	2000      	movs	r0, #0
     3e6:	bd10      	pop	{r4, pc}
     3e8:	f06f 0015 	mvn.w	r0, #21
     3ec:	bd10      	pop	{r4, pc}
     3ee:	0000      	.short	0x0000
     3f0:	000006d4 	.word	0x000006d4

000003f4 <sdc_cfg_set>:
     3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     3f8:	f06f 062c 	mvn.w	r6, #44	; 0x2c
     3fc:	2800      	cmp	r0, #0
     3fe:	d171      	bne.n	4e4 <CONFIG_BT_RX_STACK_SIZE+0xe4>
     400:	4c3b      	ldr	r4, [pc, #236]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     402:	7860      	ldrb	r0, [r4, #1]
     404:	b110      	cbz	r0, 40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     406:	11b0      	asrs	r0, r6, #6
     408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     40c:	b329      	cbz	r1, 45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     40e:	f06f 0015 	mvn.w	r0, #21
     412:	2a00      	cmp	r2, #0
     414:	d0f8      	beq.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     416:	4b37      	ldr	r3, [pc, #220]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     418:	290e      	cmp	r1, #14
     41a:	789d      	ldrb	r5, [r3, #2]
     41c:	d262      	bcs.n	4e4 <CONFIG_BT_RX_STACK_SIZE+0xe4>
     41e:	e8df f001 	tbb	[pc, r1]
     422:	0761      	.short	0x0761
     424:	201d0d0a 	.word	0x201d0d0a
     428:	4926463e 	.word	0x4926463e
     42c:	302b514c 	.word	0x302b514c
     430:	7810      	ldrb	r0, [r2, #0]
     432:	7018      	strb	r0, [r3, #0]
     434:	e04a      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     436:	7810      	ldrb	r0, [r2, #0]
     438:	7058      	strb	r0, [r3, #1]
     43a:	e047      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     43c:	7891      	ldrb	r1, [r2, #2]
     43e:	2900      	cmp	r1, #0
     440:	d0e2      	beq.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     442:	78d1      	ldrb	r1, [r2, #3]
     444:	2900      	cmp	r1, #0
     446:	d0df      	beq.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     448:	7811      	ldrb	r1, [r2, #0]
     44a:	291b      	cmp	r1, #27
     44c:	d3dc      	bcc.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     44e:	7851      	ldrb	r1, [r2, #1]
     450:	291b      	cmp	r1, #27
     452:	d3d9      	bcc.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     454:	6810      	ldr	r0, [r2, #0]
     456:	f8c3 0005 	str.w	r0, [r3, #5]
     45a:	e037      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     45c:	6810      	ldr	r0, [r2, #0]
     45e:	60d8      	str	r0, [r3, #12]
     460:	e034      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     462:	7811      	ldrb	r1, [r2, #0]
     464:	78da      	ldrb	r2, [r3, #3]
     466:	4291      	cmp	r1, r2
     468:	d3ce      	bcc.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     46a:	7099      	strb	r1, [r3, #2]
     46c:	e02e      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     46e:	7811      	ldrb	r1, [r2, #0]
     470:	42a9      	cmp	r1, r5
     472:	d8c9      	bhi.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     474:	70d9      	strb	r1, [r3, #3]
     476:	e029      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     478:	7811      	ldrb	r1, [r2, #0]
     47a:	42a9      	cmp	r1, r5
     47c:	d8c4      	bhi.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     47e:	7599      	strb	r1, [r3, #22]
     480:	e024      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     482:	7811      	ldrb	r1, [r2, #0]
     484:	2900      	cmp	r1, #0
     486:	d0bf      	beq.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     488:	7851      	ldrb	r1, [r2, #1]
     48a:	29f9      	cmp	r1, #249	; 0xf9
     48c:	d8bc      	bhi.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     48e:	2900      	cmp	r1, #0
     490:	d0ba      	beq.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     492:	8810      	ldrh	r0, [r2, #0]
     494:	f8a3 0017 	strh.w	r0, [r3, #23]
     498:	7890      	ldrb	r0, [r2, #2]
     49a:	7658      	strb	r0, [r3, #25]
     49c:	e016      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     49e:	78e1      	ldrb	r1, [r4, #3]
     4a0:	b111      	cbz	r1, 4a8 <CONFIG_BT_RX_STACK_SIZE+0xa8>
     4a2:	7811      	ldrb	r1, [r2, #0]
     4a4:	2902      	cmp	r1, #2
     4a6:	d3af      	bcc.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     4a8:	7810      	ldrb	r0, [r2, #0]
     4aa:	7418      	strb	r0, [r3, #16]
     4ac:	e00e      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     4ae:	8810      	ldrh	r0, [r2, #0]
     4b0:	8258      	strh	r0, [r3, #18]
     4b2:	e00b      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     4b4:	7810      	ldrb	r0, [r2, #0]
     4b6:	7118      	strb	r0, [r3, #4]
     4b8:	e008      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     4ba:	7811      	ldrb	r1, [r2, #0]
     4bc:	2902      	cmp	r1, #2
     4be:	d3a3      	bcc.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     4c0:	7519      	strb	r1, [r3, #20]
     4c2:	e003      	b.n	4cc <CONFIG_BT_RX_STACK_SIZE+0xcc>
     4c4:	7811      	ldrb	r1, [r2, #0]
     4c6:	2908      	cmp	r1, #8
     4c8:	d89e      	bhi.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     4ca:	7559      	strb	r1, [r3, #21]
     4cc:	2201      	movs	r2, #1
     4ce:	4909      	ldr	r1, [pc, #36]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     4d0:	2000      	movs	r0, #0
     4d2:	f7ff fe69 	bl	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     4d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     4da:	db05      	blt.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     4dc:	f06f 000b 	mvn.w	r0, #11
     4e0:	e792      	b.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     4e2:	e7ff      	b.n	4e4 <CONFIG_BT_RX_STACK_SIZE+0xe4>
     4e4:	4630      	mov	r0, r6
     4e6:	e78f      	b.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     4e8:	2101      	movs	r1, #1
     4ea:	70a1      	strb	r1, [r4, #2]
     4ec:	e78c      	b.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     4ee:	0000      	.short	0x0000
     4f0:	20000028 	.word	0x20000028
     4f4:	20000850 	.word	0x20000850

000004f8 <sdc_disable>:
     4f8:	b510      	push	{r4, lr}
     4fa:	4c07      	ldr	r4, [pc, #28]	; (518 <sdc_disable+0x20>)
     4fc:	7860      	ldrb	r0, [r4, #1]
     4fe:	b120      	cbz	r0, 50a <sdc_disable+0x12>
     500:	f006 fe70 	bl	71e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     504:	7820      	ldrb	r0, [r4, #0]
     506:	f00c f945 	bl	c794 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     50a:	f000 fe85 	bl	1218 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     50e:	f000 ff5d 	bl	13cc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     512:	2000      	movs	r0, #0
     514:	7060      	strb	r0, [r4, #1]
     516:	bd10      	pop	{r4, pc}
     518:	20000028 	.word	0x20000028

0000051c <sdc_enable>:
     51c:	b570      	push	{r4, r5, r6, lr}
     51e:	460c      	mov	r4, r1
     520:	0005      	movs	r5, r0
     522:	d002      	beq.n	52a <__data_size+0x2>
     524:	b10c      	cbz	r4, 52a <__data_size+0x2>
     526:	0760      	lsls	r0, r4, #29
     528:	d002      	beq.n	530 <__data_size+0x8>
     52a:	f06f 0015 	mvn.w	r0, #21
     52e:	bd70      	pop	{r4, r5, r6, pc}
     530:	f000 f904 	bl	73c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     534:	b1a8      	cbz	r0, 562 <__data_size+0x3a>
     536:	4628      	mov	r0, r5
     538:	f00c f8f2 	bl	c720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     53c:	4d0a      	ldr	r5, [pc, #40]	; (568 <__data_size+0x40>)
     53e:	2200      	movs	r2, #0
     540:	490a      	ldr	r1, [pc, #40]	; (56c <__data_size+0x44>)
     542:	7028      	strb	r0, [r5, #0]
     544:	4620      	mov	r0, r4
     546:	f7ff fe2f 	bl	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     54a:	f00f fdc5 	bl	100d8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     54e:	2100      	movs	r1, #0
     550:	7828      	ldrb	r0, [r5, #0]
     552:	f006 fe23 	bl	719c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     556:	f7ff fded 	bl	134 <__aeabi_idiv0+0x4>
     55a:	2001      	movs	r0, #1
     55c:	7068      	strb	r0, [r5, #1]
     55e:	2000      	movs	r0, #0
     560:	bd70      	pop	{r4, r5, r6, pc}
     562:	f04f 30ff 	mov.w	r0, #4294967295
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	20000028 	.word	0x20000028
     56c:	20000850 	.word	0x20000850

00000570 <sdc_init>:
     570:	b530      	push	{r4, r5, lr}
     572:	b089      	sub	sp, #36	; 0x24
     574:	0005      	movs	r5, r0
     576:	d00c      	beq.n	592 <sdc_init+0x22>
     578:	f00c f878 	bl	c66c <mpsl_is_initialized>
     57c:	f04f 34ff 	mov.w	r4, #4294967295
     580:	b120      	cbz	r0, 58c <sdc_init+0x1c>
     582:	f00b ff29 	bl	c3d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     586:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     58a:	d905      	bls.n	598 <sdc_init+0x28>
     58c:	4620      	mov	r0, r4
     58e:	b009      	add	sp, #36	; 0x24
     590:	bd30      	pop	{r4, r5, pc}
     592:	f06f 0015 	mvn.w	r0, #21
     596:	e7fa      	b.n	58e <sdc_init+0x1e>
     598:	4c15      	ldr	r4, [pc, #84]	; (5f0 <sdc_init+0x80>)
     59a:	4816      	ldr	r0, [pc, #88]	; (5f4 <CONFIG_BT_COMPANY_ID+0x3>)
     59c:	60a5      	str	r5, [r4, #8]
     59e:	f000 fa0d 	bl	9bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     5a2:	2000      	movs	r0, #0
     5a4:	7060      	strb	r0, [r4, #1]
     5a6:	70a0      	strb	r0, [r4, #2]
     5a8:	70e0      	strb	r0, [r4, #3]
     5aa:	7120      	strb	r0, [r4, #4]
     5ac:	7160      	strb	r0, [r4, #5]
     5ae:	4601      	mov	r1, r0
     5b0:	2220      	movs	r2, #32
     5b2:	4668      	mov	r0, sp
     5b4:	f00f fff3 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     5b8:	2220      	movs	r2, #32
     5ba:	490f      	ldr	r1, [pc, #60]	; (5f8 <CONFIG_BT_COMPANY_ID+0x7>)
     5bc:	4668      	mov	r0, sp
     5be:	f00f ff74 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     5c2:	2220      	movs	r2, #32
     5c4:	4669      	mov	r1, sp
     5c6:	480d      	ldr	r0, [pc, #52]	; (5fc <CONFIG_BT_COMPANY_ID+0xb>)
     5c8:	f00f ff6f 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     5cc:	f3ef 8410 	mrs	r4, PRIMASK
     5d0:	b672      	cpsid	i
     5d2:	f000 fe2f 	bl	1234 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     5d6:	480a      	ldr	r0, [pc, #40]	; (600 <CONFIG_BT_HCI_TX_STACK_SIZE>)
     5d8:	f000 ff04 	bl	13e4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     5dc:	b118      	cbz	r0, 5e6 <sdc_init+0x76>
     5de:	21c5      	movs	r1, #197	; 0xc5
     5e0:	2003      	movs	r0, #3
     5e2:	f000 f80f 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     5e6:	b904      	cbnz	r4, 5ea <sdc_init+0x7a>
     5e8:	b662      	cpsie	i
     5ea:	2000      	movs	r0, #0
     5ec:	e7cf      	b.n	58e <sdc_init+0x1e>
     5ee:	0000      	.short	0x0000
     5f0:	20000028 	.word	0x20000028
     5f4:	00000135 	.word	0x00000135
     5f8:	000006b4 	.word	0x000006b4
     5fc:	20000850 	.word	0x20000850
     600:	00000769 	.word	0x00000769

00000604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     604:	b50e      	push	{r1, r2, r3, lr}
     606:	b672      	cpsid	i
     608:	4a15      	ldr	r2, [pc, #84]	; (660 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     60a:	6895      	ldr	r5, [r2, #8]
     60c:	b1dd      	cbz	r5, 646 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     60e:	2200      	movs	r2, #0
     610:	4603      	mov	r3, r0
     612:	466e      	mov	r6, sp
     614:	240a      	movs	r4, #10
     616:	e003      	b.n	620 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     618:	fbb0 f0f4 	udiv	r0, r0, r4
     61c:	1c52      	adds	r2, r2, #1
     61e:	b2d2      	uxtb	r2, r2
     620:	2800      	cmp	r0, #0
     622:	d1f9      	bne.n	618 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     624:	54b0      	strb	r0, [r6, r2]
     626:	e00a      	b.n	63e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     628:	b2d8      	uxtb	r0, r3
     62a:	fbb0 f7f4 	udiv	r7, r0, r4
     62e:	fbb3 f3f4 	udiv	r3, r3, r4
     632:	fb04 0017 	mls	r0, r4, r7, r0
     636:	1e52      	subs	r2, r2, #1
     638:	b2d2      	uxtb	r2, r2
     63a:	3030      	adds	r0, #48	; 0x30
     63c:	54b0      	strb	r0, [r6, r2]
     63e:	2a00      	cmp	r2, #0
     640:	d1f2      	bne.n	628 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     642:	4630      	mov	r0, r6
     644:	47a8      	blx	r5
     646:	f3bf 8f4f 	dsb	sy
     64a:	4806      	ldr	r0, [pc, #24]	; (664 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     64c:	6801      	ldr	r1, [r0, #0]
     64e:	4a06      	ldr	r2, [pc, #24]	; (668 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     650:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     654:	4311      	orrs	r1, r2
     656:	6001      	str	r1, [r0, #0]
     658:	f3bf 8f4f 	dsb	sy
     65c:	bf00      	nop
     65e:	e7fd      	b.n	65c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     660:	20000028 	.word	0x20000028
     664:	e000ed0c 	.word	0xe000ed0c
     668:	05fa0004 	.word	0x05fa0004

0000066c <sdc_support_adv>:
     66c:	4806      	ldr	r0, [pc, #24]	; (688 <sdc_support_adv+0x1c>)
     66e:	b510      	push	{r4, lr}
     670:	7881      	ldrb	r1, [r0, #2]
     672:	7840      	ldrb	r0, [r0, #1]
     674:	4301      	orrs	r1, r0
     676:	d002      	beq.n	67e <sdc_support_adv+0x12>
     678:	f04f 30ff 	mov.w	r0, #4294967295
     67c:	bd10      	pop	{r4, pc}
     67e:	f006 fdc1 	bl	7204 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     682:	2000      	movs	r0, #0
     684:	bd10      	pop	{r4, pc}
     686:	0000      	.short	0x0000
     688:	20000028 	.word	0x20000028

0000068c <sdc_support_scan>:
     68c:	4807      	ldr	r0, [pc, #28]	; (6ac <sdc_support_scan+0x20>)
     68e:	b510      	push	{r4, lr}
     690:	7881      	ldrb	r1, [r0, #2]
     692:	7842      	ldrb	r2, [r0, #1]
     694:	4311      	orrs	r1, r2
     696:	d002      	beq.n	69e <sdc_support_scan+0x12>
     698:	f04f 30ff 	mov.w	r0, #4294967295
     69c:	bd10      	pop	{r4, pc}
     69e:	2101      	movs	r1, #1
     6a0:	70c1      	strb	r1, [r0, #3]
     6a2:	f006 fdc1 	bl	7228 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
     6a6:	2000      	movs	r0, #0
     6a8:	bd10      	pop	{r4, pc}
     6aa:	0000      	.short	0x0000
     6ac:	20000028 	.word	0x20000028
     6b0:	00000001 	.word	0x00000001
     6b4:	00010101 	.word	0x00010101
     6b8:	031b1b00 	.word	0x031b1b00
     6bc:	00000002 	.word	0x00000002
     6c0:	00001d4c 	.word	0x00001d4c
     6c4:	001f0003 	.word	0x001f0003
     6c8:	01000002 	.word	0x01000002
     6cc:	00010049 	.word	0x00010049
     6d0:	00000000 	.word	0x00000000
     6d4:	2f2d0cd8 	.word	0x2f2d0cd8
     6d8:	5ce2ae36 	.word	0x5ce2ae36
     6dc:	4c802680 	.word	0x4c802680
     6e0:	53164d3f 	.word	0x53164d3f
     6e4:	73c79650 	.word	0x73c79650

000006e8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     6e8:	4a05      	ldr	r2, [pc, #20]	; (700 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     6ea:	b510      	push	{r4, lr}
     6ec:	6852      	ldr	r2, [r2, #4]
     6ee:	b112      	cbz	r2, 6f6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     6f4:	4710      	bx	r2
     6f6:	2192      	movs	r1, #146	; 0x92
     6f8:	2004      	movs	r0, #4
     6fa:	f7ff ff83 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     6fe:	0000      	.short	0x0000
     700:	20000870 	.word	0x20000870

00000704 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
     704:	4a05      	ldr	r2, [pc, #20]	; (71c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
     706:	b510      	push	{r4, lr}
     708:	6812      	ldr	r2, [r2, #0]
     70a:	b112      	cbz	r2, 712 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
     70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     710:	4710      	bx	r2
     712:	218c      	movs	r1, #140	; 0x8c
     714:	2004      	movs	r0, #4
     716:	f7ff ff75 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     71a:	0000      	.short	0x0000
     71c:	20000870 	.word	0x20000870

00000720 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     720:	4a05      	ldr	r2, [pc, #20]	; (738 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     722:	b510      	push	{r4, lr}
     724:	6892      	ldr	r2, [r2, #8]
     726:	b112      	cbz	r2, 72e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     72c:	4710      	bx	r2
     72e:	2198      	movs	r1, #152	; 0x98
     730:	2004      	movs	r0, #4
     732:	f7ff ff67 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     736:	0000      	.short	0x0000
     738:	20000870 	.word	0x20000870

0000073c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     73c:	4805      	ldr	r0, [pc, #20]	; (754 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     73e:	6801      	ldr	r1, [r0, #0]
     740:	b129      	cbz	r1, 74e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     742:	6841      	ldr	r1, [r0, #4]
     744:	b119      	cbz	r1, 74e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     746:	6880      	ldr	r0, [r0, #8]
     748:	b108      	cbz	r0, 74e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     74a:	2001      	movs	r0, #1
     74c:	4770      	bx	lr
     74e:	2000      	movs	r0, #0
     750:	4770      	bx	lr
     752:	0000      	.short	0x0000
     754:	20000870 	.word	0x20000870

00000758 <sdc_rand_source_register>:
     758:	4902      	ldr	r1, [pc, #8]	; (764 <sdc_rand_source_register+0xc>)
     75a:	c80d      	ldmia	r0, {r0, r2, r3}
     75c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     760:	2000      	movs	r0, #0
     762:	4770      	bx	lr
     764:	20000870 	.word	0x20000870

00000768 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     76a:	4c12      	ldr	r4, [pc, #72]	; (7b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     76c:	2600      	movs	r6, #0
     76e:	6825      	ldr	r5, [r4, #0]
     770:	e011      	b.n	796 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     772:	9800      	ldr	r0, [sp, #0]
     774:	2802      	cmp	r0, #2
     776:	d002      	beq.n	77e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     778:	2803      	cmp	r0, #3
     77a:	d10c      	bne.n	796 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     77c:	e006      	b.n	78c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     77e:	6820      	ldr	r0, [r4, #0]
     780:	b110      	cbz	r0, 788 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     782:	2000      	movs	r0, #0
     784:	6026      	str	r6, [r4, #0]
     786:	e005      	b.n	794 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     788:	2128      	movs	r1, #40	; 0x28
     78a:	e00c      	b.n	7a6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     78c:	6820      	ldr	r0, [r4, #0]
     78e:	b168      	cbz	r0, 7ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     790:	2001      	movs	r0, #1
     792:	6026      	str	r6, [r4, #0]
     794:	47a8      	blx	r5
     796:	4668      	mov	r0, sp
     798:	f000 fdea 	bl	1370 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     79c:	2800      	cmp	r0, #0
     79e:	d0e8      	beq.n	772 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     7a0:	2805      	cmp	r0, #5
     7a2:	d005      	beq.n	7b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     7a4:	2135      	movs	r1, #53	; 0x35
     7a6:	2004      	movs	r0, #4
     7a8:	f7ff ff2c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7ac:	212d      	movs	r1, #45	; 0x2d
     7ae:	e7fa      	b.n	7a6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7b2:	0000      	.short	0x0000
     7b4:	20000040 	.word	0x20000040

000007b8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     7b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     7bc:	4e25      	ldr	r6, [pc, #148]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     7be:	4605      	mov	r5, r0
     7c0:	1d00      	adds	r0, r0, #4
     7c2:	f506 7784 	add.w	r7, r6, #264	; 0x108
     7c6:	6030      	str	r0, [r6, #0]
     7c8:	7838      	ldrb	r0, [r7, #0]
     7ca:	b158      	cbz	r0, 7e4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     7cc:	78ba      	ldrb	r2, [r7, #2]
     7ce:	463c      	mov	r4, r7
     7d0:	1c79      	adds	r1, r7, #1
     7d2:	4628      	mov	r0, r5
     7d4:	1c92      	adds	r2, r2, #2
     7d6:	f00f fe68 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     7da:	2000      	movs	r0, #0
     7dc:	7020      	strb	r0, [r4, #0]
     7de:	2004      	movs	r0, #4
     7e0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     7e4:	481b      	ldr	r0, [pc, #108]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     7e6:	f001 fb43 	bl	1e70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     7ea:	4604      	mov	r4, r0
     7ec:	2802      	cmp	r0, #2
     7ee:	d004      	beq.n	7fa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     7f0:	2c04      	cmp	r4, #4
     7f2:	d007      	beq.n	804 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4>
     7f4:	2c08      	cmp	r4, #8
     7f6:	d027      	beq.n	848 <__z_interrupt_stack_SIZEOF+0x8>
     7f8:	e02a      	b.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     7fa:	4916      	ldr	r1, [pc, #88]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     7fc:	4628      	mov	r0, r5
     7fe:	f00c fab9 	bl	cd74 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     802:	e025      	b.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     804:	7830      	ldrb	r0, [r6, #0]
     806:	280a      	cmp	r0, #10
     808:	d104      	bne.n	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     80a:	2105      	movs	r1, #5
     80c:	203e      	movs	r0, #62	; 0x3e
     80e:	f000 f823 	bl	858 <__z_interrupt_stack_SIZEOF+0x18>
     812:	b160      	cbz	r0, 82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
     814:	490f      	ldr	r1, [pc, #60]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     816:	4628      	mov	r0, r5
     818:	f00c fb11 	bl	ce3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     81c:	2800      	cmp	r0, #0
     81e:	d0d3      	beq.n	7c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     820:	78a9      	ldrb	r1, [r5, #2]
     822:	7828      	ldrb	r0, [r5, #0]
     824:	f000 f818 	bl	858 <__z_interrupt_stack_SIZEOF+0x18>
     828:	2800      	cmp	r0, #0
     82a:	d0cd      	beq.n	7c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     82c:	e010      	b.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     82e:	88b0      	ldrh	r0, [r6, #4]
     830:	f8ad 0000 	strh.w	r0, [sp]
     834:	a901      	add	r1, sp, #4
     836:	4668      	mov	r0, sp
     838:	f00c ff91 	bl	d75e <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     83c:	2800      	cmp	r0, #0
     83e:	d0c3      	beq.n	7c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     840:	21a7      	movs	r1, #167	; 0xa7
     842:	2008      	movs	r0, #8
     844:	f7ff fede 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     848:	4902      	ldr	r1, [pc, #8]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     84a:	4628      	mov	r0, r5
     84c:	f00c fac0 	bl	cdd0 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     850:	4620      	mov	r0, r4
     852:	e7c5      	b.n	7e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     854:	2000087c 	.word	0x2000087c
     858:	b570      	push	{r4, r5, r6, lr}
     85a:	460c      	mov	r4, r1
     85c:	4605      	mov	r5, r0
     85e:	f000 f84b 	bl	8f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     862:	2800      	cmp	r0, #0
     864:	d002      	beq.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     866:	2d3e      	cmp	r5, #62	; 0x3e
     868:	d001      	beq.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
     86a:	2001      	movs	r0, #1
     86c:	bd70      	pop	{r4, r5, r6, pc}
     86e:	2c12      	cmp	r4, #18
     870:	d106      	bne.n	880 <__z_interrupt_stack_SIZEOF+0x40>
     872:	4806      	ldr	r0, [pc, #24]	; (88c <__z_interrupt_stack_SIZEOF+0x4c>)
     874:	7801      	ldrb	r1, [r0, #0]
     876:	2902      	cmp	r1, #2
     878:	d002      	beq.n	880 <__z_interrupt_stack_SIZEOF+0x40>
     87a:	7840      	ldrb	r0, [r0, #1]
     87c:	2800      	cmp	r0, #0
     87e:	d0f5      	beq.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     880:	4620      	mov	r0, r4
     882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     886:	f000 b849 	b.w	91c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     88a:	0000      	.short	0x0000
     88c:	20000200 	.word	0x20000200

00000890 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
     890:	4901      	ldr	r1, [pc, #4]	; (898 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
     892:	7048      	strb	r0, [r1, #1]
     894:	4770      	bx	lr
     896:	0000      	.short	0x0000
     898:	20000200 	.word	0x20000200
     89c:	b570      	push	{r4, r5, r6, lr}
     89e:	780a      	ldrb	r2, [r1, #0]
     8a0:	7082      	strb	r2, [r0, #2]
     8a2:	b33a      	cbz	r2, 8f4 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
     8a4:	2a01      	cmp	r2, #1
     8a6:	d825      	bhi.n	8f4 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
     8a8:	2313      	movs	r3, #19
     8aa:	7003      	strb	r3, [r0, #0]
     8ac:	2300      	movs	r3, #0
     8ae:	e00a      	b.n	8c6 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
     8b0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     8b4:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     8b8:	78a6      	ldrb	r6, [r4, #2]
     8ba:	70ee      	strb	r6, [r5, #3]
     8bc:	8864      	ldrh	r4, [r4, #2]
     8be:	0a24      	lsrs	r4, r4, #8
     8c0:	1c5b      	adds	r3, r3, #1
     8c2:	712c      	strb	r4, [r5, #4]
     8c4:	b2db      	uxtb	r3, r3
     8c6:	4293      	cmp	r3, r2
     8c8:	d3f2      	bcc.n	8b0 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
     8ca:	2300      	movs	r3, #0
     8cc:	e00b      	b.n	8e6 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
     8ce:	bf00      	nop
     8d0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     8d4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     8d8:	792e      	ldrb	r6, [r5, #4]
     8da:	7166      	strb	r6, [r4, #5]
     8dc:	88ad      	ldrh	r5, [r5, #4]
     8de:	0a2d      	lsrs	r5, r5, #8
     8e0:	1c5b      	adds	r3, r3, #1
     8e2:	71a5      	strb	r5, [r4, #6]
     8e4:	b2db      	uxtb	r3, r3
     8e6:	4293      	cmp	r3, r2
     8e8:	d3f2      	bcc.n	8d0 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
     8ea:	2101      	movs	r1, #1
     8ec:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     8f0:	b2c0      	uxtb	r0, r0
     8f2:	bd70      	pop	{r4, r5, r6, pc}
     8f4:	2000      	movs	r0, #0
     8f6:	bd70      	pop	{r4, r5, r6, pc}

000008f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     8f8:	2840      	cmp	r0, #64	; 0x40
     8fa:	d203      	bcs.n	904 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     8fc:	1e40      	subs	r0, r0, #1
     8fe:	b2c1      	uxtb	r1, r0
     900:	4805      	ldr	r0, [pc, #20]	; (918 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     902:	e005      	b.n	910 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     904:	28ff      	cmp	r0, #255	; 0xff
     906:	d005      	beq.n	914 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     908:	3840      	subs	r0, #64	; 0x40
     90a:	b2c1      	uxtb	r1, r0
     90c:	4802      	ldr	r0, [pc, #8]	; (918 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     90e:	3008      	adds	r0, #8
     910:	f00c be08 	b.w	d524 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     914:	2001      	movs	r0, #1
     916:	4770      	bx	lr
     918:	2000004c 	.word	0x2000004c

0000091c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     91c:	1e40      	subs	r0, r0, #1
     91e:	b2c1      	uxtb	r1, r0
     920:	4801      	ldr	r0, [pc, #4]	; (928 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     922:	f00c bdff 	b.w	d524 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     926:	0000      	.short	0x0000
     928:	2000005c 	.word	0x2000005c

0000092c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     92c:	b510      	push	{r4, lr}
     92e:	4a07      	ldr	r2, [pc, #28]	; (94c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     930:	6801      	ldr	r1, [r0, #0]
     932:	4b06      	ldr	r3, [pc, #24]	; (94c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     934:	6191      	str	r1, [r2, #24]
     936:	6840      	ldr	r0, [r0, #4]
     938:	61d0      	str	r0, [r2, #28]
     93a:	681c      	ldr	r4, [r3, #0]
     93c:	3218      	adds	r2, #24
     93e:	43a1      	bics	r1, r4
     940:	6011      	str	r1, [r2, #0]
     942:	6859      	ldr	r1, [r3, #4]
     944:	4388      	bics	r0, r1
     946:	6050      	str	r0, [r2, #4]
     948:	bd10      	pop	{r4, pc}
     94a:	0000      	.short	0x0000
     94c:	20000044 	.word	0x20000044

00000950 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     950:	4a06      	ldr	r2, [pc, #24]	; (96c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     952:	6801      	ldr	r1, [r0, #0]
     954:	6091      	str	r1, [r2, #8]
     956:	6840      	ldr	r0, [r0, #4]
     958:	60d0      	str	r0, [r2, #12]
     95a:	3208      	adds	r2, #8
     95c:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     960:	6011      	str	r1, [r2, #0]
     962:	4903      	ldr	r1, [pc, #12]	; (970 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     964:	4308      	orrs	r0, r1
     966:	6050      	str	r0, [r2, #4]
     968:	4770      	bx	lr
     96a:	0000      	.short	0x0000
     96c:	20000044 	.word	0x20000044
     970:	024007f8 	.word	0x024007f8

00000974 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     974:	4807      	ldr	r0, [pc, #28]	; (994 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     976:	f04f 31ff 	mov.w	r1, #4294967295
     97a:	2200      	movs	r2, #0
     97c:	6001      	str	r1, [r0, #0]
     97e:	0cc9      	lsrs	r1, r1, #19
     980:	6041      	str	r1, [r0, #4]
     982:	f100 0108 	add.w	r1, r0, #8
     986:	201f      	movs	r0, #31
     988:	600a      	str	r2, [r1, #0]
     98a:	604a      	str	r2, [r1, #4]
     98c:	3108      	adds	r1, #8
     98e:	e9c1 0200 	strd	r0, r2, [r1]
     992:	4770      	bx	lr
     994:	2000004c 	.word	0x2000004c

00000998 <sdc_hci_cmd_cb_reset>:
     998:	b510      	push	{r4, lr}
     99a:	f7ff ffeb 	bl	974 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     99e:	2000      	movs	r0, #0
     9a0:	f7ff ff76 	bl	890 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
     9a4:	f00f f855 	bl	fa52 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     9a8:	4604      	mov	r4, r0
     9aa:	4803      	ldr	r0, [pc, #12]	; (9b8 <sdc_hci_cmd_cb_reset+0x20>)
     9ac:	6800      	ldr	r0, [r0, #0]
     9ae:	b100      	cbz	r0, 9b2 <sdc_hci_cmd_cb_reset+0x1a>
     9b0:	4780      	blx	r0
     9b2:	4620      	mov	r0, r4
     9b4:	bd10      	pop	{r4, pc}
     9b6:	0000      	.short	0x0000
     9b8:	20000064 	.word	0x20000064

000009bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     9bc:	4901      	ldr	r1, [pc, #4]	; (9c4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     9be:	6008      	str	r0, [r1, #0]
     9c0:	4770      	bx	lr
     9c2:	0000      	.short	0x0000
     9c4:	20000064 	.word	0x20000064

000009c8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     9c8:	2102      	movs	r1, #2
     9ca:	8001      	strh	r1, [r0, #0]
     9cc:	8041      	strh	r1, [r0, #2]
     9ce:	2100      	movs	r1, #0
     9d0:	7101      	strb	r1, [r0, #4]
     9d2:	21d8      	movs	r1, #216	; 0xd8
     9d4:	7141      	strb	r1, [r0, #5]
     9d6:	f642 510c 	movw	r1, #11532	; 0x2d0c
     9da:	80c1      	strh	r1, [r0, #6]
     9dc:	4901      	ldr	r1, [pc, #4]	; (9e4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     9de:	6081      	str	r1, [r0, #8]
     9e0:	2000      	movs	r0, #0
     9e2:	4770      	bx	lr
     9e4:	e2ae362f 	.word	0xe2ae362f

000009e8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
     9e8:	b510      	push	{r4, lr}
     9ea:	2809      	cmp	r0, #9
     9ec:	d304      	bcc.n	9f8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
     9ee:	f240 2103 	movw	r1, #515	; 0x203
     9f2:	2017      	movs	r0, #23
     9f4:	f7ff fe06 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     9f8:	4901      	ldr	r1, [pc, #4]	; (a00 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
     9fa:	5c08      	ldrb	r0, [r1, r0]
     9fc:	bd10      	pop	{r4, pc}
     9fe:	0000      	.short	0x0000
     a00:	20000a88 	.word	0x20000a88

00000a04 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>:
     a04:	4a05      	ldr	r2, [pc, #20]	; (a1c <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A+0x18>)
     a06:	b510      	push	{r4, lr}
     a08:	5c51      	ldrb	r1, [r2, r1]
     a0a:	4281      	cmp	r1, r0
     a0c:	d804      	bhi.n	a18 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A+0x14>
     a0e:	f240 21b2 	movw	r1, #690	; 0x2b2
     a12:	2017      	movs	r0, #23
     a14:	f7ff fdf6 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a18:	b2c0      	uxtb	r0, r0
     a1a:	bd10      	pop	{r4, pc}
     a1c:	20000a88 	.word	0x20000a88

00000a20 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a24:	4604      	mov	r4, r0
     a26:	788a      	ldrb	r2, [r1, #2]
     a28:	7848      	ldrb	r0, [r1, #1]
     a2a:	4402      	add	r2, r0
     a2c:	2aff      	cmp	r2, #255	; 0xff
     a2e:	d902      	bls.n	a36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
     a30:	f240 11ad 	movw	r1, #429	; 0x1ad
     a34:	e020      	b.n	a78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
     a36:	780a      	ldrb	r2, [r1, #0]
     a38:	4282      	cmp	r2, r0
     a3a:	d902      	bls.n	a42 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     a3c:	f240 11b1 	movw	r1, #433	; 0x1b1
     a40:	e01a      	b.n	a78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
     a42:	9400      	str	r4, [sp, #0]
     a44:	b1dc      	cbz	r4, a7e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5e>
     a46:	2600      	movs	r6, #0
     a48:	f891 8001 	ldrb.w	r8, [r1, #1]
     a4c:	f891 c002 	ldrb.w	ip, [r1, #2]
     a50:	7a08      	ldrb	r0, [r1, #8]
     a52:	eb0c 0208 	add.w	r2, ip, r8
     a56:	4681      	mov	r9, r0
     a58:	4410      	add	r0, r2
     a5a:	7a4b      	ldrb	r3, [r1, #9]
     a5c:	794a      	ldrb	r2, [r1, #5]
     a5e:	4418      	add	r0, r3
     a60:	b2c5      	uxtb	r5, r0
     a62:	42aa      	cmp	r2, r5
     a64:	d900      	bls.n	a68 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x48>
     a66:	4615      	mov	r5, r2
     a68:	78c8      	ldrb	r0, [r1, #3]
     a6a:	42a8      	cmp	r0, r5
     a6c:	d900      	bls.n	a70 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
     a6e:	4605      	mov	r5, r0
     a70:	07a7      	lsls	r7, r4, #30
     a72:	d006      	beq.n	a82 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
     a74:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     a78:	2017      	movs	r0, #23
     a7a:	f7ff fdc3 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a7e:	2601      	movs	r6, #1
     a80:	e7e2      	b.n	a48 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     a82:	4f1a      	ldr	r7, [pc, #104]	; (aec <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xcc>)
     a84:	f887 8000 	strb.w	r8, [r7]
     a88:	f887 c001 	strb.w	ip, [r7, #1]
     a8c:	70b8      	strb	r0, [r7, #2]
     a8e:	7908      	ldrb	r0, [r1, #4]
     a90:	70f8      	strb	r0, [r7, #3]
     a92:	713a      	strb	r2, [r7, #4]
     a94:	7988      	ldrb	r0, [r1, #6]
     a96:	7178      	strb	r0, [r7, #5]
     a98:	79c8      	ldrb	r0, [r1, #7]
     a9a:	71b8      	strb	r0, [r7, #6]
     a9c:	f887 9007 	strb.w	r9, [r7, #7]
     aa0:	723b      	strb	r3, [r7, #8]
     aa2:	4631      	mov	r1, r6
     aa4:	4668      	mov	r0, sp
     aa6:	f000 f91b 	bl	ce0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
     aaa:	2100      	movs	r1, #0
     aac:	460b      	mov	r3, r1
     aae:	9800      	ldr	r0, [sp, #0]
     ab0:	1cc0      	adds	r0, r0, #3
     ab2:	f020 0003 	bic.w	r0, r0, #3
     ab6:	9000      	str	r0, [sp, #0]
     ab8:	b966      	cbnz	r6, ad4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb4>
     aba:	eb07 0281 	add.w	r2, r7, r1, lsl #2
     abe:	6310      	str	r0, [r2, #48]	; 0x30
     ac0:	2000      	movs	r0, #0
     ac2:	e005      	b.n	ad0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb0>
     ac4:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
     ac8:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
     acc:	1c40      	adds	r0, r0, #1
     ace:	b2c0      	uxtb	r0, r0
     ad0:	42a8      	cmp	r0, r5
     ad2:	d3f7      	bcc.n	ac4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa4>
     ad4:	9800      	ldr	r0, [sp, #0]
     ad6:	1c49      	adds	r1, r1, #1
     ad8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     adc:	b2c9      	uxtb	r1, r1
     ade:	9000      	str	r0, [sp, #0]
     ae0:	2909      	cmp	r1, #9
     ae2:	d3e4      	bcc.n	aae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x8e>
     ae4:	1b00      	subs	r0, r0, r4
     ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     aea:	0000      	.short	0x0000
     aec:	20000a88 	.word	0x20000a88

00000af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     af0:	b570      	push	{r4, r5, r6, lr}
     af2:	4604      	mov	r4, r0
     af4:	7985      	ldrb	r5, [r0, #6]
     af6:	f000 f92f 	bl	d58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
     afa:	4602      	mov	r2, r0
     afc:	480c      	ldr	r0, [pc, #48]	; (b30 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
     afe:	79e1      	ldrb	r1, [r4, #7]
     b00:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     b04:	e00e      	b.n	b24 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x34>
     b06:	6b03      	ldr	r3, [r0, #48]	; 0x30
     b08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     b0c:	b143      	cbz	r3, b20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x30>
     b0e:	1c4a      	adds	r2, r1, #1
     b10:	71e2      	strb	r2, [r4, #7]
     b12:	80a1      	strh	r1, [r4, #4]
     b14:	6b00      	ldr	r0, [r0, #48]	; 0x30
     b16:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     b1a:	6020      	str	r0, [r4, #0]
     b1c:	2000      	movs	r0, #0
     b1e:	bd70      	pop	{r4, r5, r6, pc}
     b20:	1c49      	adds	r1, r1, #1
     b22:	b2c9      	uxtb	r1, r1
     b24:	4291      	cmp	r1, r2
     b26:	d3ee      	bcc.n	b06 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x16>
     b28:	71e1      	strb	r1, [r4, #7]
     b2a:	2005      	movs	r0, #5
     b2c:	bd70      	pop	{r4, r5, r6, pc}
     b2e:	0000      	.short	0x0000
     b30:	20000a88 	.word	0x20000a88

00000b34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     b34:	b4f0      	push	{r4, r5, r6, r7}
     b36:	4605      	mov	r5, r0
     b38:	b111      	cbz	r1, b40 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xc>
     b3a:	2000      	movs	r0, #0
     b3c:	b938      	cbnz	r0, b4e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
     b3e:	e001      	b.n	b44 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
     b40:	2001      	movs	r0, #1
     b42:	e7fb      	b.n	b3c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
     b44:	2901      	cmp	r1, #1
     b46:	d002      	beq.n	b4e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
     b48:	2000      	movs	r0, #0
     b4a:	b938      	cbnz	r0, b5c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x28>
     b4c:	e001      	b.n	b52 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1e>
     b4e:	2001      	movs	r0, #1
     b50:	e7fb      	b.n	b4a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     b52:	2902      	cmp	r1, #2
     b54:	d002      	beq.n	b5c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x28>
     b56:	2000      	movs	r0, #0
     b58:	b938      	cbnz	r0, b6a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
     b5a:	e001      	b.n	b60 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2c>
     b5c:	2001      	movs	r0, #1
     b5e:	e7fb      	b.n	b58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
     b60:	2903      	cmp	r1, #3
     b62:	d002      	beq.n	b6a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
     b64:	2000      	movs	r0, #0
     b66:	b938      	cbnz	r0, b78 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x44>
     b68:	e001      	b.n	b6e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
     b6a:	2001      	movs	r0, #1
     b6c:	e7fb      	b.n	b66 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     b6e:	2904      	cmp	r1, #4
     b70:	d002      	beq.n	b78 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x44>
     b72:	2000      	movs	r0, #0
     b74:	b938      	cbnz	r0, b86 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x52>
     b76:	e001      	b.n	b7c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>
     b78:	2001      	movs	r0, #1
     b7a:	e7fb      	b.n	b74 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
     b7c:	2907      	cmp	r1, #7
     b7e:	d002      	beq.n	b86 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x52>
     b80:	2000      	movs	r0, #0
     b82:	b938      	cbnz	r0, b94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x60>
     b84:	e001      	b.n	b8a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x56>
     b86:	2001      	movs	r0, #1
     b88:	e7fb      	b.n	b82 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4e>
     b8a:	2908      	cmp	r1, #8
     b8c:	d002      	beq.n	b94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x60>
     b8e:	2000      	movs	r0, #0
     b90:	b938      	cbnz	r0, ba2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6e>
     b92:	e001      	b.n	b98 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x64>
     b94:	2001      	movs	r0, #1
     b96:	e7fb      	b.n	b90 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x5c>
     b98:	2905      	cmp	r1, #5
     b9a:	d002      	beq.n	ba2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6e>
     b9c:	2000      	movs	r0, #0
     b9e:	b978      	cbnz	r0, bc0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8c>
     ba0:	e001      	b.n	ba6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x72>
     ba2:	2001      	movs	r0, #1
     ba4:	e7fb      	b.n	b9e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6a>
     ba6:	2906      	cmp	r1, #6
     ba8:	d00a      	beq.n	bc0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8c>
     baa:	2000      	movs	r0, #0
     bac:	2800      	cmp	r0, #0
     bae:	d026      	beq.n	bfe <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xca>
     bb0:	4f15      	ldr	r7, [pc, #84]	; (c08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xd4>)
     bb2:	2300      	movs	r3, #0
     bb4:	2901      	cmp	r1, #1
     bb6:	7838      	ldrb	r0, [r7, #0]
     bb8:	d004      	beq.n	bc4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x90>
     bba:	2908      	cmp	r1, #8
     bbc:	d004      	beq.n	bc8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x94>
     bbe:	e005      	b.n	bcc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x98>
     bc0:	2001      	movs	r0, #1
     bc2:	e7f3      	b.n	bac <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x78>
     bc4:	4603      	mov	r3, r0
     bc6:	e001      	b.n	bcc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x98>
     bc8:	787a      	ldrb	r2, [r7, #1]
     bca:	1883      	adds	r3, r0, r2
     bcc:	eb07 0681 	add.w	r6, r7, r1, lsl #2
     bd0:	2200      	movs	r2, #0
     bd2:	f64f 74ff 	movw	r4, #65535	; 0xffff
     bd6:	5c7f      	ldrb	r7, [r7, r1]
     bd8:	e00a      	b.n	bf0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xbc>
     bda:	18d0      	adds	r0, r2, r3
     bdc:	f8d6 c030 	ldr.w	ip, [r6, #48]	; 0x30
     be0:	b280      	uxth	r0, r0
     be2:	f85c c020 	ldr.w	ip, [ip, r0, lsl #2]
     be6:	f1bc 0f00 	cmp.w	ip, #0
     bea:	d004      	beq.n	bf6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xc2>
     bec:	1c52      	adds	r2, r2, #1
     bee:	b292      	uxth	r2, r2
     bf0:	4297      	cmp	r7, r2
     bf2:	d8f2      	bhi.n	bda <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa6>
     bf4:	4620      	mov	r0, r4
     bf6:	8028      	strh	r0, [r5, #0]
     bf8:	42a0      	cmp	r0, r4
     bfa:	d102      	bne.n	c02 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xce>
     bfc:	2000      	movs	r0, #0
     bfe:	bcf0      	pop	{r4, r5, r6, r7}
     c00:	4770      	bx	lr
     c02:	bcf0      	pop	{r4, r5, r6, r7}
     c04:	f000 b834 	b.w	c70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
     c08:	20000a88 	.word	0x20000a88

00000c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c10:	4607      	mov	r7, r0
     c12:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     c16:	460c      	mov	r4, r1
     c18:	f243 0602 	movw	r6, #12290	; 0x3002
     c1c:	38ff      	subs	r0, #255	; 0xff
     c1e:	d020      	beq.n	c62 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
     c20:	2c09      	cmp	r4, #9
     c22:	d302      	bcc.n	c2a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
     c24:	2007      	movs	r0, #7
     c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c2a:	4638      	mov	r0, r7
     c2c:	f000 f848 	bl	cc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
     c30:	0005      	movs	r5, r0
     c32:	d016      	beq.n	c62 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
     c34:	480c      	ldr	r0, [pc, #48]	; (c68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
     c36:	4629      	mov	r1, r5
     c38:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
     c3c:	4638      	mov	r0, r7
     c3e:	4790      	blx	r2
     c40:	480a      	ldr	r0, [pc, #40]	; (c6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
     c42:	2100      	movs	r1, #0
     c44:	eb00 0684 	add.w	r6, r0, r4, lsl #2
     c48:	6b30      	ldr	r0, [r6, #48]	; 0x30
     c4a:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
     c4e:	4620      	mov	r0, r4
     c50:	f000 f878 	bl	d44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
     c54:	4602      	mov	r2, r0
     c56:	4629      	mov	r1, r5
     c58:	68f0      	ldr	r0, [r6, #12]
     c5a:	f00c ff61 	bl	db20 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     c5e:	2000      	movs	r0, #0
     c60:	e7e1      	b.n	c26 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
     c62:	4630      	mov	r0, r6
     c64:	e7df      	b.n	c26 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
     c66:	0000      	.short	0x0000
     c68:	00000d9c 	.word	0x00000d9c
     c6c:	20000a88 	.word	0x20000a88
     c70:	b570      	push	{r4, r5, r6, lr}
     c72:	460e      	mov	r6, r1
     c74:	4605      	mov	r5, r0
     c76:	f00c ff8d 	bl	db94 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
     c7a:	b158      	cbz	r0, c94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
     c7c:	480f      	ldr	r0, [pc, #60]	; (cbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
     c7e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     c82:	6b20      	ldr	r0, [r4, #48]	; 0x30
     c84:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     c88:	b138      	cbz	r0, c9a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
     c8a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     c8e:	2017      	movs	r0, #23
     c90:	f7ff fcb8 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c94:	f240 1189 	movw	r1, #393	; 0x189
     c98:	e7f9      	b.n	c8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
     c9a:	68e0      	ldr	r0, [r4, #12]
     c9c:	2800      	cmp	r0, #0
     c9e:	d00b      	beq.n	cb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
     ca0:	4630      	mov	r0, r6
     ca2:	f000 f84f 	bl	d44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
     ca6:	4601      	mov	r1, r0
     ca8:	68e0      	ldr	r0, [r4, #12]
     caa:	f00c fee1 	bl	da70 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     cae:	2800      	cmp	r0, #0
     cb0:	d002      	beq.n	cb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
     cb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
     cb4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     cb8:	bd70      	pop	{r4, r5, r6, pc}
     cba:	0000      	.short	0x0000
     cbc:	20000a88 	.word	0x20000a88
     cc0:	b570      	push	{r4, r5, r6, lr}
     cc2:	460c      	mov	r4, r1
     cc4:	4605      	mov	r5, r0
     cc6:	f00c ff65 	bl	db94 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
     cca:	2800      	cmp	r0, #0
     ccc:	d005      	beq.n	cda <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
     cce:	4803      	ldr	r0, [pc, #12]	; (cdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
     cd0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     cd4:	6b00      	ldr	r0, [r0, #48]	; 0x30
     cd6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     cda:	bd70      	pop	{r4, r5, r6, pc}
     cdc:	20000a88 	.word	0x20000a88
     ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ce4:	4f16      	ldr	r7, [pc, #88]	; (d40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
     ce6:	4688      	mov	r8, r1
     ce8:	4605      	mov	r5, r0
     cea:	2400      	movs	r4, #0
     cec:	6828      	ldr	r0, [r5, #0]
     cee:	1cc0      	adds	r0, r0, #3
     cf0:	f020 0003 	bic.w	r0, r0, #3
     cf4:	6028      	str	r0, [r5, #0]
     cf6:	4620      	mov	r0, r4
     cf8:	f000 f824 	bl	d44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
     cfc:	5d39      	ldrb	r1, [r7, r4]
     cfe:	4341      	muls	r1, r0
     d00:	f1b8 0f00 	cmp.w	r8, #0
     d04:	d001      	beq.n	d0a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
     d06:	2000      	movs	r0, #0
     d08:	e000      	b.n	d0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
     d0a:	6828      	ldr	r0, [r5, #0]
     d0c:	9000      	str	r0, [sp, #0]
     d0e:	b118      	cbz	r0, d18 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
     d10:	2600      	movs	r6, #0
     d12:	b11e      	cbz	r6, d1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
     d14:	2000      	movs	r0, #0
     d16:	e002      	b.n	d1e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x112>
     d18:	2601      	movs	r6, #1
     d1a:	e7fa      	b.n	d12 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x106>
     d1c:	4668      	mov	r0, sp
     d1e:	f00c fed8 	bl	dad2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     d22:	b91e      	cbnz	r6, d2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x120>
     d24:	eb07 0184 	add.w	r1, r7, r4, lsl #2
     d28:	9a00      	ldr	r2, [sp, #0]
     d2a:	60ca      	str	r2, [r1, #12]
     d2c:	6829      	ldr	r1, [r5, #0]
     d2e:	1c64      	adds	r4, r4, #1
     d30:	4408      	add	r0, r1
     d32:	b2e4      	uxtb	r4, r4
     d34:	6028      	str	r0, [r5, #0]
     d36:	2c09      	cmp	r4, #9
     d38:	d3d8      	bcc.n	cec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
     d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d3e:	0000      	.short	0x0000
     d40:	20000a88 	.word	0x20000a88
     d44:	4903      	ldr	r1, [pc, #12]	; (d54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
     d46:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
     d4a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
     d4e:	1cc0      	adds	r0, r0, #3
     d50:	4008      	ands	r0, r1
     d52:	4770      	bx	lr
     d54:	00000dc0 	.word	0x00000dc0
     d58:	4b0f      	ldr	r3, [pc, #60]	; (d98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18c>)
     d5a:	7818      	ldrb	r0, [r3, #0]
     d5c:	7859      	ldrb	r1, [r3, #1]
     d5e:	4408      	add	r0, r1
     d60:	7a19      	ldrb	r1, [r3, #8]
     d62:	4408      	add	r0, r1
     d64:	b2c2      	uxtb	r2, r0
     d66:	7898      	ldrb	r0, [r3, #2]
     d68:	4282      	cmp	r2, r0
     d6a:	d300      	bcc.n	d6e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x162>
     d6c:	4610      	mov	r0, r2
     d6e:	78d9      	ldrb	r1, [r3, #3]
     d70:	4288      	cmp	r0, r1
     d72:	d200      	bcs.n	d76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16a>
     d74:	4608      	mov	r0, r1
     d76:	791a      	ldrb	r2, [r3, #4]
     d78:	4290      	cmp	r0, r2
     d7a:	d200      	bcs.n	d7e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x172>
     d7c:	4610      	mov	r0, r2
     d7e:	7959      	ldrb	r1, [r3, #5]
     d80:	4288      	cmp	r0, r1
     d82:	d200      	bcs.n	d86 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17a>
     d84:	4608      	mov	r0, r1
     d86:	799a      	ldrb	r2, [r3, #6]
     d88:	4290      	cmp	r0, r2
     d8a:	d200      	bcs.n	d8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x182>
     d8c:	4610      	mov	r0, r2
     d8e:	79d9      	ldrb	r1, [r3, #7]
     d90:	4288      	cmp	r0, r1
     d92:	d200      	bcs.n	d96 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18a>
     d94:	4608      	mov	r0, r1
     d96:	4770      	bx	lr
     d98:	20000a88 	.word	0x20000a88
     d9c:	0000f0ef 	.word	0x0000f0ef
     da0:	0000ef1b 	.word	0x0000ef1b
     da4:	0000e739 	.word	0x0000e739
     da8:	0000fff1 	.word	0x0000fff1
     dac:	000100d1 	.word	0x000100d1
     db0:	000100cf 	.word	0x000100cf
     db4:	000100d7 	.word	0x000100d7
     db8:	0000f167 	.word	0x0000f167
     dbc:	0000f141 	.word	0x0000f141
     dc0:	04080378 	.word	0x04080378
     dc4:	00900160 	.word	0x00900160
     dc8:	013000a8 	.word	0x013000a8
     dcc:	00680018 	.word	0x00680018
     dd0:	000000c8 	.word	0x000000c8

00000dd4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
     dd4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dd8:	4c24      	ldr	r4, [pc, #144]	; (e6c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
     dda:	4606      	mov	r6, r0
     ddc:	b081      	sub	sp, #4
     dde:	6820      	ldr	r0, [r4, #0]
     de0:	469a      	mov	sl, r3
     de2:	4693      	mov	fp, r2
     de4:	b158      	cbz	r0, dfe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
     de6:	7a01      	ldrb	r1, [r0, #8]
     de8:	42b1      	cmp	r1, r6
     dea:	d903      	bls.n	df4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
     dec:	6840      	ldr	r0, [r0, #4]
     dee:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     df2:	b140      	cbz	r0, e06 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
     df4:	f243 0002 	movw	r0, #12290	; 0x3002
     df8:	b005      	add	sp, #20
     dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dfe:	21a5      	movs	r1, #165	; 0xa5
     e00:	2018      	movs	r0, #24
     e02:	f7ff fbff 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e06:	4619      	mov	r1, r3
     e08:	9802      	ldr	r0, [sp, #8]
     e0a:	f00c fee6 	bl	dbda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
     e0e:	4680      	mov	r8, r0
     e10:	4658      	mov	r0, fp
     e12:	990e      	ldr	r1, [sp, #56]	; 0x38
     e14:	f00c fed7 	bl	dbc6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
     e18:	4605      	mov	r5, r0
     e1a:	eb08 0005 	add.w	r0, r8, r5
     e1e:	1d00      	adds	r0, r0, #4
     e20:	b287      	uxth	r7, r0
     e22:	6820      	ldr	r0, [r4, #0]
     e24:	46a1      	mov	r9, r4
     e26:	4639      	mov	r1, r7
     e28:	6800      	ldr	r0, [r0, #0]
     e2a:	f00c fe21 	bl	da70 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     e2e:	0004      	movs	r4, r0
     e30:	d01a      	beq.n	e68 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
     e32:	8067      	strh	r7, [r4, #2]
     e34:	8025      	strh	r5, [r4, #0]
     e36:	4629      	mov	r1, r5
     e38:	1d20      	adds	r0, r4, #4
     e3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
     e3c:	4607      	mov	r7, r0
     e3e:	465a      	mov	r2, fp
     e40:	2309      	movs	r3, #9
     e42:	9500      	str	r5, [sp, #0]
     e44:	f00c fd8a 	bl	d95c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     e48:	8820      	ldrh	r0, [r4, #0]
     e4a:	4641      	mov	r1, r8
     e4c:	4438      	add	r0, r7
     e4e:	230a      	movs	r3, #10
     e50:	9a02      	ldr	r2, [sp, #8]
     e52:	f8cd a000 	str.w	sl, [sp]
     e56:	f00c fd81 	bl	d95c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     e5a:	f8d9 0000 	ldr.w	r0, [r9]
     e5e:	6840      	ldr	r0, [r0, #4]
     e60:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
     e64:	2000      	movs	r0, #0
     e66:	e7c7      	b.n	df8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
     e68:	2004      	movs	r0, #4
     e6a:	e7c5      	b.n	df8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
     e6c:	20000068 	.word	0x20000068

00000e70 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
     e70:	b570      	push	{r4, r5, r6, lr}
     e72:	4c14      	ldr	r4, [pc, #80]	; (ec4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
     e74:	6823      	ldr	r3, [r4, #0]
     e76:	b18b      	cbz	r3, e9c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
     e78:	7a19      	ldrb	r1, [r3, #8]
     e7a:	4281      	cmp	r1, r0
     e7c:	d912      	bls.n	ea4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     e7e:	685a      	ldr	r2, [r3, #4]
     e80:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
     e84:	b171      	cbz	r1, ea4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     e86:	2500      	movs	r5, #0
     e88:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
     e8c:	884a      	ldrh	r2, [r1, #2]
     e8e:	6818      	ldr	r0, [r3, #0]
     e90:	f00c fe46 	bl	db20 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     e94:	6821      	ldr	r1, [r4, #0]
     e96:	2000      	movs	r0, #0
     e98:	7a0a      	ldrb	r2, [r1, #8]
     e9a:	e00c      	b.n	eb6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
     e9c:	21c6      	movs	r1, #198	; 0xc6
     e9e:	2018      	movs	r0, #24
     ea0:	f7ff fbb0 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     ea4:	f243 0002 	movw	r0, #12290	; 0x3002
     ea8:	bd70      	pop	{r4, r5, r6, pc}
     eaa:	684b      	ldr	r3, [r1, #4]
     eac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     eb0:	b933      	cbnz	r3, ec0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
     eb2:	1c40      	adds	r0, r0, #1
     eb4:	b2c0      	uxtb	r0, r0
     eb6:	4282      	cmp	r2, r0
     eb8:	d8f7      	bhi.n	eaa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
     eba:	6808      	ldr	r0, [r1, #0]
     ebc:	f00c fe25 	bl	db0a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
     ec0:	2000      	movs	r0, #0
     ec2:	bd70      	pop	{r4, r5, r6, pc}
     ec4:	20000068 	.word	0x20000068

00000ec8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
     ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ecc:	460d      	mov	r5, r1
     ece:	0004      	movs	r4, r0
     ed0:	4690      	mov	r8, r2
     ed2:	f04f 0600 	mov.w	r6, #0
     ed6:	d006      	beq.n	ee6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
     ed8:	2700      	movs	r7, #0
     eda:	07a0      	lsls	r0, r4, #30
     edc:	d005      	beq.n	eea <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
     ede:	2186      	movs	r1, #134	; 0x86
     ee0:	2018      	movs	r0, #24
     ee2:	f7ff fb8f 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     ee6:	2701      	movs	r7, #1
     ee8:	e7f7      	b.n	eda <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
     eea:	b1cd      	cbz	r5, f20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     eec:	4611      	mov	r1, r2
     eee:	2000      	movs	r0, #0
     ef0:	f00c fdef 	bl	dad2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     ef4:	300c      	adds	r0, #12
     ef6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
     efa:	b98f      	cbnz	r7, f20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     efc:	4f0a      	ldr	r7, [pc, #40]	; (f28 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
     efe:	f104 000c 	add.w	r0, r4, #12
     f02:	00aa      	lsls	r2, r5, #2
     f04:	603c      	str	r4, [r7, #0]
     f06:	7225      	strb	r5, [r4, #8]
     f08:	6060      	str	r0, [r4, #4]
     f0a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     f0e:	6020      	str	r0, [r4, #0]
     f10:	2100      	movs	r1, #0
     f12:	6860      	ldr	r0, [r4, #4]
     f14:	f00f fb43 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     f18:	4641      	mov	r1, r8
     f1a:	6838      	ldr	r0, [r7, #0]
     f1c:	f00c fdd9 	bl	dad2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     f20:	4630      	mov	r0, r6
     f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f26:	0000      	.short	0x0000
     f28:	20000068 	.word	0x20000068

00000f2c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
     f2c:	490a      	ldr	r1, [pc, #40]	; (f58 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
     f2e:	b510      	push	{r4, lr}
     f30:	4602      	mov	r2, r0
     f32:	6809      	ldr	r1, [r1, #0]
     f34:	2000      	movs	r0, #0
     f36:	b159      	cbz	r1, f50 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
     f38:	7a0b      	ldrb	r3, [r1, #8]
     f3a:	4293      	cmp	r3, r2
     f3c:	d907      	bls.n	f4e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     f3e:	6849      	ldr	r1, [r1, #4]
     f40:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
     f44:	2900      	cmp	r1, #0
     f46:	d002      	beq.n	f4e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     f48:	f831 0b04 	ldrh.w	r0, [r1], #4
     f4c:	4408      	add	r0, r1
     f4e:	bd10      	pop	{r4, pc}
     f50:	21fa      	movs	r1, #250	; 0xfa
     f52:	2018      	movs	r0, #24
     f54:	f7ff fb56 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f58:	20000068 	.word	0x20000068
     f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f60:	4e1c      	ldr	r6, [pc, #112]	; (fd4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xa8>)
     f62:	6845      	ldr	r5, [r0, #4]
     f64:	4604      	mov	r4, r0
     f66:	2200      	movs	r2, #0
     f68:	b1a1      	cbz	r1, f94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
     f6a:	2001      	movs	r0, #1
     f6c:	7060      	strb	r0, [r4, #1]
     f6e:	8870      	ldrh	r0, [r6, #2]
     f70:	0883      	lsrs	r3, r0, #2
     f72:	2000      	movs	r0, #0
     f74:	eb04 0140 	add.w	r1, r4, r0, lsl #1
     f78:	eb04 0680 	add.w	r6, r4, r0, lsl #2
     f7c:	830a      	strh	r2, [r1, #24]
     f7e:	840b      	strh	r3, [r1, #32]
     f80:	fb00 5103 	mla	r1, r0, r3, r5
     f84:	6071      	str	r1, [r6, #4]
     f86:	1821      	adds	r1, r4, r0
     f88:	1c40      	adds	r0, r0, #1
     f8a:	750a      	strb	r2, [r1, #20]
     f8c:	2804      	cmp	r0, #4
     f8e:	d3f1      	bcc.n	f74 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
     f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f94:	7062      	strb	r2, [r4, #1]
     f96:	2000      	movs	r0, #0
     f98:	eb04 0140 	add.w	r1, r4, r0, lsl #1
     f9c:	830a      	strh	r2, [r1, #24]
     f9e:	840a      	strh	r2, [r1, #32]
     fa0:	eb04 0180 	add.w	r1, r4, r0, lsl #2
     fa4:	604a      	str	r2, [r1, #4]
     fa6:	1821      	adds	r1, r4, r0
     fa8:	1c40      	adds	r0, r0, #1
     faa:	750a      	strb	r2, [r1, #20]
     fac:	2804      	cmp	r0, #4
     fae:	d3f3      	bcc.n	f98 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
     fb0:	8870      	ldrh	r0, [r6, #2]
     fb2:	f00c feb1 	bl	dd18 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x12a>
     fb6:	4607      	mov	r7, r0
     fb8:	8870      	ldrh	r0, [r6, #2]
     fba:	f00c feb4 	bl	dd26 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x138>
     fbe:	6065      	str	r5, [r4, #4]
     fc0:	8420      	strh	r0, [r4, #32]
     fc2:	1829      	adds	r1, r5, r0
     fc4:	60a1      	str	r1, [r4, #8]
     fc6:	8467      	strh	r7, [r4, #34]	; 0x22
     fc8:	60e5      	str	r5, [r4, #12]
     fca:	84a0      	strh	r0, [r4, #36]	; 0x24
     fcc:	6121      	str	r1, [r4, #16]
     fce:	84e7      	strh	r7, [r4, #38]	; 0x26
     fd0:	e7de      	b.n	f90 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x64>
     fd2:	0000      	.short	0x0000
     fd4:	2000006c 	.word	0x2000006c

00000fd8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
     fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fdc:	b168      	cbz	r0, ffa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
     fde:	2600      	movs	r6, #0
     fe0:	4411      	add	r1, r2
     fe2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     fe6:	b2cf      	uxtb	r7, r1
     fe8:	2400      	movs	r4, #0
     fea:	f888 7000 	strb.w	r7, [r8]
     fee:	0781      	lsls	r1, r0, #30
     ff0:	d005      	beq.n	ffe <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x26>
     ff2:	214e      	movs	r1, #78	; 0x4e
     ff4:	2009      	movs	r0, #9
     ff6:	f7ff fb05 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     ffa:	2601      	movs	r6, #1
     ffc:	e7f0      	b.n	fe0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
     ffe:	2b1f      	cmp	r3, #31
    1000:	d804      	bhi.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    1002:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1006:	ea01 0583 	and.w	r5, r1, r3, lsl #2
    100a:	e009      	b.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    100c:	0059      	lsls	r1, r3, #1
    100e:	2bff      	cmp	r3, #255	; 0xff
    1010:	d90c      	bls.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    1012:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1016:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    101a:	d200      	bcs.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
    101c:	4611      	mov	r1, r2
    101e:	b28d      	uxth	r5, r1
    1020:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    1024:	1ced      	adds	r5, r5, #3
    1026:	400d      	ands	r5, r1
    1028:	b136      	cbz	r6, 1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    102a:	e009      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
    102c:	227c      	movs	r2, #124	; 0x7c
    102e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1032:	d3f4      	bcc.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
    1034:	217c      	movs	r1, #124	; 0x7c
    1036:	e7f2      	b.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
    1038:	f8c8 0004 	str.w	r0, [r8, #4]
    103c:	f8a8 5002 	strh.w	r5, [r8, #2]
    1040:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    1044:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
    1048:	2100      	movs	r1, #0
    104a:	f04f 0901 	mov.w	r9, #1
    104e:	e00f      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
    1050:	b95e      	cbnz	r6, 106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    1052:	f8d8 4004 	ldr.w	r4, [r8, #4]
    1056:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    105a:	eb00 0c02 	add.w	ip, r0, r2
    105e:	f804 9033 	strb.w	r9, [r4, r3, lsl #3]
    1062:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1066:	f8c3 c004 	str.w	ip, [r3, #4]
    106a:	1c49      	adds	r1, r1, #1
    106c:	442a      	add	r2, r5
    106e:	b2c9      	uxtb	r1, r1
    1070:	42b9      	cmp	r1, r7
    1072:	d3ed      	bcc.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    1074:	1dd2      	adds	r2, r2, #7
    1076:	f022 0007 	bic.w	r0, r2, #7
    107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    107e:	0000      	.short	0x0000
    1080:	2000006c 	.word	0x2000006c

00001084 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1084:	b570      	push	{r4, r5, r6, lr}
    1086:	4811      	ldr	r0, [pc, #68]	; (10cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    1088:	2400      	movs	r4, #0
    108a:	4621      	mov	r1, r4
    108c:	7802      	ldrb	r2, [r0, #0]
    108e:	e00c      	b.n	10aa <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x26>
    1090:	6845      	ldr	r5, [r0, #4]
    1092:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    1096:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
    109a:	b123      	cbz	r3, 10a6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x22>
    109c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    10a0:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
    10a4:	e003      	b.n	10ae <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2a>
    10a6:	1c49      	adds	r1, r1, #1
    10a8:	b2c9      	uxtb	r1, r1
    10aa:	4291      	cmp	r1, r2
    10ac:	d3f0      	bcc.n	1090 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    10ae:	b144      	cbz	r4, 10c2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3e>
    10b0:	2500      	movs	r5, #0
    10b2:	70a5      	strb	r5, [r4, #2]
    10b4:	2101      	movs	r1, #1
    10b6:	4620      	mov	r0, r4
    10b8:	f7ff ff50 	bl	f5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    10bc:	7025      	strb	r5, [r4, #0]
    10be:	4620      	mov	r0, r4
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    10c2:	21a9      	movs	r1, #169	; 0xa9
    10c4:	2009      	movs	r0, #9
    10c6:	f7ff fa9d 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ca:	0000      	.short	0x0000
    10cc:	2000006c 	.word	0x2000006c

000010d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    10d0:	4804      	ldr	r0, [pc, #16]	; (10e4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    10d2:	b510      	push	{r4, lr}
    10d4:	8840      	ldrh	r0, [r0, #2]
    10d6:	0884      	lsrs	r4, r0, #2
    10d8:	f00c fe25 	bl	dd26 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x138>
    10dc:	4284      	cmp	r4, r0
    10de:	d300      	bcc.n	10e2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    10e0:	4620      	mov	r0, r4
    10e2:	bd10      	pop	{r4, pc}
    10e4:	2000006c 	.word	0x2000006c

000010e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    10e8:	4801      	ldr	r0, [pc, #4]	; (10f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    10ea:	7840      	ldrb	r0, [r0, #1]
    10ec:	4770      	bx	lr
    10ee:	0000      	.short	0x0000
    10f0:	20000074 	.word	0x20000074

000010f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    10f4:	4801      	ldr	r0, [pc, #4]	; (10fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    10f6:	6840      	ldr	r0, [r0, #4]
    10f8:	4770      	bx	lr
    10fa:	0000      	.short	0x0000
    10fc:	20000074 	.word	0x20000074

00001100 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1104:	460c      	mov	r4, r1
    1106:	4607      	mov	r7, r0
    1108:	4616      	mov	r6, r2
    110a:	212e      	movs	r1, #46	; 0x2e
    110c:	4610      	mov	r0, r2
    110e:	460d      	mov	r5, r1
    1110:	4622      	mov	r2, r4
    1112:	f00c fc6c 	bl	d9ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1116:	4680      	mov	r8, r0
    1118:	b157      	cbz	r7, 1130 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    111a:	4638      	mov	r0, r7
    111c:	4641      	mov	r1, r8
    111e:	4632      	mov	r2, r6
    1120:	462b      	mov	r3, r5
    1122:	9400      	str	r4, [sp, #0]
    1124:	f00c fc1a 	bl	d95c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1128:	4803      	ldr	r0, [pc, #12]	; (1138 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    112a:	6047      	str	r7, [r0, #4]
    112c:	7004      	strb	r4, [r0, #0]
    112e:	7046      	strb	r6, [r0, #1]
    1130:	4640      	mov	r0, r8
    1132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1136:	0000      	.short	0x0000
    1138:	20000074 	.word	0x20000074

0000113c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    113c:	4802      	ldr	r0, [pc, #8]	; (1148 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    113e:	7842      	ldrb	r2, [r0, #1]
    1140:	7801      	ldrb	r1, [r0, #0]
    1142:	6840      	ldr	r0, [r0, #4]
    1144:	f7ff bfdc 	b.w	1100 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    1148:	20000074 	.word	0x20000074
    114c:	b510      	push	{r4, lr}
    114e:	4c08      	ldr	r4, [pc, #32]	; (1170 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    1150:	b139      	cbz	r1, 1162 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x26>
    1152:	2106      	movs	r1, #6
    1154:	f7ff fc56 	bl	a04 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>
    1158:	88e2      	ldrh	r2, [r4, #6]
    115a:	68e1      	ldr	r1, [r4, #12]
    115c:	fb00 1002 	mla	r0, r0, r2, r1
    1160:	bd10      	pop	{r4, pc}
    1162:	2105      	movs	r1, #5
    1164:	f7ff fc4e 	bl	a04 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>
    1168:	8862      	ldrh	r2, [r4, #2]
    116a:	68a1      	ldr	r1, [r4, #8]
    116c:	e7f6      	b.n	115c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x20>
    116e:	0000      	.short	0x0000
    1170:	2000007c 	.word	0x2000007c

00001174 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ>:
    1174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1176:	460e      	mov	r6, r1
    1178:	4604      	mov	r4, r0
    117a:	4617      	mov	r7, r2
    117c:	2103      	movs	r1, #3
    117e:	20f7      	movs	r0, #247	; 0xf7
    1180:	f00c fe92 	bl	dea8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x12>
    1184:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    1188:	1cc0      	adds	r0, r0, #3
    118a:	ea00 0501 	and.w	r5, r0, r1
    118e:	b1c4      	cbz	r4, 11c2 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x4e>
    1190:	07a0      	lsls	r0, r4, #30
    1192:	d003      	beq.n	119c <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x28>
    1194:	2171      	movs	r1, #113	; 0x71
    1196:	2019      	movs	r0, #25
    1198:	f7ff fa34 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    119c:	480a      	ldr	r0, [pc, #40]	; (11c8 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x54>)
    119e:	60c4      	str	r4, [r0, #12]
    11a0:	80c5      	strh	r5, [r0, #6]
    11a2:	2400      	movs	r4, #0
    11a4:	e00b      	b.n	11be <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x4a>
    11a6:	2101      	movs	r1, #1
    11a8:	4620      	mov	r0, r4
    11aa:	f7ff ffcf 	bl	114c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    11ae:	2303      	movs	r3, #3
    11b0:	22f7      	movs	r2, #247	; 0xf7
    11b2:	4629      	mov	r1, r5
    11b4:	9700      	str	r7, [sp, #0]
    11b6:	f00c fe71 	bl	de9c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    11ba:	1c64      	adds	r4, r4, #1
    11bc:	b2a4      	uxth	r4, r4
    11be:	42b4      	cmp	r4, r6
    11c0:	d3f1      	bcc.n	11a6 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x32>
    11c2:	fb06 f005 	mul.w	r0, r6, r5
    11c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11c8:	2000007c 	.word	0x2000007c
    11cc:	b530      	push	{r4, r5, lr}
    11ce:	490d      	ldr	r1, [pc, #52]	; (1204 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x90>)
    11d0:	2001      	movs	r0, #1
    11d2:	6048      	str	r0, [r1, #4]
    11d4:	1e82      	subs	r2, r0, #2
    11d6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    11da:	490b      	ldr	r1, [pc, #44]	; (1208 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x94>)
    11dc:	6088      	str	r0, [r1, #8]
    11de:	2300      	movs	r3, #0
    11e0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    11e4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    11e8:	4c08      	ldr	r4, [pc, #32]	; (120c <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x98>)
    11ea:	6023      	str	r3, [r4, #0]
    11ec:	1d25      	adds	r5, r4, #4
    11ee:	6028      	str	r0, [r5, #0]
    11f0:	6088      	str	r0, [r1, #8]
    11f2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    11f6:	6023      	str	r3, [r4, #0]
    11f8:	6028      	str	r0, [r5, #0]
    11fa:	4906      	ldr	r1, [pc, #24]	; (1214 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0xa0>)
    11fc:	4804      	ldr	r0, [pc, #16]	; (1210 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x9c>)
    11fe:	6008      	str	r0, [r1, #0]
    1200:	bd30      	pop	{r4, r5, pc}
    1202:	0000      	.short	0x0000
    1204:	4000e000 	.word	0x4000e000
    1208:	4000f000 	.word	0x4000f000
    120c:	4000f500 	.word	0x4000f500
    1210:	3ff60000 	.word	0x3ff60000
    1214:	4001f508 	.word	0x4001f508

00001218 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1218:	b510      	push	{r4, lr}
    121a:	f7ff ffd7 	bl	11cc <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x58>
    121e:	f00c fe63 	bl	dee8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x52>
    1222:	4903      	ldr	r1, [pc, #12]	; (1230 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1224:	4801      	ldr	r0, [pc, #4]	; (122c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1226:	6008      	str	r0, [r1, #0]
    1228:	bd10      	pop	{r4, pc}
    122a:	0000      	.short	0x0000
    122c:	3ff60000 	.word	0x3ff60000
    1230:	4001f508 	.word	0x4001f508

00001234 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1234:	b510      	push	{r4, lr}
    1236:	f7ff ffc9 	bl	11cc <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x58>
    123a:	f00c fe55 	bl	dee8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x52>
    123e:	f000 f887 	bl	1350 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1242:	4905      	ldr	r1, [pc, #20]	; (1258 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1244:	4803      	ldr	r0, [pc, #12]	; (1254 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1246:	6008      	str	r0, [r1, #0]
    1248:	f000 f8b8 	bl	13bc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    124c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1250:	f000 b8dc 	b.w	140c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1254:	3ff60000 	.word	0x3ff60000
    1258:	4001f508 	.word	0x4001f508
    125c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1260:	4682      	mov	sl, r0
    1262:	4838      	ldr	r0, [pc, #224]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1264:	f00f f83f 	bl	102e6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1268:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    126c:	b128      	cbz	r0, 127a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    126e:	2601      	movs	r6, #1
    1270:	f10b 0001 	add.w	r0, fp, #1
    1274:	21ff      	movs	r1, #255	; 0xff
    1276:	7001      	strb	r1, [r0, #0]
    1278:	e000      	b.n	127c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    127a:	2600      	movs	r6, #0
    127c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1280:	4c31      	ldr	r4, [pc, #196]	; (1348 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    1282:	f04f 0800 	mov.w	r8, #0
    1286:	1d2f      	adds	r7, r5, #4
    1288:	2101      	movs	r1, #1
    128a:	6061      	str	r1, [r4, #4]
    128c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1290:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1294:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1298:	6021      	str	r1, [r4, #0]
    129a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 134c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    129e:	e01c      	b.n	12da <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    12a0:	f8d9 0000 	ldr.w	r0, [r9]
    12a4:	06c0      	lsls	r0, r0, #27
    12a6:	d518      	bpl.n	12da <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    12a8:	200e      	movs	r0, #14
    12aa:	f00c fe2c 	bl	df06 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x70>
    12ae:	f3ef 8010 	mrs	r0, PRIMASK
    12b2:	9000      	str	r0, [sp, #0]
    12b4:	b672      	cpsid	i
    12b6:	2103      	movs	r1, #3
    12b8:	4620      	mov	r0, r4
    12ba:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    12be:	4629      	mov	r1, r5
    12c0:	f00c fe2e 	bl	df20 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    12c4:	b930      	cbnz	r0, 12d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    12c6:	4639      	mov	r1, r7
    12c8:	4620      	mov	r0, r4
    12ca:	f00c fe29 	bl	df20 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    12ce:	b908      	cbnz	r0, 12d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    12d0:	f00f f8a0 	bl	10414 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    12d4:	9800      	ldr	r0, [sp, #0]
    12d6:	b900      	cbnz	r0, 12da <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    12d8:	b662      	cpsie	i
    12da:	4629      	mov	r1, r5
    12dc:	4620      	mov	r0, r4
    12de:	f00c fe1f 	bl	df20 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    12e2:	b928      	cbnz	r0, 12f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    12e4:	4639      	mov	r1, r7
    12e6:	4620      	mov	r0, r4
    12e8:	f00c fe1a 	bl	df20 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    12ec:	2800      	cmp	r0, #0
    12ee:	d0d7      	beq.n	12a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    12f0:	4639      	mov	r1, r7
    12f2:	4620      	mov	r0, r4
    12f4:	f00c fe14 	bl	df20 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    12f8:	2800      	cmp	r0, #0
    12fa:	d1c5      	bne.n	1288 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    12fc:	bb06      	cbnz	r6, 1340 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    12fe:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1302:	f88d 1000 	strb.w	r1, [sp]
    1306:	9900      	ldr	r1, [sp, #0]
    1308:	9100      	str	r1, [sp, #0]
    130a:	f89d 1000 	ldrb.w	r1, [sp]
    130e:	b109      	cbz	r1, 1314 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1310:	2501      	movs	r5, #1
    1312:	e000      	b.n	1316 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1314:	2500      	movs	r5, #0
    1316:	f10b 0001 	add.w	r0, fp, #1
    131a:	f880 8000 	strb.w	r8, [r0]
    131e:	2003      	movs	r0, #3
    1320:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1324:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1328:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    132c:	200e      	movs	r0, #14
    132e:	f00c fdea 	bl	df06 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x70>
    1332:	4804      	ldr	r0, [pc, #16]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1334:	f00e ffee 	bl	10314 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1338:	b115      	cbz	r5, 1340 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    133a:	2011      	movs	r0, #17
    133c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1340:	2000      	movs	r0, #0
    1342:	e7fb      	b.n	133c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1344:	20000202 	.word	0x20000202
    1348:	4000e000 	.word	0x4000e000
    134c:	e000ed10 	.word	0xe000ed10

00001350 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1350:	b510      	push	{r4, lr}
    1352:	4806      	ldr	r0, [pc, #24]	; (136c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1354:	f00e ffda 	bl	1030c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1358:	b118      	cbz	r0, 1362 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    135a:	2127      	movs	r1, #39	; 0x27
    135c:	201d      	movs	r0, #29
    135e:	f7ff f951 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1362:	4802      	ldr	r0, [pc, #8]	; (136c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1364:	2100      	movs	r1, #0
    1366:	7041      	strb	r1, [r0, #1]
    1368:	bd10      	pop	{r4, pc}
    136a:	0000      	.short	0x0000
    136c:	20000202 	.word	0x20000202

00001370 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1370:	b570      	push	{r4, r5, r6, lr}
    1372:	4911      	ldr	r1, [pc, #68]	; (13b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1374:	680a      	ldr	r2, [r1, #0]
    1376:	b1ea      	cbz	r2, 13b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1378:	2300      	movs	r3, #0
    137a:	461d      	mov	r5, r3
    137c:	2401      	movs	r4, #1
    137e:	684a      	ldr	r2, [r1, #4]
    1380:	1c52      	adds	r2, r2, #1
    1382:	604a      	str	r2, [r1, #4]
    1384:	2a0c      	cmp	r2, #12
    1386:	d300      	bcc.n	138a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1388:	604d      	str	r5, [r1, #4]
    138a:	790e      	ldrb	r6, [r1, #4]
    138c:	fa04 f206 	lsl.w	r2, r4, r6
    1390:	680e      	ldr	r6, [r1, #0]
    1392:	4216      	tst	r6, r2
    1394:	d00b      	beq.n	13ae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1396:	f3ef 8310 	mrs	r3, PRIMASK
    139a:	b672      	cpsid	i
    139c:	680c      	ldr	r4, [r1, #0]
    139e:	4394      	bics	r4, r2
    13a0:	600c      	str	r4, [r1, #0]
    13a2:	b903      	cbnz	r3, 13a6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    13a4:	b662      	cpsie	i
    13a6:	6849      	ldr	r1, [r1, #4]
    13a8:	6001      	str	r1, [r0, #0]
    13aa:	2000      	movs	r0, #0
    13ac:	bd70      	pop	{r4, r5, r6, pc}
    13ae:	1c5b      	adds	r3, r3, #1
    13b0:	2b0c      	cmp	r3, #12
    13b2:	d3e4      	bcc.n	137e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    13b4:	2005      	movs	r0, #5
    13b6:	bd70      	pop	{r4, r5, r6, pc}
    13b8:	2000008c 	.word	0x2000008c

000013bc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    13bc:	4802      	ldr	r0, [pc, #8]	; (13c8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    13be:	2100      	movs	r1, #0
    13c0:	6001      	str	r1, [r0, #0]
    13c2:	6041      	str	r1, [r0, #4]
    13c4:	4770      	bx	lr
    13c6:	0000      	.short	0x0000
    13c8:	2000008c 	.word	0x2000008c

000013cc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    13cc:	b510      	push	{r4, lr}
    13ce:	4c04      	ldr	r4, [pc, #16]	; (13e0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    13d0:	7820      	ldrb	r0, [r4, #0]
    13d2:	28ff      	cmp	r0, #255	; 0xff
    13d4:	d003      	beq.n	13de <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    13d6:	f00b f9dd 	bl	c794 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    13da:	20ff      	movs	r0, #255	; 0xff
    13dc:	7020      	strb	r0, [r4, #0]
    13de:	bd10      	pop	{r4, pc}
    13e0:	20000000 	.word	0x20000000

000013e4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    13e4:	b510      	push	{r4, lr}
    13e6:	4c08      	ldr	r4, [pc, #32]	; (1408 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    13e8:	7861      	ldrb	r1, [r4, #1]
    13ea:	b109      	cbz	r1, 13f0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    13ec:	200f      	movs	r0, #15
    13ee:	bd10      	pop	{r4, pc}
    13f0:	f00b f996 	bl	c720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    13f4:	7020      	strb	r0, [r4, #0]
    13f6:	28ff      	cmp	r0, #255	; 0xff
    13f8:	d001      	beq.n	13fe <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    13fa:	2000      	movs	r0, #0
    13fc:	bd10      	pop	{r4, pc}
    13fe:	2173      	movs	r1, #115	; 0x73
    1400:	201f      	movs	r0, #31
    1402:	f7ff f8ff 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1406:	0000      	.short	0x0000
    1408:	20000000 	.word	0x20000000

0000140c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    140c:	4901      	ldr	r1, [pc, #4]	; (1414 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    140e:	2000      	movs	r0, #0
    1410:	7048      	strb	r0, [r1, #1]
    1412:	4770      	bx	lr
    1414:	20000000 	.word	0x20000000

00001418 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    1418:	4905      	ldr	r1, [pc, #20]	; (1430 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    141a:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
    141c:	4282      	cmp	r2, r0
    141e:	bf18      	it	ne
    1420:	4770      	bxne	lr
    1422:	2000      	movs	r0, #0
    1424:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
    1428:	f64f 70ff 	movw	r0, #65535	; 0xffff
    142c:	8688      	strh	r0, [r1, #52]	; 0x34
    142e:	4770      	bx	lr
    1430:	2000103c 	.word	0x2000103c

00001434 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1434:	4a0a      	ldr	r2, [pc, #40]	; (1460 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1436:	b110      	cbz	r0, 143e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1438:	2801      	cmp	r0, #1
    143a:	d007      	beq.n	144c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    143c:	e00e      	b.n	145c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    143e:	7850      	ldrb	r0, [r2, #1]
    1440:	b160      	cbz	r0, 145c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1442:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1446:	6008      	str	r0, [r1, #0]
    1448:	88d0      	ldrh	r0, [r2, #6]
    144a:	e004      	b.n	1456 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    144c:	7810      	ldrb	r0, [r2, #0]
    144e:	b128      	cbz	r0, 145c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1450:	6890      	ldr	r0, [r2, #8]
    1452:	6008      	str	r0, [r1, #0]
    1454:	8990      	ldrh	r0, [r2, #12]
    1456:	8088      	strh	r0, [r1, #4]
    1458:	2001      	movs	r0, #1
    145a:	4770      	bx	lr
    145c:	2000      	movs	r0, #0
    145e:	4770      	bx	lr
    1460:	20000204 	.word	0x20000204

00001464 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1464:	4a09      	ldr	r2, [pc, #36]	; (148c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x28>)
    1466:	2301      	movs	r3, #1
    1468:	b140      	cbz	r0, 147c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x18>
    146a:	2801      	cmp	r0, #1
    146c:	bf18      	it	ne
    146e:	4770      	bxne	lr
    1470:	7013      	strb	r3, [r2, #0]
    1472:	6808      	ldr	r0, [r1, #0]
    1474:	6090      	str	r0, [r2, #8]
    1476:	8888      	ldrh	r0, [r1, #4]
    1478:	8190      	strh	r0, [r2, #12]
    147a:	4770      	bx	lr
    147c:	7053      	strb	r3, [r2, #1]
    147e:	6808      	ldr	r0, [r1, #0]
    1480:	f8c2 0002 	str.w	r0, [r2, #2]
    1484:	8888      	ldrh	r0, [r1, #4]
    1486:	80d0      	strh	r0, [r2, #6]
    1488:	4770      	bx	lr
    148a:	0000      	.short	0x0000
    148c:	20000204 	.word	0x20000204

00001490 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1490:	4906      	ldr	r1, [pc, #24]	; (14ac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    1492:	b110      	cbz	r0, 149a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1494:	2801      	cmp	r0, #1
    1496:	d003      	beq.n	14a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    1498:	e006      	b.n	14a8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    149a:	7848      	ldrb	r0, [r1, #1]
    149c:	b910      	cbnz	r0, 14a4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    149e:	e003      	b.n	14a8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    14a0:	7808      	ldrb	r0, [r1, #0]
    14a2:	b108      	cbz	r0, 14a8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    14a4:	2001      	movs	r0, #1
    14a6:	4770      	bx	lr
    14a8:	2000      	movs	r0, #0
    14aa:	4770      	bx	lr
    14ac:	20000204 	.word	0x20000204

000014b0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    14b0:	4901      	ldr	r1, [pc, #4]	; (14b8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    14b2:	7708      	strb	r0, [r1, #28]
    14b4:	4770      	bx	lr
    14b6:	0000      	.short	0x0000
    14b8:	200006ea 	.word	0x200006ea

000014bc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    14bc:	4602      	mov	r2, r0
    14be:	4807      	ldr	r0, [pc, #28]	; (14dc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    14c0:	b510      	push	{r4, lr}
    14c2:	7800      	ldrb	r0, [r0, #0]
    14c4:	b138      	cbz	r0, 14d6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    14c6:	4806      	ldr	r0, [pc, #24]	; (14e0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    14c8:	7881      	ldrb	r1, [r0, #2]
    14ca:	b121      	cbz	r1, 14d6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    14cc:	1cc0      	adds	r0, r0, #3
    14ce:	f005 ff1d 	bl	730c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    14d2:	2001      	movs	r0, #1
    14d4:	bd10      	pop	{r4, pc}
    14d6:	2000      	movs	r0, #0
    14d8:	bd10      	pop	{r4, pc}
    14da:	0000      	.short	0x0000
    14dc:	200001f0 	.word	0x200001f0
    14e0:	20001072 	.word	0x20001072

000014e4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    14e4:	4800      	ldr	r0, [pc, #0]	; (14e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    14e6:	4770      	bx	lr
    14e8:	20001245 	.word	0x20001245

000014ec <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    14ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14f0:	4c12      	ldr	r4, [pc, #72]	; (153c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x50>)
    14f2:	2600      	movs	r6, #0
    14f4:	4635      	mov	r5, r6
    14f6:	78a0      	ldrb	r0, [r4, #2]
    14f8:	2800      	cmp	r0, #0
    14fa:	bf8c      	ite	hi
    14fc:	4f10      	ldrhi	r7, [pc, #64]	; (1540 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x54>)
    14fe:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    1502:	1960      	adds	r0, r4, r5
    1504:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    1508:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    150c:	2a01      	cmp	r2, #1
    150e:	d002      	beq.n	1516 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x2a>
    1510:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    1514:	b158      	cbz	r0, 152e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x42>
    1516:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
    151a:	55bd      	strb	r5, [r7, r6]
    151c:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    1520:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    1524:	4630      	mov	r0, r6
    1526:	1c73      	adds	r3, r6, #1
    1528:	b2de      	uxtb	r6, r3
    152a:	f007 f99b 	bl	8864 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    152e:	1c68      	adds	r0, r5, #1
    1530:	b2c5      	uxtb	r5, r0
    1532:	78a0      	ldrb	r0, [r4, #2]
    1534:	42a8      	cmp	r0, r5
    1536:	d8e4      	bhi.n	1502 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x16>
    1538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    153c:	20001072 	.word	0x20001072
    1540:	200001f4 	.word	0x200001f4

00001544 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    1544:	4904      	ldr	r1, [pc, #16]	; (1558 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    1546:	788a      	ldrb	r2, [r1, #2]
    1548:	4282      	cmp	r2, r0
    154a:	bf86      	itte	hi
    154c:	4408      	addhi	r0, r1
    154e:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    1552:	2000      	movls	r0, #0
    1554:	4770      	bx	lr
    1556:	0000      	.short	0x0000
    1558:	20001072 	.word	0x20001072

0000155c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    155c:	4904      	ldr	r1, [pc, #16]	; (1570 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    155e:	788a      	ldrb	r2, [r1, #2]
    1560:	4282      	cmp	r2, r0
    1562:	bf86      	itte	hi
    1564:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    1568:	3083      	addhi	r0, #131	; 0x83
    156a:	2000      	movls	r0, #0
    156c:	4770      	bx	lr
    156e:	0000      	.short	0x0000
    1570:	20001072 	.word	0x20001072

00001574 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    1574:	4a05      	ldr	r2, [pc, #20]	; (158c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    1576:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    157a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    157e:	6802      	ldr	r2, [r0, #0]
    1580:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    1584:	8880      	ldrh	r0, [r0, #4]
    1586:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    158a:	4770      	bx	lr
    158c:	20001072 	.word	0x20001072

00001590 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    1590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1594:	4c13      	ldr	r4, [pc, #76]	; (15e4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x54>)
    1596:	4606      	mov	r6, r0
    1598:	2500      	movs	r5, #0
    159a:	78a0      	ldrb	r0, [r4, #2]
    159c:	2800      	cmp	r0, #0
    159e:	bf98      	it	ls
    15a0:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    15a4:	b2c0      	uxtb	r0, r0
    15a6:	42a8      	cmp	r0, r5
    15a8:	d914      	bls.n	15d4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    15aa:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    15ae:	3083      	adds	r0, #131	; 0x83
    15b0:	d010      	beq.n	15d4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    15b2:	1961      	adds	r1, r4, r5
    15b4:	f891 1143 	ldrb.w	r1, [r1, #323]	; 0x143
    15b8:	b961      	cbnz	r1, 15d4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    15ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    15be:	eb04 0741 	add.w	r7, r4, r1, lsl #1
    15c2:	f207 110b 	addw	r1, r7, #267	; 0x10b
    15c6:	4632      	mov	r2, r6
    15c8:	f00c fcf9 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    15cc:	f8b7 010f 	ldrh.w	r0, [r7, #271]	; 0x10f
    15d0:	f8a7 010f 	strh.w	r0, [r7, #271]	; 0x10f
    15d4:	1c68      	adds	r0, r5, #1
    15d6:	b2c5      	uxtb	r5, r0
    15d8:	78a0      	ldrb	r0, [r4, #2]
    15da:	42a8      	cmp	r0, r5
    15dc:	d8e2      	bhi.n	15a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x14>
    15de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e2:	0000      	.short	0x0000
    15e4:	20001072 	.word	0x20001072

000015e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    15e8:	4904      	ldr	r1, [pc, #16]	; (15fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    15ea:	788a      	ldrb	r2, [r1, #2]
    15ec:	4282      	cmp	r2, r0
    15ee:	bf86      	itte	hi
    15f0:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    15f4:	1cc0      	addhi	r0, r0, #3
    15f6:	2000      	movls	r0, #0
    15f8:	4770      	bx	lr
    15fa:	0000      	.short	0x0000
    15fc:	20001072 	.word	0x20001072

00001600 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    1600:	4908      	ldr	r1, [pc, #32]	; (1624 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    1602:	788a      	ldrb	r2, [r1, #2]
    1604:	4282      	cmp	r2, r0
    1606:	d903      	bls.n	1610 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    1608:	180a      	adds	r2, r1, r0
    160a:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    160e:	b10a      	cbz	r2, 1614 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    1610:	2000      	movs	r0, #0
    1612:	4770      	bx	lr
    1614:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1618:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    161c:	f200 100b 	addw	r0, r0, #267	; 0x10b
    1620:	4770      	bx	lr
    1622:	0000      	.short	0x0000
    1624:	20001072 	.word	0x20001072

00001628 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    1628:	b510      	push	{r4, lr}
    162a:	f240 12d3 	movw	r2, #467	; 0x1d3
    162e:	2100      	movs	r1, #0
    1630:	4807      	ldr	r0, [pc, #28]	; (1650 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    1632:	f00e ffb4 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1636:	2208      	movs	r2, #8
    1638:	21ff      	movs	r1, #255	; 0xff
    163a:	4806      	ldr	r0, [pc, #24]	; (1654 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    163c:	f00e ffaf 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1640:	4805      	ldr	r0, [pc, #20]	; (1658 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    1642:	2100      	movs	r1, #0
    1644:	7001      	strb	r1, [r0, #0]
    1646:	7041      	strb	r1, [r0, #1]
    1648:	f44f 7161 	mov.w	r1, #900	; 0x384
    164c:	8041      	strh	r1, [r0, #2]
    164e:	bd10      	pop	{r4, pc}
    1650:	20001072 	.word	0x20001072
    1654:	200001f4 	.word	0x200001f4
    1658:	200001f0 	.word	0x200001f0

0000165c <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>:
    165c:	b570      	push	{r4, r5, r6, lr}
    165e:	460c      	mov	r4, r1
    1660:	4605      	mov	r5, r0
    1662:	f005 ff79 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1666:	f005 fe69 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    166a:	480a      	ldr	r0, [pc, #40]	; (1694 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x38>)
    166c:	462a      	mov	r2, r5
    166e:	7800      	ldrb	r0, [r0, #0]
    1670:	b168      	cbz	r0, 168e <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    1672:	4b09      	ldr	r3, [pc, #36]	; (1698 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x3c>)
    1674:	7899      	ldrb	r1, [r3, #2]
    1676:	b151      	cbz	r1, 168e <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    1678:	2c00      	cmp	r4, #0
    167a:	bf0c      	ite	eq
    167c:	f103 0083 	addeq.w	r0, r3, #131	; 0x83
    1680:	1cd8      	addne	r0, r3, #3
    1682:	f005 fe43 	bl	730c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    1686:	f005 fe83 	bl	7390 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    168a:	2001      	movs	r0, #1
    168c:	bd70      	pop	{r4, r5, r6, pc}
    168e:	2000      	movs	r0, #0
    1690:	bd70      	pop	{r4, r5, r6, pc}
    1692:	0000      	.short	0x0000
    1694:	200001f0 	.word	0x200001f0
    1698:	20001072 	.word	0x20001072

0000169c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    169c:	4b0b      	ldr	r3, [pc, #44]	; (16cc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    169e:	f893 c002 	ldrb.w	ip, [r3, #2]
    16a2:	4584      	cmp	ip, r0
    16a4:	bf9c      	itt	ls
    16a6:	2000      	movls	r0, #0
    16a8:	4770      	bxls	lr
    16aa:	4418      	add	r0, r3
    16ac:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    16b0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    16b4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    16b8:	700b      	strb	r3, [r1, #0]
    16ba:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    16be:	6011      	str	r1, [r2, #0]
    16c0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    16c4:	8090      	strh	r0, [r2, #4]
    16c6:	2001      	movs	r0, #1
    16c8:	4770      	bx	lr
    16ca:	0000      	.short	0x0000
    16cc:	20001072 	.word	0x20001072

000016d0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    16d0:	4907      	ldr	r1, [pc, #28]	; (16f0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    16d2:	788a      	ldrb	r2, [r1, #2]
    16d4:	4282      	cmp	r2, r0
    16d6:	bf9c      	itt	ls
    16d8:	2000      	movls	r0, #0
    16da:	4770      	bxls	lr
    16dc:	4408      	add	r0, r1
    16de:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    16e2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    16e6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    16ea:	f000 0001 	and.w	r0, r0, #1
    16ee:	4770      	bx	lr
    16f0:	20001072 	.word	0x20001072

000016f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    16f4:	b510      	push	{r4, lr}
    16f6:	f000 f977 	bl	19e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    16fa:	2810      	cmp	r0, #16
    16fc:	d014      	beq.n	1728 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    16fe:	4a0b      	ldr	r2, [pc, #44]	; (172c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    1700:	4601      	mov	r1, r0
    1702:	2000      	movs	r0, #0
    1704:	f892 c002 	ldrb.w	ip, [r2, #2]
    1708:	f1bc 0f00 	cmp.w	ip, #0
    170c:	d90c      	bls.n	1728 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    170e:	1813      	adds	r3, r2, r0
    1710:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    1714:	428b      	cmp	r3, r1
    1716:	d103      	bne.n	1720 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    1718:	2810      	cmp	r0, #16
    171a:	bf18      	it	ne
    171c:	bd10      	popne	{r4, pc}
    171e:	e003      	b.n	1728 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    1720:	1c40      	adds	r0, r0, #1
    1722:	b2c0      	uxtb	r0, r0
    1724:	4584      	cmp	ip, r0
    1726:	d8f2      	bhi.n	170e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    1728:	2008      	movs	r0, #8
    172a:	bd10      	pop	{r4, pc}
    172c:	20001072 	.word	0x20001072

00001730 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>:
    1730:	4602      	mov	r2, r0
    1732:	4806      	ldr	r0, [pc, #24]	; (174c <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ+0x1c>)
    1734:	b510      	push	{r4, lr}
    1736:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    173a:	2101      	movs	r1, #1
    173c:	3083      	adds	r0, #131	; 0x83
    173e:	f005 fde5 	bl	730c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    1742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1746:	f005 be23 	b.w	7390 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    174a:	0000      	.short	0x0000
    174c:	20001072 	.word	0x20001072

00001750 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    1750:	4801      	ldr	r0, [pc, #4]	; (1758 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    1752:	8840      	ldrh	r0, [r0, #2]
    1754:	4770      	bx	lr
    1756:	0000      	.short	0x0000
    1758:	200001f0 	.word	0x200001f0

0000175c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1760:	4617      	mov	r7, r2
    1762:	2501      	movs	r5, #1
    1764:	2200      	movs	r2, #0
    1766:	461e      	mov	r6, r3
    1768:	462c      	mov	r4, r5
    176a:	703a      	strb	r2, [r7, #0]
    176c:	f000 f93c 	bl	19e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    1770:	2810      	cmp	r0, #16
    1772:	d027      	beq.n	17c4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    1774:	4918      	ldr	r1, [pc, #96]	; (17d8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x7c>)
    1776:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    177a:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    177e:	f002 0201 	and.w	r2, r2, #1
    1782:	703a      	strb	r2, [r7, #0]
    1784:	788b      	ldrb	r3, [r1, #2]
    1786:	2200      	movs	r2, #0
    1788:	2b00      	cmp	r3, #0
    178a:	d91b      	bls.n	17c4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    178c:	eb01 0c02 	add.w	ip, r1, r2
    1790:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    1794:	4584      	cmp	ip, r0
    1796:	d119      	bne.n	17cc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    1798:	2a10      	cmp	r2, #16
    179a:	d013      	beq.n	17c4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    179c:	2e00      	cmp	r6, #0
    179e:	bf18      	it	ne
    17a0:	7032      	strbne	r2, [r6, #0]
    17a2:	7888      	ldrb	r0, [r1, #2]
    17a4:	4290      	cmp	r0, r2
    17a6:	d90d      	bls.n	17c4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    17a8:	eb01 1002 	add.w	r0, r1, r2, lsl #4
    17ac:	f110 0f03 	cmn.w	r0, #3
    17b0:	d008      	beq.n	17c4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    17b2:	1888      	adds	r0, r1, r2
    17b4:	f890 414b 	ldrb.w	r4, [r0, #331]	; 0x14b
    17b8:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    17bc:	2801      	cmp	r0, #1
    17be:	bf0c      	ite	eq
    17c0:	2501      	moveq	r5, #1
    17c2:	2500      	movne	r5, #0
    17c4:	ea45 0004 	orr.w	r0, r5, r4
    17c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17cc:	1c52      	adds	r2, r2, #1
    17ce:	b2d2      	uxtb	r2, r2
    17d0:	4293      	cmp	r3, r2
    17d2:	d8db      	bhi.n	178c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x30>
    17d4:	e7f6      	b.n	17c4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    17d6:	0000      	.short	0x0000
    17d8:	20001072 	.word	0x20001072

000017dc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    17dc:	4906      	ldr	r1, [pc, #24]	; (17f8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    17de:	788a      	ldrb	r2, [r1, #2]
    17e0:	4282      	cmp	r2, r0
    17e2:	d906      	bls.n	17f2 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    17e4:	4408      	add	r0, r1
    17e6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    17ea:	2800      	cmp	r0, #0
    17ec:	bf04      	itt	eq
    17ee:	2001      	moveq	r0, #1
    17f0:	4770      	bxeq	lr
    17f2:	2000      	movs	r0, #0
    17f4:	4770      	bx	lr
    17f6:	0000      	.short	0x0000
    17f8:	20001072 	.word	0x20001072

000017fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    17fc:	b570      	push	{r4, r5, r6, lr}
    17fe:	460d      	mov	r5, r1
    1800:	4604      	mov	r4, r0
    1802:	f000 f8f1 	bl	19e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    1806:	4a1a      	ldr	r2, [pc, #104]	; (1870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    1808:	2810      	cmp	r0, #16
    180a:	d014      	beq.n	1836 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    180c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    1810:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    1814:	f010 0f01 	tst.w	r0, #1
    1818:	bf1c      	itt	ne
    181a:	2001      	movne	r0, #1
    181c:	bd70      	popne	{r4, r5, r6, pc}
    181e:	7850      	ldrb	r0, [r2, #1]
    1820:	2808      	cmp	r0, #8
    1822:	bf3c      	itt	cc
    1824:	2001      	movcc	r0, #1
    1826:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    182a:	d21e      	bcs.n	186a <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    182c:	7850      	ldrb	r0, [r2, #1]
    182e:	1c40      	adds	r0, r0, #1
    1830:	7050      	strb	r0, [r2, #1]
    1832:	2001      	movs	r0, #1
    1834:	bd70      	pop	{r4, r5, r6, pc}
    1836:	7850      	ldrb	r0, [r2, #1]
    1838:	2808      	cmp	r0, #8
    183a:	d216      	bcs.n	186a <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    183c:	7813      	ldrb	r3, [r2, #0]
    183e:	2001      	movs	r0, #1
    1840:	1c59      	adds	r1, r3, #1
    1842:	7011      	strb	r1, [r2, #0]
    1844:	2b10      	cmp	r3, #16
    1846:	d303      	bcc.n	1850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    1848:	2146      	movs	r1, #70	; 0x46
    184a:	2028      	movs	r0, #40	; 0x28
    184c:	f7fe feda 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1850:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1854:	6829      	ldr	r1, [r5, #0]
    1856:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    185a:	88a9      	ldrh	r1, [r5, #4]
    185c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    1860:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    1864:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    1868:	e7e0      	b.n	182c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    186a:	2000      	movs	r0, #0
    186c:	bd70      	pop	{r4, r5, r6, pc}
    186e:	0000      	.short	0x0000
    1870:	20001072 	.word	0x20001072

00001874 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>:
    1874:	4801      	ldr	r0, [pc, #4]	; (187c <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ+0x8>)
    1876:	7840      	ldrb	r0, [r0, #1]
    1878:	4770      	bx	lr
    187a:	0000      	.short	0x0000
    187c:	200001f0 	.word	0x200001f0

00001880 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    1880:	4901      	ldr	r1, [pc, #4]	; (1888 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    1882:	7048      	strb	r0, [r1, #1]
    1884:	4770      	bx	lr
    1886:	0000      	.short	0x0000
    1888:	200001f0 	.word	0x200001f0

0000188c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    188c:	b470      	push	{r4, r5, r6}
    188e:	482b      	ldr	r0, [pc, #172]	; (193c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    1890:	2500      	movs	r5, #0
    1892:	7801      	ldrb	r1, [r0, #0]
    1894:	1e49      	subs	r1, r1, #1
    1896:	b24b      	sxtb	r3, r1
    1898:	2b00      	cmp	r3, #0
    189a:	db46      	blt.n	192a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    189c:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    18a0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    18a4:	f011 0f01 	tst.w	r1, #1
    18a8:	d03b      	beq.n	1922 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    18aa:	7842      	ldrb	r2, [r0, #1]
    18ac:	b2d9      	uxtb	r1, r3
    18ae:	1e52      	subs	r2, r2, #1
    18b0:	7042      	strb	r2, [r0, #1]
    18b2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    18b6:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    18ba:	f890 c002 	ldrb.w	ip, [r0, #2]
    18be:	2200      	movs	r2, #0
    18c0:	f1bc 0f00 	cmp.w	ip, #0
    18c4:	d90b      	bls.n	18de <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    18c6:	1884      	adds	r4, r0, r2
    18c8:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    18cc:	428e      	cmp	r6, r1
    18ce:	d102      	bne.n	18d6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    18d0:	2a10      	cmp	r2, #16
    18d2:	d126      	bne.n	1922 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    18d4:	e003      	b.n	18de <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    18d6:	1c52      	adds	r2, r2, #1
    18d8:	b2d2      	uxtb	r2, r2
    18da:	4594      	cmp	ip, r2
    18dc:	d8f3      	bhi.n	18c6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    18de:	7802      	ldrb	r2, [r0, #0]
    18e0:	1e52      	subs	r2, r2, #1
    18e2:	b2d2      	uxtb	r2, r2
    18e4:	7002      	strb	r2, [r0, #0]
    18e6:	428a      	cmp	r2, r1
    18e8:	d01b      	beq.n	1922 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    18ea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    18ee:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    18f2:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    18f6:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    18fa:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    18fe:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    1902:	7884      	ldrb	r4, [r0, #2]
    1904:	f890 c000 	ldrb.w	ip, [r0]
    1908:	2200      	movs	r2, #0
    190a:	2c00      	cmp	r4, #0
    190c:	d909      	bls.n	1922 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    190e:	1886      	adds	r6, r0, r2
    1910:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    1914:	4566      	cmp	r6, ip
    1916:	d10c      	bne.n	1932 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    1918:	2a10      	cmp	r2, #16
    191a:	bf1c      	itt	ne
    191c:	4402      	addne	r2, r0
    191e:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    1922:	1e59      	subs	r1, r3, #1
    1924:	b24b      	sxtb	r3, r1
    1926:	2b00      	cmp	r3, #0
    1928:	dab8      	bge.n	189c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    192a:	4805      	ldr	r0, [pc, #20]	; (1940 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    192c:	7045      	strb	r5, [r0, #1]
    192e:	bc70      	pop	{r4, r5, r6}
    1930:	4770      	bx	lr
    1932:	1c52      	adds	r2, r2, #1
    1934:	b2d2      	uxtb	r2, r2
    1936:	4294      	cmp	r4, r2
    1938:	d8e9      	bhi.n	190e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    193a:	e7f2      	b.n	1922 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    193c:	20001072 	.word	0x20001072
    1940:	200001f0 	.word	0x200001f0

00001944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    1944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1948:	4d25      	ldr	r5, [pc, #148]	; (19e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    194a:	2600      	movs	r6, #0
    194c:	4634      	mov	r4, r6
    194e:	7828      	ldrb	r0, [r5, #0]
    1950:	2800      	cmp	r0, #0
    1952:	bf8c      	ite	hi
    1954:	4f23      	ldrhi	r7, [pc, #140]	; (19e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    1956:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    195a:	bf00      	nop
    195c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    1960:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    1964:	f011 0f01 	tst.w	r1, #1
    1968:	d032      	beq.n	19d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    196a:	78aa      	ldrb	r2, [r5, #2]
    196c:	2100      	movs	r1, #0
    196e:	4623      	mov	r3, r4
    1970:	2a00      	cmp	r2, #0
    1972:	d909      	bls.n	1988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    1974:	eb05 0c01 	add.w	ip, r5, r1
    1978:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    197c:	459c      	cmp	ip, r3
    197e:	d004      	beq.n	198a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    1980:	1c49      	adds	r1, r1, #1
    1982:	b2c9      	uxtb	r1, r1
    1984:	428a      	cmp	r2, r1
    1986:	d8f5      	bhi.n	1974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    1988:	2110      	movs	r1, #16
    198a:	428a      	cmp	r2, r1
    198c:	bf86      	itte	hi
    198e:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    1992:	1cd3      	addhi	r3, r2, #3
    1994:	2300      	movls	r3, #0
    1996:	2200      	movs	r2, #0
    1998:	2910      	cmp	r1, #16
    199a:	d00c      	beq.n	19b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    199c:	eb05 0c01 	add.w	ip, r5, r1
    19a0:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    19a4:	f1b8 0f01 	cmp.w	r8, #1
    19a8:	d004      	beq.n	19b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    19aa:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    19ae:	f1bc 0f00 	cmp.w	ip, #0
    19b2:	d000      	beq.n	19b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    19b4:	2201      	movs	r2, #1
    19b6:	1e52      	subs	r2, r2, #1
    19b8:	4213      	tst	r3, r2
    19ba:	d109      	bne.n	19d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    19bc:	55b9      	strb	r1, [r7, r6]
    19be:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    19c2:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    19c6:	4630      	mov	r0, r6
    19c8:	1c73      	adds	r3, r6, #1
    19ca:	b2de      	uxtb	r6, r3
    19cc:	f006 ff4a 	bl	8864 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    19d0:	1c60      	adds	r0, r4, #1
    19d2:	b2c4      	uxtb	r4, r0
    19d4:	7828      	ldrb	r0, [r5, #0]
    19d6:	42a0      	cmp	r0, r4
    19d8:	d8c0      	bhi.n	195c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    19da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19de:	0000      	.short	0x0000
    19e0:	20001072 	.word	0x20001072
    19e4:	200001f4 	.word	0x200001f4
    19e8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    19ec:	4b20      	ldr	r3, [pc, #128]	; (1a70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>)
    19ee:	4602      	mov	r2, r0
    19f0:	2000      	movs	r0, #0
    19f2:	f893 8000 	ldrb.w	r8, [r3]
    19f6:	f1b8 0f00 	cmp.w	r8, #0
    19fa:	d934      	bls.n	1a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x122>
    19fc:	780f      	ldrb	r7, [r1, #0]
    19fe:	784e      	ldrb	r6, [r1, #1]
    1a00:	788d      	ldrb	r5, [r1, #2]
    1a02:	78cc      	ldrb	r4, [r1, #3]
    1a04:	f891 c004 	ldrb.w	ip, [r1, #4]
    1a08:	f891 a005 	ldrb.w	sl, [r1, #5]
    1a0c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    1a10:	f891 9153 	ldrb.w	r9, [r1, #339]	; 0x153
    1a14:	f891 b154 	ldrb.w	fp, [r1, #340]	; 0x154
    1a18:	ea82 0909 	eor.w	r9, r2, r9
    1a1c:	ea87 0b0b 	eor.w	fp, r7, fp
    1a20:	44d9      	add	r9, fp
    1a22:	f891 b155 	ldrb.w	fp, [r1, #341]	; 0x155
    1a26:	ea86 0b0b 	eor.w	fp, r6, fp
    1a2a:	44d9      	add	r9, fp
    1a2c:	f891 b156 	ldrb.w	fp, [r1, #342]	; 0x156
    1a30:	ea85 0b0b 	eor.w	fp, r5, fp
    1a34:	44d9      	add	r9, fp
    1a36:	f891 b157 	ldrb.w	fp, [r1, #343]	; 0x157
    1a3a:	ea84 0b0b 	eor.w	fp, r4, fp
    1a3e:	44d9      	add	r9, fp
    1a40:	f891 b158 	ldrb.w	fp, [r1, #344]	; 0x158
    1a44:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
    1a48:	ea8c 0b0b 	eor.w	fp, ip, fp
    1a4c:	44d9      	add	r9, fp
    1a4e:	ea8a 0101 	eor.w	r1, sl, r1
    1a52:	eb11 0f09 	cmn.w	r1, r9
    1a56:	bf04      	itt	eq
    1a58:	e8bd 0ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1a5c:	4770      	bxeq	lr
    1a5e:	1c40      	adds	r0, r0, #1
    1a60:	b2c0      	uxtb	r0, r0
    1a62:	4580      	cmp	r8, r0
    1a64:	d8d2      	bhi.n	1a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    1a66:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1a6a:	2010      	movs	r0, #16
    1a6c:	4770      	bx	lr
    1a6e:	0000      	.short	0x0000
    1a70:	20001072 	.word	0x20001072
    1a74:	4925      	ldr	r1, [pc, #148]	; (1b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c8>)
    1a76:	b410      	push	{r4}
    1a78:	784a      	ldrb	r2, [r1, #1]
    1a7a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1a7e:	1e52      	subs	r2, r2, #1
    1a80:	704a      	strb	r2, [r1, #1]
    1a82:	2200      	movs	r2, #0
    1a84:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    1a88:	f891 c002 	ldrb.w	ip, [r1, #2]
    1a8c:	f1bc 0f00 	cmp.w	ip, #0
    1a90:	d90d      	bls.n	1aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    1a92:	188b      	adds	r3, r1, r2
    1a94:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    1a98:	4284      	cmp	r4, r0
    1a9a:	d104      	bne.n	1aa6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x162>
    1a9c:	2a10      	cmp	r2, #16
    1a9e:	bf1c      	itt	ne
    1aa0:	bc10      	popne	{r4}
    1aa2:	4770      	bxne	lr
    1aa4:	e003      	b.n	1aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    1aa6:	1c52      	adds	r2, r2, #1
    1aa8:	b2d2      	uxtb	r2, r2
    1aaa:	4594      	cmp	ip, r2
    1aac:	d8f1      	bhi.n	1a92 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14e>
    1aae:	780a      	ldrb	r2, [r1, #0]
    1ab0:	1e52      	subs	r2, r2, #1
    1ab2:	b2d2      	uxtb	r2, r2
    1ab4:	700a      	strb	r2, [r1, #0]
    1ab6:	4282      	cmp	r2, r0
    1ab8:	bf04      	itt	eq
    1aba:	bc10      	popeq	{r4}
    1abc:	4770      	bxeq	lr
    1abe:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1ac2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    1ac6:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    1aca:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    1ace:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    1ad2:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    1ad6:	788c      	ldrb	r4, [r1, #2]
    1ad8:	f891 c000 	ldrb.w	ip, [r1]
    1adc:	2200      	movs	r2, #0
    1ade:	2c00      	cmp	r4, #0
    1ae0:	bf9c      	itt	ls
    1ae2:	bc10      	popls	{r4}
    1ae4:	4770      	bxls	lr
    1ae6:	188b      	adds	r3, r1, r2
    1ae8:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    1aec:	4563      	cmp	r3, ip
    1aee:	d106      	bne.n	1afe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    1af0:	2a10      	cmp	r2, #16
    1af2:	bf1c      	itt	ne
    1af4:	4411      	addne	r1, r2
    1af6:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    1afa:	bc10      	pop	{r4}
    1afc:	4770      	bx	lr
    1afe:	1c52      	adds	r2, r2, #1
    1b00:	b2d2      	uxtb	r2, r2
    1b02:	4294      	cmp	r4, r2
    1b04:	d8ef      	bhi.n	1ae6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1a2>
    1b06:	bc10      	pop	{r4}
    1b08:	4770      	bx	lr
    1b0a:	0000      	.short	0x0000
    1b0c:	20001072 	.word	0x20001072

00001b10 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    1b10:	b570      	push	{r4, r5, r6, lr}
    1b12:	b08c      	sub	sp, #48	; 0x30
    1b14:	f100 0410 	add.w	r4, r0, #16
    1b18:	461d      	mov	r5, r3
    1b1a:	4616      	mov	r6, r2
    1b1c:	f10d 3cff 	add.w	ip, sp, #4294967295
    1b20:	f05f 0008 	movs.w	r0, #8
    1b24:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    1b28:	f88c 2001 	strb.w	r2, [ip, #1]
    1b2c:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    1b30:	f80c 2f02 	strb.w	r2, [ip, #2]!
    1b34:	1e40      	subs	r0, r0, #1
    1b36:	d1f5      	bne.n	1b24 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    1b38:	f101 0c10 	add.w	ip, r1, #16
    1b3c:	466c      	mov	r4, sp
    1b3e:	f10d 010f 	add.w	r1, sp, #15
    1b42:	2008      	movs	r0, #8
    1b44:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    1b48:	704a      	strb	r2, [r1, #1]
    1b4a:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    1b4e:	f801 2f02 	strb.w	r2, [r1, #2]!
    1b52:	1e40      	subs	r0, r0, #1
    1b54:	d1f6      	bne.n	1b44 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    1b56:	4620      	mov	r0, r4
    1b58:	f00c f9ef 	bl	df3a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    1b5c:	b17e      	cbz	r6, 1b7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    1b5e:	1e6a      	subs	r2, r5, #1
    1b60:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1b64:	f05f 0108 	movs.w	r1, #8
    1b68:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1b6c:	7053      	strb	r3, [r2, #1]
    1b6e:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    1b72:	f802 3f02 	strb.w	r3, [r2, #2]!
    1b76:	1e49      	subs	r1, r1, #1
    1b78:	d1f6      	bne.n	1b68 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    1b7a:	b00c      	add	sp, #48	; 0x30
    1b7c:	bd70      	pop	{r4, r5, r6, pc}
    1b7e:	9808      	ldr	r0, [sp, #32]
    1b80:	6028      	str	r0, [r5, #0]
    1b82:	9809      	ldr	r0, [sp, #36]	; 0x24
    1b84:	6068      	str	r0, [r5, #4]
    1b86:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b88:	60a8      	str	r0, [r5, #8]
    1b8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1b8c:	60e8      	str	r0, [r5, #12]
    1b8e:	b00c      	add	sp, #48	; 0x30
    1b90:	bd70      	pop	{r4, r5, r6, pc}
	...

00001b94 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    1b94:	b570      	push	{r4, r5, r6, lr}
    1b96:	4604      	mov	r4, r0
    1b98:	2601      	movs	r6, #1
    1b9a:	b179      	cbz	r1, 1bbc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    1b9c:	4a58      	ldr	r2, [pc, #352]	; (1d00 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16c>)
    1b9e:	2500      	movs	r5, #0
    1ba0:	2901      	cmp	r1, #1
    1ba2:	d031      	beq.n	1c08 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x74>
    1ba4:	2902      	cmp	r1, #2
    1ba6:	d07a      	beq.n	1c9e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10a>
    1ba8:	2903      	cmp	r1, #3
    1baa:	bf18      	it	ne
    1bac:	bd70      	popne	{r4, r5, r6, pc}
    1bae:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    1bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1bb6:	30cd      	adds	r0, #205	; 0xcd
    1bb8:	f00c baff 	b.w	e1ba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    1bbc:	f44f 6281 	mov.w	r2, #1032	; 0x408
    1bc0:	2100      	movs	r1, #0
    1bc2:	f00e fcec 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1bc6:	f884 60cd 	strb.w	r6, [r4, #205]	; 0xcd
    1bca:	4a4e      	ldr	r2, [pc, #312]	; (1d04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x170>)
    1bcc:	f8c4 2116 	str.w	r2, [r4, #278]	; 0x116
    1bd0:	2207      	movs	r2, #7
    1bd2:	f8c4 211a 	str.w	r2, [r4, #282]	; 0x11a
    1bd6:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
    1bda:	20fe      	movs	r0, #254	; 0xfe
    1bdc:	f022 0204 	bic.w	r2, r2, #4
    1be0:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
    1be4:	f884 014e 	strb.w	r0, [r4, #334]	; 0x14e
    1be8:	207f      	movs	r0, #127	; 0x7f
    1bea:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
    1bee:	4846      	ldr	r0, [pc, #280]	; (1d08 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x174>)
    1bf0:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
    1bf4:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    1bf8:	2000      	movs	r0, #0
    1bfa:	e9c1 0000 	strd	r0, r0, [r1]
    1bfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1c02:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    1c06:	bd70      	pop	{r4, r5, r6, pc}
    1c08:	f8a4 5316 	strh.w	r5, [r4, #790]	; 0x316
    1c0c:	f884 530b 	strb.w	r5, [r4, #779]	; 0x30b
    1c10:	6960      	ldr	r0, [r4, #20]
    1c12:	493e      	ldr	r1, [pc, #248]	; (1d0c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x178>)
    1c14:	fbb2 f2f0 	udiv	r2, r2, r0
    1c18:	4401      	add	r1, r0
    1c1a:	fbb1 f1f0 	udiv	r1, r1, r0
    1c1e:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
    1c22:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1c26:	f8a4 10f0 	strh.w	r1, [r4, #240]	; 0xf0
    1c2a:	8be3      	ldrh	r3, [r4, #30]
    1c2c:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
    1c30:	f8b4 c0fa 	ldrh.w	ip, [r4, #250]	; 0xfa
    1c34:	1c52      	adds	r2, r2, #1
    1c36:	fb0c fc00 	mul.w	ip, ip, r0
    1c3a:	fbbc fcf0 	udiv	ip, ip, r0
    1c3e:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
    1c42:	f240 2c71 	movw	ip, #625	; 0x271
    1c46:	fb03 f30c 	mul.w	r3, r3, ip
    1c4a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    1c4e:	1e5b      	subs	r3, r3, #1
    1c50:	fbb3 f3f0 	udiv	r3, r3, r0
    1c54:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    1c58:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
    1c5c:	4a2c      	ldr	r2, [pc, #176]	; (1d10 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>)
    1c5e:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
    1c62:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    1c66:	1e52      	subs	r2, r2, #1
    1c68:	fbb2 f2f0 	udiv	r2, r2, r0
    1c6c:	644a      	str	r2, [r1, #68]	; 0x44
    1c6e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    1c70:	4342      	muls	r2, r0
    1c72:	fbb2 f0f0 	udiv	r0, r2, r0
    1c76:	6408      	str	r0, [r1, #64]	; 0x40
    1c78:	3126      	adds	r1, #38	; 0x26
    1c7a:	1e48      	subs	r0, r1, #1
    1c7c:	f00c fa9d 	bl	e1ba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    1c80:	f00e fba4 	bl	103cc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    1c84:	b138      	cbz	r0, 1c96 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x102>
    1c86:	69a0      	ldr	r0, [r4, #24]
    1c88:	f000 fb0c 	bl	22a4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    1c8c:	2800      	cmp	r0, #0
    1c8e:	bf04      	itt	eq
    1c90:	f884 62f8 	strbeq.w	r6, [r4, #760]	; 0x2f8
    1c94:	bd70      	popeq	{r4, r5, r6, pc}
    1c96:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8
    1c9a:	bd70      	pop	{r4, r5, r6, pc}
    1c9c:	e7ff      	b.n	1c9e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10a>
    1c9e:	f8d4 13dc 	ldr.w	r1, [r4, #988]	; 0x3dc
    1ca2:	f8b4 c3e2 	ldrh.w	ip, [r4, #994]	; 0x3e2
    1ca6:	6963      	ldr	r3, [r4, #20]
    1ca8:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    1cac:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
    1cb0:	f8b4 40fa 	ldrh.w	r4, [r4, #250]	; 0xfa
    1cb4:	fbb2 f2f1 	udiv	r2, r2, r1
    1cb8:	435c      	muls	r4, r3
    1cba:	fbb4 f4f1 	udiv	r4, r4, r1
    1cbe:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
    1cc2:	f240 2471 	movw	r4, #625	; 0x271
    1cc6:	fb0c fc04 	mul.w	ip, ip, r4
    1cca:	eb01 1c0c 	add.w	ip, r1, ip, lsl #4
    1cce:	f1ac 0c01 	sub.w	ip, ip, #1
    1cd2:	fbbc fcf1 	udiv	ip, ip, r1
    1cd6:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
    1cda:	1c52      	adds	r2, r2, #1
    1cdc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    1ce0:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    1ce4:	4362      	muls	r2, r4
    1ce6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    1cea:	1e52      	subs	r2, r2, #1
    1cec:	fbb2 f2f1 	udiv	r2, r2, r1
    1cf0:	6442      	str	r2, [r0, #68]	; 0x44
    1cf2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1cf4:	435a      	muls	r2, r3
    1cf6:	fbb2 f1f1 	udiv	r1, r2, r1
    1cfa:	6401      	str	r1, [r0, #64]	; 0x40
    1cfc:	bd70      	pop	{r4, r5, r6, pc}
    1cfe:	0000      	.short	0x0000
    1d00:	02625a00 	.word	0x02625a00
    1d04:	3404492f 	.word	0x3404492f
    1d08:	fffce000 	.word	0xfffce000
    1d0c:	01c9c37f 	.word	0x01c9c37f
    1d10:	001c9c38 	.word	0x001c9c38

00001d14 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    1d14:	f641 524c 	movw	r2, #7500	; 0x1d4c
    1d18:	4291      	cmp	r1, r2
    1d1a:	bf3d      	ittte	cc
    1d1c:	4905      	ldrcc	r1, [pc, #20]	; (1d34 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI+0x20>)
    1d1e:	fba1 1000 	umullcc	r1, r0, r1, r0
    1d22:	0940      	lsrcc	r0, r0, #5
    1d24:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    1d28:	bf28      	it	cs
    1d2a:	fbb0 f0f1 	udivcs	r0, r0, r1
    1d2e:	b280      	uxth	r0, r0
    1d30:	4770      	bx	lr
    1d32:	0000      	.short	0x0000
    1d34:	51eb851f 	.word	0x51eb851f

00001d38 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    1d38:	f641 524c 	movw	r2, #7500	; 0x1d4c
    1d3c:	4291      	cmp	r1, r2
    1d3e:	bf3d      	ittte	cc
    1d40:	4905      	ldrcc	r1, [pc, #20]	; (1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1d42:	fba1 1000 	umullcc	r1, r0, r1, r0
    1d46:	0940      	lsrcc	r0, r0, #5
    1d48:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    1d4c:	bf28      	it	cs
    1d4e:	fbb0 f0f1 	udivcs	r0, r0, r1
    1d52:	b2c0      	uxtb	r0, r0
    1d54:	4770      	bx	lr
    1d56:	0000      	.short	0x0000
    1d58:	51eb851f 	.word	0x51eb851f

00001d5c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    1d5c:	b430      	push	{r4, r5}
    1d5e:	2200      	movs	r2, #0
    1d60:	f1a1 0c01 	sub.w	ip, r1, #1
    1d64:	f1bc 0f00 	cmp.w	ip, #0
    1d68:	dd12      	ble.n	1d90 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    1d6a:	1e43      	subs	r3, r0, #1
    1d6c:	f011 0f01 	tst.w	r1, #1
    1d70:	bf08      	it	eq
    1d72:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    1d76:	785c      	ldrb	r4, [r3, #1]
    1d78:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    1d7c:	d008      	beq.n	1d90 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    1d7e:	bf00      	nop
    1d80:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    1d84:	4322      	orrs	r2, r4
    1d86:	785c      	ldrb	r4, [r3, #1]
    1d88:	432a      	orrs	r2, r5
    1d8a:	f1bc 0c01 	subs.w	ip, ip, #1
    1d8e:	d1f7      	bne.n	1d80 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    1d90:	1e49      	subs	r1, r1, #1
    1d92:	bf5c      	itt	pl
    1d94:	5c40      	ldrbpl	r0, [r0, r1]
    1d96:	4302      	orrpl	r2, r0
    1d98:	2a00      	cmp	r2, #0
    1d9a:	bf0c      	ite	eq
    1d9c:	2001      	moveq	r0, #1
    1d9e:	2000      	movne	r0, #0
    1da0:	bc30      	pop	{r4, r5}
    1da2:	4770      	bx	lr

00001da4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    1da4:	4907      	ldr	r1, [pc, #28]	; (1dc4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0x20>)
    1da6:	f991 1000 	ldrsb.w	r1, [r1]
    1daa:	4408      	add	r0, r1
    1dac:	2814      	cmp	r0, #20
    1dae:	bfc4      	itt	gt
    1db0:	2014      	movgt	r0, #20
    1db2:	4770      	bxgt	lr
    1db4:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
    1db8:	bfb4      	ite	lt
    1dba:	f06f 007e 	mvnlt.w	r0, #126	; 0x7e
    1dbe:	b240      	sxtbge	r0, r0
    1dc0:	4770      	bx	lr
    1dc2:	0000      	.short	0x0000
    1dc4:	20000212 	.word	0x20000212

00001dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    1dc8:	b508      	push	{r3, lr}
    1dca:	207f      	movs	r0, #127	; 0x7f
    1dcc:	f88d 0000 	strb.w	r0, [sp]
    1dd0:	4668      	mov	r0, sp
    1dd2:	f006 fa0d 	bl	81f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    1dd6:	2800      	cmp	r0, #0
    1dd8:	bf04      	itt	eq
    1dda:	f99d 0000 	ldrsbeq.w	r0, [sp]
    1dde:	bd08      	popeq	{r3, pc}
    1de0:	f99d 1000 	ldrsb.w	r1, [sp]
    1de4:	4807      	ldr	r0, [pc, #28]	; (1e04 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x3c>)
    1de6:	7840      	ldrb	r0, [r0, #1]
    1de8:	4240      	negs	r0, r0
    1dea:	b240      	sxtb	r0, r0
    1dec:	4408      	add	r0, r1
    1dee:	2814      	cmp	r0, #20
    1df0:	bfc4      	itt	gt
    1df2:	2014      	movgt	r0, #20
    1df4:	bd08      	popgt	{r3, pc}
    1df6:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
    1dfa:	bfb4      	ite	lt
    1dfc:	f06f 007e 	mvnlt.w	r0, #126	; 0x7e
    1e00:	b240      	sxtbge	r0, r0
    1e02:	bd08      	pop	{r3, pc}
    1e04:	20000212 	.word	0x20000212

00001e08 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    1e08:	4907      	ldr	r1, [pc, #28]	; (1e28 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x20>)
    1e0a:	b508      	push	{r3, lr}
    1e0c:	7809      	ldrb	r1, [r1, #0]
    1e0e:	f88d 1000 	strb.w	r1, [sp]
    1e12:	f89d 1000 	ldrb.w	r1, [sp]
    1e16:	2900      	cmp	r1, #0
    1e18:	bf1c      	itt	ne
    1e1a:	2000      	movne	r0, #0
    1e1c:	bd08      	popne	{r3, pc}
    1e1e:	4903      	ldr	r1, [pc, #12]	; (1e2c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x24>)
    1e20:	f00e f97e 	bl	10120 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    1e24:	2001      	movs	r0, #1
    1e26:	bd08      	pop	{r3, pc}
    1e28:	20000214 	.word	0x20000214
    1e2c:	20000215 	.word	0x20000215

00001e30 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    1e30:	4904      	ldr	r1, [pc, #16]	; (1e44 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    1e32:	7d89      	ldrb	r1, [r1, #22]
    1e34:	f001 0104 	and.w	r1, r1, #4
    1e38:	4308      	orrs	r0, r1
    1e3a:	bf0c      	ite	eq
    1e3c:	2001      	moveq	r0, #1
    1e3e:	2000      	movne	r0, #0
    1e40:	4770      	bx	lr
    1e42:	0000      	.short	0x0000
    1e44:	20000adc 	.word	0x20000adc

00001e48 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    1e48:	4803      	ldr	r0, [pc, #12]	; (1e58 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    1e4a:	7d80      	ldrb	r0, [r0, #22]
    1e4c:	f010 0f02 	tst.w	r0, #2
    1e50:	bf0c      	ite	eq
    1e52:	2001      	moveq	r0, #1
    1e54:	2000      	movne	r0, #0
    1e56:	4770      	bx	lr
    1e58:	20000adc 	.word	0x20000adc

00001e5c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    1e5c:	4803      	ldr	r0, [pc, #12]	; (1e6c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    1e5e:	7d80      	ldrb	r0, [r0, #22]
    1e60:	f010 0f01 	tst.w	r0, #1
    1e64:	bf0c      	ite	eq
    1e66:	2001      	moveq	r0, #1
    1e68:	2000      	movne	r0, #0
    1e6a:	4770      	bx	lr
    1e6c:	20000adc 	.word	0x20000adc

00001e70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    1e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e74:	f8df 9338 	ldr.w	r9, [pc, #824]	; 21b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x340>
    1e78:	4ece      	ldr	r6, [pc, #824]	; (21b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x344>)
    1e7a:	2701      	movs	r7, #1
    1e7c:	4683      	mov	fp, r0
    1e7e:	2500      	movs	r5, #0
    1e80:	6870      	ldr	r0, [r6, #4]
    1e82:	7a00      	ldrb	r0, [r0, #8]
    1e84:	f88d 0000 	strb.w	r0, [sp]
    1e88:	9800      	ldr	r0, [sp, #0]
    1e8a:	9000      	str	r0, [sp, #0]
    1e8c:	f89d 1000 	ldrb.w	r1, [sp]
    1e90:	292a      	cmp	r1, #42	; 0x2a
    1e92:	d108      	bne.n	1ea6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1e94:	f899 0017 	ldrb.w	r0, [r9, #23]
    1e98:	b128      	cbz	r0, 1ea6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1e9a:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    1e9e:	2800      	cmp	r0, #0
    1ea0:	bf08      	it	eq
    1ea2:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ea6:	f04f 0800 	mov.w	r8, #0
    1eaa:	6874      	ldr	r4, [r6, #4]
    1eac:	4628      	mov	r0, r5
    1eae:	7a22      	ldrb	r2, [r4, #8]
    1eb0:	f88d 2000 	strb.w	r2, [sp]
    1eb4:	9a00      	ldr	r2, [sp, #0]
    1eb6:	9200      	str	r2, [sp, #0]
    1eb8:	f89d 3000 	ldrb.w	r3, [sp]
    1ebc:	2b01      	cmp	r3, #1
    1ebe:	bf08      	it	eq
    1ec0:	462c      	moveq	r4, r5
    1ec2:	d010      	beq.n	1ee6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    1ec4:	f3ef 8110 	mrs	r1, PRIMASK
    1ec8:	b672      	cpsid	i
    1eca:	6822      	ldr	r2, [r4, #0]
    1ecc:	6072      	str	r2, [r6, #4]
    1ece:	b901      	cbnz	r1, 1ed2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    1ed0:	b662      	cpsie	i
    1ed2:	7a21      	ldrb	r1, [r4, #8]
    1ed4:	f88d 1000 	strb.w	r1, [sp]
    1ed8:	9900      	ldr	r1, [sp, #0]
    1eda:	9100      	str	r1, [sp, #0]
    1edc:	f89d 2000 	ldrb.w	r2, [sp]
    1ee0:	2a00      	cmp	r2, #0
    1ee2:	bf08      	it	eq
    1ee4:	4638      	moveq	r0, r7
    1ee6:	2800      	cmp	r0, #0
    1ee8:	d1df      	bne.n	1eaa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    1eea:	b31c      	cbz	r4, 1f34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    1eec:	7a20      	ldrb	r0, [r4, #8]
    1eee:	f88d 0000 	strb.w	r0, [sp]
    1ef2:	f89d a000 	ldrb.w	sl, [sp]
    1ef6:	f1aa 0002 	sub.w	r0, sl, #2
    1efa:	2830      	cmp	r0, #48	; 0x30
    1efc:	f080 8139 	bcs.w	2172 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x302>
    1f00:	e8df f000 	tbb	[pc, r0]
    1f04:	2e8ea91b 	.word	0x2e8ea91b
    1f08:	fda982a0 	.word	0xfda982a0
    1f0c:	fdfdfdfc 	.word	0xfdfdfdfc
    1f10:	2efbfdb2 	.word	0x2efbfdb2
    1f14:	fdfd82a0 	.word	0xfdfd82a0
    1f18:	7a5ca02e 	.word	0x7a5ca02e
    1f1c:	82d2fd5c 	.word	0x82d2fd5c
    1f20:	fd2efd82 	.word	0xfd2efd82
    1f24:	2efdfafd 	.word	0x2efdfafd
    1f28:	e8df26fb 	.word	0xe8df26fb
    1f2c:	363636f9 	.word	0x363636f9
    1f30:	dff84c3e 	.word	0xdff84c3e
    1f34:	2000      	movs	r0, #0
    1f36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f3a:	6862      	ldr	r2, [r4, #4]
    1f3c:	b922      	cbnz	r2, 1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    1f3e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    1f42:	2010      	movs	r0, #16
    1f44:	f7fe fb5e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f48:	4659      	mov	r1, fp
    1f4a:	4620      	mov	r0, r4
    1f4c:	4790      	blx	r2
    1f4e:	e0ca      	b.n	20e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    1f50:	6862      	ldr	r2, [r4, #4]
    1f52:	2a00      	cmp	r2, #0
    1f54:	d1f8      	bne.n	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    1f56:	f240 11ad 	movw	r1, #429	; 0x1ad
    1f5a:	2010      	movs	r0, #16
    1f5c:	f7fe fb52 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f60:	6862      	ldr	r2, [r4, #4]
    1f62:	2a00      	cmp	r2, #0
    1f64:	d1f0      	bne.n	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    1f66:	f240 11bb 	movw	r1, #443	; 0x1bb
    1f6a:	2010      	movs	r0, #16
    1f6c:	f7fe fb4a 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f70:	6862      	ldr	r2, [r4, #4]
    1f72:	2a00      	cmp	r2, #0
    1f74:	d1e8      	bne.n	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    1f76:	f240 11c7 	movw	r1, #455	; 0x1c7
    1f7a:	2010      	movs	r0, #16
    1f7c:	f7fe fb42 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f80:	6862      	ldr	r2, [r4, #4]
    1f82:	b132      	cbz	r2, 1f92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    1f84:	7225      	strb	r5, [r4, #8]
    1f86:	4659      	mov	r1, fp
    1f88:	4620      	mov	r0, r4
    1f8a:	4790      	blx	r2
    1f8c:	2800      	cmp	r0, #0
    1f8e:	d053      	beq.n	2038 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    1f90:	e00c      	b.n	1fac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    1f92:	f240 11cf 	movw	r1, #463	; 0x1cf
    1f96:	2010      	movs	r0, #16
    1f98:	f7fe fb34 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f9c:	6862      	ldr	r2, [r4, #4]
    1f9e:	b142      	cbz	r2, 1fb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    1fa0:	4659      	mov	r1, fp
    1fa2:	4620      	mov	r0, r4
    1fa4:	4790      	blx	r2
    1fa6:	7225      	strb	r5, [r4, #8]
    1fa8:	2800      	cmp	r0, #0
    1faa:	d072      	beq.n	2092 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    1fac:	2008      	movs	r0, #8
    1fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fb2:	f240 11e1 	movw	r1, #481	; 0x1e1
    1fb6:	2010      	movs	r0, #16
    1fb8:	f7fe fb24 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fbc:	487e      	ldr	r0, [pc, #504]	; (21b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x348>)
    1fbe:	6803      	ldr	r3, [r0, #0]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d078      	beq.n	20b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x246>
    1fc4:	6860      	ldr	r0, [r4, #4]
    1fc6:	4652      	mov	r2, sl
    1fc8:	4659      	mov	r1, fp
    1fca:	9000      	str	r0, [sp, #0]
    1fcc:	4798      	blx	r3
    1fce:	f89b 0000 	ldrb.w	r0, [fp]
    1fd2:	281e      	cmp	r0, #30
    1fd4:	d005      	beq.n	1fe2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    1fd6:	281b      	cmp	r0, #27
    1fd8:	d16d      	bne.n	20b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x246>
    1fda:	f89b 0004 	ldrb.w	r0, [fp, #4]
    1fde:	2800      	cmp	r0, #0
    1fe0:	d069      	beq.n	20b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x246>
    1fe2:	9800      	ldr	r0, [sp, #0]
    1fe4:	2104      	movs	r1, #4
    1fe6:	8900      	ldrh	r0, [r0, #8]
    1fe8:	f7fe fe10 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    1fec:	b320      	cbz	r0, 2038 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    1fee:	f44f 7100 	mov.w	r1, #512	; 0x200
    1ff2:	2010      	movs	r0, #16
    1ff4:	f7fe fb06 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ff8:	6862      	ldr	r2, [r4, #4]
    1ffa:	2a00      	cmp	r2, #0
    1ffc:	d1a4      	bne.n	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    1ffe:	f44f 7103 	mov.w	r1, #524	; 0x20c
    2002:	2010      	movs	r0, #16
    2004:	f7fe fafe 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2008:	486c      	ldr	r0, [pc, #432]	; (21bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34c>)
    200a:	6803      	ldr	r3, [r0, #0]
    200c:	2b00      	cmp	r3, #0
    200e:	d06a      	beq.n	20e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    2010:	6860      	ldr	r0, [r4, #4]
    2012:	4652      	mov	r2, sl
    2014:	4659      	mov	r1, fp
    2016:	4798      	blx	r3
    2018:	f1ba 0f1e 	cmp.w	sl, #30
    201c:	d039      	beq.n	2092 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    201e:	e062      	b.n	20e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    2020:	f003 fdae 	bl	5b80 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    2024:	2800      	cmp	r0, #0
    2026:	bf08      	it	eq
    2028:	f04f 0801 	moveq.w	r8, #1
    202c:	d05b      	beq.n	20e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    202e:	6862      	ldr	r2, [r4, #4]
    2030:	b11a      	cbz	r2, 203a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ca>
    2032:	4659      	mov	r1, fp
    2034:	4620      	mov	r0, r4
    2036:	4790      	blx	r2
    2038:	e02b      	b.n	2092 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    203a:	f240 2133 	movw	r1, #563	; 0x233
    203e:	2010      	movs	r0, #16
    2040:	f7fe fae0 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2044:	6862      	ldr	r2, [r4, #4]
    2046:	2a00      	cmp	r2, #0
    2048:	f47f af7e 	bne.w	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    204c:	f240 213f 	movw	r1, #575	; 0x23f
    2050:	2010      	movs	r0, #16
    2052:	f7fe fad7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2056:	6862      	ldr	r2, [r4, #4]
    2058:	2a00      	cmp	r2, #0
    205a:	f47f af75 	bne.w	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    205e:	f240 214b 	movw	r1, #587	; 0x24b
    2062:	2010      	movs	r0, #16
    2064:	f7fe face 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2068:	6860      	ldr	r0, [r4, #4]
    206a:	b1a8      	cbz	r0, 2098 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x228>
    206c:	8804      	ldrh	r4, [r0, #0]
    206e:	4620      	mov	r0, r4
    2070:	f7fe ff5c 	bl	f2c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2074:	b1a0      	cbz	r0, 20a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x230>
    2076:	f88b 5001 	strb.w	r5, [fp, #1]
    207a:	210f      	movs	r1, #15
    207c:	f88b 1000 	strb.w	r1, [fp]
    2080:	f8ab 4006 	strh.w	r4, [fp, #6]
    2084:	f8ab 7008 	strh.w	r7, [fp, #8]
    2088:	f88b 7004 	strb.w	r7, [fp, #4]
    208c:	2100      	movs	r1, #0
    208e:	f00b fc90 	bl	d9b2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2092:	2004      	movs	r0, #4
    2094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2098:	21ce      	movs	r1, #206	; 0xce
    209a:	2010      	movs	r0, #16
    209c:	f7fe fab2 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20a0:	21ae      	movs	r1, #174	; 0xae
    20a2:	2010      	movs	r0, #16
    20a4:	f7fe faae 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20a8:	6862      	ldr	r2, [r4, #4]
    20aa:	b12a      	cbz	r2, 20b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x248>
    20ac:	4659      	mov	r1, fp
    20ae:	4620      	mov	r0, r4
    20b0:	4790      	blx	r2
    20b2:	f04f 0801 	mov.w	r8, #1
    20b6:	e016      	b.n	20e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    20b8:	f240 2163 	movw	r1, #611	; 0x263
    20bc:	2010      	movs	r0, #16
    20be:	f7fe faa1 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20c2:	6862      	ldr	r2, [r4, #4]
    20c4:	2a00      	cmp	r2, #0
    20c6:	f47f af3f 	bne.w	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    20ca:	f240 216f 	movw	r1, #623	; 0x26f
    20ce:	2010      	movs	r0, #16
    20d0:	f7fe fa98 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20d4:	f88b 5001 	strb.w	r5, [fp, #1]
    20d8:	201f      	movs	r0, #31
    20da:	f88b 0000 	strb.w	r0, [fp]
    20de:	f8d4 0009 	ldr.w	r0, [r4, #9]
    20e2:	f8cb 0004 	str.w	r0, [fp, #4]
    20e6:	7225      	strb	r5, [r4, #8]
    20e8:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
    20ec:	d046      	beq.n	217c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30c>
    20ee:	f1ba 0f14 	cmp.w	sl, #20
    20f2:	e005      	b.n	2100 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x290>
    20f4:	e034      	b.n	2160 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2f0>
    20f6:	e01a      	b.n	212e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2be>
    20f8:	e029      	b.n	214e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2de>
    20fa:	e03a      	b.n	2172 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x302>
    20fc:	e005      	b.n	210a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x29a>
    20fe:	e00d      	b.n	211c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ac>
    2100:	d042      	beq.n	2188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x318>
    2102:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    2106:	d049      	beq.n	219c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x32c>
    2108:	e04d      	b.n	21a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x336>
    210a:	6862      	ldr	r2, [r4, #4]
    210c:	2a00      	cmp	r2, #0
    210e:	f47f af1b 	bne.w	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    2112:	f240 2181 	movw	r1, #641	; 0x281
    2116:	2010      	movs	r0, #16
    2118:	f7fe fa74 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    211c:	6862      	ldr	r2, [r4, #4]
    211e:	2a00      	cmp	r2, #0
    2120:	f47f af12 	bne.w	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    2124:	f240 2196 	movw	r1, #662	; 0x296
    2128:	2010      	movs	r0, #16
    212a:	f7fe fa6b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    212e:	4824      	ldr	r0, [pc, #144]	; (21c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x350>)
    2130:	6802      	ldr	r2, [r0, #0]
    2132:	b122      	cbz	r2, 213e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ce>
    2134:	6860      	ldr	r0, [r4, #4]
    2136:	b128      	cbz	r0, 2144 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2d4>
    2138:	8800      	ldrh	r0, [r0, #0]
    213a:	4659      	mov	r1, fp
    213c:	4790      	blx	r2
    213e:	2002      	movs	r0, #2
    2140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2144:	f240 219f 	movw	r1, #671	; 0x29f
    2148:	2010      	movs	r0, #16
    214a:	f7fe fa5b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    214e:	6862      	ldr	r2, [r4, #4]
    2150:	2a00      	cmp	r2, #0
    2152:	f47f aef9 	bne.w	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    2156:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    215a:	2010      	movs	r0, #16
    215c:	f7fe fa52 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2160:	6862      	ldr	r2, [r4, #4]
    2162:	2a00      	cmp	r2, #0
    2164:	f47f aef0 	bne.w	1f48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    2168:	f240 21b7 	movw	r1, #695	; 0x2b7
    216c:	2010      	movs	r0, #16
    216e:	f7fe fa49 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2172:	f240 21bd 	movw	r1, #701	; 0x2bd
    2176:	2010      	movs	r0, #16
    2178:	f7fe fa44 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    217c:	f7ff fe64 	bl	1e48 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2180:	2800      	cmp	r0, #0
    2182:	f47f ae7d 	bne.w	1e80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    2186:	e00e      	b.n	21a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x336>
    2188:	f89b 000e 	ldrb.w	r0, [fp, #14]
    218c:	f000 0001 	and.w	r0, r0, #1
    2190:	f7ff fe4e 	bl	1e30 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2194:	2800      	cmp	r0, #0
    2196:	f47f ae73 	bne.w	1e80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    219a:	e004      	b.n	21a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x336>
    219c:	f7ff fe5e 	bl	1e5c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    21a0:	2800      	cmp	r0, #0
    21a2:	f47f ae6d 	bne.w	1e80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    21a6:	f1b8 0f00 	cmp.w	r8, #0
    21aa:	f47f ae69 	bne.w	1e80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    21ae:	e770      	b.n	2092 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    21b0:	20000adc 	.word	0x20000adc
    21b4:	20000b0c 	.word	0x20000b0c
    21b8:	2000009c 	.word	0x2000009c
    21bc:	20000098 	.word	0x20000098
    21c0:	20000094 	.word	0x20000094

000021c4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    21c4:	490a      	ldr	r1, [pc, #40]	; (21f0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2c>)
    21c6:	b510      	push	{r4, lr}
    21c8:	7008      	strb	r0, [r1, #0]
    21ca:	480a      	ldr	r0, [pc, #40]	; (21f4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x30>)
    21cc:	2100      	movs	r1, #0
    21ce:	6141      	str	r1, [r0, #20]
    21d0:	6181      	str	r1, [r0, #24]
    21d2:	61c1      	str	r1, [r0, #28]
    21d4:	6201      	str	r1, [r0, #32]
    21d6:	2212      	movs	r2, #18
    21d8:	f00e f9e1 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    21dc:	4806      	ldr	r0, [pc, #24]	; (21f8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x34>)
    21de:	2101      	movs	r1, #1
    21e0:	f100 020c 	add.w	r2, r0, #12
    21e4:	7011      	strb	r1, [r2, #0]
    21e6:	1d01      	adds	r1, r0, #4
    21e8:	6041      	str	r1, [r0, #4]
    21ea:	6001      	str	r1, [r0, #0]
    21ec:	bd10      	pop	{r4, pc}
    21ee:	0000      	.short	0x0000
    21f0:	2000021a 	.word	0x2000021a
    21f4:	20000af8 	.word	0x20000af8
    21f8:	20000b0c 	.word	0x20000b0c

000021fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    21fc:	b538      	push	{r3, r4, r5, lr}
    21fe:	7a03      	ldrb	r3, [r0, #8]
    2200:	f88d 3000 	strb.w	r3, [sp]
    2204:	f89d 3000 	ldrb.w	r3, [sp]
    2208:	b123      	cbz	r3, 2214 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x18>
    220a:	f240 3117 	movw	r1, #791	; 0x317
    220e:	2010      	movs	r0, #16
    2210:	f7fe f9f8 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2214:	b1f0      	cbz	r0, 2254 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x58>
    2216:	6041      	str	r1, [r0, #4]
    2218:	f100 0108 	add.w	r1, r0, #8
    221c:	700a      	strb	r2, [r1, #0]
    221e:	f3ef 8310 	mrs	r3, PRIMASK
    2222:	b672      	cpsid	i
    2224:	f8df c044 	ldr.w	ip, [pc, #68]	; 226c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x70>
    2228:	f8c0 c000 	str.w	ip, [r0]
    222c:	f1ac 0104 	sub.w	r1, ip, #4
    2230:	684a      	ldr	r2, [r1, #4]
    2232:	b152      	cbz	r2, 224a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x4e>
    2234:	7a12      	ldrb	r2, [r2, #8]
    2236:	f88d 2000 	strb.w	r2, [sp]
    223a:	9a00      	ldr	r2, [sp, #0]
    223c:	9200      	str	r2, [sp, #0]
    223e:	f89d 4000 	ldrb.w	r4, [sp]
    2242:	2c01      	cmp	r4, #1
    2244:	bf08      	it	eq
    2246:	f8c1 c000 	streq.w	ip, [r1]
    224a:	680a      	ldr	r2, [r1, #0]
    224c:	6010      	str	r0, [r2, #0]
    224e:	6008      	str	r0, [r1, #0]
    2250:	b933      	cbnz	r3, 2260 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x64>
    2252:	e004      	b.n	225e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x62>
    2254:	f240 21e2 	movw	r1, #738	; 0x2e2
    2258:	2010      	movs	r0, #16
    225a:	f7fe f9d3 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    225e:	b662      	cpsie	i
    2260:	4803      	ldr	r0, [pc, #12]	; (2270 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x74>)
    2262:	7800      	ldrb	r0, [r0, #0]
    2264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2268:	f00a ba78 	b.w	c75c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    226c:	20000b10 	.word	0x20000b10
    2270:	2000021a 	.word	0x2000021a

00002274 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    2274:	4809      	ldr	r0, [pc, #36]	; (229c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x28>)
    2276:	b510      	push	{r4, lr}
    2278:	2100      	movs	r1, #0
    227a:	6141      	str	r1, [r0, #20]
    227c:	6181      	str	r1, [r0, #24]
    227e:	61c1      	str	r1, [r0, #28]
    2280:	6201      	str	r1, [r0, #32]
    2282:	2212      	movs	r2, #18
    2284:	f00e f98b 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2288:	4805      	ldr	r0, [pc, #20]	; (22a0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2c>)
    228a:	2201      	movs	r2, #1
    228c:	f100 010c 	add.w	r1, r0, #12
    2290:	700a      	strb	r2, [r1, #0]
    2292:	1d01      	adds	r1, r0, #4
    2294:	6041      	str	r1, [r0, #4]
    2296:	6001      	str	r1, [r0, #0]
    2298:	bd10      	pop	{r4, pc}
    229a:	0000      	.short	0x0000
    229c:	20000af8 	.word	0x20000af8
    22a0:	20000b0c 	.word	0x20000b0c

000022a4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    22a4:	b470      	push	{r4, r5, r6}
    22a6:	f06f 021f 	mvn.w	r2, #31
    22aa:	0c01      	lsrs	r1, r0, #16
    22ac:	ea02 2590 	and.w	r5, r2, r0, lsr #10
    22b0:	231f      	movs	r3, #31
    22b2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    22b6:	3854      	subs	r0, #84	; 0x54
    22b8:	bf1c      	itt	ne
    22ba:	f5a1 40aa 	subne.w	r0, r1, #21760	; 0x5500
    22be:	f1b0 0055 	subsne.w	r0, r0, #85	; 0x55
    22c2:	d009      	beq.n	22d8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    22c4:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    22c8:	38aa      	subs	r0, #170	; 0xaa
    22ca:	bf1e      	ittt	ne
    22cc:	f5a1 402a 	subne.w	r0, r1, #43520	; 0xaa00
    22d0:	f1b0 00aa 	subsne.w	r0, r0, #170	; 0xaa
    22d4:	2001      	movne	r0, #1
    22d6:	d100      	bne.n	22da <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x36>
    22d8:	2000      	movs	r0, #0
    22da:	f04f 0c00 	mov.w	ip, #0
    22de:	4662      	mov	r2, ip
    22e0:	ea4f 040c 	mov.w	r4, ip
    22e4:	ea8c 0601 	eor.w	r6, ip, r1
    22e8:	43f6      	mvns	r6, r6
    22ea:	4316      	orrs	r6, r2
    22ec:	f1b6 3fff 	cmp.w	r6, #4294967295
    22f0:	d011      	beq.n	2316 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x72>
    22f2:	f005 0601 	and.w	r6, r5, #1
    22f6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    22fa:	ea4c 3cc6 	orr.w	ip, ip, r6, lsl #15
    22fe:	f003 0601 	and.w	r6, r3, #1
    2302:	0852      	lsrs	r2, r2, #1
    2304:	086d      	lsrs	r5, r5, #1
    2306:	085b      	lsrs	r3, r3, #1
    2308:	1c64      	adds	r4, r4, #1
    230a:	ea42 32c6 	orr.w	r2, r2, r6, lsl #15
    230e:	2c16      	cmp	r4, #22
    2310:	d3e8      	bcc.n	22e4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x40>
    2312:	bc70      	pop	{r4, r5, r6}
    2314:	4770      	bx	lr
    2316:	bc70      	pop	{r4, r5, r6}
    2318:	2000      	movs	r0, #0
    231a:	4770      	bx	lr

0000231c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    231c:	b510      	push	{r4, lr}
    231e:	4c0c      	ldr	r4, [pc, #48]	; (2350 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
    2320:	2108      	movs	r1, #8
    2322:	4620      	mov	r0, r4
    2324:	f7fe f9fc 	bl	720 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    2328:	6820      	ldr	r0, [r4, #0]
    232a:	2800      	cmp	r0, #0
    232c:	bf04      	itt	eq
    232e:	6860      	ldreq	r0, [r4, #4]
    2330:	2800      	cmpeq	r0, #0
    2332:	d0f5      	beq.n	2320 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    2334:	4c07      	ldr	r4, [pc, #28]	; (2354 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x38>)
    2336:	bf00      	nop
    2338:	f04f 0108 	mov.w	r1, #8
    233c:	4620      	mov	r0, r4
    233e:	f7fe f9ef 	bl	720 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    2342:	6820      	ldr	r0, [r4, #0]
    2344:	2800      	cmp	r0, #0
    2346:	bf04      	itt	eq
    2348:	6860      	ldreq	r0, [r4, #4]
    234a:	2800      	cmpeq	r0, #0
    234c:	d0f4      	beq.n	2338 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1c>
    234e:	bd10      	pop	{r4, pc}
    2350:	200000a0 	.word	0x200000a0
    2354:	200000a8 	.word	0x200000a8

00002358 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    2358:	4a09      	ldr	r2, [pc, #36]	; (2380 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x28>)
    235a:	480a      	ldr	r0, [pc, #40]	; (2384 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x2c>)
    235c:	e9d2 1300 	ldrd	r1, r3, [r2]
    2360:	4348      	muls	r0, r1
    2362:	404b      	eors	r3, r1
    2364:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
    2368:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
    236c:	6011      	str	r1, [r2, #0]
    236e:	ea4f 60f0 	mov.w	r0, r0, ror #27
    2372:	ea4f 41f3 	mov.w	r1, r3, ror #19
    2376:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    237a:	6051      	str	r1, [r2, #4]
    237c:	4770      	bx	lr
    237e:	0000      	.short	0x0000
    2380:	200000a0 	.word	0x200000a0
    2384:	9e3779bb 	.word	0x9e3779bb

00002388 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2388:	4a09      	ldr	r2, [pc, #36]	; (23b0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x28>)
    238a:	480a      	ldr	r0, [pc, #40]	; (23b4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x2c>)
    238c:	e9d2 1300 	ldrd	r1, r3, [r2]
    2390:	4348      	muls	r0, r1
    2392:	404b      	eors	r3, r1
    2394:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
    2398:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
    239c:	6011      	str	r1, [r2, #0]
    239e:	ea4f 60f0 	mov.w	r0, r0, ror #27
    23a2:	ea4f 41f3 	mov.w	r1, r3, ror #19
    23a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    23aa:	6051      	str	r1, [r2, #4]
    23ac:	4770      	bx	lr
    23ae:	0000      	.short	0x0000
    23b0:	200000a8 	.word	0x200000a8
    23b4:	9e3779bb 	.word	0x9e3779bb

000023b8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    23b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23bc:	4604      	mov	r4, r0
    23be:	7c80      	ldrb	r0, [r0, #18]
    23c0:	2800      	cmp	r0, #0
    23c2:	bf16      	itet	ne
    23c4:	2802      	cmpne	r0, #2
    23c6:	2000      	moveq	r0, #0
    23c8:	2001      	movne	r0, #1
    23ca:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    23ce:	b318      	cbz	r0, 2418 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x60>
    23d0:	7e60      	ldrb	r0, [r4, #25]
    23d2:	b368      	cbz	r0, 2430 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
    23d4:	f8d4 0013 	ldr.w	r0, [r4, #19]
    23d8:	f8c4 0069 	str.w	r0, [r4, #105]	; 0x69
    23dc:	f8b4 0017 	ldrh.w	r0, [r4, #23]
    23e0:	f8a4 006d 	strh.w	r0, [r4, #109]	; 0x6d
    23e4:	7ca0      	ldrb	r0, [r4, #18]
    23e6:	2802      	cmp	r0, #2
    23e8:	bf16      	itet	ne
    23ea:	2803      	cmpne	r0, #3
    23ec:	2101      	moveq	r1, #1
    23ee:	2100      	movne	r1, #0
    23f0:	76a1      	strb	r1, [r4, #26]
    23f2:	f04f 0008 	mov.w	r0, #8
    23f6:	76e0      	strb	r0, [r4, #27]
    23f8:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    23fc:	f04f 0701 	mov.w	r7, #1
    2400:	f04f 0800 	mov.w	r8, #0
    2404:	2801      	cmp	r0, #1
    2406:	bf04      	itt	eq
    2408:	f894 206e 	ldrbeq.w	r2, [r4, #110]	; 0x6e
    240c:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    2410:	d01b      	beq.n	244a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    2412:	2801      	cmp	r0, #1
    2414:	d011      	beq.n	243a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    2416:	e016      	b.n	2446 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8e>
    2418:	f104 0169 	add.w	r1, r4, #105	; 0x69
    241c:	2000      	movs	r0, #0
    241e:	f7ff f809 	bl	1434 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    2422:	2800      	cmp	r0, #0
    2424:	d1de      	bne.n	23e4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2c>
    2426:	f240 41b9 	movw	r1, #1209	; 0x4b9
    242a:	202d      	movs	r0, #45	; 0x2d
    242c:	f7fe f8ea 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2430:	f240 41bd 	movw	r1, #1213	; 0x4bd
    2434:	202d      	movs	r0, #45	; 0x2d
    2436:	f7fe f8e5 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    243a:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    243e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    2442:	2840      	cmp	r0, #64	; 0x40
    2444:	d001      	beq.n	244a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    2446:	2000      	movs	r0, #0
    2448:	e000      	b.n	244c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x94>
    244a:	2001      	movs	r0, #1
    244c:	7720      	strb	r0, [r4, #28]
    244e:	b131      	cbz	r1, 245e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xa6>
    2450:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    2454:	f104 0170 	add.w	r1, r4, #112	; 0x70
    2458:	f7ff f94c 	bl	16f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    245c:	76e0      	strb	r0, [r4, #27]
    245e:	f7ff f977 	bl	1750 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    2462:	4937      	ldr	r1, [pc, #220]	; (2540 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x188>)
    2464:	fba0 6501 	umull	r6, r5, r0, r1
    2468:	f008 ffc0 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    246c:	1980      	adds	r0, r0, r6
    246e:	4169      	adcs	r1, r5
    2470:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    2474:	2600      	movs	r6, #0
    2476:	7ee0      	ldrb	r0, [r4, #27]
    2478:	f7ff f870 	bl	155c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    247c:	4605      	mov	r5, r0
    247e:	7ea0      	ldrb	r0, [r4, #26]
    2480:	2800      	cmp	r0, #0
    2482:	bf18      	it	ne
    2484:	2d00      	cmpne	r5, #0
    2486:	d003      	beq.n	2490 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xd8>
    2488:	7ee0      	ldrb	r0, [r4, #27]
    248a:	f7ff f85b 	bl	1544 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    248e:	b158      	cbz	r0, 24a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf0>
    2490:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
    2494:	2800      	cmp	r0, #0
    2496:	bf1c      	itt	ne
    2498:	7f20      	ldrbne	r0, [r4, #28]
    249a:	2800      	cmpne	r0, #0
    249c:	d01d      	beq.n	24da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    249e:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    24a2:	2801      	cmp	r0, #1
    24a4:	d00e      	beq.n	24c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10c>
    24a6:	e013      	b.n	24d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x118>
    24a8:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    24ac:	4632      	mov	r2, r6
    24ae:	f104 0169 	add.w	r1, r4, #105	; 0x69
    24b2:	4628      	mov	r0, r5
    24b4:	f00b fd83 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    24b8:	7ee1      	ldrb	r1, [r4, #27]
    24ba:	f104 0069 	add.w	r0, r4, #105	; 0x69
    24be:	f7ff f859 	bl	1574 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    24c2:	e00a      	b.n	24da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    24c4:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    24c8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    24cc:	2840      	cmp	r0, #64	; 0x40
    24ce:	d02f      	beq.n	2530 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>
    24d0:	4641      	mov	r1, r8
    24d2:	f104 0069 	add.w	r0, r4, #105	; 0x69
    24d6:	f00b fd61 	bl	df9c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    24da:	f884 8076 	strb.w	r8, [r4, #118]	; 0x76
    24de:	78a0      	ldrb	r0, [r4, #2]
    24e0:	f010 0f04 	tst.w	r0, #4
    24e4:	bf08      	it	eq
    24e6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    24ea:	2600      	movs	r6, #0
    24ec:	7ee0      	ldrb	r0, [r4, #27]
    24ee:	f7ff f87b 	bl	15e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    24f2:	0005      	movs	r5, r0
    24f4:	bf08      	it	eq
    24f6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    24fa:	2110      	movs	r1, #16
    24fc:	f7ff fc2e 	bl	1d5c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    2500:	2800      	cmp	r0, #0
    2502:	bf18      	it	ne
    2504:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    2508:	f884 7076 	strb.w	r7, [r4, #118]	; 0x76
    250c:	4632      	mov	r2, r6
    250e:	f104 0177 	add.w	r1, r4, #119	; 0x77
    2512:	4628      	mov	r0, r5
    2514:	f00b fd53 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    2518:	f104 0177 	add.w	r1, r4, #119	; 0x77
    251c:	4c09      	ldr	r4, [pc, #36]	; (2544 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x18c>)
    251e:	68a0      	ldr	r0, [r4, #8]
    2520:	f00c f81b 	bl	e55a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    2524:	68a0      	ldr	r0, [r4, #8]
    2526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    252a:	2101      	movs	r1, #1
    252c:	f00c b81c 	b.w	e568 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    2530:	f7fe ffd8 	bl	14e4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    2534:	4632      	mov	r2, r6
    2536:	f104 0169 	add.w	r1, r4, #105	; 0x69
    253a:	f00b fd40 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    253e:	e7cc      	b.n	24da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    2540:	000f4240 	.word	0x000f4240
    2544:	200000b0 	.word	0x200000b0

00002548 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    2548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    254a:	4604      	mov	r4, r0
    254c:	460d      	mov	r5, r1
    254e:	3030      	adds	r0, #48	; 0x30
    2550:	f00c fa7f 	bl	ea52 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    2554:	f8b4 c002 	ldrh.w	ip, [r4, #2]
    2558:	f3cc 1100 	ubfx	r1, ip, #4, #1
    255c:	b129      	cbz	r1, 256a <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x22>
    255e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2562:	2228      	movs	r2, #40	; 0x28
    2564:	4661      	mov	r1, ip
    2566:	f001 ba97 	b.w	3a98 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    256a:	f3cc 0140 	ubfx	r1, ip, #1, #1
    256e:	2900      	cmp	r1, #0
    2570:	bf14      	ite	ne
    2572:	f8b4 605c 	ldrhne.w	r6, [r4, #92]	; 0x5c
    2576:	f8b4 6054 	ldrheq.w	r6, [r4, #84]	; 0x54
    257a:	7921      	ldrb	r1, [r4, #4]
    257c:	4a1d      	ldr	r2, [pc, #116]	; (25f4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xac>)
    257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2582:	2908      	cmp	r1, #8
    2584:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    2588:	f202 32e7 	addw	r2, r2, #999	; 0x3e7
    258c:	fbb2 f7f3 	udiv	r7, r2, r3
    2590:	bf08      	it	eq
    2592:	2340      	moveq	r3, #64	; 0x40
    2594:	d00a      	beq.n	25ac <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x64>
    2596:	2904      	cmp	r1, #4
    2598:	bf08      	it	eq
    259a:	2310      	moveq	r3, #16
    259c:	d006      	beq.n	25ac <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x64>
    259e:	2902      	cmp	r1, #2
    25a0:	bf07      	ittee	eq
    25a2:	2304      	moveq	r3, #4
    25a4:	2212      	moveq	r2, #18
    25a6:	2308      	movne	r3, #8
    25a8:	2219      	movne	r2, #25
    25aa:	e000      	b.n	25ae <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x66>
    25ac:	2214      	movs	r2, #20
    25ae:	fb13 f202 	smulbb	r2, r3, r2
    25b2:	2908      	cmp	r1, #8
    25b4:	bf08      	it	eq
    25b6:	2340      	moveq	r3, #64	; 0x40
    25b8:	d019      	beq.n	25ee <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa6>
    25ba:	2904      	cmp	r1, #4
    25bc:	bf08      	it	eq
    25be:	232e      	moveq	r3, #46	; 0x2e
    25c0:	d015      	beq.n	25ee <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa6>
    25c2:	2300      	movs	r3, #0
    25c4:	2902      	cmp	r1, #2
    25c6:	bf0c      	ite	eq
    25c8:	2118      	moveq	r1, #24
    25ca:	2128      	movne	r1, #40	; 0x28
    25cc:	4419      	add	r1, r3
    25ce:	4411      	add	r1, r2
    25d0:	fb11 7100 	smlabb	r1, r1, r0, r7
    25d4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    25d8:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
    25dc:	4401      	add	r1, r0
    25de:	f8cd c000 	str.w	ip, [sp]
    25e2:	7962      	ldrb	r2, [r4, #5]
    25e4:	462b      	mov	r3, r5
    25e6:	4630      	mov	r0, r6
    25e8:	f000 fef0 	bl	33cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    25ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25ee:	f44f 71a8 	mov.w	r1, #336	; 0x150
    25f2:	e7eb      	b.n	25cc <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x84>
    25f4:	00003a4c 	.word	0x00003a4c

000025f8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    25f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25fc:	4680      	mov	r8, r0
    25fe:	b08f      	sub	sp, #60	; 0x3c
    2600:	460c      	mov	r4, r1
    2602:	69c2      	ldr	r2, [r0, #28]
    2604:	e9d8 0105 	ldrd	r0, r1, [r8, #20]
    2608:	e9d8 7600 	ldrd	r7, r6, [r8]
    260c:	e9d8 a903 	ldrd	sl, r9, [r8, #12]
    2610:	9205      	str	r2, [sp, #20]
    2612:	e9cd 0103 	strd	r0, r1, [sp, #12]
    2616:	e9d8 0108 	ldrd	r0, r1, [r8, #32]
    261a:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    261e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    2622:	9208      	str	r2, [sp, #32]
    2624:	a801      	add	r0, sp, #4
    2626:	f00c fa8c 	bl	eb42 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    262a:	7aa0      	ldrb	r0, [r4, #10]
    262c:	f360 4917 	bfi	r9, r0, #16, #8
    2630:	7820      	ldrb	r0, [r4, #0]
    2632:	f360 0707 	bfi	r7, r0, #0, #8
    2636:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    263a:	f8ad 0000 	strh.w	r0, [sp]
    263e:	f89d 0000 	ldrb.w	r0, [sp]
    2642:	f000 0101 	and.w	r1, r0, #1
    2646:	f3c0 0240 	ubfx	r2, r0, #1, #1
    264a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    264e:	f3c0 0280 	ubfx	r2, r0, #2, #1
    2652:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    2656:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    265a:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    265e:	f3c0 1200 	ubfx	r2, r0, #4, #1
    2662:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    2666:	f3c0 1240 	ubfx	r2, r0, #5, #1
    266a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    266e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2672:	ea41 1b80 	orr.w	fp, r1, r0, lsl #6
    2676:	7d20      	ldrb	r0, [r4, #20]
    2678:	f36b 471f 	bfi	r7, fp, #16, #16
    267c:	2801      	cmp	r0, #1
    267e:	bf18      	it	ne
    2680:	2802      	cmpne	r0, #2
    2682:	d003      	beq.n	268c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
    2684:	2803      	cmp	r0, #3
    2686:	bf08      	it	eq
    2688:	2008      	moveq	r0, #8
    268a:	d10e      	bne.n	26aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb2>
    268c:	7861      	ldrb	r1, [r4, #1]
    268e:	f360 0607 	bfi	r6, r0, #0, #8
    2692:	f011 0f10 	tst.w	r1, #16
    2696:	d10f      	bne.n	26b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc0>
    2698:	7da1      	ldrb	r1, [r4, #22]
    269a:	2901      	cmp	r1, #1
    269c:	bf18      	it	ne
    269e:	2902      	cmpne	r1, #2
    26a0:	d008      	beq.n	26b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    26a2:	2903      	cmp	r1, #3
    26a4:	bf08      	it	eq
    26a6:	2108      	moveq	r1, #8
    26a8:	d004      	beq.n	26b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    26aa:	f240 21ea 	movw	r1, #746	; 0x2ea
    26ae:	2006      	movs	r0, #6
    26b0:	f7fd ffa8 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    26b4:	f361 260f 	bfi	r6, r1, #8, #8
    26b8:	f3ca 4107 	ubfx	r1, sl, #16, #8
    26bc:	2901      	cmp	r1, #1
    26be:	d008      	beq.n	26d2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xda>
    26c0:	7a61      	ldrb	r1, [r4, #9]
    26c2:	a801      	add	r0, sp, #4
    26c4:	f00c fa18 	bl	eaf8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    26c8:	7d20      	ldrb	r0, [r4, #20]
    26ca:	2101      	movs	r1, #1
    26cc:	2802      	cmp	r0, #2
    26ce:	d10f      	bne.n	26f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf8>
    26d0:	e00b      	b.n	26ea <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf2>
    26d2:	2104      	movs	r1, #4
    26d4:	2808      	cmp	r0, #8
    26d6:	bf08      	it	eq
    26d8:	f361 0607 	bfieq	r6, r1, #0, #8
    26dc:	f3c6 2007 	ubfx	r0, r6, #8, #8
    26e0:	2808      	cmp	r0, #8
    26e2:	bf08      	it	eq
    26e4:	f361 260f 	bfieq	r6, r1, #8, #8
    26e8:	e7ea      	b.n	26c0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc8>
    26ea:	7d60      	ldrb	r0, [r4, #21]
    26ec:	1c40      	adds	r0, r0, #1
    26ee:	b2c1      	uxtb	r1, r0
    26f0:	7ea0      	ldrb	r0, [r4, #26]
    26f2:	1c40      	adds	r0, r0, #1
    26f4:	b2c2      	uxtb	r2, r0
    26f6:	a801      	add	r0, sp, #4
    26f8:	f00c f994 	bl	ea24 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    26fc:	0c38      	lsrs	r0, r7, #16
    26fe:	f010 0f08 	tst.w	r0, #8
    2702:	f04f 0500 	mov.w	r5, #0
    2706:	d124      	bne.n	2752 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15a>
    2708:	a801      	add	r0, sp, #4
    270a:	f00c f9a2 	bl	ea52 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    270e:	7861      	ldrb	r1, [r4, #1]
    2710:	f011 0f10 	tst.w	r1, #16
    2714:	d07f      	beq.n	2816 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x21e>
    2716:	2228      	movs	r2, #40	; 0x28
    2718:	4659      	mov	r1, fp
    271a:	f001 f9bd 	bl	3a98 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    271e:	bf00      	nop
    2720:	f240 2171 	movw	r1, #625	; 0x271
    2724:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    2728:	fbb0 f0f1 	udiv	r0, r0, r1
    272c:	fb00 f501 	mul.w	r5, r0, r1
    2730:	f8d4 0002 	ldr.w	r0, [r4, #2]
    2734:	f240 2271 	movw	r2, #625	; 0x271
    2738:	0a00      	lsrs	r0, r0, #8
    273a:	4341      	muls	r1, r0
    273c:	f8d4 0005 	ldr.w	r0, [r4, #5]
    2740:	0a00      	lsrs	r0, r0, #8
    2742:	4350      	muls	r0, r2
    2744:	428d      	cmp	r5, r1
    2746:	bf98      	it	ls
    2748:	460d      	movls	r5, r1
    274a:	d902      	bls.n	2752 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15a>
    274c:	4285      	cmp	r5, r0
    274e:	bf88      	it	hi
    2750:	4605      	movhi	r5, r0
    2752:	7ca0      	ldrb	r0, [r4, #18]
    2754:	f360 290f 	bfi	r9, r0, #8, #8
    2758:	7e20      	ldrb	r0, [r4, #24]
    275a:	2801      	cmp	r0, #1
    275c:	bf18      	it	ne
    275e:	2000      	movne	r0, #0
    2760:	f360 0a07 	bfi	sl, r0, #0, #8
    2764:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
    2768:	f00b fae9 	bl	dd3e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    276c:	4683      	mov	fp, r0
    276e:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
    2772:	f00b fb90 	bl	de96 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    2776:	4583      	cmp	fp, r0
    2778:	bf28      	it	cs
    277a:	4658      	movcs	r0, fp
    277c:	b198      	cbz	r0, 27a6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1ae>
    277e:	a901      	add	r1, sp, #4
    2780:	910a      	str	r1, [sp, #40]	; 0x28
    2782:	0c39      	lsrs	r1, r7, #16
    2784:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    2788:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
    278c:	0a31      	lsrs	r1, r6, #8
    278e:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    2792:	950c      	str	r5, [sp, #48]	; 0x30
    2794:	a90a      	add	r1, sp, #40	; 0x28
    2796:	f001 f863 	bl	3860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x924>
    279a:	2800      	cmp	r0, #0
    279c:	bf02      	ittt	eq
    279e:	2045      	moveq	r0, #69	; 0x45
    27a0:	b00f      	addeq	sp, #60	; 0x3c
    27a2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27a6:	f8c8 a00c 	str.w	sl, [r8, #12]
    27aa:	f8c8 7000 	str.w	r7, [r8]
    27ae:	e9c8 6501 	strd	r6, r5, [r8, #4]
    27b2:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    27b6:	9a05      	ldr	r2, [sp, #20]
    27b8:	f8c8 9010 	str.w	r9, [r8, #16]
    27bc:	f8c8 201c 	str.w	r2, [r8, #28]
    27c0:	e9c8 0105 	strd	r0, r1, [r8, #20]
    27c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    27c8:	9a08      	ldr	r2, [sp, #32]
    27ca:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
    27ce:	e9c8 0108 	strd	r0, r1, [r8, #32]
    27d2:	9801      	ldr	r0, [sp, #4]
    27d4:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
    27d8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    27dc:	f8a8 0034 	strh.w	r0, [r8, #52]	; 0x34
    27e0:	7ae0      	ldrb	r0, [r4, #11]
    27e2:	2800      	cmp	r0, #0
    27e4:	bf16      	itet	ne
    27e6:	2802      	cmpne	r0, #2
    27e8:	2000      	moveq	r0, #0
    27ea:	2001      	movne	r0, #1
    27ec:	f888 006f 	strb.w	r0, [r8, #111]	; 0x6f
    27f0:	68e0      	ldr	r0, [r4, #12]
    27f2:	f8c8 0070 	str.w	r0, [r8, #112]	; 0x70
    27f6:	8a20      	ldrh	r0, [r4, #16]
    27f8:	f8a8 0074 	strh.w	r0, [r8, #116]	; 0x74
    27fc:	7de0      	ldrb	r0, [r4, #23]
    27fe:	f898 1046 	ldrb.w	r1, [r8, #70]	; 0x46
    2802:	f360 1107 	bfi	r1, r0, #4, #4
    2806:	f888 1046 	strb.w	r1, [r8, #70]	; 0x46
    280a:	b00f      	add	sp, #60	; 0x3c
    280c:	f04f 0000 	mov.w	r0, #0
    2810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2814:	e7ff      	b.n	2816 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x21e>
    2816:	4603      	mov	r3, r0
    2818:	b2f0      	uxtb	r0, r6
    281a:	4921      	ldr	r1, [pc, #132]	; (28a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a8>)
    281c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2820:	2808      	cmp	r0, #8
    2822:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    2826:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    282a:	fbb1 f2f2 	udiv	r2, r1, r2
    282e:	bf08      	it	eq
    2830:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    2834:	d00d      	beq.n	2852 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25a>
    2836:	2804      	cmp	r0, #4
    2838:	bf08      	it	eq
    283a:	f04f 0c10 	moveq.w	ip, #16
    283e:	d008      	beq.n	2852 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25a>
    2840:	2802      	cmp	r0, #2
    2842:	bf07      	ittee	eq
    2844:	f04f 0c04 	moveq.w	ip, #4
    2848:	2112      	moveq	r1, #18
    284a:	f04f 0c08 	movne.w	ip, #8
    284e:	2119      	movne	r1, #25
    2850:	e000      	b.n	2854 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25c>
    2852:	2114      	movs	r1, #20
    2854:	fb1c f101 	smulbb	r1, ip, r1
    2858:	2808      	cmp	r0, #8
    285a:	bf08      	it	eq
    285c:	2540      	moveq	r5, #64	; 0x40
    285e:	d01b      	beq.n	2898 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a0>
    2860:	2804      	cmp	r0, #4
    2862:	bf08      	it	eq
    2864:	252e      	moveq	r5, #46	; 0x2e
    2866:	d017      	beq.n	2898 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a0>
    2868:	2802      	cmp	r0, #2
    286a:	bf0c      	ite	eq
    286c:	2018      	moveq	r0, #24
    286e:	2028      	movne	r0, #40	; 0x28
    2870:	4428      	add	r0, r5
    2872:	4408      	add	r0, r1
    2874:	fb10 2003 	smlabb	r0, r0, r3, r2
    2878:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    287c:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    2880:	1845      	adds	r5, r0, r1
    2882:	f7fe fc25 	bl	10d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    2886:	0c39      	lsrs	r1, r7, #16
    2888:	9100      	str	r1, [sp, #0]
    288a:	f3c6 2207 	ubfx	r2, r6, #8, #8
    288e:	2301      	movs	r3, #1
    2890:	4629      	mov	r1, r5
    2892:	f000 fd9b 	bl	33cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    2896:	e743      	b.n	2720 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x128>
    2898:	f44f 70a8 	mov.w	r0, #336	; 0x150
    289c:	e7e8      	b.n	2870 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x278>
    289e:	0000      	.short	0x0000
    28a0:	00003a4c 	.word	0x00003a4c

000028a4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    28a4:	4a11      	ldr	r2, [pc, #68]	; (28ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x48>)
    28a6:	b510      	push	{r4, lr}
    28a8:	2100      	movs	r1, #0
    28aa:	7011      	strb	r1, [r2, #0]
    28ac:	4c10      	ldr	r4, [pc, #64]	; (28f0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x4c>)
    28ae:	60a0      	str	r0, [r4, #8]
    28b0:	7810      	ldrb	r0, [r2, #0]
    28b2:	b120      	cbz	r0, 28be <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    28b4:	f240 312d 	movw	r1, #813	; 0x32d
    28b8:	202d      	movs	r0, #45	; 0x2d
    28ba:	f7fd fea3 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28be:	6011      	str	r1, [r2, #0]
    28c0:	6051      	str	r1, [r2, #4]
    28c2:	6091      	str	r1, [r2, #8]
    28c4:	60d1      	str	r1, [r2, #12]
    28c6:	6111      	str	r1, [r2, #16]
    28c8:	6151      	str	r1, [r2, #20]
    28ca:	6191      	str	r1, [r2, #24]
    28cc:	61d1      	str	r1, [r2, #28]
    28ce:	6211      	str	r1, [r2, #32]
    28d0:	f004 fe42 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    28d4:	f004 fd32 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    28d8:	68e0      	ldr	r0, [r4, #12]
    28da:	2800      	cmp	r0, #0
    28dc:	bf18      	it	ne
    28de:	bd10      	popne	{r4, pc}
    28e0:	f44f 714c 	mov.w	r1, #816	; 0x330
    28e4:	202d      	movs	r0, #45	; 0x2d
    28e6:	f7fd fe8d 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28ea:	0000      	.short	0x0000
    28ec:	20000b1c 	.word	0x20000b1c
    28f0:	200000b0 	.word	0x200000b0

000028f4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    28f4:	4902      	ldr	r1, [pc, #8]	; (2900 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    28f6:	4801      	ldr	r0, [pc, #4]	; (28fc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    28f8:	60c8      	str	r0, [r1, #12]
    28fa:	4770      	bx	lr
    28fc:	00003a80 	.word	0x00003a80
    2900:	200000b0 	.word	0x200000b0

00002904 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    2904:	4902      	ldr	r1, [pc, #8]	; (2910 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    2906:	6048      	str	r0, [r1, #4]
    2908:	68c9      	ldr	r1, [r1, #12]
    290a:	6809      	ldr	r1, [r1, #0]
    290c:	4708      	bx	r1
    290e:	0000      	.short	0x0000
    2910:	200000b0 	.word	0x200000b0

00002914 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    2914:	490b      	ldr	r1, [pc, #44]	; (2944 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x30>)
    2916:	b510      	push	{r4, lr}
    2918:	7808      	ldrb	r0, [r1, #0]
    291a:	2800      	cmp	r0, #0
    291c:	bf18      	it	ne
    291e:	240c      	movne	r4, #12
    2920:	d001      	beq.n	2926 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    2922:	4620      	mov	r0, r4
    2924:	bd10      	pop	{r4, pc}
    2926:	2400      	movs	r4, #0
    2928:	600c      	str	r4, [r1, #0]
    292a:	604c      	str	r4, [r1, #4]
    292c:	608c      	str	r4, [r1, #8]
    292e:	60cc      	str	r4, [r1, #12]
    2930:	610c      	str	r4, [r1, #16]
    2932:	614c      	str	r4, [r1, #20]
    2934:	618c      	str	r4, [r1, #24]
    2936:	61cc      	str	r4, [r1, #28]
    2938:	620c      	str	r4, [r1, #32]
    293a:	f004 fe0d 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    293e:	f004 fcfd 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    2942:	e7ee      	b.n	2922 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    2944:	20000b1c 	.word	0x20000b1c

00002948 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    2948:	4905      	ldr	r1, [pc, #20]	; (2960 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    294a:	b510      	push	{r4, lr}
    294c:	7809      	ldrb	r1, [r1, #0]
    294e:	2901      	cmp	r1, #1
    2950:	bf1c      	itt	ne
    2952:	2000      	movne	r0, #0
    2954:	bd10      	popne	{r4, pc}
    2956:	f000 ff19 	bl	378c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x850>
    295a:	2000      	movs	r0, #0
    295c:	bd10      	pop	{r4, pc}
    295e:	0000      	.short	0x0000
    2960:	20000b1c 	.word	0x20000b1c

00002964 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    2964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2968:	4604      	mov	r4, r0
    296a:	7880      	ldrb	r0, [r0, #2]
    296c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2970:	b158      	cbz	r0, 298a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x26>
    2972:	233c      	movs	r3, #60	; 0x3c
    2974:	22ff      	movs	r2, #255	; 0xff
    2976:	4620      	mov	r0, r4
    2978:	6a21      	ldr	r1, [r4, #32]
    297a:	f000 ffdd 	bl	3938 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9fc>
    297e:	2211      	movs	r2, #17
    2980:	491e      	ldr	r1, [pc, #120]	; (29fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x98>)
    2982:	f104 0086 	add.w	r0, r4, #134	; 0x86
    2986:	f7ff fc39 	bl	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    298a:	78a0      	ldrb	r0, [r4, #2]
    298c:	f04f 0500 	mov.w	r5, #0
    2990:	f010 0f01 	tst.w	r0, #1
    2994:	d020      	beq.n	29d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    2996:	6a20      	ldr	r0, [r4, #32]
    2998:	263c      	movs	r6, #60	; 0x3c
    299a:	8807      	ldrh	r7, [r0, #0]
    299c:	f004 fc16 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    29a0:	b9a8      	cbnz	r0, 29ce <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6a>
    29a2:	7821      	ldrb	r1, [r4, #0]
    29a4:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
    29a8:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
    29ac:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
    29b0:	7b60      	ldrb	r0, [r4, #13]
    29b2:	b910      	cbnz	r0, 29ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x56>
    29b4:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
    29b8:	e003      	b.n	29c2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5e>
    29ba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    29be:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    29c2:	2216      	movs	r2, #22
    29c4:	490e      	ldr	r1, [pc, #56]	; (2a00 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x9c>)
    29c6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    29ca:	f7ff fc17 	bl	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    29ce:	2001      	movs	r0, #1
    29d0:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    29d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29d8:	f64f 77ff 	movw	r7, #65535	; 0xffff
    29dc:	263c      	movs	r6, #60	; 0x3c
    29de:	f004 fbf5 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    29e2:	2800      	cmp	r0, #0
    29e4:	d1f3      	bne.n	29ce <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6a>
    29e6:	7821      	ldrb	r1, [r4, #0]
    29e8:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
    29ec:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
    29f0:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
    29f4:	7b60      	ldrb	r0, [r4, #13]
    29f6:	2800      	cmp	r0, #0
    29f8:	d1df      	bne.n	29ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x56>
    29fa:	e7db      	b.n	29b4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x50>
    29fc:	0000e9a1 	.word	0x0000e9a1
    2a00:	0000e949 	.word	0x0000e949
    2a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a08:	4e73      	ldr	r6, [pc, #460]	; (2bd8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x274>)
    2a0a:	000f      	movs	r7, r1
    2a0c:	4604      	mov	r4, r0
    2a0e:	d027      	beq.n	2a60 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xfc>
    2a10:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2a14:	f00c f872 	bl	eafc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    2a18:	b9c0      	cbnz	r0, 2a4c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xe8>
    2a1a:	78a0      	ldrb	r0, [r4, #2]
    2a1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2a20:	2800      	cmp	r0, #0
    2a22:	d038      	beq.n	2a96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x132>
    2a24:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2a28:	f00c f813 	bl	ea52 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    2a2c:	4605      	mov	r5, r0
    2a2e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2a32:	f00c f863 	bl	eafc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    2a36:	1a28      	subs	r0, r5, r0
    2a38:	b2c0      	uxtb	r0, r0
    2a3a:	f00c f88f 	bl	eb5c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    2a3e:	6871      	ldr	r1, [r6, #4]
    2a40:	4408      	add	r0, r1
    2a42:	6070      	str	r0, [r6, #4]
    2a44:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2a48:	f00c f883 	bl	eb52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    2a4c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2a50:	f00c f80f 	bl	ea72 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    2a54:	f005 fc1a 	bl	828c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2a58:	7921      	ldrb	r1, [r4, #4]
    2a5a:	2025      	movs	r0, #37	; 0x25
    2a5c:	f005 fbe2 	bl	8224 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2a60:	4d5e      	ldr	r5, [pc, #376]	; (2bdc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x278>)
    2a62:	f894 8076 	ldrb.w	r8, [r4, #118]	; 0x76
    2a66:	2100      	movs	r1, #0
    2a68:	68a8      	ldr	r0, [r5, #8]
    2a6a:	8001      	strh	r1, [r0, #0]
    2a6c:	7801      	ldrb	r1, [r0, #0]
    2a6e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    2a72:	7001      	strb	r1, [r0, #0]
    2a74:	8861      	ldrh	r1, [r4, #2]
    2a76:	2913      	cmp	r1, #19
    2a78:	d02d      	beq.n	2ad6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x172>
    2a7a:	dc11      	bgt.n	2aa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>
    2a7c:	2910      	cmp	r1, #16
    2a7e:	bf08      	it	eq
    2a80:	2102      	moveq	r1, #2
    2a82:	d03d      	beq.n	2b00 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x19c>
    2a84:	2912      	cmp	r1, #18
    2a86:	bf08      	it	eq
    2a88:	2106      	moveq	r1, #6
    2a8a:	d039      	beq.n	2b00 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x19c>
    2a8c:	f240 6172 	movw	r1, #1650	; 0x672
    2a90:	202d      	movs	r0, #45	; 0x2d
    2a92:	f7fd fdb7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a96:	4620      	mov	r0, r4
    2a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a9c:	f000 be76 	b.w	378c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x850>
    2aa0:	2915      	cmp	r1, #21
    2aa2:	bf18      	it	ne
    2aa4:	291d      	cmpne	r1, #29
    2aa6:	d1f1      	bne.n	2a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x128>
    2aa8:	f04f 0101 	mov.w	r1, #1
    2aac:	f00b fd33 	bl	e516 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2ab0:	68a8      	ldr	r0, [r5, #8]
    2ab2:	f1b8 0f00 	cmp.w	r8, #0
    2ab6:	7801      	ldrb	r1, [r0, #0]
    2ab8:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    2abc:	f041 0120 	orr.w	r1, r1, #32
    2ac0:	7001      	strb	r1, [r0, #0]
    2ac2:	d013      	beq.n	2aec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x188>
    2ac4:	f104 0177 	add.w	r1, r4, #119	; 0x77
    2ac8:	f00b fd47 	bl	e55a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    2acc:	2101      	movs	r1, #1
    2ace:	68a8      	ldr	r0, [r5, #8]
    2ad0:	f00b fd4a 	bl	e568 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    2ad4:	e016      	b.n	2b04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1a0>
    2ad6:	2100      	movs	r1, #0
    2ad8:	f00b fd1d 	bl	e516 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2adc:	68a8      	ldr	r0, [r5, #8]
    2ade:	7801      	ldrb	r1, [r0, #0]
    2ae0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    2ae4:	f041 0120 	orr.w	r1, r1, #32
    2ae8:	7001      	strb	r1, [r0, #0]
    2aea:	e00b      	b.n	2b04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1a0>
    2aec:	f104 0170 	add.w	r1, r4, #112	; 0x70
    2af0:	f00b fd33 	bl	e55a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    2af4:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    2af8:	68a8      	ldr	r0, [r5, #8]
    2afa:	f00b fd35 	bl	e568 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    2afe:	e001      	b.n	2b04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1a0>
    2b00:	f00b fd09 	bl	e516 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2b04:	46a0      	mov	r8, r4
    2b06:	f104 0169 	add.w	r1, r4, #105	; 0x69
    2b0a:	68a8      	ldr	r0, [r5, #8]
    2b0c:	f00b fd35 	bl	e57a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    2b10:	f898 1068 	ldrb.w	r1, [r8, #104]	; 0x68
    2b14:	68a8      	ldr	r0, [r5, #8]
    2b16:	f00b fd37 	bl	e588 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    2b1a:	8860      	ldrh	r0, [r4, #2]
    2b1c:	281d      	cmp	r0, #29
    2b1e:	bf18      	it	ne
    2b20:	2815      	cmpne	r0, #21
    2b22:	d005      	beq.n	2b30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1cc>
    2b24:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    2b28:	6d21      	ldr	r1, [r4, #80]	; 0x50
    2b2a:	68a8      	ldr	r0, [r5, #8]
    2b2c:	f00b fce3 	bl	e4f6 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    2b30:	68a8      	ldr	r0, [r5, #8]
    2b32:	f005 f963 	bl	7dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2b36:	2004      	movs	r0, #4
    2b38:	7030      	strb	r0, [r6, #0]
    2b3a:	b357      	cbz	r7, 2b92 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22e>
    2b3c:	8860      	ldrh	r0, [r4, #2]
    2b3e:	2810      	cmp	r0, #16
    2b40:	d023      	beq.n	2b8a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x226>
    2b42:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2b46:	68b5      	ldr	r5, [r6, #8]
    2b48:	f00b ff83 	bl	ea52 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    2b4c:	4607      	mov	r7, r0
    2b4e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2b52:	f00b ffd3 	bl	eafc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    2b56:	1a38      	subs	r0, r7, r0
    2b58:	1e40      	subs	r0, r0, #1
    2b5a:	b2c0      	uxtb	r0, r0
    2b5c:	8861      	ldrh	r1, [r4, #2]
    2b5e:	2228      	movs	r2, #40	; 0x28
    2b60:	f000 ffc0 	bl	3ae4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    2b64:	4405      	add	r5, r0
    2b66:	78a0      	ldrb	r0, [r4, #2]
    2b68:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2b6c:	b130      	cbz	r0, 2b7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x218>
    2b6e:	6870      	ldr	r0, [r6, #4]
    2b70:	4405      	add	r5, r0
    2b72:	f00b fff7 	bl	eb64 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    2b76:	4428      	add	r0, r5
    2b78:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    2b7c:	7922      	ldrb	r2, [r4, #4]
    2b7e:	4629      	mov	r1, r5
    2b80:	2000      	movs	r0, #0
    2b82:	f005 f989 	bl	7e98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    2b86:	b920      	cbnz	r0, 2b92 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22e>
    2b88:	e013      	b.n	2bb2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24e>
    2b8a:	7921      	ldrb	r1, [r4, #4]
    2b8c:	2000      	movs	r0, #0
    2b8e:	f004 fdbb 	bl	7708 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    2b92:	8860      	ldrh	r0, [r4, #2]
    2b94:	2813      	cmp	r0, #19
    2b96:	d015      	beq.n	2bc4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>
    2b98:	dc10      	bgt.n	2bbc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x258>
    2b9a:	2810      	cmp	r0, #16
    2b9c:	bf08      	it	eq
    2b9e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ba2:	2812      	cmp	r0, #18
    2ba4:	d00e      	beq.n	2bc4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>
    2ba6:	bf00      	nop
    2ba8:	f640 51bc 	movw	r1, #3516	; 0xdbc
    2bac:	202d      	movs	r0, #45	; 0x2d
    2bae:	f7fd fd29 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bb2:	f640 51a8 	movw	r1, #3496	; 0xda8
    2bb6:	202d      	movs	r0, #45	; 0x2d
    2bb8:	f7fd fd24 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bbc:	2815      	cmp	r0, #21
    2bbe:	bf18      	it	ne
    2bc0:	281d      	cmpne	r0, #29
    2bc2:	d1f1      	bne.n	2ba8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    2bc4:	7922      	ldrb	r2, [r4, #4]
    2bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2bca:	f04f 0101 	mov.w	r1, #1
    2bce:	f04f 0000 	mov.w	r0, #0
    2bd2:	f005 baa9 	b.w	8128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2bd6:	0000      	.short	0x0000
    2bd8:	20000b1c 	.word	0x20000b1c
    2bdc:	200000b0 	.word	0x200000b0
    2be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2be4:	4f4c      	ldr	r7, [pc, #304]	; (2d18 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x3b4>)
    2be6:	4681      	mov	r9, r0
    2be8:	b083      	sub	sp, #12
    2bea:	7838      	ldrb	r0, [r7, #0]
    2bec:	2802      	cmp	r0, #2
    2bee:	bf1c      	itt	ne
    2bf0:	7838      	ldrbne	r0, [r7, #0]
    2bf2:	2803      	cmpne	r0, #3
    2bf4:	d005      	beq.n	2c02 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29e>
    2bf6:	f640 512d 	movw	r1, #3373	; 0xd2d
    2bfa:	f04f 002d 	mov.w	r0, #45	; 0x2d
    2bfe:	f7fd fd01 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c02:	4c46      	ldr	r4, [pc, #280]	; (2d1c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x3b8>)
    2c04:	6865      	ldr	r5, [r4, #4]
    2c06:	7b28      	ldrb	r0, [r5, #12]
    2c08:	b118      	cbz	r0, 2c12 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ae>
    2c0a:	f7ff f8dd 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    2c0e:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
    2c12:	f8d4 c008 	ldr.w	ip, [r4, #8]
    2c16:	6861      	ldr	r1, [r4, #4]
    2c18:	f04f 0800 	mov.w	r8, #0
    2c1c:	f89c 0000 	ldrb.w	r0, [ip]
    2c20:	6a0a      	ldr	r2, [r1, #32]
    2c22:	f000 060f 	and.w	r6, r0, #15
    2c26:	2a00      	cmp	r2, #0
    2c28:	bf18      	it	ne
    2c2a:	f892 8073 	ldrbne.w	r8, [r2, #115]	; 0x73
    2c2e:	f1b9 0f00 	cmp.w	r9, #0
    2c32:	d053      	beq.n	2cdc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x378>
    2c34:	f101 0369 	add.w	r3, r1, #105	; 0x69
    2c38:	f891 2068 	ldrb.w	r2, [r1, #104]	; 0x68
    2c3c:	09c0      	lsrs	r0, r0, #7
    2c3e:	f10c 0109 	add.w	r1, ip, #9
    2c42:	f00b f984 	bl	df4e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    2c46:	2800      	cmp	r0, #0
    2c48:	d048      	beq.n	2cdc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x378>
    2c4a:	6865      	ldr	r5, [r4, #4]
    2c4c:	2e05      	cmp	r6, #5
    2c4e:	d126      	bne.n	2c9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x33a>
    2c50:	68a0      	ldr	r0, [r4, #8]
    2c52:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    2c56:	f000 001f 	and.w	r0, r0, #31
    2c5a:	2810      	cmp	r0, #16
    2c5c:	d91f      	bls.n	2c9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x33a>
    2c5e:	7be8      	ldrb	r0, [r5, #15]
    2c60:	b1e8      	cbz	r0, 2c9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x33a>
    2c62:	20ff      	movs	r0, #255	; 0xff
    2c64:	f88d 0000 	strb.w	r0, [sp]
    2c68:	466a      	mov	r2, sp
    2c6a:	2105      	movs	r1, #5
    2c6c:	4628      	mov	r0, r5
    2c6e:	f000 fb25 	bl	32bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    2c72:	b390      	cbz	r0, 2cda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x376>
    2c74:	f895 00e8 	ldrb.w	r0, [r5, #232]	; 0xe8
    2c78:	f88d 0004 	strb.w	r0, [sp, #4]
    2c7c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2c80:	bb58      	cbnz	r0, 2cda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x376>
    2c82:	68a0      	ldr	r0, [r4, #8]
    2c84:	2222      	movs	r2, #34	; 0x22
    2c86:	1cc1      	adds	r1, r0, #3
    2c88:	f105 00e9 	add.w	r0, r5, #233	; 0xe9
    2c8c:	f00d fc0d 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c90:	2225      	movs	r2, #37	; 0x25
    2c92:	4923      	ldr	r1, [pc, #140]	; (2d20 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x3bc>)
    2c94:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    2c98:	f7ff fab0 	bl	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2c9c:	e01e      	b.n	2cdc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x378>
    2c9e:	4641      	mov	r1, r8
    2ca0:	68a0      	ldr	r0, [r4, #8]
    2ca2:	f00b fb7d 	bl	e3a0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    2ca6:	b1c0      	cbz	r0, 2cda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x376>
    2ca8:	783a      	ldrb	r2, [r7, #0]
    2caa:	6860      	ldr	r0, [r4, #4]
    2cac:	4631      	mov	r1, r6
    2cae:	2a02      	cmp	r2, #2
    2cb0:	bf1c      	itt	ne
    2cb2:	783a      	ldrbne	r2, [r7, #0]
    2cb4:	2a03      	cmpne	r2, #3
    2cb6:	d005      	beq.n	2cc4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x360>
    2cb8:	f640 5106 	movw	r1, #3334	; 0xd06
    2cbc:	f04f 002d 	mov.w	r0, #45	; 0x2d
    2cc0:	f7fd fca0 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cc4:	68e2      	ldr	r2, [r4, #12]
    2cc6:	783b      	ldrb	r3, [r7, #0]
    2cc8:	6952      	ldr	r2, [r2, #20]
    2cca:	f06f 0c07 	mvn.w	ip, #7
    2cce:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    2cd2:	58d2      	ldr	r2, [r2, r3]
    2cd4:	4790      	blx	r2
    2cd6:	4605      	mov	r5, r0
    2cd8:	e001      	b.n	2cde <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x37a>
    2cda:	e7ff      	b.n	2cdc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x378>
    2cdc:	2501      	movs	r5, #1
    2cde:	7bb8      	ldrb	r0, [r7, #14]
    2ce0:	b118      	cbz	r0, 2cea <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x386>
    2ce2:	f004 fc39 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    2ce6:	f004 fb29 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    2cea:	2d00      	cmp	r5, #0
    2cec:	bf04      	itt	eq
    2cee:	b003      	addeq	sp, #12
    2cf0:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2cf4:	6860      	ldr	r0, [r4, #4]
    2cf6:	f00b ff47 	bl	eb88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    2cfa:	b138      	cbz	r0, 2d0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x3a8>
    2cfc:	f004 fc54 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    2d00:	68e0      	ldr	r0, [r4, #12]
    2d02:	6880      	ldr	r0, [r0, #8]
    2d04:	b003      	add	sp, #12
    2d06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d0a:	4700      	bx	r0
    2d0c:	6860      	ldr	r0, [r4, #4]
    2d0e:	b003      	add	sp, #12
    2d10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d14:	f000 bd3a 	b.w	378c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x850>
    2d18:	20000b1c 	.word	0x20000b1c
    2d1c:	200000b0 	.word	0x200000b0
    2d20:	0000e9f5 	.word	0x0000e9f5
    2d24:	b530      	push	{r4, r5, lr}
    2d26:	b083      	sub	sp, #12
    2d28:	2903      	cmp	r1, #3
    2d2a:	d002      	beq.n	2d32 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x3ce>
    2d2c:	2905      	cmp	r1, #5
    2d2e:	d072      	beq.n	2e16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4b2>
    2d30:	e06d      	b.n	2e0e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4aa>
    2d32:	4604      	mov	r4, r0
    2d34:	20ff      	movs	r0, #255	; 0xff
    2d36:	f88d 0000 	strb.w	r0, [sp]
    2d3a:	466a      	mov	r2, sp
    2d3c:	2103      	movs	r1, #3
    2d3e:	4620      	mov	r0, r4
    2d40:	f000 fabc 	bl	32bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    2d44:	2800      	cmp	r0, #0
    2d46:	d062      	beq.n	2e0e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4aa>
    2d48:	7b20      	ldrb	r0, [r4, #12]
    2d4a:	4d37      	ldr	r5, [pc, #220]	; (2e28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4c4>)
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d03c      	beq.n	2dca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x466>
    2d50:	f89d 0000 	ldrb.w	r0, [sp]
    2d54:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    2d58:	f88d 1004 	strb.w	r1, [sp, #4]
    2d5c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    2d60:	bb99      	cbnz	r1, 2dca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x466>
    2d62:	7822      	ldrb	r2, [r4, #0]
    2d64:	f884 20d7 	strb.w	r2, [r4, #215]	; 0xd7
    2d68:	28ff      	cmp	r0, #255	; 0xff
    2d6a:	d011      	beq.n	2d90 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x42c>
    2d6c:	f104 02d9 	add.w	r2, r4, #217	; 0xd9
    2d70:	1e51      	subs	r1, r2, #1
    2d72:	f7fe fc93 	bl	169c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    2d76:	b130      	cbz	r0, 2d86 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x422>
    2d78:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    2d7c:	f040 0102 	orr.w	r1, r0, #2
    2d80:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
    2d84:	e012      	b.n	2dac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x448>
    2d86:	f241 0108 	movw	r1, #4104	; 0x1008
    2d8a:	202d      	movs	r0, #45	; 0x2d
    2d8c:	f7fd fc3a 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d90:	68a8      	ldr	r0, [r5, #8]
    2d92:	7801      	ldrb	r1, [r0, #0]
    2d94:	f3c1 1280 	ubfx	r2, r1, #6, #1
    2d98:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    2d9c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    2da0:	f8c4 20d9 	str.w	r2, [r4, #217]	; 0xd9
    2da4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    2da8:	f8a4 00dd 	strh.w	r0, [r4, #221]	; 0xdd
    2dac:	f994 0047 	ldrsb.w	r0, [r4, #71]	; 0x47
    2db0:	287f      	cmp	r0, #127	; 0x7f
    2db2:	d027      	beq.n	2e04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4a0>
    2db4:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
    2db8:	217f      	movs	r1, #127	; 0x7f
    2dba:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
    2dbe:	2220      	movs	r2, #32
    2dc0:	491a      	ldr	r1, [pc, #104]	; (2e2c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4c8>)
    2dc2:	f104 00ce 	add.w	r0, r4, #206	; 0xce
    2dc6:	f7ff fa19 	bl	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2dca:	68a8      	ldr	r0, [r5, #8]
    2dcc:	2100      	movs	r1, #0
    2dce:	8001      	strh	r1, [r0, #0]
    2dd0:	2104      	movs	r1, #4
    2dd2:	f00b fba0 	bl	e516 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2dd6:	f104 0169 	add.w	r1, r4, #105	; 0x69
    2dda:	68a8      	ldr	r0, [r5, #8]
    2ddc:	f00b fbcd 	bl	e57a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    2de0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2de4:	68a8      	ldr	r0, [r5, #8]
    2de6:	f00b fbcf 	bl	e588 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    2dea:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    2dee:	6da1      	ldr	r1, [r4, #88]	; 0x58
    2df0:	68a8      	ldr	r0, [r5, #8]
    2df2:	f00b fbd2 	bl	e59a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    2df6:	490e      	ldr	r1, [pc, #56]	; (2e30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4cc>)
    2df8:	2005      	movs	r0, #5
    2dfa:	7008      	strb	r0, [r1, #0]
    2dfc:	68a8      	ldr	r0, [r5, #8]
    2dfe:	f004 fffd 	bl	7dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2e02:	e00e      	b.n	2e22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4be>
    2e04:	f640 616c 	movw	r1, #3692	; 0xe6c
    2e08:	202d      	movs	r0, #45	; 0x2d
    2e0a:	f7fd fbfb 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e0e:	b003      	add	sp, #12
    2e10:	2001      	movs	r0, #1
    2e12:	bd30      	pop	{r4, r5, pc}
    2e14:	e7ff      	b.n	2e16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4b2>
    2e16:	4907      	ldr	r1, [pc, #28]	; (2e34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4d0>)
    2e18:	6809      	ldr	r1, [r1, #0]
    2e1a:	b111      	cbz	r1, 2e22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4be>
    2e1c:	4788      	blx	r1
    2e1e:	2800      	cmp	r0, #0
    2e20:	d0f5      	beq.n	2e0e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4aa>
    2e22:	b003      	add	sp, #12
    2e24:	2000      	movs	r0, #0
    2e26:	bd30      	pop	{r4, r5, pc}
    2e28:	200000b0 	.word	0x200000b0
    2e2c:	0000ea0b 	.word	0x0000ea0b
    2e30:	20000b1c 	.word	0x20000b1c
    2e34:	200000c0 	.word	0x200000c0
    2e38:	4a09      	ldr	r2, [pc, #36]	; (2e60 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4fc>)
    2e3a:	0003      	movs	r3, r0
    2e3c:	6850      	ldr	r0, [r2, #4]
    2e3e:	d001      	beq.n	2e44 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4e0>
    2e40:	f000 bca4 	b.w	378c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x850>
    2e44:	2900      	cmp	r1, #0
    2e46:	bf08      	it	eq
    2e48:	4770      	bxeq	lr
    2e4a:	68d1      	ldr	r1, [r2, #12]
    2e4c:	4a05      	ldr	r2, [pc, #20]	; (2e64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x500>)
    2e4e:	6909      	ldr	r1, [r1, #16]
    2e50:	7812      	ldrb	r2, [r2, #0]
    2e52:	f06f 030f 	mvn.w	r3, #15
    2e56:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2e5a:	5889      	ldr	r1, [r1, r2]
    2e5c:	4708      	bx	r1
    2e5e:	0000      	.short	0x0000
    2e60:	200000b0 	.word	0x200000b0
    2e64:	20000b1c 	.word	0x20000b1c
    2e68:	b570      	push	{r4, r5, r6, lr}
    2e6a:	4604      	mov	r4, r0
    2e6c:	8840      	ldrh	r0, [r0, #2]
    2e6e:	2810      	cmp	r0, #16
    2e70:	d010      	beq.n	2e94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x530>
    2e72:	4d11      	ldr	r5, [pc, #68]	; (2eb8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x554>)
    2e74:	7ba8      	ldrb	r0, [r5, #14]
    2e76:	b120      	cbz	r0, 2e82 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x51e>
    2e78:	f004 faa0 	bl	73bc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    2e7c:	2040      	movs	r0, #64	; 0x40
    2e7e:	f004 fb79 	bl	7574 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    2e82:	480e      	ldr	r0, [pc, #56]	; (2ebc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x558>)
    2e84:	6880      	ldr	r0, [r0, #8]
    2e86:	f004 ffb9 	bl	7dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2e8a:	78a0      	ldrb	r0, [r4, #2]
    2e8c:	f010 0f04 	tst.w	r0, #4
    2e90:	d10b      	bne.n	2eaa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x546>
    2e92:	e005      	b.n	2ea0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x53c>
    2e94:	4620      	mov	r0, r4
    2e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2e9a:	2101      	movs	r1, #1
    2e9c:	f7ff bdb2 	b.w	2a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
    2ea0:	2100      	movs	r1, #0
    2ea2:	7922      	ldrb	r2, [r4, #4]
    2ea4:	4608      	mov	r0, r1
    2ea6:	f005 f93f 	bl	8128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2eaa:	2000      	movs	r0, #0
    2eac:	f004 fe34 	bl	7b18 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2eb0:	2002      	movs	r0, #2
    2eb2:	7028      	strb	r0, [r5, #0]
    2eb4:	bd70      	pop	{r4, r5, r6, pc}
    2eb6:	0000      	.short	0x0000
    2eb8:	20000b1c 	.word	0x20000b1c
    2ebc:	200000b0 	.word	0x200000b0
    2ec0:	b570      	push	{r4, r5, r6, lr}
    2ec2:	4c1c      	ldr	r4, [pc, #112]	; (2f34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5d0>)
    2ec4:	6865      	ldr	r5, [r4, #4]
    2ec6:	7b28      	ldrb	r0, [r5, #12]
    2ec8:	b118      	cbz	r0, 2ed2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x56e>
    2eca:	f7fe ff7d 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    2ece:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
    2ed2:	4d19      	ldr	r5, [pc, #100]	; (2f38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5d4>)
    2ed4:	7ba8      	ldrb	r0, [r5, #14]
    2ed6:	b118      	cbz	r0, 2ee0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x57c>
    2ed8:	f004 fb3e 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    2edc:	f004 fa2e 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    2ee0:	6860      	ldr	r0, [r4, #4]
    2ee2:	f00b fe51 	bl	eb88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    2ee6:	b1a8      	cbz	r0, 2f14 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5b0>
    2ee8:	6860      	ldr	r0, [r4, #4]
    2eea:	8841      	ldrh	r1, [r0, #2]
    2eec:	f3c1 1200 	ubfx	r2, r1, #4, #1
    2ef0:	2a00      	cmp	r2, #0
    2ef2:	bf04      	itt	eq
    2ef4:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    2ef8:	2900      	cmpeq	r1, #0
    2efa:	d00b      	beq.n	2f14 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5b0>
    2efc:	7829      	ldrb	r1, [r5, #0]
    2efe:	2902      	cmp	r1, #2
    2f00:	bf1c      	itt	ne
    2f02:	7829      	ldrbne	r1, [r5, #0]
    2f04:	2903      	cmpne	r1, #3
    2f06:	d00a      	beq.n	2f1e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5ba>
    2f08:	f640 4137 	movw	r1, #3127	; 0xc37
    2f0c:	f04f 002d 	mov.w	r0, #45	; 0x2d
    2f10:	f7fd fb78 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f14:	6860      	ldr	r0, [r4, #4]
    2f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2f1a:	f000 bc37 	b.w	378c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x850>
    2f1e:	68e1      	ldr	r1, [r4, #12]
    2f20:	782a      	ldrb	r2, [r5, #0]
    2f22:	68c9      	ldr	r1, [r1, #12]
    2f24:	f06f 0307 	mvn.w	r3, #7
    2f28:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2f2c:	5889      	ldr	r1, [r1, r2]
    2f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2f32:	4708      	bx	r1
    2f34:	200000b0 	.word	0x200000b0
    2f38:	20000b1c 	.word	0x20000b1c

00002f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    2f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f40:	4dab      	ldr	r5, [pc, #684]	; (31f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b4>)
    2f42:	4604      	mov	r4, r0
    2f44:	b089      	sub	sp, #36	; 0x24
    2f46:	7828      	ldrb	r0, [r5, #0]
    2f48:	2800      	cmp	r0, #0
    2f4a:	d17d      	bne.n	3048 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    2f4c:	7820      	ldrb	r0, [r4, #0]
    2f4e:	28ff      	cmp	r0, #255	; 0xff
    2f50:	d07a      	beq.n	3048 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    2f52:	2000      	movs	r0, #0
    2f54:	81a8      	strh	r0, [r5, #12]
    2f56:	6068      	str	r0, [r5, #4]
    2f58:	7068      	strb	r0, [r5, #1]
    2f5a:	70a8      	strb	r0, [r5, #2]
    2f5c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    2f60:	48a4      	ldr	r0, [pc, #656]	; (31f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b8>)
    2f62:	ae04      	add	r6, sp, #16
    2f64:	4fa4      	ldr	r7, [pc, #656]	; (31f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2bc>)
    2f66:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    2f68:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    2f6c:	68f8      	ldr	r0, [r7, #12]
    2f6e:	6840      	ldr	r0, [r0, #4]
    2f70:	9007      	str	r0, [sp, #28]
    2f72:	a804      	add	r0, sp, #16
    2f74:	f004 fdba 	bl	7aec <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    2f78:	f004 fe98 	bl	7cac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    2f7c:	f005 fcaa 	bl	88d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    2f80:	f004 faea 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    2f84:	f004 f9da 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    2f88:	489c      	ldr	r0, [pc, #624]	; (31fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c0>)
    2f8a:	f005 f93b 	bl	8204 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    2f8e:	489c      	ldr	r0, [pc, #624]	; (3200 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>)
    2f90:	f005 f942 	bl	8218 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    2f94:	2000      	movs	r0, #0
    2f96:	f009 fcd5 	bl	c944 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    2f9a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2f9e:	f00b fdd8 	bl	eb52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    2fa2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2fa6:	f00b fd64 	bl	ea72 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    2faa:	f005 f96f 	bl	828c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2fae:	7921      	ldrb	r1, [r4, #4]
    2fb0:	2025      	movs	r0, #37	; 0x25
    2fb2:	f005 f937 	bl	8224 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2fb6:	f994 0010 	ldrsb.w	r0, [r4, #16]
    2fba:	f004 ff13 	bl	7de4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2fbe:	7921      	ldrb	r1, [r4, #4]
    2fc0:	2000      	movs	r0, #0
    2fc2:	f004 fc5b 	bl	787c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    2fc6:	2601      	movs	r6, #1
    2fc8:	60a8      	str	r0, [r5, #8]
    2fca:	2800      	cmp	r0, #0
    2fcc:	bf01      	itttt	eq
    2fce:	702e      	strbeq	r6, [r5, #0]
    2fd0:	2000      	moveq	r0, #0
    2fd2:	b009      	addeq	sp, #36	; 0x24
    2fd4:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fd8:	f104 0150 	add.w	r1, r4, #80	; 0x50
    2fdc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    2fde:	f00a ff20 	bl	de22 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    2fe2:	4681      	mov	r9, r0
    2fe4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    2fe8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    2fea:	f00a ff1d 	bl	de28 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    2fee:	4680      	mov	r8, r0
    2ff0:	f1b9 0f00 	cmp.w	r9, #0
    2ff4:	bf1c      	itt	ne
    2ff6:	f894 0024 	ldrbne.w	r0, [r4, #36]	; 0x24
    2ffa:	2800      	cmpne	r0, #0
    2ffc:	d04f      	beq.n	309e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    2ffe:	bf00      	nop
    3000:	f04f 0a01 	mov.w	sl, #1
    3004:	7f20      	ldrb	r0, [r4, #28]
    3006:	2800      	cmp	r0, #0
    3008:	bf01      	itttt	eq
    300a:	7ea0      	ldrbeq	r0, [r4, #26]
    300c:	2800      	cmpeq	r0, #0
    300e:	78a0      	ldrbeq	r0, [r4, #2]
    3010:	f010 0f04 	tsteq.w	r0, #4
    3014:	d074      	beq.n	3100 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    3016:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    301a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    301e:	ea81 0102 	eor.w	r1, r1, r2
    3022:	ea71 0000 	orns	r0, r1, r0
    3026:	d008      	beq.n	303a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    3028:	f008 f9e0 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    302c:	4602      	mov	r2, r0
    302e:	e9d4 3018 	ldrd	r3, r0, [r4, #96]	; 0x60
    3032:	1ad2      	subs	r2, r2, r3
    3034:	eb71 0000 	sbcs.w	r0, r1, r0
    3038:	d202      	bcs.n	3040 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x104>
    303a:	f1ba 0f00 	cmp.w	sl, #0
    303e:	d079      	beq.n	3134 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
    3040:	f7fe fb86 	bl	1750 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3044:	496f      	ldr	r1, [pc, #444]	; (3204 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c8>)
    3046:	e000      	b.n	304a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    3048:	e025      	b.n	3096 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    304a:	fba0 ba01 	umull	fp, sl, r0, r1
    304e:	f008 f9cd 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3052:	eb10 000b 	adds.w	r0, r0, fp
    3056:	eb41 010a 	adc.w	r1, r1, sl
    305a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    305e:	f04f 0b01 	mov.w	fp, #1
    3062:	7ee0      	ldrb	r0, [r4, #27]
    3064:	f7fe fa7a 	bl	155c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3068:	4682      	mov	sl, r0
    306a:	7ea0      	ldrb	r0, [r4, #26]
    306c:	2800      	cmp	r0, #0
    306e:	bf18      	it	ne
    3070:	f1ba 0f00 	cmpne.w	sl, #0
    3074:	d003      	beq.n	307e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    3076:	7ee0      	ldrb	r0, [r4, #27]
    3078:	f7fe fa64 	bl	1544 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    307c:	b1c8      	cbz	r0, 30b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x176>
    307e:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
    3082:	2800      	cmp	r0, #0
    3084:	bf1c      	itt	ne
    3086:	7f20      	ldrbne	r0, [r4, #28]
    3088:	2800      	cmpne	r0, #0
    308a:	d02b      	beq.n	30e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
    308c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3090:	2801      	cmp	r0, #1
    3092:	d01c      	beq.n	30ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x192>
    3094:	e021      	b.n	30da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    3096:	b009      	add	sp, #36	; 0x24
    3098:	200c      	movs	r0, #12
    309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    309e:	f1b8 0f00 	cmp.w	r8, #0
    30a2:	bf1a      	itte	ne
    30a4:	f894 0025 	ldrbne.w	r0, [r4, #37]	; 0x25
    30a8:	2800      	cmpne	r0, #0
    30aa:	f04f 0a00 	moveq.w	sl, #0
    30ae:	d1a7      	bne.n	3000 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    30b0:	e7a8      	b.n	3004 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    30b2:	4632      	mov	r2, r6
    30b4:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
    30b8:	f104 0169 	add.w	r1, r4, #105	; 0x69
    30bc:	4650      	mov	r0, sl
    30be:	f00a ff7e 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    30c2:	7ee1      	ldrb	r1, [r4, #27]
    30c4:	f104 0069 	add.w	r0, r4, #105	; 0x69
    30c8:	f7fe fa54 	bl	1574 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    30cc:	e00a      	b.n	30e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
    30ce:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    30d2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    30d6:	2840      	cmp	r0, #64	; 0x40
    30d8:	d013      	beq.n	3102 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c6>
    30da:	4659      	mov	r1, fp
    30dc:	f104 0069 	add.w	r0, r4, #105	; 0x69
    30e0:	f00a ff5c 	bl	df9c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    30e4:	78a0      	ldrb	r0, [r4, #2]
    30e6:	f010 0f04 	tst.w	r0, #4
    30ea:	d023      	beq.n	3134 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
    30ec:	7ee0      	ldrb	r0, [r4, #27]
    30ee:	f7fe fa7b 	bl	15e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    30f2:	ea5f 0a00 	movs.w	sl, r0
    30f6:	d01d      	beq.n	3134 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
    30f8:	2110      	movs	r1, #16
    30fa:	f7fe fe2f 	bl	1d5c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    30fe:	b140      	cbz	r0, 3112 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d6>
    3100:	e018      	b.n	3134 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
    3102:	f7fe f9ef 	bl	14e4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    3106:	4632      	mov	r2, r6
    3108:	f104 0169 	add.w	r1, r4, #105	; 0x69
    310c:	f00a ff57 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3110:	e7e8      	b.n	30e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
    3112:	4632      	mov	r2, r6
    3114:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
    3118:	f104 0177 	add.w	r1, r4, #119	; 0x77
    311c:	4650      	mov	r0, sl
    311e:	f00a ff4e 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3122:	f104 0177 	add.w	r1, r4, #119	; 0x77
    3126:	68b8      	ldr	r0, [r7, #8]
    3128:	f00b fa17 	bl	e55a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    312c:	2101      	movs	r1, #1
    312e:	68b8      	ldr	r0, [r7, #8]
    3130:	f00b fa1a 	bl	e568 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3134:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
    3138:	ea49 0008 	orr.w	r0, r9, r8
    313c:	f88d 1000 	strb.w	r1, [sp]
    3140:	f89d 1000 	ldrb.w	r1, [sp]
    3144:	2900      	cmp	r1, #0
    3146:	bf18      	it	ne
    3148:	2101      	movne	r1, #1
    314a:	4308      	orrs	r0, r1
    314c:	d019      	beq.n	3182 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x246>
    314e:	78a0      	ldrb	r0, [r4, #2]
    3150:	f3c0 1000 	ubfx	r0, r0, #4, #1
    3154:	2800      	cmp	r0, #0
    3156:	bf04      	itt	eq
    3158:	f8b4 0045 	ldrheq.w	r0, [r4, #69]	; 0x45
    315c:	f3c0 060b 	ubfxeq	r6, r0, #0, #12
    3160:	d10f      	bne.n	3182 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x246>
    3162:	bf00      	nop
    3164:	f7ff f8f8 	bl	2358 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    3168:	f3c0 000b 	ubfx	r0, r0, #0, #12
    316c:	42b0      	cmp	r0, r6
    316e:	d0f9      	beq.n	3164 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x228>
    3170:	f8b4 1045 	ldrh.w	r1, [r4, #69]	; 0x45
    3174:	f360 010b 	bfi	r1, r0, #0, #12
    3178:	f8a4 1045 	strh.w	r1, [r4, #69]	; 0x45
    317c:	2000      	movs	r0, #0
    317e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    3182:	f7fe fbdf 	bl	1944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    3186:	68b8      	ldr	r0, [r7, #8]
    3188:	1cc0      	adds	r0, r0, #3
    318a:	f7fe f997 	bl	14bc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    318e:	73a8      	strb	r0, [r5, #14]
    3190:	78a0      	ldrb	r0, [r4, #2]
    3192:	f010 0f01 	tst.w	r0, #1
    3196:	d027      	beq.n	31e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    3198:	481b      	ldr	r0, [pc, #108]	; (3208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2cc>)
    319a:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
    319e:	e9cd 1002 	strd	r1, r0, [sp, #8]
    31a2:	20ff      	movs	r0, #255	; 0xff
    31a4:	7728      	strb	r0, [r5, #28]
    31a6:	a802      	add	r0, sp, #8
    31a8:	6a26      	ldr	r6, [r4, #32]
    31aa:	f7fd fca1 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    31ae:	b9d8      	cbnz	r0, 31e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    31b0:	9c02      	ldr	r4, [sp, #8]
    31b2:	42b4      	cmp	r4, r6
    31b4:	d013      	beq.n	31de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a2>
    31b6:	7a72      	ldrb	r2, [r6, #9]
    31b8:	7a60      	ldrb	r0, [r4, #9]
    31ba:	f106 030a 	add.w	r3, r6, #10
    31be:	f104 010a 	add.w	r1, r4, #10
    31c2:	f00a fec4 	bl	df4e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    31c6:	b150      	cbz	r0, 31de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a2>
    31c8:	78a0      	ldrb	r0, [r4, #2]
    31ca:	7728      	strb	r0, [r5, #28]
    31cc:	f8d4 0003 	ldr.w	r0, [r4, #3]
    31d0:	f8c5 001d 	str.w	r0, [r5, #29]
    31d4:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    31d8:	f8a5 0021 	strh.w	r0, [r5, #33]	; 0x21
    31dc:	e004      	b.n	31e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    31de:	a802      	add	r0, sp, #8
    31e0:	f7fd fc86 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    31e4:	2800      	cmp	r0, #0
    31e6:	d0e3      	beq.n	31b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x274>
    31e8:	b009      	add	sp, #36	; 0x24
    31ea:	2000      	movs	r0, #0
    31ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31f0:	20000b1c 	.word	0x20000b1c
    31f4:	00003a60 	.word	0x00003a60
    31f8:	200000b0 	.word	0x200000b0
    31fc:	8e89bed6 	.word	0x8e89bed6
    3200:	00555555 	.word	0x00555555
    3204:	000f4240 	.word	0x000f4240
    3208:	00003a3c 	.word	0x00003a3c
    320c:	b510      	push	{r4, lr}
    320e:	4604      	mov	r4, r0
    3210:	f7ff fe94 	bl	2f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    3214:	2800      	cmp	r0, #0
    3216:	bf18      	it	ne
    3218:	bd10      	popne	{r4, pc}
    321a:	4805      	ldr	r0, [pc, #20]	; (3230 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>)
    321c:	7800      	ldrb	r0, [r0, #0]
    321e:	2801      	cmp	r0, #1
    3220:	d003      	beq.n	322a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    3222:	2100      	movs	r1, #0
    3224:	4620      	mov	r0, r4
    3226:	f7ff fbed 	bl	2a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
    322a:	2000      	movs	r0, #0
    322c:	bd10      	pop	{r4, pc}
    322e:	0000      	.short	0x0000
    3230:	20000b1c 	.word	0x20000b1c
    3234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3238:	4e1e      	ldr	r6, [pc, #120]	; (32b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>)
    323a:	4d1f      	ldr	r5, [pc, #124]	; (32b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37c>)
    323c:	6874      	ldr	r4, [r6, #4]
    323e:	7828      	ldrb	r0, [r5, #0]
    3240:	2800      	cmp	r0, #0
    3242:	bf08      	it	eq
    3244:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3248:	7828      	ldrb	r0, [r5, #0]
    324a:	2802      	cmp	r0, #2
    324c:	bf1c      	itt	ne
    324e:	7828      	ldrbne	r0, [r5, #0]
    3250:	2803      	cmpne	r0, #3
    3252:	d10c      	bne.n	326e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    3254:	7b20      	ldrb	r0, [r4, #12]
    3256:	b120      	cbz	r0, 3262 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    3258:	4627      	mov	r7, r4
    325a:	f7fe fdb5 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    325e:	f887 0047 	strb.w	r0, [r7, #71]	; 0x47
    3262:	7ba8      	ldrb	r0, [r5, #14]
    3264:	b118      	cbz	r0, 326e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    3266:	f004 f977 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    326a:	f004 f867 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    326e:	f009 fb4d 	bl	c90c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    3272:	7830      	ldrb	r0, [r6, #0]
    3274:	b1c0      	cbz	r0, 32a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    3276:	4620      	mov	r0, r4
    3278:	f00b fc86 	bl	eb88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    327c:	b1a0      	cbz	r0, 32a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    327e:	6870      	ldr	r0, [r6, #4]
    3280:	7881      	ldrb	r1, [r0, #2]
    3282:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    3286:	b121      	cbz	r1, 3292 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    3288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    328c:	2101      	movs	r1, #1
    328e:	f7ff bbb9 	b.w	2a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
    3292:	4604      	mov	r4, r0
    3294:	3030      	adds	r0, #48	; 0x30
    3296:	f00b fc31 	bl	eafc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    329a:	b128      	cbz	r0, 32a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    329c:	4620      	mov	r0, r4
    329e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32a2:	2101      	movs	r1, #1
    32a4:	f7ff bbae 	b.w	2a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
    32a8:	4620      	mov	r0, r4
    32aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32ae:	f000 ba6d 	b.w	378c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x850>
    32b2:	0000      	.short	0x0000
    32b4:	200000b0 	.word	0x200000b0
    32b8:	20000b1c 	.word	0x20000b1c
    32bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32c0:	4690      	mov	r8, r2
    32c2:	460d      	mov	r5, r1
    32c4:	4604      	mov	r4, r0
    32c6:	2903      	cmp	r1, #3
    32c8:	bf1b      	ittet	ne
    32ca:	f894 0080 	ldrbne.w	r0, [r4, #128]	; 0x80
    32ce:	2800      	cmpne	r0, #0
    32d0:	f04f 0900 	moveq.w	r9, #0
    32d4:	f04f 0901 	movne.w	r9, #1
    32d8:	f004 f958 	bl	758c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    32dc:	4606      	mov	r6, r0
    32de:	2d03      	cmp	r5, #3
    32e0:	d008      	beq.n	32f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b8>
    32e2:	2701      	movs	r7, #1
    32e4:	2d05      	cmp	r5, #5
    32e6:	bf02      	ittt	eq
    32e8:	78a0      	ldrbeq	r0, [r4, #2]
    32ea:	f010 0001 	andseq.w	r0, r0, #1
    32ee:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32f2:	e007      	b.n	3304 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    32f4:	78a0      	ldrb	r0, [r4, #2]
    32f6:	2702      	movs	r7, #2
    32f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    32fc:	2800      	cmp	r0, #0
    32fe:	bf08      	it	eq
    3300:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3304:	f1b9 0f00 	cmp.w	r9, #0
    3308:	d159      	bne.n	33be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x482>
    330a:	482e      	ldr	r0, [pc, #184]	; (33c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>)
    330c:	7b80      	ldrb	r0, [r0, #14]
    330e:	b140      	cbz	r0, 3322 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e6>
    3310:	f00a febf 	bl	e092 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3314:	f888 0000 	strb.w	r0, [r8]
    3318:	28ff      	cmp	r0, #255	; 0xff
    331a:	d002      	beq.n	3322 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e6>
    331c:	f7fe f9d8 	bl	16d0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    3320:	4306      	orrs	r6, r0
    3322:	4d29      	ldr	r5, [pc, #164]	; (33c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>)
    3324:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
    3328:	f104 0370 	add.w	r3, r4, #112	; 0x70
    332c:	68a9      	ldr	r1, [r5, #8]
    332e:	f811 0b03 	ldrb.w	r0, [r1], #3
    3332:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3336:	f00a fe0a 	bl	df4e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    333a:	f898 1000 	ldrb.w	r1, [r8]
    333e:	29ff      	cmp	r1, #255	; 0xff
    3340:	d004      	beq.n	334c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    3342:	b9b8      	cbnz	r0, 3374 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>
    3344:	7ee0      	ldrb	r0, [r4, #27]
    3346:	4288      	cmp	r0, r1
    3348:	d116      	bne.n	3378 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    334a:	e013      	b.n	3374 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>
    334c:	b1a0      	cbz	r0, 3378 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    334e:	68a9      	ldr	r1, [r5, #8]
    3350:	f811 0b03 	ldrb.w	r0, [r1], #3
    3354:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3358:	f7fe f9cc 	bl	16f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    335c:	4680      	mov	r8, r0
    335e:	f7fe fa3d 	bl	17dc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    3362:	b138      	cbz	r0, 3374 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>
    3364:	4640      	mov	r0, r8
    3366:	f7fe f93f 	bl	15e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    336a:	b118      	cbz	r0, 3374 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>
    336c:	2110      	movs	r1, #16
    336e:	f7fe fcf5 	bl	1d5c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3372:	b108      	cbz	r0, 3378 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    3374:	2001      	movs	r0, #1
    3376:	e000      	b.n	337a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43e>
    3378:	2000      	movs	r0, #0
    337a:	78a1      	ldrb	r1, [r4, #2]
    337c:	f011 0f04 	tst.w	r1, #4
    3380:	d001      	beq.n	3386 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44a>
    3382:	b1e0      	cbz	r0, 33be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x482>
    3384:	e018      	b.n	33b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    3386:	b9be      	cbnz	r6, 33b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    3388:	7c60      	ldrb	r0, [r4, #17]
    338a:	2800      	cmp	r0, #0
    338c:	bf18      	it	ne
    338e:	42b8      	cmpne	r0, r7
    3390:	d115      	bne.n	33be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x482>
    3392:	68a9      	ldr	r1, [r5, #8]
    3394:	f811 0b03 	ldrb.w	r0, [r1], #3
    3398:	f3c0 1080 	ubfx	r0, r0, #6, #1
    339c:	f7fe f9aa 	bl	16f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    33a0:	4604      	mov	r4, r0
    33a2:	f7fe fa1b 	bl	17dc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    33a6:	b138      	cbz	r0, 33b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    33a8:	4620      	mov	r0, r4
    33aa:	f7fe f91d 	bl	15e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    33ae:	b118      	cbz	r0, 33b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    33b0:	2110      	movs	r1, #16
    33b2:	f7fe fcd3 	bl	1d5c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    33b6:	b110      	cbz	r0, 33be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x482>
    33b8:	2001      	movs	r0, #1
    33ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33be:	2000      	movs	r0, #0
    33c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33c4:	20000b1c 	.word	0x20000b1c
    33c8:	200000b0 	.word	0x200000b0
    33cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33d0:	4604      	mov	r4, r0
    33d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    33d4:	f000 0a01 	and.w	sl, r0, #1
    33d8:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    33dc:	f104 0026 	add.w	r0, r4, #38	; 0x26
    33e0:	28ff      	cmp	r0, #255	; 0xff
    33e2:	bf28      	it	cs
    33e4:	20ff      	movcs	r0, #255	; 0xff
    33e6:	300a      	adds	r0, #10
    33e8:	b280      	uxth	r0, r0
    33ea:	28ff      	cmp	r0, #255	; 0xff
    33ec:	bf28      	it	cs
    33ee:	20ff      	movcs	r0, #255	; 0xff
    33f0:	ea5a 0e0b 	orrs.w	lr, sl, fp
    33f4:	f1a4 0cd9 	sub.w	ip, r4, #217	; 0xd9
    33f8:	fa1f fc8c 	uxth.w	ip, ip
    33fc:	f10c 05f6 	add.w	r5, ip, #246	; 0xf6
    3400:	f244 2655 	movw	r6, #16981	; 0x4255
    3404:	fb05 f506 	mul.w	r5, r5, r6
    3408:	ea4f 5595 	mov.w	r5, r5, lsr #22
    340c:	9500      	str	r5, [sp, #0]
    340e:	fb0c f506 	mul.w	r5, ip, r6
    3412:	ea4f 5895 	mov.w	r8, r5, lsr #22
    3416:	f008 05ff 	and.w	r5, r8, #255	; 0xff
    341a:	f06f 06f6 	mvn.w	r6, #246	; 0xf6
    341e:	fb15 f506 	smulbb	r5, r5, r6
    3422:	eb05 070c 	add.w	r7, r5, ip
    3426:	f107 0c08 	add.w	ip, r7, #8
    342a:	fa1f fc8c 	uxth.w	ip, ip
    342e:	f10c 0905 	add.w	r9, ip, #5
    3432:	f04f 0c00 	mov.w	ip, #0
    3436:	f44f 75c8 	mov.w	r5, #400	; 0x190
    343a:	f44f 76bf 	mov.w	r6, #382	; 0x17e
    343e:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    3442:	f000 8116 	beq.w	3672 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x736>
    3446:	f1bb 0f00 	cmp.w	fp, #0
    344a:	d017      	beq.n	347c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x540>
    344c:	2a08      	cmp	r2, #8
    344e:	bf04      	itt	eq
    3450:	46ab      	moveq	fp, r5
    3452:	2040      	moveq	r0, #64	; 0x40
    3454:	d00c      	beq.n	3470 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>
    3456:	2a04      	cmp	r2, #4
    3458:	bf04      	itt	eq
    345a:	46b3      	moveq	fp, r6
    345c:	2010      	moveq	r0, #16
    345e:	d007      	beq.n	3470 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>
    3460:	2a02      	cmp	r2, #2
    3462:	bf07      	ittee	eq
    3464:	f10c 0b18 	addeq.w	fp, ip, #24
    3468:	2004      	moveq	r0, #4
    346a:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    346e:	2008      	movne	r0, #8
    3470:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
    3474:	eb0e 1080 	add.w	r0, lr, r0, lsl #6
    3478:	4458      	add	r0, fp
    347a:	e01a      	b.n	34b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x576>
    347c:	b1db      	cbz	r3, 34b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57a>
    347e:	2a08      	cmp	r2, #8
    3480:	bf04      	itt	eq
    3482:	4628      	moveq	r0, r5
    3484:	f04f 0b40 	moveq.w	fp, #64	; 0x40
    3488:	d00f      	beq.n	34aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56e>
    348a:	2a04      	cmp	r2, #4
    348c:	bf04      	itt	eq
    348e:	4630      	moveq	r0, r6
    3490:	f04f 0b10 	moveq.w	fp, #16
    3494:	d009      	beq.n	34aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56e>
    3496:	2a02      	cmp	r2, #2
    3498:	bf07      	ittee	eq
    349a:	f10c 0018 	addeq.w	r0, ip, #24
    349e:	f04f 0b04 	moveq.w	fp, #4
    34a2:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
    34a6:	f04f 0b08 	movne.w	fp, #8
    34aa:	eb0b 1b8b 	add.w	fp, fp, fp, lsl #6
    34ae:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    34b2:	4408      	add	r0, r1
    34b4:	e019      	b.n	34ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ae>
    34b6:	2a08      	cmp	r2, #8
    34b8:	bf04      	itt	eq
    34ba:	46ab      	moveq	fp, r5
    34bc:	f04f 0e40 	moveq.w	lr, #64	; 0x40
    34c0:	d00f      	beq.n	34e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a6>
    34c2:	2a04      	cmp	r2, #4
    34c4:	bf04      	itt	eq
    34c6:	46b3      	moveq	fp, r6
    34c8:	f04f 0e10 	moveq.w	lr, #16
    34cc:	d009      	beq.n	34e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a6>
    34ce:	2a02      	cmp	r2, #2
    34d0:	bf07      	ittee	eq
    34d2:	f10c 0b18 	addeq.w	fp, ip, #24
    34d6:	f04f 0e04 	moveq.w	lr, #4
    34da:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    34de:	f04f 0e08 	movne.w	lr, #8
    34e2:	1d40      	adds	r0, r0, #5
    34e4:	fb00 100e 	mla	r0, r0, lr, r1
    34e8:	4458      	add	r0, fp
    34ea:	309c      	adds	r0, #156	; 0x9c
    34ec:	f002 010c 	and.w	r1, r2, #12
    34f0:	2900      	cmp	r1, #0
    34f2:	bf18      	it	ne
    34f4:	2128      	movne	r1, #40	; 0x28
    34f6:	4408      	add	r0, r1
    34f8:	bf18      	it	ne
    34fa:	f500 6035 	addne.w	r0, r0, #2896	; 0xb50
    34fe:	d117      	bne.n	3530 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f4>
    3500:	2a08      	cmp	r2, #8
    3502:	bf04      	itt	eq
    3504:	46ab      	moveq	fp, r5
    3506:	2140      	moveq	r1, #64	; 0x40
    3508:	d00c      	beq.n	3524 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    350a:	2a04      	cmp	r2, #4
    350c:	bf04      	itt	eq
    350e:	46b3      	moveq	fp, r6
    3510:	2110      	moveq	r1, #16
    3512:	d007      	beq.n	3524 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    3514:	2a02      	cmp	r2, #2
    3516:	bf07      	ittee	eq
    3518:	f10c 0b18 	addeq.w	fp, ip, #24
    351c:	2104      	moveq	r1, #4
    351e:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    3522:	2108      	movne	r1, #8
    3524:	ebc1 0ec1 	rsb	lr, r1, r1, lsl #3
    3528:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
    352c:	4459      	add	r1, fp
    352e:	4408      	add	r0, r1
    3530:	3098      	adds	r0, #152	; 0x98
    3532:	f1ba 0f00 	cmp.w	sl, #0
    3536:	d018      	beq.n	356a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62e>
    3538:	2a08      	cmp	r2, #8
    353a:	bf08      	it	eq
    353c:	2140      	moveq	r1, #64	; 0x40
    353e:	d00c      	beq.n	355a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61e>
    3540:	2a04      	cmp	r2, #4
    3542:	bf04      	itt	eq
    3544:	4635      	moveq	r5, r6
    3546:	2110      	moveq	r1, #16
    3548:	d007      	beq.n	355a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61e>
    354a:	2a02      	cmp	r2, #2
    354c:	bf07      	ittee	eq
    354e:	f10c 0518 	addeq.w	r5, ip, #24
    3552:	2104      	moveq	r1, #4
    3554:	f10c 0528 	addne.w	r5, ip, #40	; 0x28
    3558:	2108      	movne	r1, #8
    355a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    355e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    3562:	4429      	add	r1, r5
    3564:	4408      	add	r0, r1
    3566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    356a:	b1db      	cbz	r3, 35a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x668>
    356c:	2a08      	cmp	r2, #8
    356e:	bf04      	itt	eq
    3570:	4629      	moveq	r1, r5
    3572:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    3576:	d00f      	beq.n	3598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    3578:	2a04      	cmp	r2, #4
    357a:	bf04      	itt	eq
    357c:	4631      	moveq	r1, r6
    357e:	f04f 0a10 	moveq.w	sl, #16
    3582:	d009      	beq.n	3598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    3584:	2a02      	cmp	r2, #2
    3586:	bf07      	ittee	eq
    3588:	f10c 0118 	addeq.w	r1, ip, #24
    358c:	f04f 0a04 	moveq.w	sl, #4
    3590:	f10c 0128 	addne.w	r1, ip, #40	; 0x28
    3594:	f04f 0a08 	movne.w	sl, #8
    3598:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
    359c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    35a0:	4408      	add	r0, r1
    35a2:	e01f      	b.n	35e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>
    35a4:	f104 010e 	add.w	r1, r4, #14
    35a8:	29ff      	cmp	r1, #255	; 0xff
    35aa:	bf28      	it	cs
    35ac:	21ff      	movcs	r1, #255	; 0xff
    35ae:	b289      	uxth	r1, r1
    35b0:	2a08      	cmp	r2, #8
    35b2:	bf04      	itt	eq
    35b4:	46aa      	moveq	sl, r5
    35b6:	f04f 0b40 	moveq.w	fp, #64	; 0x40
    35ba:	d00f      	beq.n	35dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    35bc:	2a04      	cmp	r2, #4
    35be:	bf04      	itt	eq
    35c0:	46b2      	moveq	sl, r6
    35c2:	f04f 0b10 	moveq.w	fp, #16
    35c6:	d009      	beq.n	35dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    35c8:	2a02      	cmp	r2, #2
    35ca:	bf07      	ittee	eq
    35cc:	f10c 0a18 	addeq.w	sl, ip, #24
    35d0:	f04f 0b04 	moveq.w	fp, #4
    35d4:	f10c 0a28 	addne.w	sl, ip, #40	; 0x28
    35d8:	f04f 0b08 	movne.w	fp, #8
    35dc:	1d49      	adds	r1, r1, #5
    35de:	fb01 000b 	mla	r0, r1, fp, r0
    35e2:	4450      	add	r0, sl
    35e4:	2cd9      	cmp	r4, #217	; 0xd9
    35e6:	bf98      	it	ls
    35e8:	e8bd 8ff8 	ldmials.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35ec:	b193      	cbz	r3, 3614 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6d8>
    35ee:	9900      	ldr	r1, [sp, #0]
    35f0:	2a08      	cmp	r2, #8
    35f2:	d07d      	beq.n	36f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b4>
    35f4:	2a04      	cmp	r2, #4
    35f6:	d07c      	beq.n	36f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b6>
    35f8:	2a02      	cmp	r2, #2
    35fa:	d07b      	beq.n	36f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b8>
    35fc:	e080      	b.n	3700 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7c4>
    35fe:	bf00      	nop
    3600:	eb02 1282 	add.w	r2, r2, r2, lsl #6
    3604:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    3608:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    360c:	fb01 0002 	mla	r0, r1, r2, r0
    3610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3614:	f008 01ff 	and.w	r1, r8, #255	; 0xff
    3618:	2a08      	cmp	r2, #8
    361a:	bf04      	itt	eq
    361c:	462b      	moveq	r3, r5
    361e:	2440      	moveq	r4, #64	; 0x40
    3620:	d00c      	beq.n	363c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x700>
    3622:	2a04      	cmp	r2, #4
    3624:	bf04      	itt	eq
    3626:	4633      	moveq	r3, r6
    3628:	2410      	moveq	r4, #16
    362a:	d007      	beq.n	363c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x700>
    362c:	2a02      	cmp	r2, #2
    362e:	bf07      	ittee	eq
    3630:	f10c 0318 	addeq.w	r3, ip, #24
    3634:	2404      	moveq	r4, #4
    3636:	f10c 0328 	addne.w	r3, ip, #40	; 0x28
    363a:	2408      	movne	r4, #8
    363c:	eb04 1484 	add.w	r4, r4, r4, lsl #6
    3640:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3644:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
    3648:	fb01 0003 	mla	r0, r1, r3, r0
    364c:	0439      	lsls	r1, r7, #16
    364e:	0c09      	lsrs	r1, r1, #16
    3650:	bf08      	it	eq
    3652:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3656:	2a08      	cmp	r2, #8
    3658:	d07e      	beq.n	3758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x81c>
    365a:	2a04      	cmp	r2, #4
    365c:	d07d      	beq.n	375a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x81e>
    365e:	2a02      	cmp	r2, #2
    3660:	d07c      	beq.n	375c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x820>
    3662:	e085      	b.n	3770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x834>
    3664:	fb09 0001 	mla	r0, r9, r1, r0
    3668:	4428      	add	r0, r5
    366a:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    366e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3672:	b1db      	cbz	r3, 36ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x770>
    3674:	2a08      	cmp	r2, #8
    3676:	bf04      	itt	eq
    3678:	4628      	moveq	r0, r5
    367a:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    367e:	d00f      	beq.n	36a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x764>
    3680:	2a04      	cmp	r2, #4
    3682:	bf04      	itt	eq
    3684:	4630      	moveq	r0, r6
    3686:	f04f 0a10 	moveq.w	sl, #16
    368a:	d009      	beq.n	36a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x764>
    368c:	2a02      	cmp	r2, #2
    368e:	bf07      	ittee	eq
    3690:	f10c 0018 	addeq.w	r0, ip, #24
    3694:	f04f 0a04 	moveq.w	sl, #4
    3698:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
    369c:	f04f 0a08 	movne.w	sl, #8
    36a0:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
    36a4:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    36a8:	4408      	add	r0, r1
    36aa:	e019      	b.n	36e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7a4>
    36ac:	2a08      	cmp	r2, #8
    36ae:	bf04      	itt	eq
    36b0:	46aa      	moveq	sl, r5
    36b2:	f04f 0b40 	moveq.w	fp, #64	; 0x40
    36b6:	d00f      	beq.n	36d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x79c>
    36b8:	2a04      	cmp	r2, #4
    36ba:	bf04      	itt	eq
    36bc:	46b2      	moveq	sl, r6
    36be:	f04f 0b10 	moveq.w	fp, #16
    36c2:	d009      	beq.n	36d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x79c>
    36c4:	2a02      	cmp	r2, #2
    36c6:	bf07      	ittee	eq
    36c8:	f10c 0a18 	addeq.w	sl, ip, #24
    36cc:	f04f 0b04 	moveq.w	fp, #4
    36d0:	f10c 0a28 	addne.w	sl, ip, #40	; 0x28
    36d4:	f04f 0b08 	movne.w	fp, #8
    36d8:	1d40      	adds	r0, r0, #5
    36da:	fb00 100b 	mla	r0, r0, fp, r1
    36de:	4450      	add	r0, sl
    36e0:	2cd9      	cmp	r4, #217	; 0xd9
    36e2:	bf98      	it	ls
    36e4:	e8bd 8ff8 	ldmials.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36e8:	b1bb      	cbz	r3, 371a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7de>
    36ea:	9900      	ldr	r1, [sp, #0]
    36ec:	2a08      	cmp	r2, #8
    36ee:	e002      	b.n	36f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7ba>
    36f0:	e00d      	b.n	370e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7d2>
    36f2:	e009      	b.n	3708 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7cc>
    36f4:	e00d      	b.n	3712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7d6>
    36f6:	d00a      	beq.n	370e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7d2>
    36f8:	2a04      	cmp	r2, #4
    36fa:	d005      	beq.n	3708 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7cc>
    36fc:	2a02      	cmp	r2, #2
    36fe:	d008      	beq.n	3712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7d6>
    3700:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    3704:	2208      	movs	r2, #8
    3706:	e77b      	b.n	3600 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    3708:	4635      	mov	r5, r6
    370a:	2210      	movs	r2, #16
    370c:	e778      	b.n	3600 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    370e:	2240      	movs	r2, #64	; 0x40
    3710:	e776      	b.n	3600 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    3712:	f10c 0518 	add.w	r5, ip, #24
    3716:	2204      	movs	r2, #4
    3718:	e772      	b.n	3600 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    371a:	f008 01ff 	and.w	r1, r8, #255	; 0xff
    371e:	2a08      	cmp	r2, #8
    3720:	bf04      	itt	eq
    3722:	462b      	moveq	r3, r5
    3724:	2440      	moveq	r4, #64	; 0x40
    3726:	d00c      	beq.n	3742 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x806>
    3728:	2a04      	cmp	r2, #4
    372a:	bf04      	itt	eq
    372c:	4633      	moveq	r3, r6
    372e:	2410      	moveq	r4, #16
    3730:	d007      	beq.n	3742 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x806>
    3732:	2a02      	cmp	r2, #2
    3734:	bf07      	ittee	eq
    3736:	f10c 0318 	addeq.w	r3, ip, #24
    373a:	2404      	moveq	r4, #4
    373c:	f10c 0328 	addne.w	r3, ip, #40	; 0x28
    3740:	2408      	movne	r4, #8
    3742:	eb04 1484 	add.w	r4, r4, r4, lsl #6
    3746:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    374a:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
    374e:	fb01 0003 	mla	r0, r1, r3, r0
    3752:	0439      	lsls	r1, r7, #16
    3754:	0c09      	lsrs	r1, r1, #16
    3756:	e002      	b.n	375e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x822>
    3758:	e011      	b.n	377e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x842>
    375a:	e00d      	b.n	3778 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x83c>
    375c:	e011      	b.n	3782 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x846>
    375e:	bf08      	it	eq
    3760:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3764:	2a08      	cmp	r2, #8
    3766:	d00a      	beq.n	377e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x842>
    3768:	2a04      	cmp	r2, #4
    376a:	d005      	beq.n	3778 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x83c>
    376c:	2a02      	cmp	r2, #2
    376e:	d008      	beq.n	3782 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x846>
    3770:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    3774:	2108      	movs	r1, #8
    3776:	e775      	b.n	3664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x728>
    3778:	4635      	mov	r5, r6
    377a:	2110      	movs	r1, #16
    377c:	e772      	b.n	3664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x728>
    377e:	2140      	movs	r1, #64	; 0x40
    3780:	e770      	b.n	3664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x728>
    3782:	f10c 0518 	add.w	r5, ip, #24
    3786:	2104      	movs	r1, #4
    3788:	e76c      	b.n	3664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x728>
    378a:	0000      	movs	r0, r0
    378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3790:	4604      	mov	r4, r0
    3792:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    3796:	4e30      	ldr	r6, [pc, #192]	; (3858 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x91c>)
    3798:	1c40      	adds	r0, r0, #1
    379a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
    379e:	7bb0      	ldrb	r0, [r6, #14]
    37a0:	2500      	movs	r5, #0
    37a2:	b120      	cbz	r0, 37ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x872>
    37a4:	f003 fed8 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    37a8:	f003 fdc8 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    37ac:	73b5      	strb	r5, [r6, #14]
    37ae:	7035      	strb	r5, [r6, #0]
    37b0:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    37b4:	b128      	cbz	r0, 37c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x886>
    37b6:	4620      	mov	r0, r4
    37b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37bc:	2101      	movs	r1, #1
    37be:	f00b b9f8 	b.w	ebb2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    37c2:	7b60      	ldrb	r0, [r4, #13]
    37c4:	2800      	cmp	r0, #0
    37c6:	d040      	beq.n	384a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90e>
    37c8:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
    37cc:	4288      	cmp	r0, r1
    37ce:	d83c      	bhi.n	384a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90e>
    37d0:	2101      	movs	r1, #1
    37d2:	4620      	mov	r0, r4
    37d4:	f00b f9ed 	bl	ebb2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    37d8:	78a0      	ldrb	r0, [r4, #2]
    37da:	f010 0f01 	tst.w	r0, #1
    37de:	d020      	beq.n	3822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e6>
    37e0:	6a20      	ldr	r0, [r4, #32]
    37e2:	2643      	movs	r6, #67	; 0x43
    37e4:	8807      	ldrh	r7, [r0, #0]
    37e6:	f003 fcf1 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    37ea:	2800      	cmp	r0, #0
    37ec:	bf18      	it	ne
    37ee:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    37f2:	7820      	ldrb	r0, [r4, #0]
    37f4:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
    37f8:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
    37fc:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
    3800:	7b60      	ldrb	r0, [r4, #13]
    3802:	b910      	cbnz	r0, 380a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ce>
    3804:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
    3808:	e003      	b.n	3812 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8d6>
    380a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    380e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3812:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    3816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    381a:	2216      	movs	r2, #22
    381c:	490f      	ldr	r1, [pc, #60]	; (385c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x920>)
    381e:	f7fe bced 	b.w	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3822:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3826:	2643      	movs	r6, #67	; 0x43
    3828:	f003 fcd0 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    382c:	2800      	cmp	r0, #0
    382e:	bf18      	it	ne
    3830:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    3834:	7820      	ldrb	r0, [r4, #0]
    3836:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
    383a:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
    383e:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
    3842:	7b60      	ldrb	r0, [r4, #13]
    3844:	2800      	cmp	r0, #0
    3846:	d1e0      	bne.n	380a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ce>
    3848:	e7dc      	b.n	3804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c8>
    384a:	4620      	mov	r0, r4
    384c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3850:	2100      	movs	r1, #0
    3852:	f00b b9ae 	b.w	ebb2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3856:	0000      	.short	0x0000
    3858:	20000b1c 	.word	0x20000b1c
    385c:	0000e949 	.word	0x0000e949
    3860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3862:	790a      	ldrb	r2, [r1, #4]
    3864:	f012 0f18 	tst.w	r2, #24
    3868:	d15e      	bne.n	3928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9ec>
    386a:	4605      	mov	r5, r0
    386c:	000c      	movs	r4, r1
    386e:	d028      	beq.n	38c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x986>
    3870:	6820      	ldr	r0, [r4, #0]
    3872:	2800      	cmp	r0, #0
    3874:	d02a      	beq.n	38cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x990>
    3876:	f00b f8ec 	bl	ea52 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    387a:	7b23      	ldrb	r3, [r4, #12]
    387c:	7b62      	ldrb	r2, [r4, #13]
    387e:	2b04      	cmp	r3, #4
    3880:	bf08      	it	eq
    3882:	2308      	moveq	r3, #8
    3884:	2a04      	cmp	r2, #4
    3886:	bf08      	it	eq
    3888:	2208      	moveq	r2, #8
    388a:	492a      	ldr	r1, [pc, #168]	; (3934 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9f8>)
    388c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    3890:	2b08      	cmp	r3, #8
    3892:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    3896:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    389a:	fbb1 f7fc 	udiv	r7, r1, ip
    389e:	bf08      	it	eq
    38a0:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    38a4:	d017      	beq.n	38d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x99a>
    38a6:	2b04      	cmp	r3, #4
    38a8:	bf08      	it	eq
    38aa:	f04f 0c10 	moveq.w	ip, #16
    38ae:	d012      	beq.n	38d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x99a>
    38b0:	2b02      	cmp	r3, #2
    38b2:	bf07      	ittee	eq
    38b4:	f04f 0c04 	moveq.w	ip, #4
    38b8:	2112      	moveq	r1, #18
    38ba:	f04f 0c08 	movne.w	ip, #8
    38be:	2119      	movne	r1, #25
    38c0:	e00a      	b.n	38d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x99c>
    38c2:	f240 410b 	movw	r1, #1035	; 0x40b
    38c6:	202d      	movs	r0, #45	; 0x2d
    38c8:	f7fc fe9c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    38cc:	f240 410c 	movw	r1, #1036	; 0x40c
    38d0:	202d      	movs	r0, #45	; 0x2d
    38d2:	f7fc fe97 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    38d6:	2114      	movs	r1, #20
    38d8:	fb1c f101 	smulbb	r1, ip, r1
    38dc:	2600      	movs	r6, #0
    38de:	2b08      	cmp	r3, #8
    38e0:	bf08      	it	eq
    38e2:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    38e6:	d021      	beq.n	392c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9f0>
    38e8:	2b04      	cmp	r3, #4
    38ea:	bf08      	it	eq
    38ec:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    38f0:	d01c      	beq.n	392c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9f0>
    38f2:	46b4      	mov	ip, r6
    38f4:	2b02      	cmp	r3, #2
    38f6:	bf0c      	ite	eq
    38f8:	2318      	moveq	r3, #24
    38fa:	2328      	movne	r3, #40	; 0x28
    38fc:	4463      	add	r3, ip
    38fe:	4419      	add	r1, r3
    3900:	fb11 7100 	smlabb	r1, r1, r0, r7
    3904:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    3908:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    390c:	4401      	add	r1, r0
    390e:	88a0      	ldrh	r0, [r4, #4]
    3910:	9000      	str	r0, [sp, #0]
    3912:	2300      	movs	r3, #0
    3914:	4628      	mov	r0, r5
    3916:	f7ff fd59 	bl	33cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    391a:	68a1      	ldr	r1, [r4, #8]
    391c:	f200 100b 	addw	r0, r0, #267	; 0x10b
    3920:	4281      	cmp	r1, r0
    3922:	bf3c      	itt	cc
    3924:	4630      	movcc	r0, r6
    3926:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
    3928:	2001      	movs	r0, #1
    392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    392c:	f44f 73a8 	mov.w	r3, #336	; 0x150
    3930:	e7e4      	b.n	38fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c0>
    3932:	0000      	.short	0x0000
    3934:	00003a4c 	.word	0x00003a4c
    3938:	b570      	push	{r4, r5, r6, lr}
    393a:	4604      	mov	r4, r0
    393c:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
    3940:	8808      	ldrh	r0, [r1, #0]
    3942:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    3946:	20ff      	movs	r0, #255	; 0xff
    3948:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
    394c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3950:	4616      	mov	r6, r2
    3952:	460d      	mov	r5, r1
    3954:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    3958:	2b00      	cmp	r3, #0
    395a:	bf18      	it	ne
    395c:	bd70      	popne	{r4, r5, r6, pc}
    395e:	6968      	ldr	r0, [r5, #20]
    3960:	f00a fbd1 	bl	e106 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3964:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
    3968:	8ba8      	ldrh	r0, [r5, #28]
    396a:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    396e:	8be8      	ldrh	r0, [r5, #30]
    3970:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
    3974:	f895 02f9 	ldrb.w	r0, [r5, #761]	; 0x2f9
    3978:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    397c:	7ea0      	ldrb	r0, [r4, #26]
    397e:	2500      	movs	r5, #0
    3980:	b148      	cbz	r0, 3996 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa5a>
    3982:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3986:	2801      	cmp	r0, #1
    3988:	d105      	bne.n	3996 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa5a>
    398a:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    398e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    3992:	2840      	cmp	r0, #64	; 0x40
    3994:	d02e      	beq.n	39f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xab8>
    3996:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
    399a:	b140      	cbz	r0, 39ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa72>
    399c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    39a0:	2801      	cmp	r0, #1
    39a2:	bf04      	itt	eq
    39a4:	f894 006e 	ldrbeq.w	r0, [r4, #110]	; 0x6e
    39a8:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    39ac:	d022      	beq.n	39f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xab8>
    39ae:	f104 009a 	add.w	r0, r4, #154	; 0x9a
    39b2:	f00c fbba 	bl	1012a <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    39b6:	481c      	ldr	r0, [pc, #112]	; (3a28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaec>)
    39b8:	2eff      	cmp	r6, #255	; 0xff
    39ba:	6880      	ldr	r0, [r0, #8]
    39bc:	7801      	ldrb	r1, [r0, #0]
    39be:	f3c1 1180 	ubfx	r1, r1, #6, #1
    39c2:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    39c6:	f8d0 1003 	ldr.w	r1, [r0, #3]
    39ca:	d021      	beq.n	3a10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xad4>
    39cc:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    39d0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    39d4:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    39d8:	f104 0294 	add.w	r2, r4, #148	; 0x94
    39dc:	1e51      	subs	r1, r2, #1
    39de:	4630      	mov	r0, r6
    39e0:	f7fd fe5c 	bl	169c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    39e4:	b178      	cbz	r0, 3a06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaca>
    39e6:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
    39ea:	f040 0002 	orr.w	r0, r0, #2
    39ee:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    39f2:	bd70      	pop	{r4, r5, r6, pc}
    39f4:	f8d4 0069 	ldr.w	r0, [r4, #105]	; 0x69
    39f8:	f8c4 009a 	str.w	r0, [r4, #154]	; 0x9a
    39fc:	f8b4 006d 	ldrh.w	r0, [r4, #109]	; 0x6d
    3a00:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    3a04:	e7d7      	b.n	39b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa7a>
    3a06:	f640 418b 	movw	r1, #3211	; 0xc8b
    3a0a:	202d      	movs	r0, #45	; 0x2d
    3a0c:	f7fc fdfa 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a10:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
    3a14:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3a18:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    3a1c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    3a20:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
    3a24:	bd70      	pop	{r4, r5, r6, pc}
    3a26:	0000      	.short	0x0000
    3a28:	200000b0 	.word	0x200000b0
    3a2c:	4802      	ldr	r0, [pc, #8]	; (3a38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xafc>)
    3a2e:	2101      	movs	r1, #1
    3a30:	6840      	ldr	r0, [r0, #4]
    3a32:	f7fe bfe7 	b.w	2a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
    3a36:	0000      	.short	0x0000
    3a38:	200000b0 	.word	0x200000b0
    3a3c:	00000003 	.word	0x00000003
    3a40:	00000001 	.word	0x00000001
    3a44:	00000000 	.word	0x00000000
    3a48:	00010000 	.word	0x00010000
    3a4c:	a62c0000 	.word	0xa62c0000
    3a50:	0000a1e0 	.word	0x0000a1e0
    3a54:	0000a820 	.word	0x0000a820
    3a58:	00000000 	.word	0x00000000
    3a5c:	0000a820 	.word	0x0000a820
    3a60:	00002ec1 	.word	0x00002ec1
    3a64:	00002be1 	.word	0x00002be1
    3a68:	00002e39 	.word	0x00002e39
    3a6c:	00000000 	.word	0x00000000
    3a70:	00002d25 	.word	0x00002d25
    3a74:	00002e69 	.word	0x00002e69
    3a78:	0000e93d 	.word	0x0000e93d
    3a7c:	0000e943 	.word	0x0000e943
    3a80:	0000320d 	.word	0x0000320d
    3a84:	00003235 	.word	0x00003235
    3a88:	00003a2d 	.word	0x00003a2d
    3a8c:	00003a7c 	.word	0x00003a7c
    3a90:	00003a74 	.word	0x00003a74
    3a94:	00003a70 	.word	0x00003a70

00003a98 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    3a98:	b510      	push	{r4, lr}
    3a9a:	1e42      	subs	r2, r0, #1
    3a9c:	2a02      	cmp	r2, #2
    3a9e:	d903      	bls.n	3aa8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    3aa0:	21ca      	movs	r1, #202	; 0xca
    3aa2:	202f      	movs	r0, #47	; 0x2f
    3aa4:	f7fc fdae 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3aa8:	1e40      	subs	r0, r0, #1
    3aaa:	2910      	cmp	r1, #16
    3aac:	bf02      	ittt	eq
    3aae:	490a      	ldreq	r1, [pc, #40]	; (3ad8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    3ab0:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    3ab4:	bd10      	popeq	{r4, pc}
    3ab6:	2912      	cmp	r1, #18
    3ab8:	bf14      	ite	ne
    3aba:	2913      	cmpne	r1, #19
    3abc:	4907      	ldreq	r1, [pc, #28]	; (3adc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    3abe:	d007      	beq.n	3ad0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    3ac0:	2915      	cmp	r1, #21
    3ac2:	bf08      	it	eq
    3ac4:	4906      	ldreq	r1, [pc, #24]	; (3ae0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    3ac6:	d003      	beq.n	3ad0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    3ac8:	21d8      	movs	r1, #216	; 0xd8
    3aca:	202f      	movs	r0, #47	; 0x2f
    3acc:	f7fc fd9a 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ad0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3ad4:	bd10      	pop	{r4, pc}
    3ad6:	0000      	.short	0x0000
    3ad8:	0000eb7c 	.word	0x0000eb7c
    3adc:	0000eb76 	.word	0x0000eb76
    3ae0:	0000eb82 	.word	0x0000eb82

00003ae4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    3ae4:	1e42      	subs	r2, r0, #1
    3ae6:	b510      	push	{r4, lr}
    3ae8:	b2d2      	uxtb	r2, r2
    3aea:	2a01      	cmp	r2, #1
    3aec:	d905      	bls.n	3afa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    3aee:	291d      	cmp	r1, #29
    3af0:	d01e      	beq.n	3b30 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    3af2:	21ee      	movs	r1, #238	; 0xee
    3af4:	202f      	movs	r0, #47	; 0x2f
    3af6:	f7fc fd85 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3afa:	2913      	cmp	r1, #19
    3afc:	d014      	beq.n	3b28 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    3afe:	dc08      	bgt.n	3b12 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    3b00:	2910      	cmp	r1, #16
    3b02:	bf02      	ittt	eq
    3b04:	480d      	ldreq	r0, [pc, #52]	; (3b3c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    3b06:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    3b0a:	bd10      	popeq	{r4, pc}
    3b0c:	2912      	cmp	r1, #18
    3b0e:	d00b      	beq.n	3b28 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    3b10:	e005      	b.n	3b1e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    3b12:	2915      	cmp	r1, #21
    3b14:	bf08      	it	eq
    3b16:	480a      	ldreq	r0, [pc, #40]	; (3b40 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    3b18:	d007      	beq.n	3b2a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    3b1a:	291d      	cmp	r1, #29
    3b1c:	d008      	beq.n	3b30 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    3b1e:	f44f 7181 	mov.w	r1, #258	; 0x102
    3b22:	202f      	movs	r0, #47	; 0x2f
    3b24:	f7fc fd6e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b28:	4806      	ldr	r0, [pc, #24]	; (3b44 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    3b2a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    3b2e:	bd10      	pop	{r4, pc}
    3b30:	f240 315a 	movw	r1, #858	; 0x35a
    3b34:	fb10 f001 	smulbb	r0, r0, r1
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	0000      	.short	0x0000
    3b3c:	0000eb6a 	.word	0x0000eb6a
    3b40:	0000eb72 	.word	0x0000eb72
    3b44:	0000eb6e 	.word	0x0000eb6e

00003b48 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    3b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b4c:	4604      	mov	r4, r0
    3b4e:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    3b52:	b083      	sub	sp, #12
    3b54:	4616      	mov	r6, r2
    3b56:	460d      	mov	r5, r1
    3b58:	bb40      	cbnz	r0, 3bac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
    3b5a:	4621      	mov	r1, r4
    3b5c:	486c      	ldr	r0, [pc, #432]	; (3d10 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1c8>)
    3b5e:	f007 fa17 	bl	af90 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    3b62:	4607      	mov	r7, r0
    3b64:	2820      	cmp	r0, #32
    3b66:	d021      	beq.n	3bac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
    3b68:	2250      	movs	r2, #80	; 0x50
    3b6a:	2100      	movs	r1, #0
    3b6c:	f504 7088 	add.w	r0, r4, #272	; 0x110
    3b70:	f00c fd15 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3b74:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
    3b78:	f04f 0801 	mov.w	r8, #1
    3b7c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    3b80:	f884 8128 	strb.w	r8, [r4, #296]	; 0x128
    3b84:	b135      	cbz	r5, 3b94 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    3b86:	f7fe fbff 	bl	2388 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    3b8a:	f000 0007 	and.w	r0, r0, #7
    3b8e:	1c40      	adds	r0, r0, #1
    3b90:	f885 032c 	strb.w	r0, [r5, #812]	; 0x32c
    3b94:	4620      	mov	r0, r4
    3b96:	f00a fe9a 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    3b9a:	2800      	cmp	r0, #0
    3b9c:	bf08      	it	eq
    3b9e:	2561      	moveq	r5, #97	; 0x61
    3ba0:	d029      	beq.n	3bf6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xae>
    3ba2:	4620      	mov	r0, r4
    3ba4:	f00a fe85 	bl	e8b2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    3ba8:	b120      	cbz	r0, 3bb4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x6c>
    3baa:	e00a      	b.n	3bc2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    3bac:	b003      	add	sp, #12
    3bae:	200c      	movs	r0, #12
    3bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3bb4:	4620      	mov	r0, r4
    3bb6:	f00a fe8e 	bl	e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    3bba:	2800      	cmp	r0, #0
    3bbc:	bf08      	it	eq
    3bbe:	2550      	moveq	r5, #80	; 0x50
    3bc0:	d000      	beq.n	3bc4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7c>
    3bc2:	2555      	movs	r5, #85	; 0x55
    3bc4:	4668      	mov	r0, sp
    3bc6:	f008 ff6f 	bl	caa8 <mpsl_fem_pa_is_configured>
    3bca:	f89d 0000 	ldrb.w	r0, [sp]
    3bce:	2800      	cmp	r0, #0
    3bd0:	bf14      	ite	ne
    3bd2:	2701      	movne	r7, #1
    3bd4:	2700      	moveq	r7, #0
    3bd6:	a801      	add	r0, sp, #4
    3bd8:	f008 ff4e 	bl	ca78 <mpsl_fem_lna_is_configured>
    3bdc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3be0:	2800      	cmp	r0, #0
    3be2:	bf18      	it	ne
    3be4:	2001      	movne	r0, #1
    3be6:	4338      	orrs	r0, r7
    3be8:	bf18      	it	ne
    3bea:	350a      	addne	r5, #10
    3bec:	f008 fea2 	bl	c934 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    3bf0:	2800      	cmp	r0, #0
    3bf2:	bf18      	it	ne
    3bf4:	3518      	addne	r5, #24
    3bf6:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
    3bfa:	2002      	movs	r0, #2
    3bfc:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
    3c00:	f884 813b 	strb.w	r8, [r4, #315]	; 0x13b
    3c04:	2500      	movs	r5, #0
    3c06:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    3c0a:	f00c fac0 	bl	1018e <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    3c0e:	4607      	mov	r7, r0
    3c10:	f8b4 9138 	ldrh.w	r9, [r4, #312]	; 0x138
    3c14:	f008 fb2e 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    3c18:	454f      	cmp	r7, r9
    3c1a:	bf98      	it	ls
    3c1c:	464f      	movls	r7, r9
    3c1e:	4438      	add	r0, r7
    3c20:	30cc      	adds	r0, #204	; 0xcc
    3c22:	b287      	uxth	r7, r0
    3c24:	4620      	mov	r0, r4
    3c26:	f00a fe4e 	bl	e8c6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    3c2a:	b378      	cbz	r0, 3c8c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x144>
    3c2c:	f00c f9c6 	bl	ffbc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    3c30:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    3c34:	b281      	uxth	r1, r0
    3c36:	4630      	mov	r0, r6
    3c38:	f008 fc1e 	bl	c478 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3c3c:	4430      	add	r0, r6
    3c3e:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    3c42:	f007 fbd3 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3c46:	19c0      	adds	r0, r0, r7
    3c48:	4169      	adcs	r1, r5
    3c4a:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
    3c4e:	f884 8118 	strb.w	r8, [r4, #280]	; 0x118
    3c52:	84e5      	strh	r5, [r4, #38]	; 0x26
    3c54:	4620      	mov	r0, r4
    3c56:	f00a fe30 	bl	e8ba <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    3c5a:	b148      	cbz	r0, 3c70 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x128>
    3c5c:	4620      	mov	r0, r4
    3c5e:	2101      	movs	r1, #1
    3c60:	f7fe fc72 	bl	2548 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    3c64:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3c68:	1a30      	subs	r0, r6, r0
    3c6a:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    3c6e:	e005      	b.n	3c7c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    3c70:	2001      	movs	r0, #1
    3c72:	f00a ff73 	bl	eb5c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3c76:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3c7a:	1a30      	subs	r0, r6, r0
    3c7c:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    3c80:	f04f 30ff 	mov.w	r0, #4294967295
    3c84:	0841      	lsrs	r1, r0, #1
    3c86:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
    3c8a:	e02b      	b.n	3ce4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x19c>
    3c8c:	e7ff      	b.n	3c8e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x146>
    3c8e:	4620      	mov	r0, r4
    3c90:	2100      	movs	r1, #0
    3c92:	f7fe fc59 	bl	2548 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    3c96:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3d14 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1cc>
    3c9a:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3c9e:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    3ca2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    3ca6:	2000      	movs	r0, #0
    3ca8:	2900      	cmp	r1, #0
    3caa:	bf1c      	itt	ne
    3cac:	8ce1      	ldrhne	r1, [r4, #38]	; 0x26
    3cae:	2900      	cmpne	r1, #0
    3cb0:	d007      	beq.n	3cc2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x17a>
    3cb2:	f7fe fb69 	bl	2388 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    3cb6:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    3cba:	fbb0 f2f1 	udiv	r2, r0, r1
    3cbe:	fb01 0012 	mls	r0, r1, r2, r0
    3cc2:	4407      	add	r7, r0
    3cc4:	f007 fb92 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3cc8:	19c0      	adds	r0, r0, r7
    3cca:	4169      	adcs	r1, r5
    3ccc:	2e00      	cmp	r6, #0
    3cce:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
    3cd2:	bf04      	itt	eq
    3cd4:	f04f 30ff 	moveq.w	r0, #4294967295
    3cd8:	0841      	lsreq	r1, r0, #1
    3cda:	d001      	beq.n	3ce0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x198>
    3cdc:	1980      	adds	r0, r0, r6
    3cde:	4169      	adcs	r1, r5
    3ce0:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
    3ce4:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    3ce8:	f504 7198 	add.w	r1, r4, #304	; 0x130
    3cec:	f006 fbc2 	bl	a474 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    3cf0:	b148      	cbz	r0, 3d06 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1be>
    3cf2:	f8a4 5148 	strh.w	r5, [r4, #328]	; 0x148
    3cf6:	2100      	movs	r1, #0
    3cf8:	4620      	mov	r0, r4
    3cfa:	f00a fe17 	bl	e92c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    3cfe:	b003      	add	sp, #12
    3d00:	2000      	movs	r0, #0
    3d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3d06:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
    3d0a:	2030      	movs	r0, #48	; 0x30
    3d0c:	f7fc fc7a 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d10:	0000ed47 	.word	0x0000ed47
    3d14:	200000c4 	.word	0x200000c4

00003d18 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    3d18:	4901      	ldr	r1, [pc, #4]	; (3d20 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    3d1a:	8088      	strh	r0, [r1, #4]
    3d1c:	4770      	bx	lr
    3d1e:	0000      	.short	0x0000
    3d20:	200000c4 	.word	0x200000c4

00003d24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    3d24:	4805      	ldr	r0, [pc, #20]	; (3d3c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    3d26:	2100      	movs	r1, #0
    3d28:	7001      	strb	r1, [r0, #0]
    3d2a:	2201      	movs	r2, #1
    3d2c:	7082      	strb	r2, [r0, #2]
    3d2e:	7041      	strb	r1, [r0, #1]
    3d30:	f242 7110 	movw	r1, #10000	; 0x2710
    3d34:	8081      	strh	r1, [r0, #4]
    3d36:	f000 b803 	b.w	3d40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    3d3a:	0000      	.short	0x0000
    3d3c:	200000c4 	.word	0x200000c4

00003d40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    3d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d44:	4e41      	ldr	r6, [pc, #260]	; (3e4c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10c>)
    3d46:	b085      	sub	sp, #20
    3d48:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    3d4c:	e9cd 0100 	strd	r0, r1, [sp]
    3d50:	4668      	mov	r0, sp
    3d52:	f7fc fecd 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3d56:	2701      	movs	r7, #1
    3d58:	2500      	movs	r5, #0
    3d5a:	bb10      	cbnz	r0, 3da2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
    3d5c:	9c00      	ldr	r4, [sp, #0]
    3d5e:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    3d62:	b1c8      	cbz	r0, 3d98 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x58>
    3d64:	f884 7158 	strb.w	r7, [r4, #344]	; 0x158
    3d68:	2101      	movs	r1, #1
    3d6a:	4620      	mov	r0, r4
    3d6c:	f00a fdde 	bl	e92c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    3d70:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    3d74:	b180      	cbz	r0, 3d98 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x58>
    3d76:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    3d7a:	f006 fe9d 	bl	aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    3d7e:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    3d82:	f006 ffed 	bl	ad60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    3d86:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    3d8a:	f006 ffc7 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    3d8e:	2800      	cmp	r0, #0
    3d90:	bf18      	it	ne
    3d92:	f884 5128 	strbne.w	r5, [r4, #296]	; 0x128
    3d96:	d00f      	beq.n	3db8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x78>
    3d98:	4668      	mov	r0, sp
    3d9a:	f7fc fea9 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3d9e:	2800      	cmp	r0, #0
    3da0:	d0dc      	beq.n	3d5c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    3da2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 3e50 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x110>
    3da6:	f888 7001 	strb.w	r7, [r8, #1]
    3daa:	e9d6 0100 	ldrd	r0, r1, [r6]
    3dae:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3db6:	e027      	b.n	3e08 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xc8>
    3db8:	f240 2105 	movw	r1, #517	; 0x205
    3dbc:	2030      	movs	r0, #48	; 0x30
    3dbe:	f7fc fc21 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dc2:	9802      	ldr	r0, [sp, #8]
    3dc4:	2800      	cmp	r0, #0
    3dc6:	bf1c      	itt	ne
    3dc8:	f890 133c 	ldrbne.w	r1, [r0, #828]	; 0x33c
    3dcc:	2900      	cmpne	r1, #0
    3dce:	d01b      	beq.n	3e08 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xc8>
    3dd0:	8800      	ldrh	r0, [r0, #0]
    3dd2:	42b8      	cmp	r0, r7
    3dd4:	bf18      	it	ne
    3dd6:	f04f 0920 	movne.w	r9, #32
    3dda:	d030      	beq.n	3e3e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
    3ddc:	2101      	movs	r1, #1
    3dde:	f009 fecf 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    3de2:	0004      	movs	r4, r0
    3de4:	d016      	beq.n	3e14 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xd4>
    3de6:	f894 0384 	ldrb.w	r0, [r4, #900]	; 0x384
    3dea:	f006 ffb9 	bl	ad60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    3dee:	f884 533c 	strb.w	r5, [r4, #828]	; 0x33c
    3df2:	f894 0384 	ldrb.w	r0, [r4, #900]	; 0x384
    3df6:	f006 ff91 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    3dfa:	f884 9384 	strb.w	r9, [r4, #900]	; 0x384
    3dfe:	e9d6 0100 	ldrd	r0, r1, [r6]
    3e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3e06:	e015      	b.n	3e34 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
    3e08:	a802      	add	r0, sp, #8
    3e0a:	f7fc fe71 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3e0e:	2800      	cmp	r0, #0
    3e10:	d0d7      	beq.n	3dc2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x82>
    3e12:	e014      	b.n	3e3e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
    3e14:	f44f 7190 	mov.w	r1, #288	; 0x120
    3e18:	2030      	movs	r0, #48	; 0x30
    3e1a:	f7fc fbf3 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e1e:	9802      	ldr	r0, [sp, #8]
    3e20:	2800      	cmp	r0, #0
    3e22:	bf1c      	itt	ne
    3e24:	f890 133c 	ldrbne.w	r1, [r0, #828]	; 0x33c
    3e28:	2900      	cmpne	r1, #0
    3e2a:	d003      	beq.n	3e34 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
    3e2c:	8800      	ldrh	r0, [r0, #0]
    3e2e:	42b8      	cmp	r0, r7
    3e30:	d1d4      	bne.n	3ddc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x9c>
    3e32:	e004      	b.n	3e3e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
    3e34:	a802      	add	r0, sp, #8
    3e36:	f7fc fe5b 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3e3a:	2800      	cmp	r0, #0
    3e3c:	d0ef      	beq.n	3e1e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
    3e3e:	f888 5001 	strb.w	r5, [r8, #1]
    3e42:	b005      	add	sp, #20
    3e44:	2000      	movs	r0, #0
    3e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e4a:	0000      	.short	0x0000
    3e4c:	00003e60 	.word	0x00003e60
    3e50:	200000c4 	.word	0x200000c4

00003e54 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    3e54:	4901      	ldr	r1, [pc, #4]	; (3e5c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    3e56:	7008      	strb	r0, [r1, #0]
    3e58:	4770      	bx	lr
    3e5a:	0000      	.short	0x0000
    3e5c:	200000c4 	.word	0x200000c4
    3e60:	00000000 	.word	0x00000000
    3e64:	00010000 	.word	0x00010000
    3e68:	00000000 	.word	0x00000000
    3e6c:	00020000 	.word	0x00020000
    3e70:	00000000 	.word	0x00000000
    3e74:	00020000 	.word	0x00020000
    3e78:	00000000 	.word	0x00000000
    3e7c:	00001e14 	.word	0x00001e14
    3e80:	00001130 	.word	0x00001130
    3e84:	00000000 	.word	0x00000000
    3e88:	0000ea60 	.word	0x0000ea60
	...
    3e98:	0000ea60 	.word	0x0000ea60
    3e9c:	00fa01f4 	.word	0x00fa01f4
    3ea0:	00640096 	.word	0x00640096
    3ea4:	0032004b 	.word	0x0032004b
    3ea8:	0014001e 	.word	0x0014001e
    3eac:	0005000a 	.word	0x0005000a
    3eb0:	00010002 	.word	0x00010002

00003eb4 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>:
    3eb4:	b510      	push	{r4, lr}
    3eb6:	4c11      	ldr	r4, [pc, #68]	; (3efc <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x48>)
    3eb8:	6862      	ldr	r2, [r4, #4]
    3eba:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    3ebe:	2a03      	cmp	r2, #3
    3ec0:	d004      	beq.n	3ecc <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x18>
    3ec2:	f640 4155 	movw	r1, #3157	; 0xc55
    3ec6:	2032      	movs	r0, #50	; 0x32
    3ec8:	f7fc fb9c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ecc:	2802      	cmp	r0, #2
    3ece:	bf18      	it	ne
    3ed0:	2803      	cmpne	r0, #3
    3ed2:	d005      	beq.n	3ee0 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x2c>
    3ed4:	f640 4163 	movw	r1, #3171	; 0xc63
    3ed8:	f04f 0032 	mov.w	r0, #50	; 0x32
    3edc:	f7fc fb92 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ee0:	2900      	cmp	r1, #0
    3ee2:	bf18      	it	ne
    3ee4:	f001 fb2e 	blne	5544 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    3ee8:	2000      	movs	r0, #0
    3eea:	6861      	ldr	r1, [r4, #4]
    3eec:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    3ef0:	f881 00c4 	strb.w	r0, [r1, #196]	; 0xc4
    3ef4:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    3ef8:	bd10      	pop	{r4, pc}
    3efa:	0000      	.short	0x0000
    3efc:	200000e0 	.word	0x200000e0

00003f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    3f00:	4801      	ldr	r0, [pc, #4]	; (3f08 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    3f02:	6840      	ldr	r0, [r0, #4]
    3f04:	30c0      	adds	r0, #192	; 0xc0
    3f06:	4770      	bx	lr
    3f08:	200000e0 	.word	0x200000e0

00003f0c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    3f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f10:	4c38      	ldr	r4, [pc, #224]	; (3ff4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xe8>)
    3f12:	6861      	ldr	r1, [r4, #4]
    3f14:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
    3f18:	2800      	cmp	r0, #0
    3f1a:	bf16      	itet	ne
    3f1c:	2802      	cmpne	r0, #2
    3f1e:	2000      	moveq	r0, #0
    3f20:	2001      	movne	r0, #1
    3f22:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    3f26:	f101 014a 	add.w	r1, r1, #74	; 0x4a
    3f2a:	f7fd fa83 	bl	1434 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3f2e:	6860      	ldr	r0, [r4, #4]
    3f30:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
    3f34:	2902      	cmp	r1, #2
    3f36:	bf16      	itet	ne
    3f38:	2903      	cmpne	r1, #3
    3f3a:	2101      	moveq	r1, #1
    3f3c:	2100      	movne	r1, #0
    3f3e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    3f42:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
    3f46:	f100 034a 	add.w	r3, r0, #74	; 0x4a
    3f4a:	f04f 0700 	mov.w	r7, #0
    3f4e:	2a01      	cmp	r2, #1
    3f50:	bf04      	itt	eq
    3f52:	795b      	ldrbeq	r3, [r3, #5]
    3f54:	f013 0fc0 	tsteq.w	r3, #192	; 0xc0
    3f58:	d00a      	beq.n	3f70 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x64>
    3f5a:	f100 034a 	add.w	r3, r0, #74	; 0x4a
    3f5e:	2a01      	cmp	r2, #1
    3f60:	d104      	bne.n	3f6c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x60>
    3f62:	795a      	ldrb	r2, [r3, #5]
    3f64:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3f68:	2a40      	cmp	r2, #64	; 0x40
    3f6a:	d001      	beq.n	3f70 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x64>
    3f6c:	2200      	movs	r2, #0
    3f6e:	e000      	b.n	3f72 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x66>
    3f70:	2201      	movs	r2, #1
    3f72:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    3f76:	2a00      	cmp	r2, #0
    3f78:	bf04      	itt	eq
    3f7a:	2900      	cmpeq	r1, #0
    3f7c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f80:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
    3f84:	f7fd fbe4 	bl	1750 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3f88:	491b      	ldr	r1, [pc, #108]	; (3ff8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xec>)
    3f8a:	fba0 6501 	umull	r6, r5, r0, r1
    3f8e:	f007 fa2d 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3f92:	1980      	adds	r0, r0, r6
    3f94:	4169      	adcs	r1, r5
    3f96:	e9c8 0100 	strd	r0, r1, [r8]
    3f9a:	6860      	ldr	r0, [r4, #4]
    3f9c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    3fa0:	2800      	cmp	r0, #0
    3fa2:	bf1c      	itt	ne
    3fa4:	2000      	movne	r0, #0
    3fa6:	f7fd faf3 	blne	1590 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    3faa:	2500      	movs	r5, #0
    3fac:	6860      	ldr	r0, [r4, #4]
    3fae:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    3fb2:	2900      	cmp	r1, #0
    3fb4:	bf1a      	itte	ne
    3fb6:	f890 105c 	ldrbne.w	r1, [r0, #92]	; 0x5c
    3fba:	2900      	cmpne	r1, #0
    3fbc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fc0:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    3fc4:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    3fc8:	2901      	cmp	r1, #1
    3fca:	d104      	bne.n	3fd6 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xca>
    3fcc:	7951      	ldrb	r1, [r2, #5]
    3fce:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    3fd2:	2940      	cmp	r1, #64	; 0x40
    3fd4:	d005      	beq.n	3fe2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xd6>
    3fd6:	4639      	mov	r1, r7
    3fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fdc:	304a      	adds	r0, #74	; 0x4a
    3fde:	f009 bfdd 	b.w	df9c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    3fe2:	f7fd fa7f 	bl	14e4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    3fe6:	6861      	ldr	r1, [r4, #4]
    3fe8:	462a      	mov	r2, r5
    3fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fee:	314a      	adds	r1, #74	; 0x4a
    3ff0:	f009 bfe5 	b.w	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3ff4:	200000e0 	.word	0x200000e0
    3ff8:	000f4240 	.word	0x000f4240

00003ffc <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>:
    3ffc:	4803      	ldr	r0, [pc, #12]	; (400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>)
    3ffe:	b510      	push	{r4, lr}
    4000:	6840      	ldr	r0, [r0, #4]
    4002:	308c      	adds	r0, #140	; 0x8c
    4004:	f00b ffcb 	bl	ff9e <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>
    4008:	2000      	movs	r0, #0
    400a:	bd10      	pop	{r4, pc}
    400c:	200000e0 	.word	0x200000e0

00004010 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    4010:	480b      	ldr	r0, [pc, #44]	; (4040 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    4012:	6840      	ldr	r0, [r0, #4]
    4014:	6e81      	ldr	r1, [r0, #104]	; 0x68
    4016:	2900      	cmp	r1, #0
    4018:	bf04      	itt	eq
    401a:	200c      	moveq	r0, #12
    401c:	4770      	bxeq	lr
    401e:	f100 016d 	add.w	r1, r0, #109	; 0x6d
    4022:	22ff      	movs	r2, #255	; 0xff
    4024:	700a      	strb	r2, [r1, #0]
    4026:	2200      	movs	r2, #0
    4028:	6682      	str	r2, [r0, #104]	; 0x68
    402a:	700a      	strb	r2, [r1, #0]
    402c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    4030:	2101      	movs	r1, #1
    4032:	fa01 f000 	lsl.w	r0, r1, r0
    4036:	4903      	ldr	r1, [pc, #12]	; (4044 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x34>)
    4038:	6008      	str	r0, [r1, #0]
    403a:	2000      	movs	r0, #0
    403c:	4770      	bx	lr
    403e:	0000      	.short	0x0000
    4040:	200000e0 	.word	0x200000e0
    4044:	4001f508 	.word	0x4001f508

00004048 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    4048:	4602      	mov	r2, r0
    404a:	b510      	push	{r4, lr}
    404c:	480f      	ldr	r0, [pc, #60]	; (408c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x44>)
    404e:	460c      	mov	r4, r1
    4050:	6082      	str	r2, [r0, #8]
    4052:	68c1      	ldr	r1, [r0, #12]
    4054:	b1a1      	cbz	r1, 4080 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x38>
    4056:	6842      	ldr	r2, [r0, #4]
    4058:	2000      	movs	r0, #0
    405a:	f8a2 00c2 	strh.w	r0, [r2, #194]	; 0xc2
    405e:	f882 00c4 	strb.w	r0, [r2, #196]	; 0xc4
    4062:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
    4066:	f001 fa43 	bl	54f0 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    406a:	4620      	mov	r0, r4
    406c:	f000 f834 	bl	40d8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    4070:	2800      	cmp	r0, #0
    4072:	bf08      	it	eq
    4074:	bd10      	popeq	{r4, pc}
    4076:	f640 119d 	movw	r1, #2461	; 0x99d
    407a:	2032      	movs	r0, #50	; 0x32
    407c:	f7fc fac2 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4080:	f640 1197 	movw	r1, #2455	; 0x997
    4084:	2032      	movs	r0, #50	; 0x32
    4086:	f7fc fabd 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    408a:	0000      	.short	0x0000
    408c:	200000e0 	.word	0x200000e0

00004090 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    4090:	4902      	ldr	r1, [pc, #8]	; (409c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    4092:	4801      	ldr	r0, [pc, #4]	; (4098 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    4094:	60c8      	str	r0, [r1, #12]
    4096:	4770      	bx	lr
    4098:	00005244 	.word	0x00005244
    409c:	200000e0 	.word	0x200000e0

000040a0 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    40a0:	b570      	push	{r4, r5, r6, lr}
    40a2:	4604      	mov	r4, r0
    40a4:	f7fd f826 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    40a8:	4605      	mov	r5, r0
    40aa:	f7fd f81d 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    40ae:	4601      	mov	r1, r0
    40b0:	4628      	mov	r0, r5
    40b2:	f009 fcaa 	bl	da0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    40b6:	0001      	movs	r1, r0
    40b8:	d006      	beq.n	40c8 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x28>
    40ba:	4806      	ldr	r0, [pc, #24]	; (40d4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x34>)
    40bc:	68c0      	ldr	r0, [r0, #12]
    40be:	6802      	ldr	r2, [r0, #0]
    40c0:	4620      	mov	r0, r4
    40c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40c6:	4710      	bx	r2
    40c8:	f640 21ab 	movw	r1, #2731	; 0xaab
    40cc:	2032      	movs	r0, #50	; 0x32
    40ce:	f7fc fa99 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40d2:	0000      	.short	0x0000
    40d4:	200000e0 	.word	0x200000e0

000040d8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    40d8:	b570      	push	{r4, r5, r6, lr}
    40da:	4d20      	ldr	r5, [pc, #128]	; (415c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x84>)
    40dc:	4606      	mov	r6, r0
    40de:	6868      	ldr	r0, [r5, #4]
    40e0:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    40e4:	2901      	cmp	r1, #1
    40e6:	bf1f      	itttt	ne
    40e8:	f890 0078 	ldrbne.w	r0, [r0, #120]	; 0x78
    40ec:	2800      	cmpne	r0, #0
    40ee:	200c      	movne	r0, #12
    40f0:	bd70      	popne	{r4, r5, r6, pc}
    40f2:	f7fd f823 	bl	113c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    40f6:	f001 f9fb 	bl	54f0 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    40fa:	6868      	ldr	r0, [r5, #4]
    40fc:	2400      	movs	r4, #0
    40fe:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    4102:	b130      	cbz	r0, 4112 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x3a>
    4104:	f003 fa28 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4108:	f003 f918 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    410c:	6868      	ldr	r0, [r5, #4]
    410e:	f880 4084 	strb.w	r4, [r0, #132]	; 0x84
    4112:	2246      	movs	r2, #70	; 0x46
    4114:	2100      	movs	r1, #0
    4116:	6868      	ldr	r0, [r5, #4]
    4118:	f00c fa41 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    411c:	6869      	ldr	r1, [r5, #4]
    411e:	2001      	movs	r0, #1
    4120:	f881 405d 	strb.w	r4, [r1, #93]	; 0x5d
    4124:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    4128:	f881 4058 	strb.w	r4, [r1, #88]	; 0x58
    412c:	f881 4082 	strb.w	r4, [r1, #130]	; 0x82
    4130:	f881 605e 	strb.w	r6, [r1, #94]	; 0x5e
    4134:	f881 40b0 	strb.w	r4, [r1, #176]	; 0xb0
    4138:	2007      	movs	r0, #7
    413a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    413e:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    4142:	22ff      	movs	r2, #255	; 0xff
    4144:	7002      	strb	r2, [r0, #0]
    4146:	f881 406c 	strb.w	r4, [r1, #108]	; 0x6c
    414a:	668c      	str	r4, [r1, #104]	; 0x68
    414c:	7004      	strb	r4, [r0, #0]
    414e:	3046      	adds	r0, #70	; 0x46
    4150:	7004      	strb	r4, [r0, #0]
    4152:	2000      	movs	r0, #0
    4154:	f8c1 40b4 	str.w	r4, [r1, #180]	; 0xb4
    4158:	bd70      	pop	{r4, r5, r6, pc}
    415a:	0000      	.short	0x0000
    415c:	200000e0 	.word	0x200000e0

00004160 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    4160:	4805      	ldr	r0, [pc, #20]	; (4178 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    4162:	6840      	ldr	r0, [r0, #4]
    4164:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    4168:	2800      	cmp	r0, #0
    416a:	bf16      	itet	ne
    416c:	2802      	cmpne	r0, #2
    416e:	2000      	moveq	r0, #0
    4170:	2001      	movne	r0, #1
    4172:	f7fd b98d 	b.w	1490 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    4176:	0000      	.short	0x0000
    4178:	200000e0 	.word	0x200000e0

0000417c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    417c:	7801      	ldrb	r1, [r0, #0]
    417e:	2200      	movs	r2, #0
    4180:	f011 0f01 	tst.w	r1, #1
    4184:	4923      	ldr	r1, [pc, #140]	; (4214 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x98>)
    4186:	6849      	ldr	r1, [r1, #4]
    4188:	d009      	beq.n	419e <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x22>
    418a:	7842      	ldrb	r2, [r0, #1]
    418c:	2300      	movs	r3, #0
    418e:	2a03      	cmp	r2, #3
    4190:	bf08      	it	eq
    4192:	654b      	streq	r3, [r1, #84]	; 0x54
    4194:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    4198:	2201      	movs	r2, #1
    419a:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    419e:	7803      	ldrb	r3, [r0, #0]
    41a0:	f013 0f02 	tst.w	r3, #2
    41a4:	d00e      	beq.n	41c4 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x48>
    41a6:	7883      	ldrb	r3, [r0, #2]
    41a8:	f04f 0c00 	mov.w	ip, #0
    41ac:	2b03      	cmp	r3, #3
    41ae:	bf08      	it	eq
    41b0:	f8c1 c054 	streq.w	ip, [r1, #84]	; 0x54
    41b4:	f881 3058 	strb.w	r3, [r1, #88]	; 0x58
    41b8:	2302      	movs	r3, #2
    41ba:	eb01 0c02 	add.w	ip, r1, r2
    41be:	1c52      	adds	r2, r2, #1
    41c0:	f88c 30c6 	strb.w	r3, [ip, #198]	; 0xc6
    41c4:	7803      	ldrb	r3, [r0, #0]
    41c6:	f013 0f04 	tst.w	r3, #4
    41ca:	d00c      	beq.n	41e6 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x6a>
    41cc:	78c3      	ldrb	r3, [r0, #3]
    41ce:	f04f 0c00 	mov.w	ip, #0
    41d2:	2b03      	cmp	r3, #3
    41d4:	bf08      	it	eq
    41d6:	f8c1 c054 	streq.w	ip, [r1, #84]	; 0x54
    41da:	f881 3058 	strb.w	r3, [r1, #88]	; 0x58
    41de:	440a      	add	r2, r1
    41e0:	2308      	movs	r3, #8
    41e2:	f882 30c6 	strb.w	r3, [r2, #198]	; 0xc6
    41e6:	7902      	ldrb	r2, [r0, #4]
    41e8:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
    41ec:	7942      	ldrb	r2, [r0, #5]
    41ee:	2a00      	cmp	r2, #0
    41f0:	bf16      	itet	ne
    41f2:	2a02      	cmpne	r2, #2
    41f4:	2301      	moveq	r3, #1
    41f6:	2300      	movne	r3, #0
    41f8:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
    41fc:	f881 2059 	strb.w	r2, [r1, #89]	; 0x59
    4200:	7982      	ldrb	r2, [r0, #6]
    4202:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
    4206:	79c0      	ldrb	r0, [r0, #7]
    4208:	f881 005b 	strb.w	r0, [r1, #91]	; 0x5b
    420c:	f04f 0000 	mov.w	r0, #0
    4210:	4770      	bx	lr
    4212:	0000      	.short	0x0000
    4214:	200000e0 	.word	0x200000e0

00004218 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    4218:	4801      	ldr	r0, [pc, #4]	; (4220 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    421a:	68c0      	ldr	r0, [r0, #12]
    421c:	6840      	ldr	r0, [r0, #4]
    421e:	4700      	bx	r0
    4220:	200000e0 	.word	0x200000e0

00004224 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    4224:	b538      	push	{r3, r4, r5, lr}
    4226:	4c13      	ldr	r4, [pc, #76]	; (4274 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x50>)
    4228:	2200      	movs	r2, #0
    422a:	6860      	ldr	r0, [r4, #4]
    422c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    4230:	f88d 1000 	strb.w	r1, [sp]
    4234:	f89d 1000 	ldrb.w	r1, [sp]
    4238:	b931      	cbnz	r1, 4248 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x24>
    423a:	6e81      	ldr	r1, [r0, #104]	; 0x68
    423c:	2900      	cmp	r1, #0
    423e:	bf1c      	itt	ne
    4240:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    4244:	f007 f8b4 	blne	b3b0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4248:	6860      	ldr	r0, [r4, #4]
    424a:	2500      	movs	r5, #0
    424c:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    4250:	b130      	cbz	r0, 4260 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x3c>
    4252:	f003 f981 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4256:	f003 f871 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    425a:	6860      	ldr	r0, [r4, #4]
    425c:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    4260:	6860      	ldr	r0, [r4, #4]
    4262:	f8a0 50c2 	strh.w	r5, [r0, #194]	; 0xc2
    4266:	f880 50c4 	strb.w	r5, [r0, #196]	; 0xc4
    426a:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
    426e:	2000      	movs	r0, #0
    4270:	bd38      	pop	{r3, r4, r5, pc}
    4272:	0000      	.short	0x0000
    4274:	200000e0 	.word	0x200000e0

00004278 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    4278:	4806      	ldr	r0, [pc, #24]	; (4294 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>)
    427a:	b081      	sub	sp, #4
    427c:	6840      	ldr	r0, [r0, #4]
    427e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    4282:	f88d 0000 	strb.w	r0, [sp]
    4286:	f89d 0000 	ldrb.w	r0, [sp]
    428a:	2800      	cmp	r0, #0
    428c:	bf18      	it	ne
    428e:	2001      	movne	r0, #1
    4290:	b001      	add	sp, #4
    4292:	4770      	bx	lr
    4294:	200000e0 	.word	0x200000e0

00004298 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    4298:	4809      	ldr	r0, [pc, #36]	; (42c0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x28>)
    429a:	6840      	ldr	r0, [r0, #4]
    429c:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    42a0:	2903      	cmp	r1, #3
    42a2:	bf0c      	ite	eq
    42a4:	2101      	moveq	r1, #1
    42a6:	2100      	movne	r1, #0
    42a8:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    42ac:	bf04      	itt	eq
    42ae:	6d41      	ldreq	r1, [r0, #84]	; 0x54
    42b0:	8809      	ldrheq	r1, [r1, #0]
    42b2:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    42b6:	2217      	movs	r2, #23
    42b8:	4902      	ldr	r1, [pc, #8]	; (42c4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    42ba:	3038      	adds	r0, #56	; 0x38
    42bc:	f7fd bf9e 	b.w	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    42c0:	200000e0 	.word	0x200000e0
    42c4:	00004f61 	.word	0x00004f61

000042c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    42c8:	4802      	ldr	r0, [pc, #8]	; (42d4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    42ca:	6840      	ldr	r0, [r0, #4]
    42cc:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    42d0:	4770      	bx	lr
    42d2:	0000      	.short	0x0000
    42d4:	200000e0 	.word	0x200000e0

000042d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    42d8:	480c      	ldr	r0, [pc, #48]	; (430c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    42da:	6841      	ldr	r1, [r0, #4]
    42dc:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    42e0:	2803      	cmp	r0, #3
    42e2:	d004      	beq.n	42ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    42e4:	2801      	cmp	r0, #1
    42e6:	bf18      	it	ne
    42e8:	2802      	cmpne	r0, #2
    42ea:	d007      	beq.n	42fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    42ec:	e004      	b.n	42f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    42ee:	f891 005a 	ldrb.w	r0, [r1, #90]	; 0x5a
    42f2:	2801      	cmp	r0, #1
    42f4:	bf08      	it	eq
    42f6:	4770      	bxeq	lr
    42f8:	2000      	movs	r0, #0
    42fa:	4770      	bx	lr
    42fc:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    4300:	2801      	cmp	r0, #1
    4302:	bf14      	ite	ne
    4304:	2803      	cmpne	r0, #3
    4306:	2001      	moveq	r0, #1
    4308:	d1f6      	bne.n	42f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    430a:	4770      	bx	lr
    430c:	200000e0 	.word	0x200000e0
    4310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4314:	4e1d      	ldr	r6, [pc, #116]	; (438c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb4>)
    4316:	4605      	mov	r5, r0
    4318:	460f      	mov	r7, r1
    431a:	6870      	ldr	r0, [r6, #4]
    431c:	491c      	ldr	r1, [pc, #112]	; (4390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb8>)
    431e:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
    4322:	5c0c      	ldrb	r4, [r1, r0]
    4324:	4620      	mov	r0, r4
    4326:	f003 ffb1 	bl	828c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    432a:	6870      	ldr	r0, [r6, #4]
    432c:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    4330:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    4334:	30c6      	adds	r0, #198	; 0xc6
    4336:	5c0c      	ldrb	r4, [r1, r0]
    4338:	2c01      	cmp	r4, #1
    433a:	bf08      	it	eq
    433c:	2025      	moveq	r0, #37	; 0x25
    433e:	d00e      	beq.n	435e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    4340:	2c02      	cmp	r4, #2
    4342:	bf08      	it	eq
    4344:	200d      	moveq	r0, #13
    4346:	d00a      	beq.n	435e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    4348:	2c04      	cmp	r4, #4
    434a:	bf14      	ite	ne
    434c:	2c08      	cmpne	r4, #8
    434e:	200f      	moveq	r0, #15
    4350:	d005      	beq.n	435e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    4352:	f640 110c 	movw	r1, #2316	; 0x90c
    4356:	f04f 0032 	mov.w	r0, #50	; 0x32
    435a:	f7fc f953 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    435e:	4621      	mov	r1, r4
    4360:	f003 ff60 	bl	8224 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    4364:	4638      	mov	r0, r7
    4366:	f003 fd49 	bl	7dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    436a:	4621      	mov	r1, r4
    436c:	f04f 0001 	mov.w	r0, #1
    4370:	b135      	cbz	r5, 4380 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>
    4372:	f003 fa83 	bl	787c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4376:	2800      	cmp	r0, #0
    4378:	bf08      	it	eq
    437a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    437e:	e001      	b.n	4384 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>
    4380:	f003 f9c2 	bl	7708 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    4384:	2001      	movs	r0, #1
    4386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    438a:	0000      	.short	0x0000
    438c:	200000e0 	.word	0x200000e0
    4390:	00010708 	.word	0x00010708
    4394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4398:	4c79      	ldr	r4, [pc, #484]	; (4580 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a8>)
    439a:	460f      	mov	r7, r1
    439c:	4606      	mov	r6, r0
    439e:	6840      	ldr	r0, [r0, #4]
    43a0:	6861      	ldr	r1, [r4, #4]
    43a2:	b083      	sub	sp, #12
    43a4:	4690      	mov	r8, r2
    43a6:	f04f 0a01 	mov.w	sl, #1
    43aa:	2f07      	cmp	r7, #7
    43ac:	bf04      	itt	eq
    43ae:	2800      	cmpeq	r0, #0
    43b0:	f1b8 0f00 	cmpeq.w	r8, #0
    43b4:	d00a      	beq.n	43cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf4>
    43b6:	f04f 0900 	mov.w	r9, #0
    43ba:	f88d 9000 	strb.w	r9, [sp]
    43be:	46eb      	mov	fp, sp
    43c0:	2800      	cmp	r0, #0
    43c2:	d048      	beq.n	4456 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    43c4:	7c72      	ldrb	r2, [r6, #17]
    43c6:	2a01      	cmp	r2, #1
    43c8:	d01a      	beq.n	4400 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    43ca:	e020      	b.n	440e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x136>
    43cc:	f881 a08a 	strb.w	sl, [r1, #138]	; 0x8a
    43d0:	f891 00b3 	ldrb.w	r0, [r1, #179]	; 0xb3
    43d4:	f88d 0004 	strb.w	r0, [sp, #4]
    43d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    43dc:	2800      	cmp	r0, #0
    43de:	bf04      	itt	eq
    43e0:	b003      	addeq	sp, #12
    43e2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43e6:	f8d1 00b4 	ldr.w	r0, [r1, #180]	; 0xb4
    43ea:	3050      	adds	r0, #80	; 0x50
    43ec:	f00b fe23 	bl	10036 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
    43f0:	2800      	cmp	r0, #0
    43f2:	bf04      	itt	eq
    43f4:	6860      	ldreq	r0, [r4, #4]
    43f6:	f880 a08b 	strbeq.w	sl, [r0, #139]	; 0x8b
    43fa:	b003      	add	sp, #12
    43fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4400:	7942      	ldrb	r2, [r0, #5]
    4402:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    4406:	2a40      	cmp	r2, #64	; 0x40
    4408:	bf08      	it	eq
    440a:	2501      	moveq	r5, #1
    440c:	d000      	beq.n	4410 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>
    440e:	2500      	movs	r5, #0
    4410:	2f07      	cmp	r7, #7
    4412:	d127      	bne.n	4464 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x18c>
    4414:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    4418:	2a00      	cmp	r2, #0
    441a:	bf18      	it	ne
    441c:	2d00      	cmpne	r5, #0
    441e:	d011      	beq.n	4444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    4420:	f1b8 0f00 	cmp.w	r8, #0
    4424:	bf04      	itt	eq
    4426:	f891 10c1 	ldrbeq.w	r1, [r1, #193]	; 0xc1
    442a:	2901      	cmpeq	r1, #1
    442c:	d014      	beq.n	4458 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x180>
    442e:	bf00      	nop
    4430:	f009 fe2f 	bl	e092 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    4434:	4601      	mov	r1, r0
    4436:	6860      	ldr	r0, [r4, #4]
    4438:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    443c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4440:	f880 a088 	strb.w	sl, [r0, #136]	; 0x88
    4444:	6862      	ldr	r2, [r4, #4]
    4446:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
    444a:	28ff      	cmp	r0, #255	; 0xff
    444c:	d012      	beq.n	4474 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x19c>
    444e:	f7fd f93f 	bl	16d0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    4452:	f88d 0000 	strb.w	r0, [sp]
    4456:	e03b      	b.n	44d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f8>
    4458:	2101      	movs	r1, #1
    445a:	f7fd f8ff 	bl	165c <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>
    445e:	6861      	ldr	r1, [r4, #4]
    4460:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    4464:	6860      	ldr	r0, [r4, #4]
    4466:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    446a:	2800      	cmp	r0, #0
    446c:	bf18      	it	ne
    446e:	2d00      	cmpne	r5, #0
    4470:	d0e8      	beq.n	4444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    4472:	e7dd      	b.n	4430 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    4474:	f102 0380 	add.w	r3, r2, #128	; 0x80
    4478:	7c70      	ldrb	r0, [r6, #17]
    447a:	465a      	mov	r2, fp
    447c:	6871      	ldr	r1, [r6, #4]
    447e:	f7fd f96d 	bl	175c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    4482:	f090 0f01 	teq	r0, #1
    4486:	d023      	beq.n	44d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f8>
    4488:	6860      	ldr	r0, [r4, #4]
    448a:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    448e:	f880 908b 	strb.w	r9, [r0, #139]	; 0x8b
    4492:	bf00      	nop
    4494:	f04f 0200 	mov.w	r2, #0
    4498:	68b0      	ldr	r0, [r6, #8]
    449a:	2800      	cmp	r0, #0
    449c:	bf04      	itt	eq
    449e:	b003      	addeq	sp, #12
    44a0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44a4:	2f07      	cmp	r7, #7
    44a6:	bf1c      	itt	ne
    44a8:	b003      	addne	sp, #12
    44aa:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44ae:	6861      	ldr	r1, [r4, #4]
    44b0:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    44b4:	29ff      	cmp	r1, #255	; 0xff
    44b6:	bf12      	itee	ne
    44b8:	2a00      	cmpne	r2, #0
    44ba:	b003      	addeq	sp, #12
    44bc:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44c0:	f7fd f936 	bl	1730 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>
    44c4:	6860      	ldr	r0, [r4, #4]
    44c6:	f880 a089 	strb.w	sl, [r0, #137]	; 0x89
    44ca:	b003      	add	sp, #12
    44cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44d0:	6861      	ldr	r1, [r4, #4]
    44d2:	f89d 0000 	ldrb.w	r0, [sp]
    44d6:	2f07      	cmp	r7, #7
    44d8:	f891 5051 	ldrb.w	r5, [r1, #81]	; 0x51
    44dc:	d309      	bcc.n	44f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x21a>
    44de:	2f08      	cmp	r7, #8
    44e0:	d829      	bhi.n	4536 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    44e2:	f1b8 0f00 	cmp.w	r8, #0
    44e6:	d002      	beq.n	44ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x216>
    44e8:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    44ec:	b319      	cbz	r1, 4536 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    44ee:	6871      	ldr	r1, [r6, #4]
    44f0:	b119      	cbz	r1, 44fa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x222>
    44f2:	2d00      	cmp	r5, #0
    44f4:	bf08      	it	eq
    44f6:	4605      	moveq	r5, r0
    44f8:	e01e      	b.n	4538 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    44fa:	f1b8 0f00 	cmp.w	r8, #0
    44fe:	d105      	bne.n	450c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x234>
    4500:	7870      	ldrb	r0, [r6, #1]
    4502:	f010 0f10 	tst.w	r0, #16
    4506:	bf18      	it	ne
    4508:	4655      	movne	r5, sl
    450a:	d115      	bne.n	4538 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    450c:	f00a fd10 	bl	ef30 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>
    4510:	b130      	cbz	r0, 4520 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    4512:	6860      	ldr	r0, [r4, #4]
    4514:	f890 008a 	ldrb.w	r0, [r0, #138]	; 0x8a
    4518:	2800      	cmp	r0, #0
    451a:	bf18      	it	ne
    451c:	2001      	movne	r0, #1
    451e:	d100      	bne.n	4522 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24a>
    4520:	2000      	movs	r0, #0
    4522:	4328      	orrs	r0, r5
    4524:	d105      	bne.n	4532 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25a>
    4526:	f7fd f9a5 	bl	1874 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>
    452a:	2800      	cmp	r0, #0
    452c:	bf08      	it	eq
    452e:	2500      	moveq	r5, #0
    4530:	d002      	beq.n	4538 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    4532:	2501      	movs	r5, #1
    4534:	e000      	b.n	4538 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    4536:	464d      	mov	r5, r9
    4538:	6860      	ldr	r0, [r4, #4]
    453a:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    453e:	4811      	ldr	r0, [pc, #68]	; (4584 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2ac>)
    4540:	6802      	ldr	r2, [r0, #0]
    4542:	b12a      	cbz	r2, 4550 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    4544:	4641      	mov	r1, r8
    4546:	4630      	mov	r0, r6
    4548:	4790      	blx	r2
    454a:	6861      	ldr	r1, [r4, #4]
    454c:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
    4550:	6870      	ldr	r0, [r6, #4]
    4552:	b150      	cbz	r0, 456a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x292>
    4554:	6860      	ldr	r0, [r4, #4]
    4556:	7c71      	ldrb	r1, [r6, #17]
    4558:	f880 109b 	strb.w	r1, [r0, #155]	; 0x9b
    455c:	6871      	ldr	r1, [r6, #4]
    455e:	680a      	ldr	r2, [r1, #0]
    4560:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    4564:	8889      	ldrh	r1, [r1, #4]
    4566:	f8a0 1098 	strh.w	r1, [r0, #152]	; 0x98
    456a:	6860      	ldr	r0, [r4, #4]
    456c:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    4570:	2900      	cmp	r1, #0
    4572:	bf06      	itte	eq
    4574:	f890 008a 	ldrbeq.w	r0, [r0, #138]	; 0x8a
    4578:	2800      	cmpeq	r0, #0
    457a:	2201      	movne	r2, #1
    457c:	d18c      	bne.n	4498 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1c0>
    457e:	e789      	b.n	4494 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    4580:	200000e0 	.word	0x200000e0
    4584:	200000f0 	.word	0x200000f0
    4588:	b510      	push	{r4, lr}
    458a:	f7fd fc1d 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    458e:	4c09      	ldr	r4, [pc, #36]	; (45b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    4590:	7020      	strb	r0, [r4, #0]
    4592:	6860      	ldr	r0, [r4, #4]
    4594:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    4598:	b138      	cbz	r0, 45aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2d2>
    459a:	f002 ffdd 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    459e:	f002 fecd 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    45a2:	6861      	ldr	r1, [r4, #4]
    45a4:	2000      	movs	r0, #0
    45a6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    45aa:	f002 fffd 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    45ae:	2005      	movs	r0, #5
    45b0:	bd10      	pop	{r4, pc}
    45b2:	0000      	.short	0x0000
    45b4:	200000e0 	.word	0x200000e0
    45b8:	b510      	push	{r4, lr}
    45ba:	f7fd fc05 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    45be:	4903      	ldr	r1, [pc, #12]	; (45cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2f4>)
    45c0:	7008      	strb	r0, [r1, #0]
    45c2:	f002 fff1 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    45c6:	2005      	movs	r0, #5
    45c8:	bd10      	pop	{r4, pc}
    45ca:	0000      	.short	0x0000
    45cc:	200000e0 	.word	0x200000e0
    45d0:	b570      	push	{r4, r5, r6, lr}
    45d2:	b08a      	sub	sp, #40	; 0x28
    45d4:	4606      	mov	r6, r0
    45d6:	f7fd fbf7 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    45da:	4d11      	ldr	r5, [pc, #68]	; (4620 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x348>)
    45dc:	4669      	mov	r1, sp
    45de:	7028      	strb	r0, [r5, #0]
    45e0:	7830      	ldrb	r0, [r6, #0]
    45e2:	f000 040f 	and.w	r4, r0, #15
    45e6:	4622      	mov	r2, r4
    45e8:	4630      	mov	r0, r6
    45ea:	f001 f943 	bl	5874 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    45ee:	2200      	movs	r2, #0
    45f0:	4621      	mov	r1, r4
    45f2:	4668      	mov	r0, sp
    45f4:	f7ff fece 	bl	4394 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc>
    45f8:	4621      	mov	r1, r4
    45fa:	4668      	mov	r0, sp
    45fc:	f000 f910 	bl	4820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x548>
    4600:	6869      	ldr	r1, [r5, #4]
    4602:	4604      	mov	r4, r0
    4604:	f891 1084 	ldrb.w	r1, [r1, #132]	; 0x84
    4608:	b139      	cbz	r1, 461a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    460a:	f002 ffa5 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    460e:	f002 fe95 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4612:	6868      	ldr	r0, [r5, #4]
    4614:	2100      	movs	r1, #0
    4616:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    461a:	b00a      	add	sp, #40	; 0x28
    461c:	4620      	mov	r0, r4
    461e:	bd70      	pop	{r4, r5, r6, pc}
    4620:	200000e0 	.word	0x200000e0
    4624:	b510      	push	{r4, lr}
    4626:	7801      	ldrb	r1, [r0, #0]
    4628:	b08c      	sub	sp, #48	; 0x30
    462a:	f001 040f 	and.w	r4, r1, #15
    462e:	4622      	mov	r2, r4
    4630:	a902      	add	r1, sp, #8
    4632:	f001 f91f 	bl	5874 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    4636:	f002 ffb7 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    463a:	f7fd fbc5 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    463e:	4b22      	ldr	r3, [pc, #136]	; (46c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>)
    4640:	2c04      	cmp	r4, #4
    4642:	7018      	strb	r0, [r3, #0]
    4644:	d138      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    4646:	9903      	ldr	r1, [sp, #12]
    4648:	780a      	ldrb	r2, [r1, #0]
    464a:	6859      	ldr	r1, [r3, #4]
    464c:	f891 c094 	ldrb.w	ip, [r1, #148]	; 0x94
    4650:	4562      	cmp	r2, ip
    4652:	d131      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    4654:	9a03      	ldr	r2, [sp, #12]
    4656:	f891 c095 	ldrb.w	ip, [r1, #149]	; 0x95
    465a:	7852      	ldrb	r2, [r2, #1]
    465c:	4562      	cmp	r2, ip
    465e:	d12b      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    4660:	9a03      	ldr	r2, [sp, #12]
    4662:	f891 c096 	ldrb.w	ip, [r1, #150]	; 0x96
    4666:	7892      	ldrb	r2, [r2, #2]
    4668:	4562      	cmp	r2, ip
    466a:	d125      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    466c:	9a03      	ldr	r2, [sp, #12]
    466e:	f891 c097 	ldrb.w	ip, [r1, #151]	; 0x97
    4672:	78d2      	ldrb	r2, [r2, #3]
    4674:	4562      	cmp	r2, ip
    4676:	d11f      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    4678:	9a03      	ldr	r2, [sp, #12]
    467a:	f891 c098 	ldrb.w	ip, [r1, #152]	; 0x98
    467e:	7912      	ldrb	r2, [r2, #4]
    4680:	4562      	cmp	r2, ip
    4682:	d119      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    4684:	9a03      	ldr	r2, [sp, #12]
    4686:	f891 c099 	ldrb.w	ip, [r1, #153]	; 0x99
    468a:	7952      	ldrb	r2, [r2, #5]
    468c:	4562      	cmp	r2, ip
    468e:	d113      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    4690:	f89d 2019 	ldrb.w	r2, [sp, #25]
    4694:	f891 c09b 	ldrb.w	ip, [r1, #155]	; 0x9b
    4698:	4562      	cmp	r2, ip
    469a:	d10d      	bne.n	46b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e0>
    469c:	287f      	cmp	r0, #127	; 0x7f
    469e:	d00e      	beq.n	46be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e6>
    46a0:	227f      	movs	r2, #127	; 0x7f
    46a2:	701a      	strb	r2, [r3, #0]
    46a4:	9000      	str	r0, [sp, #0]
    46a6:	f891 309a 	ldrb.w	r3, [r1, #154]	; 0x9a
    46aa:	f891 20b0 	ldrb.w	r2, [r1, #176]	; 0xb0
    46ae:	f891 1081 	ldrb.w	r1, [r1, #129]	; 0x81
    46b2:	a802      	add	r0, sp, #8
    46b4:	f000 fea8 	bl	5408 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    46b8:	b00c      	add	sp, #48	; 0x30
    46ba:	2005      	movs	r0, #5
    46bc:	bd10      	pop	{r4, pc}
    46be:	f44f 6189 	mov.w	r1, #1096	; 0x448
    46c2:	2032      	movs	r0, #50	; 0x32
    46c4:	f7fb ff9e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c8:	200000e0 	.word	0x200000e0
    46cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46d0:	4c52      	ldr	r4, [pc, #328]	; (481c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x544>)
    46d2:	4606      	mov	r6, r0
    46d4:	2100      	movs	r1, #0
    46d6:	6860      	ldr	r0, [r4, #4]
    46d8:	2e03      	cmp	r6, #3
    46da:	f100 0778 	add.w	r7, r0, #120	; 0x78
    46de:	68a0      	ldr	r0, [r4, #8]
    46e0:	8001      	strh	r1, [r0, #0]
    46e2:	d002      	beq.n	46ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x412>
    46e4:	2e05      	cmp	r6, #5
    46e6:	d004      	beq.n	46f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41a>
    46e8:	e057      	b.n	479a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c2>
    46ea:	2103      	movs	r1, #3
    46ec:	f009 ff13 	bl	e516 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    46f0:	e053      	b.n	479a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c2>
    46f2:	2105      	movs	r1, #5
    46f4:	f009 ff0f 	bl	e516 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    46f8:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
    46fc:	6d48      	ldr	r0, [r1, #84]	; 0x54
    46fe:	6980      	ldr	r0, [r0, #24]
    4700:	f8c5 000f 	str.w	r0, [r5, #15]
    4704:	6d48      	ldr	r0, [r1, #84]	; 0x54
    4706:	6a00      	ldr	r0, [r0, #32]
    4708:	74e8      	strb	r0, [r5, #19]
    470a:	0a02      	lsrs	r2, r0, #8
    470c:	752a      	strb	r2, [r5, #20]
    470e:	0c00      	lsrs	r0, r0, #16
    4710:	7568      	strb	r0, [r5, #21]
    4712:	6d48      	ldr	r0, [r1, #84]	; 0x54
    4714:	6941      	ldr	r1, [r0, #20]
    4716:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    4718:	f7fd fb0e 	bl	1d38 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    471c:	75a8      	strb	r0, [r5, #22]
    471e:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    4722:	6d40      	ldr	r0, [r0, #84]	; 0x54
    4724:	6941      	ldr	r1, [r0, #20]
    4726:	6a40      	ldr	r0, [r0, #36]	; 0x24
    4728:	f7fd faf4 	bl	1d14 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    472c:	75e8      	strb	r0, [r5, #23]
    472e:	0a00      	lsrs	r0, r0, #8
    4730:	7628      	strb	r0, [r5, #24]
    4732:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    4736:	6d40      	ldr	r0, [r0, #84]	; 0x54
    4738:	6940      	ldr	r0, [r0, #20]
    473a:	f009 fce4 	bl	e106 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    473e:	7668      	strb	r0, [r5, #25]
    4740:	0a00      	lsrs	r0, r0, #8
    4742:	76a8      	strb	r0, [r5, #26]
    4744:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    4748:	6d51      	ldr	r1, [r2, #84]	; 0x54
    474a:	8b89      	ldrh	r1, [r1, #28]
    474c:	76c1      	strb	r1, [r0, #27]
    474e:	0a09      	lsrs	r1, r1, #8
    4750:	7701      	strb	r1, [r0, #28]
    4752:	6d51      	ldr	r1, [r2, #84]	; 0x54
    4754:	8bc9      	ldrh	r1, [r1, #30]
    4756:	7741      	strb	r1, [r0, #29]
    4758:	0a09      	lsrs	r1, r1, #8
    475a:	7781      	strb	r1, [r0, #30]
    475c:	6d51      	ldr	r1, [r2, #84]	; 0x54
    475e:	301f      	adds	r0, #31
    4760:	31ce      	adds	r1, #206	; 0xce
    4762:	f00b fcdd 	bl	10120 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    4766:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    476a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    476c:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    4770:	f890 00d9 	ldrb.w	r0, [r0, #217]	; 0xd9
    4774:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    4778:	f000 001f 	and.w	r0, r0, #31
    477c:	4308      	orrs	r0, r1
    477e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    4782:	f002 fdbb 	bl	72fc <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    4786:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    478a:	22e0      	movs	r2, #224	; 0xe0
    478c:	f001 011f 	and.w	r1, r1, #31
    4790:	ea02 1040 	and.w	r0, r2, r0, lsl #5
    4794:	4308      	orrs	r0, r1
    4796:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    479a:	f107 011c 	add.w	r1, r7, #28
    479e:	68a0      	ldr	r0, [r4, #8]
    47a0:	f009 fedb 	bl	e55a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    47a4:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
    47a8:	68a0      	ldr	r0, [r4, #8]
    47aa:	f009 fedd 	bl	e568 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    47ae:	6860      	ldr	r0, [r4, #4]
    47b0:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    47b4:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    47b8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    47bc:	b1a1      	cbz	r1, 47e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x510>
    47be:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    47c2:	f04f 0801 	mov.w	r8, #1
    47c6:	2903      	cmp	r1, #3
    47c8:	d106      	bne.n	47d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x500>
    47ca:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    47ce:	2900      	cmp	r1, #0
    47d0:	bf18      	it	ne
    47d2:	f890 0083 	ldrbne.w	r0, [r0, #131]	; 0x83
    47d6:	d101      	bne.n	47dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x504>
    47d8:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    47dc:	f7fc ff10 	bl	1600 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    47e0:	2800      	cmp	r0, #0
    47e2:	bf1c      	itt	ne
    47e4:	4647      	movne	r7, r8
    47e6:	4605      	movne	r5, r0
    47e8:	4629      	mov	r1, r5
    47ea:	68a0      	ldr	r0, [r4, #8]
    47ec:	f009 fec5 	bl	e57a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    47f0:	4639      	mov	r1, r7
    47f2:	68a0      	ldr	r0, [r4, #8]
    47f4:	f009 fec8 	bl	e588 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    47f8:	68a0      	ldr	r0, [r4, #8]
    47fa:	f003 faff 	bl	7dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    47fe:	2e05      	cmp	r6, #5
    4800:	bf18      	it	ne
    4802:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    4806:	6860      	ldr	r0, [r4, #4]
    4808:	682a      	ldr	r2, [r5, #0]
    480a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    480c:	f8c1 200a 	str.w	r2, [r1, #10]
    4810:	88aa      	ldrh	r2, [r5, #4]
    4812:	81ca      	strh	r2, [r1, #14]
    4814:	6d40      	ldr	r0, [r0, #84]	; 0x54
    4816:	7247      	strb	r7, [r0, #9]
    4818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    481c:	200000e0 	.word	0x200000e0
    4820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4824:	4cee      	ldr	r4, [pc, #952]	; (4be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
    4826:	267f      	movs	r6, #127	; 0x7f
    4828:	2701      	movs	r7, #1
    482a:	2500      	movs	r5, #0
    482c:	f994 3000 	ldrsb.w	r3, [r4]
    4830:	6862      	ldr	r2, [r4, #4]
    4832:	b083      	sub	sp, #12
    4834:	2900      	cmp	r1, #0
    4836:	d067      	beq.n	4908 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>
    4838:	2901      	cmp	r1, #1
    483a:	d07c      	beq.n	4936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x65e>
    483c:	2705      	movs	r7, #5
    483e:	2902      	cmp	r1, #2
    4840:	d007      	beq.n	4852 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x57a>
    4842:	2906      	cmp	r1, #6
    4844:	d02a      	beq.n	489c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    4846:	f002 feaf 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    484a:	b003      	add	sp, #12
    484c:	4638      	mov	r0, r7
    484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4852:	4605      	mov	r5, r0
    4854:	f002 fea8 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4858:	6860      	ldr	r0, [r4, #4]
    485a:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    485e:	b1c9      	cbz	r1, 4894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5bc>
    4860:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    4864:	2901      	cmp	r1, #1
    4866:	bf18      	it	ne
    4868:	2902      	cmpne	r1, #2
    486a:	d113      	bne.n	4894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5bc>
    486c:	f994 1000 	ldrsb.w	r1, [r4]
    4870:	297f      	cmp	r1, #127	; 0x7f
    4872:	f000 81b0 	beq.w	4bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    4876:	7026      	strb	r6, [r4, #0]
    4878:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    487c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    4880:	e9cd 3200 	strd	r3, r2, [sp]
    4884:	9102      	str	r1, [sp, #8]
    4886:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    488a:	23ff      	movs	r3, #255	; 0xff
    488c:	2102      	movs	r1, #2
    488e:	4628      	mov	r0, r5
    4890:	f000 fd16 	bl	52c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4894:	b003      	add	sp, #12
    4896:	4638      	mov	r0, r7
    4898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    489c:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
    48a0:	b129      	cbz	r1, 48ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5d6>
    48a2:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
    48a6:	2902      	cmp	r1, #2
    48a8:	d007      	beq.n	48ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e2>
    48aa:	2901      	cmp	r1, #1
    48ac:	d01d      	beq.n	48ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x612>
    48ae:	f002 fe7b 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    48b2:	b003      	add	sp, #12
    48b4:	2005      	movs	r0, #5
    48b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48ba:	2b7f      	cmp	r3, #127	; 0x7f
    48bc:	f000 818b 	beq.w	4bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    48c0:	7026      	strb	r6, [r4, #0]
    48c2:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    48c6:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    48ca:	f8cd c000 	str.w	ip, [sp]
    48ce:	e9cd 1301 	strd	r1, r3, [sp, #4]
    48d2:	23ff      	movs	r3, #255	; 0xff
    48d4:	2106      	movs	r1, #6
    48d6:	324a      	adds	r2, #74	; 0x4a
    48d8:	f000 fcf2 	bl	52c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    48dc:	6861      	ldr	r1, [r4, #4]
    48de:	200b      	movs	r0, #11
    48e0:	f881 50b0 	strb.w	r5, [r1, #176]	; 0xb0
    48e4:	b003      	add	sp, #12
    48e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48ea:	2b7f      	cmp	r3, #127	; 0x7f
    48ec:	f000 8173 	beq.w	4bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    48f0:	7026      	strb	r6, [r4, #0]
    48f2:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    48f6:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    48fa:	f8cd c000 	str.w	ip, [sp]
    48fe:	e9cd 1301 	strd	r1, r3, [sp, #4]
    4902:	23ff      	movs	r3, #255	; 0xff
    4904:	2106      	movs	r1, #6
    4906:	e039      	b.n	497c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a4>
    4908:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
    490c:	2900      	cmp	r1, #0
    490e:	f000 8141 	beq.w	4b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>
    4912:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
    4916:	2902      	cmp	r1, #2
    4918:	d008      	beq.n	492c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x654>
    491a:	2901      	cmp	r1, #1
    491c:	d020      	beq.n	4960 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x688>
    491e:	2903      	cmp	r1, #3
    4920:	d02e      	beq.n	4980 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a8>
    4922:	f640 61df 	movw	r1, #3807	; 0xedf
    4926:	2032      	movs	r0, #50	; 0x32
    4928:	f7fb fe6c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    492c:	2b7f      	cmp	r3, #127	; 0x7f
    492e:	f000 8152 	beq.w	4bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    4932:	7026      	strb	r6, [r4, #0]
    4934:	e000      	b.n	4938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    4936:	e05e      	b.n	49f6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71e>
    4938:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    493c:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    4940:	f8cd c000 	str.w	ip, [sp]
    4944:	e9cd 1301 	strd	r1, r3, [sp, #4]
    4948:	23ff      	movs	r3, #255	; 0xff
    494a:	2100      	movs	r1, #0
    494c:	324a      	adds	r2, #74	; 0x4a
    494e:	f000 fcb7 	bl	52c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4952:	6860      	ldr	r0, [r4, #4]
    4954:	f880 70b0 	strb.w	r7, [r0, #176]	; 0xb0
    4958:	b003      	add	sp, #12
    495a:	200b      	movs	r0, #11
    495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4960:	2b7f      	cmp	r3, #127	; 0x7f
    4962:	f000 8138 	beq.w	4bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    4966:	7026      	strb	r6, [r4, #0]
    4968:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    496c:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    4970:	f8cd c000 	str.w	ip, [sp]
    4974:	e9cd 1301 	strd	r1, r3, [sp, #4]
    4978:	23ff      	movs	r3, #255	; 0xff
    497a:	2100      	movs	r1, #0
    497c:	324a      	adds	r2, #74	; 0x4a
    497e:	e0a6      	b.n	4ace <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f6>
    4980:	6841      	ldr	r1, [r0, #4]
    4982:	f892 c061 	ldrb.w	ip, [r2, #97]	; 0x61
    4986:	780b      	ldrb	r3, [r1, #0]
    4988:	4563      	cmp	r3, ip
    498a:	d11f      	bne.n	49cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f4>
    498c:	784b      	ldrb	r3, [r1, #1]
    498e:	f892 c062 	ldrb.w	ip, [r2, #98]	; 0x62
    4992:	4563      	cmp	r3, ip
    4994:	d11a      	bne.n	49cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f4>
    4996:	788b      	ldrb	r3, [r1, #2]
    4998:	f892 c063 	ldrb.w	ip, [r2, #99]	; 0x63
    499c:	4563      	cmp	r3, ip
    499e:	d115      	bne.n	49cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f4>
    49a0:	78cb      	ldrb	r3, [r1, #3]
    49a2:	f892 c064 	ldrb.w	ip, [r2, #100]	; 0x64
    49a6:	4563      	cmp	r3, ip
    49a8:	d110      	bne.n	49cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f4>
    49aa:	790b      	ldrb	r3, [r1, #4]
    49ac:	f892 c065 	ldrb.w	ip, [r2, #101]	; 0x65
    49b0:	4563      	cmp	r3, ip
    49b2:	d10b      	bne.n	49cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f4>
    49b4:	7949      	ldrb	r1, [r1, #5]
    49b6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
    49ba:	4299      	cmp	r1, r3
    49bc:	d106      	bne.n	49cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f4>
    49be:	7c40      	ldrb	r0, [r0, #17]
    49c0:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
    49c4:	4288      	cmp	r0, r1
    49c6:	bf08      	it	eq
    49c8:	2001      	moveq	r0, #1
    49ca:	d000      	beq.n	49ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f6>
    49cc:	2000      	movs	r0, #0
    49ce:	f892 105a 	ldrb.w	r1, [r2, #90]	; 0x5a
    49d2:	2901      	cmp	r1, #1
    49d4:	d07e      	beq.n	4ad4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fc>
    49d6:	2800      	cmp	r0, #0
    49d8:	d17c      	bne.n	4ad4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fc>
    49da:	4882      	ldr	r0, [pc, #520]	; (4be4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>)
    49dc:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    49e0:	2908      	cmp	r1, #8
    49e2:	d078      	beq.n	4ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fe>
    49e4:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    49e8:	4288      	cmp	r0, r1
    49ea:	d073      	beq.n	4ad4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fc>
    49ec:	e0d2      	b.n	4b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>
    49ee:	b003      	add	sp, #12
    49f0:	2005      	movs	r0, #5
    49f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49f6:	4605      	mov	r5, r0
    49f8:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    49fc:	f892 a08a 	ldrb.w	sl, [r2, #138]	; 0x8a
    4a00:	2800      	cmp	r0, #0
    4a02:	bf14      	ite	ne
    4a04:	f04f 0900 	movne.w	r9, #0
    4a08:	f04f 0901 	moveq.w	r9, #1
    4a0c:	2700      	movs	r7, #0
    4a0e:	7ca8      	ldrb	r0, [r5, #18]
    4a10:	68a9      	ldr	r1, [r5, #8]
    4a12:	2801      	cmp	r0, #1
    4a14:	d107      	bne.n	4a26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74e>
    4a16:	7948      	ldrb	r0, [r1, #5]
    4a18:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    4a1c:	2840      	cmp	r0, #64	; 0x40
    4a1e:	bf08      	it	eq
    4a20:	f04f 0801 	moveq.w	r8, #1
    4a24:	d001      	beq.n	4a2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x752>
    4a26:	f04f 0800 	mov.w	r8, #0
    4a2a:	f892 0058 	ldrb.w	r0, [r2, #88]	; 0x58
    4a2e:	2803      	cmp	r0, #3
    4a30:	d106      	bne.n	4a40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    4a32:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
    4a36:	2800      	cmp	r0, #0
    4a38:	bf18      	it	ne
    4a3a:	f892 0083 	ldrbne.w	r0, [r2, #131]	; 0x83
    4a3e:	d101      	bne.n	4a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x76c>
    4a40:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
    4a44:	9000      	str	r0, [sp, #0]
    4a46:	f7fc fd89 	bl	155c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    4a4a:	ea5f 0b00 	movs.w	fp, r0
    4a4e:	d043      	beq.n	4ad8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x800>
    4a50:	9800      	ldr	r0, [sp, #0]
    4a52:	f7fc fd77 	bl	1544 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    4a56:	2800      	cmp	r0, #0
    4a58:	bf18      	it	ne
    4a5a:	f04f 0901 	movne.w	r9, #1
    4a5e:	f1b8 0f00 	cmp.w	r8, #0
    4a62:	d039      	beq.n	4ad8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x800>
    4a64:	4658      	mov	r0, fp
    4a66:	68a9      	ldr	r1, [r5, #8]
    4a68:	f009 fae1 	bl	e02e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    4a6c:	0007      	movs	r7, r0
    4a6e:	6860      	ldr	r0, [r4, #4]
    4a70:	f890 b049 	ldrb.w	fp, [r0, #73]	; 0x49
    4a74:	bf18      	it	ne
    4a76:	f04b 0b02 	orrne.w	fp, fp, #2
    4a7a:	4601      	mov	r1, r0
    4a7c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4a80:	2803      	cmp	r0, #3
    4a82:	d02d      	beq.n	4ae0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x808>
    4a84:	f002 fd90 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4a88:	f1ba 0f00 	cmp.w	sl, #0
    4a8c:	d0af      	beq.n	49ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    4a8e:	6860      	ldr	r0, [r4, #4]
    4a90:	7caa      	ldrb	r2, [r5, #18]
    4a92:	f100 014a 	add.w	r1, r0, #74	; 0x4a
    4a96:	f890 c049 	ldrb.w	ip, [r0, #73]	; 0x49
    4a9a:	68ab      	ldr	r3, [r5, #8]
    4a9c:	4660      	mov	r0, ip
    4a9e:	f009 fa56 	bl	df4e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4aa2:	2800      	cmp	r0, #0
    4aa4:	bf08      	it	eq
    4aa6:	2f00      	cmpeq	r7, #0
    4aa8:	d077      	beq.n	4b9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c2>
    4aaa:	f994 0000 	ldrsb.w	r0, [r4]
    4aae:	287f      	cmp	r0, #127	; 0x7f
    4ab0:	d06f      	beq.n	4b92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ba>
    4ab2:	7026      	strb	r6, [r4, #0]
    4ab4:	6861      	ldr	r1, [r4, #4]
    4ab6:	f891 209a 	ldrb.w	r2, [r1, #154]	; 0x9a
    4aba:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
    4abe:	e9cd 3200 	strd	r3, r2, [sp]
    4ac2:	9002      	str	r0, [sp, #8]
    4ac4:	f101 024a 	add.w	r2, r1, #74	; 0x4a
    4ac8:	465b      	mov	r3, fp
    4aca:	2101      	movs	r1, #1
    4acc:	4628      	mov	r0, r5
    4ace:	f000 fbf7 	bl	52c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4ad2:	e78c      	b.n	49ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    4ad4:	e058      	b.n	4b88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b0>
    4ad6:	e05d      	b.n	4b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>
    4ad8:	6860      	ldr	r0, [r4, #4]
    4ada:	f890 b049 	ldrb.w	fp, [r0, #73]	; 0x49
    4ade:	e7cc      	b.n	4a7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a2>
    4ae0:	6868      	ldr	r0, [r5, #4]
    4ae2:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    4ae6:	7802      	ldrb	r2, [r0, #0]
    4ae8:	429a      	cmp	r2, r3
    4aea:	d120      	bne.n	4b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    4aec:	7842      	ldrb	r2, [r0, #1]
    4aee:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    4af2:	429a      	cmp	r2, r3
    4af4:	d11b      	bne.n	4b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    4af6:	7882      	ldrb	r2, [r0, #2]
    4af8:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    4afc:	429a      	cmp	r2, r3
    4afe:	d116      	bne.n	4b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    4b00:	78c2      	ldrb	r2, [r0, #3]
    4b02:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    4b06:	429a      	cmp	r2, r3
    4b08:	d111      	bne.n	4b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    4b0a:	7902      	ldrb	r2, [r0, #4]
    4b0c:	f891 3065 	ldrb.w	r3, [r1, #101]	; 0x65
    4b10:	429a      	cmp	r2, r3
    4b12:	d10c      	bne.n	4b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    4b14:	7940      	ldrb	r0, [r0, #5]
    4b16:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    4b1a:	4290      	cmp	r0, r2
    4b1c:	d107      	bne.n	4b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    4b1e:	7c68      	ldrb	r0, [r5, #17]
    4b20:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    4b24:	4290      	cmp	r0, r2
    4b26:	bf08      	it	eq
    4b28:	f04f 0801 	moveq.w	r8, #1
    4b2c:	d001      	beq.n	4b32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85a>
    4b2e:	f04f 0800 	mov.w	r8, #0
    4b32:	4c2c      	ldr	r4, [pc, #176]	; (4be4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>)
    4b34:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    4b38:	2808      	cmp	r0, #8
    4b3a:	d005      	beq.n	4b48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x870>
    4b3c:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
    4b40:	4290      	cmp	r0, r2
    4b42:	bf08      	it	eq
    4b44:	2601      	moveq	r6, #1
    4b46:	d000      	beq.n	4b4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x872>
    4b48:	2600      	movs	r6, #0
    4b4a:	b957      	cbnz	r7, 4b62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88a>
    4b4c:	f1b9 0f00 	cmp.w	r9, #0
    4b50:	d009      	beq.n	4b66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    4b52:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    4b56:	7caa      	ldrb	r2, [r5, #18]
    4b58:	314a      	adds	r1, #74	; 0x4a
    4b5a:	68ab      	ldr	r3, [r5, #8]
    4b5c:	f009 f9f7 	bl	df4e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4b60:	b108      	cbz	r0, 4b66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88e>
    4b62:	2101      	movs	r1, #1
    4b64:	e000      	b.n	4b68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x890>
    4b66:	2100      	movs	r1, #0
    4b68:	f1ba 0f00 	cmp.w	sl, #0
    4b6c:	d009      	beq.n	4b82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8aa>
    4b6e:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    4b72:	2801      	cmp	r0, #1
    4b74:	d003      	beq.n	4b7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8a6>
    4b76:	b920      	cbnz	r0, 4b82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8aa>
    4b78:	ea58 0006 	orrs.w	r0, r8, r6
    4b7c:	d001      	beq.n	4b82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8aa>
    4b7e:	2001      	movs	r0, #1
    4b80:	e000      	b.n	4b84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ac>
    4b82:	2000      	movs	r0, #0
    4b84:	4201      	tst	r1, r0
    4b86:	d005      	beq.n	4b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>
    4b88:	b003      	add	sp, #12
    4b8a:	200c      	movs	r0, #12
    4b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b90:	e003      	b.n	4b9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c2>
    4b92:	e020      	b.n	4bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    4b94:	f002 fd08 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4b98:	e729      	b.n	49ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    4b9a:	6860      	ldr	r0, [r4, #4]
    4b9c:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    4ba0:	2903      	cmp	r1, #3
    4ba2:	bf18      	it	ne
    4ba4:	2902      	cmpne	r1, #2
    4ba6:	f47f af22 	bne.w	49ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    4baa:	f1b8 0f00 	cmp.w	r8, #0
    4bae:	f43f af1e 	beq.w	49ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x716>
    4bb2:	f994 1000 	ldrsb.w	r1, [r4]
    4bb6:	297f      	cmp	r1, #127	; 0x7f
    4bb8:	d00d      	beq.n	4bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8fe>
    4bba:	7026      	strb	r6, [r4, #0]
    4bbc:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    4bc0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    4bc4:	e9cd 3200 	strd	r3, r2, [sp]
    4bc8:	9102      	str	r1, [sp, #8]
    4bca:	23fe      	movs	r3, #254	; 0xfe
    4bcc:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    4bd0:	2101      	movs	r1, #1
    4bd2:	4628      	mov	r0, r5
    4bd4:	e77b      	b.n	4ace <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f6>
    4bd6:	f44f 6189 	mov.w	r1, #1096	; 0x448
    4bda:	2032      	movs	r0, #50	; 0x32
    4bdc:	f7fb fd12 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4be0:	200000e0 	.word	0x200000e0
    4be4:	20000710 	.word	0x20000710
    4be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bec:	4607      	mov	r7, r0
    4bee:	f7fc fa81 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4bf2:	4604      	mov	r4, r0
    4bf4:	f7fc fa78 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4bf8:	4601      	mov	r1, r0
    4bfa:	4620      	mov	r0, r4
    4bfc:	f008 ff05 	bl	da0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4c00:	0005      	movs	r5, r0
    4c02:	d00e      	beq.n	4c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x94a>
    4c04:	4c32      	ldr	r4, [pc, #200]	; (4cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f8>)
    4c06:	6860      	ldr	r0, [r4, #4]
    4c08:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4c0c:	2801      	cmp	r0, #1
    4c0e:	bf1c      	itt	ne
    4c10:	2802      	cmpne	r0, #2
    4c12:	2803      	cmpne	r0, #3
    4c14:	d00a      	beq.n	4c2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x954>
    4c16:	f241 5148 	movw	r1, #5448	; 0x1548
    4c1a:	f04f 0032 	mov.w	r0, #50	; 0x32
    4c1e:	f7fb fcf1 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c22:	f241 5142 	movw	r1, #5442	; 0x1542
    4c26:	2032      	movs	r0, #50	; 0x32
    4c28:	f7fb fcec 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c2c:	f06f 0613 	mvn.w	r6, #19
    4c30:	b327      	cbz	r7, 4c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>
    4c32:	4628      	mov	r0, r5
    4c34:	f009 fadc 	bl	e1f0 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    4c38:	b918      	cbnz	r0, 4c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x96a>
    4c3a:	4628      	mov	r0, r5
    4c3c:	f009 fc10 	bl	e460 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    4c40:	b1e0      	cbz	r0, 4c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>
    4c42:	6861      	ldr	r1, [r4, #4]
    4c44:	4628      	mov	r0, r5
    4c46:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    4c4a:	2a05      	cmp	r2, #5
    4c4c:	d204      	bcs.n	4c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x980>
    4c4e:	f241 41cc 	movw	r1, #5324	; 0x14cc
    4c52:	2032      	movs	r0, #50	; 0x32
    4c54:	f7fb fcd6 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c58:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    4c5c:	2a0b      	cmp	r2, #11
    4c5e:	d304      	bcc.n	4c6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x992>
    4c60:	f241 41cd 	movw	r1, #5325	; 0x14cd
    4c64:	2032      	movs	r0, #50	; 0x32
    4c66:	f7fb fccd 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c6a:	68e2      	ldr	r2, [r4, #12]
    4c6c:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    4c70:	6952      	ldr	r2, [r2, #20]
    4c72:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    4c76:	5851      	ldr	r1, [r2, r1]
    4c78:	4788      	blx	r1
    4c7a:	e01a      	b.n	4cb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9da>
    4c7c:	6860      	ldr	r0, [r4, #4]
    4c7e:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    4c82:	2905      	cmp	r1, #5
    4c84:	d204      	bcs.n	4c90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b8>
    4c86:	f241 5138 	movw	r1, #5432	; 0x1538
    4c8a:	2032      	movs	r0, #50	; 0x32
    4c8c:	f7fb fcba 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c90:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    4c94:	290b      	cmp	r1, #11
    4c96:	d304      	bcc.n	4ca2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ca>
    4c98:	f241 5139 	movw	r1, #5433	; 0x1539
    4c9c:	2032      	movs	r0, #50	; 0x32
    4c9e:	f7fb fcb1 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ca2:	68e1      	ldr	r1, [r4, #12]
    4ca4:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    4ca8:	6989      	ldr	r1, [r1, #24]
    4caa:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    4cae:	5808      	ldr	r0, [r1, r0]
    4cb0:	4780      	blx	r0
    4cb2:	280f      	cmp	r0, #15
    4cb4:	d304      	bcc.n	4cc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e8>
    4cb6:	f241 515d 	movw	r1, #5469	; 0x155d
    4cba:	2032      	movs	r0, #50	; 0x32
    4cbc:	f7fb fca2 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cc0:	68e1      	ldr	r1, [r4, #12]
    4cc2:	6909      	ldr	r1, [r1, #16]
    4cc4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ccc:	4700      	bx	r0
    4cce:	0000      	.short	0x0000
    4cd0:	200000e0 	.word	0x200000e0
    4cd4:	b510      	push	{r4, lr}
    4cd6:	b118      	cbz	r0, 4ce0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa08>
    4cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4cdc:	f000 b968 	b.w	4fb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    4ce0:	2900      	cmp	r1, #0
    4ce2:	bf08      	it	eq
    4ce4:	bd10      	popeq	{r4, pc}
    4ce6:	4810      	ldr	r0, [pc, #64]	; (4d28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa50>)
    4ce8:	6841      	ldr	r1, [r0, #4]
    4cea:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    4cee:	2a0b      	cmp	r2, #11
    4cf0:	d204      	bcs.n	4cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa24>
    4cf2:	f241 6118 	movw	r1, #5656	; 0x1618
    4cf6:	2032      	movs	r0, #50	; 0x32
    4cf8:	f7fb fc84 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cfc:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    4d00:	2a0f      	cmp	r2, #15
    4d02:	d304      	bcc.n	4d0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa36>
    4d04:	f241 6119 	movw	r1, #5657	; 0x1619
    4d08:	2032      	movs	r0, #50	; 0x32
    4d0a:	f7fb fc7b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d0e:	68c0      	ldr	r0, [r0, #12]
    4d10:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    4d14:	6880      	ldr	r0, [r0, #8]
    4d16:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    4d1a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4d1e:	5840      	ldr	r0, [r0, r1]
    4d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d24:	4700      	bx	r0
    4d26:	0000      	.short	0x0000
    4d28:	200000e0 	.word	0x200000e0
    4d2c:	b510      	push	{r4, lr}
    4d2e:	f7fc f9e1 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4d32:	4604      	mov	r4, r0
    4d34:	f7fc f9d8 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4d38:	4601      	mov	r1, r0
    4d3a:	4620      	mov	r0, r4
    4d3c:	f008 fe65 	bl	da0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4d40:	b150      	cbz	r0, 4d58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa80>
    4d42:	f003 f85b 	bl	7dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4d46:	2000      	movs	r0, #0
    4d48:	f002 fee6 	bl	7b18 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    4d4c:	4905      	ldr	r1, [pc, #20]	; (4d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8c>)
    4d4e:	2006      	movs	r0, #6
    4d50:	6849      	ldr	r1, [r1, #4]
    4d52:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    4d56:	bd10      	pop	{r4, pc}
    4d58:	f240 612b 	movw	r1, #1579	; 0x62b
    4d5c:	2032      	movs	r0, #50	; 0x32
    4d5e:	f7fb fc51 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d62:	0000      	.short	0x0000
    4d64:	200000e0 	.word	0x200000e0
    4d68:	4910      	ldr	r1, [pc, #64]	; (4dac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xad4>)
    4d6a:	b510      	push	{r4, lr}
    4d6c:	6848      	ldr	r0, [r1, #4]
    4d6e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    4d72:	2a06      	cmp	r2, #6
    4d74:	d204      	bcs.n	4d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa8>
    4d76:	f241 6146 	movw	r1, #5702	; 0x1646
    4d7a:	2032      	movs	r0, #50	; 0x32
    4d7c:	f7fb fc42 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d80:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    4d84:	2a0b      	cmp	r2, #11
    4d86:	d304      	bcc.n	4d92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaba>
    4d88:	f241 6147 	movw	r1, #5703	; 0x1647
    4d8c:	2032      	movs	r0, #50	; 0x32
    4d8e:	f7fb fc39 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d92:	68c9      	ldr	r1, [r1, #12]
    4d94:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    4d98:	68c9      	ldr	r1, [r1, #12]
    4d9a:	f06f 0213 	mvn.w	r2, #19
    4d9e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4da2:	5808      	ldr	r0, [r1, r0]
    4da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4da8:	4700      	bx	r0
    4daa:	0000      	.short	0x0000
    4dac:	200000e0 	.word	0x200000e0
    4db0:	b510      	push	{r4, lr}
    4db2:	f7fd f809 	bl	1dc8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    4db6:	4904      	ldr	r1, [pc, #16]	; (4dc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf0>)
    4db8:	7008      	strb	r0, [r1, #0]
    4dba:	f002 fbf5 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dc2:	f000 b91d 	b.w	5000 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd28>
    4dc6:	0000      	.short	0x0000
    4dc8:	200000e0 	.word	0x200000e0
    4dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dce:	4d4b      	ldr	r5, [pc, #300]	; (4efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc24>)
    4dd0:	4604      	mov	r4, r0
    4dd2:	460e      	mov	r6, r1
    4dd4:	6868      	ldr	r0, [r5, #4]
    4dd6:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    4dda:	2900      	cmp	r1, #0
    4ddc:	bf18      	it	ne
    4dde:	2901      	cmpne	r1, #1
    4de0:	d003      	beq.n	4dea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb12>
    4de2:	2903      	cmp	r1, #3
    4de4:	bf1c      	itt	ne
    4de6:	200c      	movne	r0, #12
    4de8:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    4dea:	7b21      	ldrb	r1, [r4, #12]
    4dec:	f880 10a4 	strb.w	r1, [r0, #164]	; 0xa4
    4df0:	68a1      	ldr	r1, [r4, #8]
    4df2:	67c1      	str	r1, [r0, #124]	; 0x7c
    4df4:	7b22      	ldrb	r2, [r4, #12]
    4df6:	f100 01c6 	add.w	r1, r0, #198	; 0xc6
    4dfa:	5c51      	ldrb	r1, [r2, r1]
    4dfc:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    4e00:	6821      	ldr	r1, [r4, #0]
    4e02:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    4e06:	7920      	ldrb	r0, [r4, #4]
    4e08:	2802      	cmp	r0, #2
    4e0a:	d01f      	beq.n	4e4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb74>
    4e0c:	f002 ff4e 	bl	7cac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4e10:	f002 fba2 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4e14:	f002 fa92 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4e18:	f003 fd5c 	bl	88d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    4e1c:	4838      	ldr	r0, [pc, #224]	; (4f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc28>)
    4e1e:	f002 fe65 	bl	7aec <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4e22:	4838      	ldr	r0, [pc, #224]	; (4f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc2c>)
    4e24:	f003 f9f8 	bl	8218 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4e28:	4837      	ldr	r0, [pc, #220]	; (4f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>)
    4e2a:	f003 f9eb 	bl	8204 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4e2e:	6868      	ldr	r0, [r5, #4]
    4e30:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4e34:	2800      	cmp	r0, #0
    4e36:	bf0c      	ite	eq
    4e38:	2001      	moveq	r0, #1
    4e3a:	2002      	movne	r0, #2
    4e3c:	f007 fd82 	bl	c944 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4e40:	7920      	ldrb	r0, [r4, #4]
    4e42:	2803      	cmp	r0, #3
    4e44:	bf1c      	itt	ne
    4e46:	4630      	movne	r0, r6
    4e48:	f002 ffd8 	blne	7dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4e4c:	7b60      	ldrb	r0, [r4, #13]
    4e4e:	b178      	cbz	r0, 4e70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb98>
    4e50:	6868      	ldr	r0, [r5, #4]
    4e52:	2201      	movs	r2, #1
    4e54:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    4e58:	f88d 1000 	strb.w	r1, [sp]
    4e5c:	f89d 1000 	ldrb.w	r1, [sp]
    4e60:	b931      	cbnz	r1, 4e70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb98>
    4e62:	6e81      	ldr	r1, [r0, #104]	; 0x68
    4e64:	2900      	cmp	r1, #0
    4e66:	bf1c      	itt	ne
    4e68:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    4e6c:	f006 faa0 	blne	b3b0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4e70:	7920      	ldrb	r0, [r4, #4]
    4e72:	2803      	cmp	r0, #3
    4e74:	d001      	beq.n	4e7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xba2>
    4e76:	b128      	cbz	r0, 4e84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbac>
    4e78:	e01e      	b.n	4eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbe0>
    4e7a:	f640 2141 	movw	r1, #2625	; 0xa41
    4e7e:	2032      	movs	r0, #50	; 0x32
    4e80:	f7fb fbc0 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e84:	686a      	ldr	r2, [r5, #4]
    4e86:	f8df c084 	ldr.w	ip, [pc, #132]	; 4f0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc34>
    4e8a:	2000      	movs	r0, #0
    4e8c:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
    4e90:	f892 3082 	ldrb.w	r3, [r2, #130]	; 0x82
    4e94:	1c5b      	adds	r3, r3, #1
    4e96:	fbac 7403 	umull	r7, r4, ip, r3
    4e9a:	0864      	lsrs	r4, r4, #1
    4e9c:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    4ea0:	4423      	add	r3, r4
    4ea2:	f882 3082 	strb.w	r3, [r2, #130]	; 0x82
    4ea6:	fa21 f303 	lsr.w	r3, r1, r3
    4eaa:	f013 0f01 	tst.w	r3, #1
    4eae:	d103      	bne.n	4eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbe0>
    4eb0:	1c40      	adds	r0, r0, #1
    4eb2:	b2c0      	uxtb	r0, r0
    4eb4:	2803      	cmp	r0, #3
    4eb6:	d3eb      	bcc.n	4e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbb8>
    4eb8:	6868      	ldr	r0, [r5, #4]
    4eba:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    4ebe:	f002 ff91 	bl	7de4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4ec2:	4631      	mov	r1, r6
    4ec4:	2001      	movs	r0, #1
    4ec6:	f7ff fa23 	bl	4310 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    4eca:	2800      	cmp	r0, #0
    4ecc:	bf08      	it	eq
    4ece:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    4ed0:	f000 f928 	bl	5124 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe4c>
    4ed4:	6868      	ldr	r0, [r5, #4]
    4ed6:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    4eda:	b160      	cbz	r0, 4ef6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc1e>
    4edc:	f7fc fb06 	bl	14ec <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    4ee0:	480b      	ldr	r0, [pc, #44]	; (4f10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>)
    4ee2:	6800      	ldr	r0, [r0, #0]
    4ee4:	2803      	cmp	r0, #3
    4ee6:	bf1c      	itt	ne
    4ee8:	2000      	movne	r0, #0
    4eea:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    4eec:	f640 2153 	movw	r1, #2643	; 0xa53
    4ef0:	2032      	movs	r0, #50	; 0x32
    4ef2:	f7fb fb87 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ef6:	f7fc fd25 	bl	1944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    4efa:	e7f1      	b.n	4ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc08>
    4efc:	200000e0 	.word	0x200000e0
    4f00:	00005260 	.word	0x00005260
    4f04:	00555555 	.word	0x00555555
    4f08:	8e89bed6 	.word	0x8e89bed6
    4f0c:	aaaaaaab 	.word	0xaaaaaaab
    4f10:	40001550 	.word	0x40001550
    4f14:	b538      	push	{r3, r4, r5, lr}
    4f16:	4c11      	ldr	r4, [pc, #68]	; (4f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc84>)
    4f18:	2200      	movs	r2, #0
    4f1a:	6860      	ldr	r0, [r4, #4]
    4f1c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    4f20:	f88d 1000 	strb.w	r1, [sp]
    4f24:	f89d 1000 	ldrb.w	r1, [sp]
    4f28:	b931      	cbnz	r1, 4f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc60>
    4f2a:	6e81      	ldr	r1, [r0, #104]	; 0x68
    4f2c:	2900      	cmp	r1, #0
    4f2e:	bf1c      	itt	ne
    4f30:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    4f34:	f006 fa3c 	blne	b3b0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4f38:	6860      	ldr	r0, [r4, #4]
    4f3a:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    4f3e:	2800      	cmp	r0, #0
    4f40:	bf18      	it	ne
    4f42:	2801      	cmpne	r0, #1
    4f44:	d007      	beq.n	4f56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc7e>
    4f46:	2802      	cmp	r0, #2
    4f48:	bf1c      	itt	ne
    4f4a:	200c      	movne	r0, #12
    4f4c:	bd38      	popne	{r3, r4, r5, pc}
    4f4e:	f000 f857 	bl	5000 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd28>
    4f52:	2000      	movs	r0, #0
    4f54:	bd38      	pop	{r3, r4, r5, pc}
    4f56:	f000 f82b 	bl	4fb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    4f5a:	e7fa      	b.n	4f52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc7a>
    4f5c:	200000e0 	.word	0x200000e0
    4f60:	b510      	push	{r4, lr}
    4f62:	2000      	movs	r0, #0
    4f64:	7048      	strb	r0, [r1, #1]
    4f66:	2019      	movs	r0, #25
    4f68:	7008      	strb	r0, [r1, #0]
    4f6a:	4810      	ldr	r0, [pc, #64]	; (4fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd4>)
    4f6c:	6840      	ldr	r0, [r0, #4]
    4f6e:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4f72:	6048      	str	r0, [r1, #4]
    4f74:	7908      	ldrb	r0, [r1, #4]
    4f76:	2801      	cmp	r0, #1
    4f78:	bf18      	it	ne
    4f7a:	bd10      	popne	{r4, pc}
    4f7c:	88cc      	ldrh	r4, [r1, #6]
    4f7e:	2100      	movs	r1, #0
    4f80:	4620      	mov	r0, r4
    4f82:	f008 fdfd 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4f86:	2800      	cmp	r0, #0
    4f88:	bf08      	it	eq
    4f8a:	bd10      	popeq	{r4, pc}
    4f8c:	4620      	mov	r0, r4
    4f8e:	f7fc fa43 	bl	1418 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    4f92:	2100      	movs	r1, #0
    4f94:	4620      	mov	r0, r4
    4f96:	f7fb fe39 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4f9a:	2800      	cmp	r0, #0
    4f9c:	bf08      	it	eq
    4f9e:	bd10      	popeq	{r4, pc}
    4fa0:	f44f 6182 	mov.w	r1, #1040	; 0x410
    4fa4:	2032      	movs	r0, #50	; 0x32
    4fa6:	f7fb fb2d 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4faa:	0000      	.short	0x0000
    4fac:	200000e0 	.word	0x200000e0
    4fb0:	b570      	push	{r4, r5, r6, lr}
    4fb2:	4c0c      	ldr	r4, [pc, #48]	; (4fe4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0c>)
    4fb4:	2500      	movs	r5, #0
    4fb6:	6860      	ldr	r0, [r4, #4]
    4fb8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    4fbc:	b130      	cbz	r0, 4fcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcf4>
    4fbe:	f002 facb 	bl	7558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4fc2:	f002 f9bb 	bl	733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4fc6:	6860      	ldr	r0, [r4, #4]
    4fc8:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    4fcc:	6860      	ldr	r0, [r4, #4]
    4fce:	2101      	movs	r1, #1
    4fd0:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    4fd4:	f8a0 50c2 	strh.w	r5, [r0, #194]	; 0xc2
    4fd8:	f880 50c4 	strb.w	r5, [r0, #196]	; 0xc4
    4fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4fe0:	f000 bdd4 	b.w	5b8c <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    4fe4:	200000e0 	.word	0x200000e0
    4fe8:	4804      	ldr	r0, [pc, #16]	; (4ffc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd24>)
    4fea:	6841      	ldr	r1, [r0, #4]
    4fec:	2000      	movs	r0, #0
    4fee:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    4ff2:	f881 00c4 	strb.w	r0, [r1, #196]	; 0xc4
    4ff6:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    4ffa:	4770      	bx	lr
    4ffc:	200000e0 	.word	0x200000e0
    5000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5004:	f7fc f876 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    5008:	4604      	mov	r4, r0
    500a:	f7fc f86d 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    500e:	4601      	mov	r1, r0
    5010:	4620      	mov	r0, r4
    5012:	f008 fcfa 	bl	da0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5016:	0005      	movs	r5, r0
    5018:	d037      	beq.n	508a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb2>
    501a:	f000 f929 	bl	5270 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    501e:	4c33      	ldr	r4, [pc, #204]	; (50ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe14>)
    5020:	6860      	ldr	r0, [r4, #4]
    5022:	f100 02c6 	add.w	r2, r0, #198	; 0xc6
    5026:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    502a:	5c8e      	ldrb	r6, [r1, r2]
    502c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    5030:	2000      	movs	r0, #0
    5032:	f000 fc6f 	bl	5914 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    5036:	2800      	cmp	r0, #0
    5038:	d02d      	beq.n	5096 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdbe>
    503a:	6860      	ldr	r0, [r4, #4]
    503c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    5040:	2802      	cmp	r0, #2
    5042:	d003      	beq.n	504c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd74>
    5044:	4629      	mov	r1, r5
    5046:	2000      	movs	r0, #0
    5048:	f7ff f962 	bl	4310 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    504c:	2e01      	cmp	r6, #1
    504e:	bf07      	ittee	eq
    5050:	2701      	moveq	r7, #1
    5052:	2003      	moveq	r0, #3
    5054:	2700      	movne	r7, #0
    5056:	2005      	movne	r0, #5
    5058:	4428      	add	r0, r5
    505a:	f7fc fa2f 	bl	14bc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    505e:	6861      	ldr	r1, [r4, #4]
    5060:	2500      	movs	r5, #0
    5062:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    5066:	b140      	cbz	r0, 507a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda2>
    5068:	2f00      	cmp	r7, #0
    506a:	bf18      	it	ne
    506c:	2640      	movne	r6, #64	; 0x40
    506e:	d016      	beq.n	509e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc6>
    5070:	f002 f9a4 	bl	73bc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    5074:	4630      	mov	r0, r6
    5076:	f002 fa7d 	bl	7574 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    507a:	6860      	ldr	r0, [r4, #4]
    507c:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    5080:	2903      	cmp	r1, #3
    5082:	bf18      	it	ne
    5084:	2902      	cmpne	r1, #2
    5086:	d11c      	bne.n	50c2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdea>
    5088:	e00f      	b.n	50aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdd2>
    508a:	f240 5119 	movw	r1, #1305	; 0x519
    508e:	f04f 0032 	mov.w	r0, #50	; 0x32
    5092:	f7fb fab7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    509a:	f7ff bf89 	b.w	4fb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    509e:	f016 0f0c 	tst.w	r6, #12
    50a2:	bf14      	ite	ne
    50a4:	2655      	movne	r6, #85	; 0x55
    50a6:	2650      	moveq	r6, #80	; 0x50
    50a8:	e7e2      	b.n	5070 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd98>
    50aa:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    50ae:	f100 00c6 	add.w	r0, r0, #198	; 0xc6
    50b2:	5c08      	ldrb	r0, [r1, r0]
    50b4:	2801      	cmp	r0, #1
    50b6:	d104      	bne.n	50c2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdea>
    50b8:	2100      	movs	r1, #0
    50ba:	2201      	movs	r2, #1
    50bc:	4608      	mov	r0, r1
    50be:	f003 f833 	bl	8128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    50c2:	6860      	ldr	r0, [r4, #4]
    50c4:	21ff      	movs	r1, #255	; 0xff
    50c6:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    50ca:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    50ce:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
    50d2:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    50d6:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    50da:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    50de:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    50e2:	2105      	movs	r1, #5
    50e4:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    50e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50ec:	200000e0 	.word	0x200000e0
    50f0:	b510      	push	{r4, lr}
    50f2:	2003      	movs	r0, #3
    50f4:	f000 fc0e 	bl	5914 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    50f8:	b168      	cbz	r0, 5116 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe3e>
    50fa:	2003      	movs	r0, #3
    50fc:	f7ff fae6 	bl	46cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f4>
    5100:	2201      	movs	r2, #1
    5102:	4611      	mov	r1, r2
    5104:	2000      	movs	r0, #0
    5106:	f003 f80f 	bl	8128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    510a:	4905      	ldr	r1, [pc, #20]	; (5120 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe48>)
    510c:	200b      	movs	r0, #11
    510e:	6849      	ldr	r1, [r1, #4]
    5110:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    5114:	bd10      	pop	{r4, pc}
    5116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    511a:	f7ff bf49 	b.w	4fb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    511e:	0000      	.short	0x0000
    5120:	200000e0 	.word	0x200000e0
    5124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5128:	4c2e      	ldr	r4, [pc, #184]	; (51e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf0c>)
    512a:	2100      	movs	r1, #0
    512c:	6860      	ldr	r0, [r4, #4]
    512e:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    5132:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    5136:	2900      	cmp	r1, #0
    5138:	bf04      	itt	eq
    513a:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    513e:	2900      	cmpeq	r1, #0
    5140:	d042      	beq.n	51c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xef0>
    5142:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
    5146:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    514a:	e9d5 0100 	ldrd	r0, r1, [r5]
    514e:	ea81 0102 	eor.w	r1, r1, r2
    5152:	f04f 0701 	mov.w	r7, #1
    5156:	ea71 0000 	orns	r0, r1, r0
    515a:	d035      	beq.n	51c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xef0>
    515c:	f006 f946 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5160:	e9d5 2300 	ldrd	r2, r3, [r5]
    5164:	1a80      	subs	r0, r0, r2
    5166:	eb71 0003 	sbcs.w	r0, r1, r3
    516a:	d32d      	bcc.n	51c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xef0>
    516c:	6860      	ldr	r0, [r4, #4]
    516e:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
    5172:	f7fc faed 	bl	1750 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    5176:	491c      	ldr	r1, [pc, #112]	; (51e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf10>)
    5178:	fba0 6501 	umull	r6, r5, r0, r1
    517c:	f006 f936 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5180:	1980      	adds	r0, r0, r6
    5182:	4169      	adcs	r1, r5
    5184:	e9c8 0100 	strd	r0, r1, [r8]
    5188:	6860      	ldr	r0, [r4, #4]
    518a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    518e:	2800      	cmp	r0, #0
    5190:	bf1c      	itt	ne
    5192:	2001      	movne	r0, #1
    5194:	f7fc f9fc 	blne	1590 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    5198:	2101      	movs	r1, #1
    519a:	6860      	ldr	r0, [r4, #4]
    519c:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
    51a0:	2a00      	cmp	r2, #0
    51a2:	bf1c      	itt	ne
    51a4:	f890 205c 	ldrbne.w	r2, [r0, #92]	; 0x5c
    51a8:	2a00      	cmpne	r2, #0
    51aa:	d00d      	beq.n	51c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xef0>
    51ac:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    51b0:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    51b4:	2b01      	cmp	r3, #1
    51b6:	d104      	bne.n	51c2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xeea>
    51b8:	7952      	ldrb	r2, [r2, #5]
    51ba:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    51be:	2a40      	cmp	r2, #64	; 0x40
    51c0:	d008      	beq.n	51d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xefc>
    51c2:	304a      	adds	r0, #74	; 0x4a
    51c4:	f008 feea 	bl	df9c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    51c8:	6861      	ldr	r1, [r4, #4]
    51ca:	2002      	movs	r0, #2
    51cc:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    51d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51d4:	f7fc f986 	bl	14e4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    51d8:	6861      	ldr	r1, [r4, #4]
    51da:	463a      	mov	r2, r7
    51dc:	314a      	adds	r1, #74	; 0x4a
    51de:	f008 feee 	bl	dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    51e2:	e7f1      	b.n	51c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xef0>
    51e4:	200000e0 	.word	0x200000e0
    51e8:	000f4240 	.word	0x000f4240
    51ec:	00004fe9 	.word	0x00004fe9
    51f0:	00004fb1 	.word	0x00004fb1
    51f4:	0000ef23 	.word	0x0000ef23
    51f8:	0000ef23 	.word	0x0000ef23
    51fc:	0000ef23 	.word	0x0000ef23
    5200:	00005001 	.word	0x00005001
    5204:	0000ef23 	.word	0x0000ef23
    5208:	0000ef23 	.word	0x0000ef23
    520c:	0000ef23 	.word	0x0000ef23
    5210:	0000ef23 	.word	0x0000ef23
    5214:	0000ef23 	.word	0x0000ef23
    5218:	000050f1 	.word	0x000050f1
    521c:	0000ef23 	.word	0x0000ef23
    5220:	0000ef23 	.word	0x0000ef23
    5224:	0000ef23 	.word	0x0000ef23
    5228:	00004d2d 	.word	0x00004d2d
    522c:	00000000 	.word	0x00000000
    5230:	00004db1 	.word	0x00004db1
    5234:	00004589 	.word	0x00004589
    5238:	000045b9 	.word	0x000045b9
    523c:	000045d1 	.word	0x000045d1
    5240:	00004625 	.word	0x00004625
    5244:	00004dcd 	.word	0x00004dcd
    5248:	00004f15 	.word	0x00004f15
    524c:	00005228 	.word	0x00005228
    5250:	0000522c 	.word	0x0000522c
    5254:	000051ec 	.word	0x000051ec
    5258:	0000523c 	.word	0x0000523c
    525c:	00005234 	.word	0x00005234
    5260:	00004d69 	.word	0x00004d69
    5264:	00004be9 	.word	0x00004be9
    5268:	00004cd5 	.word	0x00004cd5
    526c:	0000ef2d 	.word	0x0000ef2d

00005270 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    5270:	b510      	push	{r4, lr}
    5272:	b082      	sub	sp, #8
    5274:	f7fb ff3e 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    5278:	aa01      	add	r2, sp, #4
    527a:	4669      	mov	r1, sp
    527c:	f008 fb59 	bl	d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5280:	9800      	ldr	r0, [sp, #0]
    5282:	f008 fb14 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5286:	4604      	mov	r4, r0
    5288:	221c      	movs	r2, #28
    528a:	2100      	movs	r1, #0
    528c:	3012      	adds	r0, #18
    528e:	f00b f986 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5292:	207f      	movs	r0, #127	; 0x7f
    5294:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    5298:	21ff      	movs	r1, #255	; 0xff
    529a:	f884 1020 	strb.w	r1, [r4, #32]
    529e:	74e1      	strb	r1, [r4, #19]
    52a0:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    52a4:	7f20      	ldrb	r0, [r4, #28]
    52a6:	4905      	ldr	r1, [pc, #20]	; (52bc <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY+0x4c>)
    52a8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    52ac:	3020      	adds	r0, #32
    52ae:	7720      	strb	r0, [r4, #28]
    52b0:	2000      	movs	r0, #0
    52b2:	6088      	str	r0, [r1, #8]
    52b4:	8088      	strh	r0, [r1, #4]
    52b6:	b002      	add	sp, #8
    52b8:	bd10      	pop	{r4, pc}
    52ba:	0000      	.short	0x0000
    52bc:	200000f4 	.word	0x200000f4

000052c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    52c0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52c4:	b083      	sub	sp, #12
    52c6:	461d      	mov	r5, r3
    52c8:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    52cc:	460e      	mov	r6, r1
    52ce:	4607      	mov	r7, r0
    52d0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    52d4:	f7fb ff0e 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    52d8:	4604      	mov	r4, r0
    52da:	f008 faea 	bl	d8b2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    52de:	2801      	cmp	r0, #1
    52e0:	bf04      	itt	eq
    52e2:	b007      	addeq	sp, #28
    52e4:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52e8:	4620      	mov	r0, r4
    52ea:	aa01      	add	r2, sp, #4
    52ec:	4669      	mov	r1, sp
    52ee:	f008 fb20 	bl	d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    52f2:	9800      	ldr	r0, [sp, #0]
    52f4:	f008 fadb 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    52f8:	4604      	mov	r4, r0
    52fa:	221c      	movs	r2, #28
    52fc:	2100      	movs	r1, #0
    52fe:	3012      	adds	r0, #18
    5300:	f00b f94d 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5304:	f04f 0a01 	mov.w	sl, #1
    5308:	f884 a012 	strb.w	sl, [r4, #18]
    530c:	b156      	cbz	r6, 5324 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x64>
    530e:	2e01      	cmp	r6, #1
    5310:	d00d      	beq.n	532e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x6e>
    5312:	2e02      	cmp	r6, #2
    5314:	d010      	beq.n	5338 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x78>
    5316:	2e06      	cmp	r6, #6
    5318:	d013      	beq.n	5342 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x82>
    531a:	f240 310b 	movw	r1, #779	; 0x30b
    531e:	2033      	movs	r0, #51	; 0x33
    5320:	f7fb f970 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5324:	7f20      	ldrb	r0, [r4, #28]
    5326:	f040 0013 	orr.w	r0, r0, #19
    532a:	7720      	strb	r0, [r4, #28]
    532c:	e00d      	b.n	534a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    532e:	7f20      	ldrb	r0, [r4, #28]
    5330:	f040 0015 	orr.w	r0, r0, #21
    5334:	7720      	strb	r0, [r4, #28]
    5336:	e008      	b.n	534a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    5338:	7f20      	ldrb	r0, [r4, #28]
    533a:	f040 0010 	orr.w	r0, r0, #16
    533e:	7720      	strb	r0, [r4, #28]
    5340:	e003      	b.n	534a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    5342:	7f20      	ldrb	r0, [r4, #28]
    5344:	f040 0012 	orr.w	r0, r0, #18
    5348:	7720      	strb	r0, [r4, #28]
    534a:	f104 0214 	add.w	r2, r4, #20
    534e:	1e56      	subs	r6, r2, #1
    5350:	4640      	mov	r0, r8
    5352:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    5356:	d00c      	beq.n	5372 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb2>
    5358:	4631      	mov	r1, r6
    535a:	f7fc f99f 	bl	169c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    535e:	b120      	cbz	r0, 536a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    5360:	7830      	ldrb	r0, [r6, #0]
    5362:	f040 0002 	orr.w	r0, r0, #2
    5366:	7030      	strb	r0, [r6, #0]
    5368:	e00a      	b.n	5380 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xc0>
    536a:	21dc      	movs	r1, #220	; 0xdc
    536c:	2033      	movs	r0, #51	; 0x33
    536e:	f7fb f949 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5372:	7c78      	ldrb	r0, [r7, #17]
    5374:	7030      	strb	r0, [r6, #0]
    5376:	6878      	ldr	r0, [r7, #4]
    5378:	6801      	ldr	r1, [r0, #0]
    537a:	6011      	str	r1, [r2, #0]
    537c:	8880      	ldrh	r0, [r0, #4]
    537e:	8090      	strh	r0, [r2, #4]
    5380:	f884 b01b 	strb.w	fp, [r4, #27]
    5384:	f884 a01e 	strb.w	sl, [r4, #30]
    5388:	2600      	movs	r6, #0
    538a:	77e6      	strb	r6, [r4, #31]
    538c:	20ff      	movs	r0, #255	; 0xff
    538e:	f884 0020 	strb.w	r0, [r4, #32]
    5392:	7f21      	ldrb	r1, [r4, #28]
    5394:	f011 0f04 	tst.w	r1, #4
    5398:	bf08      	it	eq
    539a:	f884 0025 	strbeq.w	r0, [r4, #37]	; 0x25
    539e:	d012      	beq.n	53c6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x106>
    53a0:	f104 0026 	add.w	r0, r4, #38	; 0x26
    53a4:	1e41      	subs	r1, r0, #1
    53a6:	2d02      	cmp	r5, #2
    53a8:	bf18      	it	ne
    53aa:	2d03      	cmpne	r5, #3
    53ac:	d005      	beq.n	53ba <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xfa>
    53ae:	68ba      	ldr	r2, [r7, #8]
    53b0:	6813      	ldr	r3, [r2, #0]
    53b2:	6003      	str	r3, [r0, #0]
    53b4:	8892      	ldrh	r2, [r2, #4]
    53b6:	8082      	strh	r2, [r0, #4]
    53b8:	e004      	b.n	53c4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x104>
    53ba:	9a05      	ldr	r2, [sp, #20]
    53bc:	6813      	ldr	r3, [r2, #0]
    53be:	6003      	str	r3, [r0, #0]
    53c0:	8892      	ldrh	r2, [r2, #4]
    53c2:	8082      	strh	r2, [r0, #4]
    53c4:	700d      	strb	r5, [r1, #0]
    53c6:	f04f 007f 	mov.w	r0, #127	; 0x7f
    53ca:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    53ce:	f884 902d 	strb.w	r9, [r4, #45]	; 0x2d
    53d2:	f7fb fe8f 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    53d6:	4605      	mov	r5, r0
    53d8:	f7fb fe86 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    53dc:	4601      	mov	r1, r0
    53de:	2201      	movs	r2, #1
    53e0:	4628      	mov	r0, r5
    53e2:	f008 fa1b 	bl	d81c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    53e6:	b140      	cbz	r0, 53fa <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x13a>
    53e8:	4620      	mov	r0, r4
    53ea:	7206      	strb	r6, [r0, #8]
    53ec:	b007      	add	sp, #28
    53ee:	2204      	movs	r2, #4
    53f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53f4:	4903      	ldr	r1, [pc, #12]	; (5404 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x144>)
    53f6:	f7fc bf01 	b.w	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    53fa:	f240 312b 	movw	r1, #811	; 0x32b
    53fe:	2033      	movs	r0, #51	; 0x33
    5400:	f7fb f900 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5404:	00005621 	.word	0x00005621

00005408 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    5408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    540c:	b083      	sub	sp, #12
    540e:	461f      	mov	r7, r3
    5410:	4690      	mov	r8, r2
    5412:	460d      	mov	r5, r1
    5414:	4606      	mov	r6, r0
    5416:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    541a:	f7fb fe6b 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    541e:	4604      	mov	r4, r0
    5420:	f008 fa47 	bl	d8b2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    5424:	2801      	cmp	r0, #1
    5426:	bf04      	itt	eq
    5428:	b003      	addeq	sp, #12
    542a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    542e:	4620      	mov	r0, r4
    5430:	aa01      	add	r2, sp, #4
    5432:	4669      	mov	r1, sp
    5434:	f008 fa7d 	bl	d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5438:	9800      	ldr	r0, [sp, #0]
    543a:	f008 fa38 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    543e:	4604      	mov	r4, r0
    5440:	221c      	movs	r2, #28
    5442:	2100      	movs	r1, #0
    5444:	3012      	adds	r0, #18
    5446:	f00b f8aa 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    544a:	f04f 0901 	mov.w	r9, #1
    544e:	f884 9012 	strb.w	r9, [r4, #18]
    5452:	f104 0214 	add.w	r2, r4, #20
    5456:	f104 0b13 	add.w	fp, r4, #19
    545a:	2dff      	cmp	r5, #255	; 0xff
    545c:	d00f      	beq.n	547e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x76>
    545e:	4659      	mov	r1, fp
    5460:	4628      	mov	r0, r5
    5462:	f7fc f91b 	bl	169c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    5466:	b130      	cbz	r0, 5476 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x6e>
    5468:	f89b 0000 	ldrb.w	r0, [fp]
    546c:	f040 0002 	orr.w	r0, r0, #2
    5470:	f88b 0000 	strb.w	r0, [fp]
    5474:	e00b      	b.n	548e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x86>
    5476:	21dc      	movs	r1, #220	; 0xdc
    5478:	2033      	movs	r0, #51	; 0x33
    547a:	f7fb f8c3 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    547e:	7c70      	ldrb	r0, [r6, #17]
    5480:	f88b 0000 	strb.w	r0, [fp]
    5484:	6870      	ldr	r0, [r6, #4]
    5486:	6801      	ldr	r1, [r0, #0]
    5488:	6011      	str	r1, [r2, #0]
    548a:	8880      	ldrh	r0, [r0, #4]
    548c:	8090      	strh	r0, [r2, #4]
    548e:	f884 a01b 	strb.w	sl, [r4, #27]
    5492:	7f20      	ldrb	r0, [r4, #28]
    5494:	2500      	movs	r5, #0
    5496:	f368 0000 	bfi	r0, r8, #0, #1
    549a:	f040 001a 	orr.w	r0, r0, #26
    549e:	7720      	strb	r0, [r4, #28]
    54a0:	f884 901e 	strb.w	r9, [r4, #30]
    54a4:	77e5      	strb	r5, [r4, #31]
    54a6:	20ff      	movs	r0, #255	; 0xff
    54a8:	f884 0020 	strb.w	r0, [r4, #32]
    54ac:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    54b0:	207f      	movs	r0, #127	; 0x7f
    54b2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    54b6:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    54ba:	f7fb fe1b 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    54be:	4606      	mov	r6, r0
    54c0:	f7fb fe12 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    54c4:	4601      	mov	r1, r0
    54c6:	2201      	movs	r2, #1
    54c8:	4630      	mov	r0, r6
    54ca:	f008 f9a7 	bl	d81c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    54ce:	b140      	cbz	r0, 54e2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xda>
    54d0:	4620      	mov	r0, r4
    54d2:	7205      	strb	r5, [r0, #8]
    54d4:	b003      	add	sp, #12
    54d6:	2204      	movs	r2, #4
    54d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54dc:	4903      	ldr	r1, [pc, #12]	; (54ec <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xe4>)
    54de:	f7fc be8d 	b.w	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    54e2:	f44f 7156 	mov.w	r1, #856	; 0x358
    54e6:	2033      	movs	r0, #51	; 0x33
    54e8:	f7fb f88c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54ec:	00005621 	.word	0x00005621

000054f0 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    54f0:	b510      	push	{r4, lr}
    54f2:	b082      	sub	sp, #8
    54f4:	f7fb fdfe 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    54f8:	aa01      	add	r2, sp, #4
    54fa:	4669      	mov	r1, sp
    54fc:	f008 fa19 	bl	d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5500:	9800      	ldr	r0, [sp, #0]
    5502:	f008 f9d4 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5506:	4604      	mov	r4, r0
    5508:	221c      	movs	r2, #28
    550a:	2100      	movs	r1, #0
    550c:	3012      	adds	r0, #18
    550e:	f00b f846 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5512:	207f      	movs	r0, #127	; 0x7f
    5514:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    5518:	21ff      	movs	r1, #255	; 0xff
    551a:	f884 1020 	strb.w	r1, [r4, #32]
    551e:	74e1      	strb	r1, [r4, #19]
    5520:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    5524:	7f20      	ldrb	r0, [r4, #28]
    5526:	4906      	ldr	r1, [pc, #24]	; (5540 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x50>)
    5528:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    552c:	3020      	adds	r0, #32
    552e:	7720      	strb	r0, [r4, #28]
    5530:	2000      	movs	r0, #0
    5532:	6088      	str	r0, [r1, #8]
    5534:	7008      	strb	r0, [r1, #0]
    5536:	8088      	strh	r0, [r1, #4]
    5538:	7048      	strb	r0, [r1, #1]
    553a:	b002      	add	sp, #8
    553c:	bd10      	pop	{r4, pc}
    553e:	0000      	.short	0x0000
    5540:	200000f4 	.word	0x200000f4

00005544 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>:
    5544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5548:	b082      	sub	sp, #8
    554a:	f7fb fdd3 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    554e:	aa01      	add	r2, sp, #4
    5550:	4669      	mov	r1, sp
    5552:	f008 f9ee 	bl	d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5556:	9800      	ldr	r0, [sp, #0]
    5558:	f008 f9a9 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    555c:	7fc0      	ldrb	r0, [r0, #31]
    555e:	2500      	movs	r5, #0
    5560:	2800      	cmp	r0, #0
    5562:	bf04      	itt	eq
    5564:	b002      	addeq	sp, #8
    5566:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    556a:	4e2b      	ldr	r6, [pc, #172]	; (5618 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xd4>)
    556c:	68b4      	ldr	r4, [r6, #8]
    556e:	b1ac      	cbz	r4, 559c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x58>
    5570:	7f20      	ldrb	r0, [r4, #28]
    5572:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    5576:	3040      	adds	r0, #64	; 0x40
    5578:	7720      	strb	r0, [r4, #28]
    557a:	7877      	ldrb	r7, [r6, #1]
    557c:	7225      	strb	r5, [r4, #8]
    557e:	2204      	movs	r2, #4
    5580:	4926      	ldr	r1, [pc, #152]	; (561c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xd8>)
    5582:	4620      	mov	r0, r4
    5584:	f7fc fe3a 	bl	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5588:	b137      	cbz	r7, 5598 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x54>
    558a:	7465      	strb	r5, [r4, #17]
    558c:	2204      	movs	r2, #4
    558e:	4923      	ldr	r1, [pc, #140]	; (561c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xd8>)
    5590:	f104 0009 	add.w	r0, r4, #9
    5594:	f7fc fe32 	bl	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5598:	60b5      	str	r5, [r6, #8]
    559a:	7075      	strb	r5, [r6, #1]
    559c:	f7fb fdaa 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    55a0:	4607      	mov	r7, r0
    55a2:	aa01      	add	r2, sp, #4
    55a4:	4669      	mov	r1, sp
    55a6:	f008 f9c4 	bl	d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    55aa:	9800      	ldr	r0, [sp, #0]
    55ac:	f008 f97f 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    55b0:	4604      	mov	r4, r0
    55b2:	7fc0      	ldrb	r0, [r0, #31]
    55b4:	f04f 0800 	mov.w	r8, #0
    55b8:	b180      	cbz	r0, 55dc <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x98>
    55ba:	4638      	mov	r0, r7
    55bc:	f008 f979 	bl	d8b2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    55c0:	b328      	cbz	r0, 560e <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xca>
    55c2:	f1b8 0f00 	cmp.w	r8, #0
    55c6:	d005      	beq.n	55d4 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x90>
    55c8:	4620      	mov	r0, r4
    55ca:	7205      	strb	r5, [r0, #8]
    55cc:	2204      	movs	r2, #4
    55ce:	4913      	ldr	r1, [pc, #76]	; (561c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xd8>)
    55d0:	f7fc fe14 	bl	21fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    55d4:	80b5      	strh	r5, [r6, #4]
    55d6:	b002      	add	sp, #8
    55d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55dc:	4638      	mov	r0, r7
    55de:	f008 f968 	bl	d8b2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    55e2:	2801      	cmp	r0, #1
    55e4:	bf04      	itt	eq
    55e6:	b002      	addeq	sp, #8
    55e8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    55ec:	f7fb fd7c 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    55f0:	4601      	mov	r1, r0
    55f2:	2201      	movs	r2, #1
    55f4:	4638      	mov	r0, r7
    55f6:	f008 f911 	bl	d81c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    55fa:	2800      	cmp	r0, #0
    55fc:	bf18      	it	ne
    55fe:	f04f 0801 	movne.w	r8, #1
    5602:	d1da      	bne.n	55ba <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x76>
    5604:	f240 21b1 	movw	r1, #689	; 0x2b1
    5608:	2033      	movs	r0, #51	; 0x33
    560a:	f7fa fffb 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    560e:	f240 21b5 	movw	r1, #693	; 0x2b5
    5612:	2033      	movs	r0, #51	; 0x33
    5614:	f7fa fff6 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5618:	200000f4 	.word	0x200000f4
    561c:	00005621 	.word	0x00005621
    5620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5624:	b08d      	sub	sp, #52	; 0x34
    5626:	460c      	mov	r4, r1
    5628:	f7fb fd64 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    562c:	9000      	str	r0, [sp, #0]
    562e:	f008 f96e 	bl	d90e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    5632:	0006      	movs	r6, r0
    5634:	d010      	beq.n	5658 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x114>
    5636:	4601      	mov	r1, r0
    5638:	f04f 0901 	mov.w	r9, #1
    563c:	aa01      	add	r2, sp, #4
    563e:	9800      	ldr	r0, [sp, #0]
    5640:	f008 f985 	bl	d94e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5644:	4605      	mov	r5, r0
    5646:	f7fb fd4f 	bl	10e8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    564a:	42a8      	cmp	r0, r5
    564c:	d009      	beq.n	5662 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x11e>
    564e:	f240 11ab 	movw	r1, #427	; 0x1ab
    5652:	2033      	movs	r0, #51	; 0x33
    5654:	f7fa ffd6 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5658:	f240 11a1 	movw	r1, #417	; 0x1a1
    565c:	2033      	movs	r0, #51	; 0x33
    565e:	f7fa ffd1 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5662:	a902      	add	r1, sp, #8
    5664:	9801      	ldr	r0, [sp, #4]
    5666:	f009 fcfa 	bl	f05e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    566a:	1d25      	adds	r5, r4, #4
    566c:	4630      	mov	r0, r6
    566e:	f008 f91e 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5672:	4683      	mov	fp, r0
    5674:	f100 0112 	add.w	r1, r0, #18
    5678:	221c      	movs	r2, #28
    567a:	4628      	mov	r0, r5
    567c:	f00a ff15 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5680:	f89b 001c 	ldrb.w	r0, [fp, #28]
    5684:	4e78      	ldr	r6, [pc, #480]	; (5868 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x324>)
    5686:	f010 0f10 	tst.w	r0, #16
    568a:	f04f 0801 	mov.w	r8, #1
    568e:	f04f 0a03 	mov.w	sl, #3
    5692:	f04f 0700 	mov.w	r7, #0
    5696:	d00f      	beq.n	56b8 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x174>
    5698:	f010 0f04 	tst.w	r0, #4
    569c:	bf18      	it	ne
    569e:	722f      	strbne	r7, [r5, #8]
    56a0:	d13a      	bne.n	5718 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1d4>
    56a2:	f89d 2018 	ldrb.w	r2, [sp, #24]
    56a6:	f105 001c 	add.w	r0, r5, #28
    56aa:	9905      	ldr	r1, [sp, #20]
    56ac:	f00a fefd 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    56b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    56b4:	7228      	strb	r0, [r5, #8]
    56b6:	e02f      	b.n	5718 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1d4>
    56b8:	7830      	ldrb	r0, [r6, #0]
    56ba:	b928      	cbnz	r0, 56c8 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x184>
    56bc:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    56c0:	2825      	cmp	r0, #37	; 0x25
    56c2:	bf38      	it	cc
    56c4:	f886 8000 	strbcc.w	r8, [r6]
    56c8:	7830      	ldrb	r0, [r6, #0]
    56ca:	2800      	cmp	r0, #0
    56cc:	bf1a      	itte	ne
    56ce:	f89d 0008 	ldrbne.w	r0, [sp, #8]
    56d2:	2802      	cmpne	r0, #2
    56d4:	722f      	strbeq	r7, [r5, #8]
    56d6:	d018      	beq.n	570a <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1c6>
    56d8:	78b3      	ldrb	r3, [r6, #2]
    56da:	f04f 02e5 	mov.w	r2, #229	; 0xe5
    56de:	f105 011c 	add.w	r1, r5, #28
    56e2:	9801      	ldr	r0, [sp, #4]
    56e4:	f008 fde0 	bl	e2a8 <sym_7LMKRMQ2L35LNXR46RI7Y3BVMVYAICJYJCWUSXA>
    56e8:	7228      	strb	r0, [r5, #8]
    56ea:	78b1      	ldrb	r1, [r6, #2]
    56ec:	4408      	add	r0, r1
    56ee:	70b0      	strb	r0, [r6, #2]
    56f0:	9801      	ldr	r0, [sp, #4]
    56f2:	f008 fdd1 	bl	e298 <sym_F2YEG7LG2K4M2PP2ISXH2ZTMWJ6S3M4N73JXFJI>
    56f6:	78b1      	ldrb	r1, [r6, #2]
    56f8:	4288      	cmp	r0, r1
    56fa:	d006      	beq.n	570a <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1c6>
    56fc:	7aa8      	ldrb	r0, [r5, #10]
    56fe:	f04f 0900 	mov.w	r9, #0
    5702:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    5706:	3020      	adds	r0, #32
    5708:	72a8      	strb	r0, [r5, #10]
    570a:	7aa8      	ldrb	r0, [r5, #10]
    570c:	f3c0 1141 	ubfx	r1, r0, #5, #2
    5710:	2901      	cmp	r1, #1
    5712:	bf18      	it	ne
    5714:	7037      	strbne	r7, [r6, #0]
    5716:	d00d      	beq.n	5734 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1f0>
    5718:	7067      	strb	r7, [r4, #1]
    571a:	2005      	movs	r0, #5
    571c:	7020      	strb	r0, [r4, #0]
    571e:	f001 fd55 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    5722:	2800      	cmp	r0, #0
    5724:	d063      	beq.n	57ee <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x2aa>
    5726:	7820      	ldrb	r0, [r4, #0]
    5728:	2805      	cmp	r0, #5
    572a:	d017      	beq.n	575c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x218>
    572c:	2148      	movs	r1, #72	; 0x48
    572e:	2033      	movs	r0, #51	; 0x33
    5730:	f7fa ff68 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5734:	7831      	ldrb	r1, [r6, #0]
    5736:	2900      	cmp	r1, #0
    5738:	bf08      	it	eq
    573a:	f886 8000 	strbeq.w	r8, [r6]
    573e:	d0eb      	beq.n	5718 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1d4>
    5740:	2901      	cmp	r1, #1
    5742:	d002      	beq.n	574a <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x206>
    5744:	2902      	cmp	r1, #2
    5746:	d006      	beq.n	5756 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x212>
    5748:	e7e6      	b.n	5718 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1d4>
    574a:	f010 0f02 	tst.w	r0, #2
    574e:	bf1c      	itt	ne
    5750:	2002      	movne	r0, #2
    5752:	7030      	strbne	r0, [r6, #0]
    5754:	d1e0      	bne.n	5718 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1d4>
    5756:	f886 a000 	strb.w	sl, [r6]
    575a:	e7dd      	b.n	5718 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x1d4>
    575c:	7ba0      	ldrb	r0, [r4, #14]
    575e:	f010 0f10 	tst.w	r0, #16
    5762:	d028      	beq.n	57b6 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x272>
    5764:	221c      	movs	r2, #28
    5766:	1d21      	adds	r1, r4, #4
    5768:	4840      	ldr	r0, [pc, #256]	; (586c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x328>)
    576a:	f00a fe9e 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    576e:	7b22      	ldrb	r2, [r4, #12]
    5770:	f104 0120 	add.w	r1, r4, #32
    5774:	483e      	ldr	r0, [pc, #248]	; (5870 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x32c>)
    5776:	f00a fe98 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    577a:	483c      	ldr	r0, [pc, #240]	; (586c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x328>)
    577c:	7a81      	ldrb	r1, [r0, #10]
    577e:	f011 0f04 	tst.w	r1, #4
    5782:	d002      	beq.n	578a <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x246>
    5784:	7cc1      	ldrb	r1, [r0, #19]
    5786:	29fe      	cmp	r1, #254	; 0xfe
    5788:	d019      	beq.n	57be <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x27a>
    578a:	f04f 0204 	mov.w	r2, #4
    578e:	7022      	strb	r2, [r4, #0]
    5790:	6801      	ldr	r1, [r0, #0]
    5792:	6061      	str	r1, [r4, #4]
    5794:	6841      	ldr	r1, [r0, #4]
    5796:	60a1      	str	r1, [r4, #8]
    5798:	8901      	ldrh	r1, [r0, #8]
    579a:	81a1      	strh	r1, [r4, #12]
    579c:	7a81      	ldrb	r1, [r0, #10]
    579e:	f011 0f08 	tst.w	r1, #8
    57a2:	bf18      	it	ne
    57a4:	73a2      	strbne	r2, [r4, #14]
    57a6:	d023      	beq.n	57f0 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x2ac>
    57a8:	7a02      	ldrb	r2, [r0, #8]
    57aa:	2a1f      	cmp	r2, #31
    57ac:	d940      	bls.n	5830 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x2ec>
    57ae:	218d      	movs	r1, #141	; 0x8d
    57b0:	2033      	movs	r0, #51	; 0x33
    57b2:	f7fa ff27 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57b6:	2149      	movs	r1, #73	; 0x49
    57b8:	2033      	movs	r0, #51	; 0x33
    57ba:	f7fa ff23 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57be:	2113      	movs	r1, #19
    57c0:	7021      	strb	r1, [r4, #0]
    57c2:	7801      	ldrb	r1, [r0, #0]
    57c4:	7121      	strb	r1, [r4, #4]
    57c6:	f884 8005 	strb.w	r8, [r4, #5]
    57ca:	7841      	ldrb	r1, [r0, #1]
    57cc:	71a1      	strb	r1, [r4, #6]
    57ce:	f8d0 1002 	ldr.w	r1, [r0, #2]
    57d2:	f8c4 1007 	str.w	r1, [r4, #7]
    57d6:	88c1      	ldrh	r1, [r0, #6]
    57d8:	f8a4 100b 	strh.w	r1, [r4, #11]
    57dc:	21fe      	movs	r1, #254	; 0xfe
    57de:	7361      	strb	r1, [r4, #13]
    57e0:	6941      	ldr	r1, [r0, #20]
    57e2:	f8c4 100e 	str.w	r1, [r4, #14]
    57e6:	8b01      	ldrh	r1, [r0, #24]
    57e8:	8261      	strh	r1, [r4, #18]
    57ea:	7a40      	ldrb	r0, [r0, #9]
    57ec:	7520      	strb	r0, [r4, #20]
    57ee:	e024      	b.n	583a <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x2f6>
    57f0:	f011 0f01 	tst.w	r1, #1
    57f4:	bf1c      	itt	ne
    57f6:	f011 0f02 	tstne.w	r1, #2
    57fa:	73a7      	strbne	r7, [r4, #14]
    57fc:	d1d4      	bne.n	57a8 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x264>
    57fe:	f011 0f04 	tst.w	r1, #4
    5802:	bf18      	it	ne
    5804:	f884 800e 	strbne.w	r8, [r4, #14]
    5808:	d1ce      	bne.n	57a8 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x264>
    580a:	f011 0f01 	tst.w	r1, #1
    580e:	d105      	bne.n	581c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x2d8>
    5810:	f011 0f02 	tst.w	r1, #2
    5814:	bf1c      	itt	ne
    5816:	2102      	movne	r1, #2
    5818:	73a1      	strbne	r1, [r4, #14]
    581a:	d1c5      	bne.n	57a8 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x264>
    581c:	f011 0f03 	tst.w	r1, #3
    5820:	bf08      	it	eq
    5822:	f884 a00e 	strbeq.w	sl, [r4, #14]
    5826:	d0bf      	beq.n	57a8 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x264>
    5828:	218a      	movs	r1, #138	; 0x8a
    582a:	2033      	movs	r0, #51	; 0x33
    582c:	f7fa feea 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5830:	490f      	ldr	r1, [pc, #60]	; (5870 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x32c>)
    5832:	f104 000f 	add.w	r0, r4, #15
    5836:	f00a fe38 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    583a:	f1b9 0f00 	cmp.w	r9, #0
    583e:	bf04      	itt	eq
    5840:	b00d      	addeq	sp, #52	; 0x34
    5842:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5846:	9800      	ldr	r0, [sp, #0]
    5848:	f008 f84c 	bl	d8e4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    584c:	b138      	cbz	r0, 585e <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x31a>
    584e:	2100      	movs	r1, #0
    5850:	9800      	ldr	r0, [sp, #0]
    5852:	f008 f8ae 	bl	d9b2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5856:	70b7      	strb	r7, [r6, #2]
    5858:	b00d      	add	sp, #52	; 0x34
    585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    585e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    5862:	2033      	movs	r0, #51	; 0x33
    5864:	f7fa fece 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5868:	200000f4 	.word	0x200000f4
    586c:	20001255 	.word	0x20001255
    5870:	20001271 	.word	0x20001271

00005874 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    5874:	b570      	push	{r4, r5, r6, lr}
    5876:	4616      	mov	r6, r2
    5878:	460c      	mov	r4, r1
    587a:	4605      	mov	r5, r0
    587c:	f008 fd8c 	bl	e398 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    5880:	7460      	strb	r0, [r4, #17]
    5882:	4628      	mov	r0, r5
    5884:	f008 fd85 	bl	e392 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    5888:	74a0      	strb	r0, [r4, #18]
    588a:	1ceb      	adds	r3, r5, #3
    588c:	f8df c080 	ldr.w	ip, [pc, #128]	; 5910 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x9c>
    5890:	1d98      	adds	r0, r3, #6
    5892:	2100      	movs	r1, #0
    5894:	2e07      	cmp	r6, #7
    5896:	d234      	bcs.n	5902 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x8e>
    5898:	e8df f006 	tbb	[pc, r6]
    589c:	331b1304 	.word	0x331b1304
    58a0:	00043327 	.word	0x00043327
    58a4:	f89c 2000 	ldrb.w	r2, [ip]
    58a8:	7062      	strb	r2, [r4, #1]
    58aa:	e9c4 3101 	strd	r3, r1, [r4, #4]
    58ae:	786a      	ldrb	r2, [r5, #1]
    58b0:	1f92      	subs	r2, r2, #6
    58b2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    58b6:	7422      	strb	r2, [r4, #16]
    58b8:	d001      	beq.n	58be <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    58ba:	60e0      	str	r0, [r4, #12]
    58bc:	bd70      	pop	{r4, r5, r6, pc}
    58be:	60e1      	str	r1, [r4, #12]
    58c0:	bd70      	pop	{r4, r5, r6, pc}
    58c2:	f89c 2001 	ldrb.w	r2, [ip, #1]
    58c6:	7062      	strb	r2, [r4, #1]
    58c8:	e9c4 3001 	strd	r3, r0, [r4, #4]
    58cc:	7421      	strb	r1, [r4, #16]
    58ce:	60e1      	str	r1, [r4, #12]
    58d0:	bd70      	pop	{r4, r5, r6, pc}
    58d2:	f89c 2002 	ldrb.w	r2, [ip, #2]
    58d6:	7062      	strb	r2, [r4, #1]
    58d8:	e9c4 3101 	strd	r3, r1, [r4, #4]
    58dc:	786a      	ldrb	r2, [r5, #1]
    58de:	1f92      	subs	r2, r2, #6
    58e0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    58e4:	7422      	strb	r2, [r4, #16]
    58e6:	d0ea      	beq.n	58be <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    58e8:	e7e7      	b.n	58ba <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    58ea:	f89c 2003 	ldrb.w	r2, [ip, #3]
    58ee:	7062      	strb	r2, [r4, #1]
    58f0:	e9c4 3101 	strd	r3, r1, [r4, #4]
    58f4:	786a      	ldrb	r2, [r5, #1]
    58f6:	1f92      	subs	r2, r2, #6
    58f8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    58fc:	7422      	strb	r2, [r4, #16]
    58fe:	d0de      	beq.n	58be <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    5900:	e7db      	b.n	58ba <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    5902:	7061      	strb	r1, [r4, #1]
    5904:	6061      	str	r1, [r4, #4]
    5906:	60a1      	str	r1, [r4, #8]
    5908:	7421      	strb	r1, [r4, #16]
    590a:	60e1      	str	r1, [r4, #12]
    590c:	bd70      	pop	{r4, r5, r6, pc}
    590e:	0000      	.short	0x0000
    5910:	0001070b 	.word	0x0001070b

00005914 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    5914:	b570      	push	{r4, r5, r6, lr}
    5916:	4606      	mov	r6, r0
    5918:	f005 fd68 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    591c:	4d29      	ldr	r5, [pc, #164]	; (59c4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xb0>)
    591e:	69a9      	ldr	r1, [r5, #24]
    5920:	1a44      	subs	r4, r0, r1
    5922:	f7fe faed 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5926:	7840      	ldrb	r0, [r0, #1]
    5928:	2200      	movs	r2, #0
    592a:	2e07      	cmp	r6, #7
    592c:	d245      	bcs.n	59ba <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xa6>
    592e:	e8df f006 	tbb	[pc, r6]
    5932:	4204      	.short	0x4204
    5934:	422e2742 	.word	0x422e2742
    5938:	0042      	.short	0x0042
    593a:	2808      	cmp	r0, #8
    593c:	d00d      	beq.n	595a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x46>
    593e:	2804      	cmp	r0, #4
    5940:	d00f      	beq.n	5962 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x4e>
    5942:	2802      	cmp	r0, #2
    5944:	d013      	beq.n	596e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    5946:	2108      	movs	r1, #8
    5948:	2801      	cmp	r0, #1
    594a:	bf04      	itt	eq
    594c:	202a      	moveq	r0, #42	; 0x2a
    594e:	2328      	moveq	r3, #40	; 0x28
    5950:	d010      	beq.n	5974 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>
    5952:	21f5      	movs	r1, #245	; 0xf5
    5954:	2005      	movs	r0, #5
    5956:	f7fa fe55 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    595a:	2140      	movs	r1, #64	; 0x40
    595c:	2014      	movs	r0, #20
    595e:	460a      	mov	r2, r1
    5960:	e002      	b.n	5968 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    5962:	2110      	movs	r1, #16
    5964:	2014      	movs	r0, #20
    5966:	222e      	movs	r2, #46	; 0x2e
    5968:	f44f 73a8 	mov.w	r3, #336	; 0x150
    596c:	e002      	b.n	5974 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>
    596e:	2104      	movs	r1, #4
    5970:	2012      	movs	r0, #18
    5972:	2318      	movs	r3, #24
    5974:	441a      	add	r2, r3
    5976:	fb11 2000 	smlabb	r0, r1, r0, r2
    597a:	b280      	uxth	r0, r0
    597c:	3098      	adds	r0, #152	; 0x98
    597e:	e008      	b.n	5992 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x7e>
    5980:	f010 000c 	ands.w	r0, r0, #12
    5984:	bf18      	it	ne
    5986:	2028      	movne	r0, #40	; 0x28
    5988:	f500 7057 	add.w	r0, r0, #860	; 0x35c
    598c:	e001      	b.n	5992 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x7e>
    598e:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    5992:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5994:	4404      	add	r4, r0
    5996:	39f4      	subs	r1, #244	; 0xf4
    5998:	428c      	cmp	r4, r1
    599a:	d309      	bcc.n	59b0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9c>
    599c:	2600      	movs	r6, #0
    599e:	f000 fb27 	bl	5ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x394>
    59a2:	b130      	cbz	r0, 59b2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9e>
    59a4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    59a6:	38f4      	subs	r0, #244	; 0xf4
    59a8:	4284      	cmp	r4, r0
    59aa:	bf28      	it	cs
    59ac:	2600      	movcs	r6, #0
    59ae:	d200      	bcs.n	59b2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9e>
    59b0:	2601      	movs	r6, #1
    59b2:	4630      	mov	r0, r6
    59b4:	bd70      	pop	{r4, r5, r6, pc}
    59b6:	2001      	movs	r0, #1
    59b8:	bd70      	pop	{r4, r5, r6, pc}
    59ba:	f240 31d6 	movw	r1, #982	; 0x3d6
    59be:	2021      	movs	r0, #33	; 0x21
    59c0:	f7fa fe20 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59c4:	200007e0 	.word	0x200007e0

000059c8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    59c8:	2900      	cmp	r1, #0
    59ca:	bf1c      	itt	ne
    59cc:	2011      	movne	r0, #17
    59ce:	4770      	bxne	lr
    59d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    59d2:	4c26      	ldr	r4, [pc, #152]	; (5a6c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa4>)
    59d4:	4607      	mov	r7, r0
    59d6:	b087      	sub	sp, #28
    59d8:	7820      	ldrb	r0, [r4, #0]
    59da:	2800      	cmp	r0, #0
    59dc:	bf1e      	ittt	ne
    59de:	200c      	movne	r0, #12
    59e0:	b007      	addne	sp, #28
    59e2:	bdf0      	popne	{r4, r5, r6, r7, pc}
    59e4:	f7fe fa8c 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    59e8:	4606      	mov	r6, r0
    59ea:	2000      	movs	r0, #0
    59ec:	7060      	strb	r0, [r4, #1]
    59ee:	2104      	movs	r1, #4
    59f0:	7021      	strb	r1, [r4, #0]
    59f2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    59f6:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    59fa:	4605      	mov	r5, r0
    59fc:	f009 fb57 	bl	f0ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5a00:	4601      	mov	r1, r0
    5a02:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    5a06:	2000      	movs	r0, #0
    5a08:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    5a0c:	1c40      	adds	r0, r0, #1
    5a0e:	689b      	ldr	r3, [r3, #8]
    5a10:	eb05 0c01 	add.w	ip, r5, r1
    5a14:	b2c0      	uxtb	r0, r0
    5a16:	eb03 050c 	add.w	r5, r3, ip
    5a1a:	4282      	cmp	r2, r0
    5a1c:	d2f4      	bcs.n	5a08 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x40>
    5a1e:	2100      	movs	r1, #0
    5a20:	4813      	ldr	r0, [pc, #76]	; (5a70 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa8>)
    5a22:	65a5      	str	r5, [r4, #88]	; 0x58
    5a24:	f005 fab4 	bl	af90 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5a28:	7030      	strb	r0, [r6, #0]
    5a2a:	2820      	cmp	r0, #32
    5a2c:	d014      	beq.n	5a58 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x90>
    5a2e:	463b      	mov	r3, r7
    5a30:	2200      	movs	r2, #0
    5a32:	2101      	movs	r1, #1
    5a34:	4668      	mov	r0, sp
    5a36:	f000 fb41 	bl	60bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x460>
    5a3a:	b190      	cbz	r0, 5a62 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x9a>
    5a3c:	7830      	ldrb	r0, [r6, #0]
    5a3e:	4669      	mov	r1, sp
    5a40:	f004 fd18 	bl	a474 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    5a44:	2800      	cmp	r0, #0
    5a46:	bf1e      	ittt	ne
    5a48:	2000      	movne	r0, #0
    5a4a:	b007      	addne	sp, #28
    5a4c:	bdf0      	popne	{r4, r5, r6, r7, pc}
    5a4e:	f240 3165 	movw	r1, #869	; 0x365
    5a52:	2021      	movs	r0, #33	; 0x21
    5a54:	f7fa fdd6 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a58:	f240 3162 	movw	r1, #866	; 0x362
    5a5c:	2021      	movs	r0, #33	; 0x21
    5a5e:	f7fa fdd1 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a62:	f44f 7159 	mov.w	r1, #868	; 0x364
    5a66:	2021      	movs	r0, #33	; 0x21
    5a68:	f7fa fdcc 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a6c:	200007e0 	.word	0x200007e0
    5a70:	00005d11 	.word	0x00005d11

00005a74 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    5a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a78:	2600      	movs	r6, #0
    5a7a:	f7fe fa41 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5a7e:	4c3f      	ldr	r4, [pc, #252]	; (5b7c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x108>)
    5a80:	4607      	mov	r7, r0
    5a82:	7820      	ldrb	r0, [r4, #0]
    5a84:	2804      	cmp	r0, #4
    5a86:	bf1f      	itttt	ne
    5a88:	7820      	ldrbne	r0, [r4, #0]
    5a8a:	2805      	cmpne	r0, #5
    5a8c:	200c      	movne	r0, #12
    5a8e:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a92:	f04f 0001 	mov.w	r0, #1
    5a96:	7060      	strb	r0, [r4, #1]
    5a98:	7d20      	ldrb	r0, [r4, #20]
    5a9a:	f04f 0500 	mov.w	r5, #0
    5a9e:	b1b0      	cbz	r0, 5ace <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x5a>
    5aa0:	f3ef 8810 	mrs	r8, PRIMASK
    5aa4:	b672      	cpsid	i
    5aa6:	7d20      	ldrb	r0, [r4, #20]
    5aa8:	2800      	cmp	r0, #0
    5aaa:	bf1c      	itt	ne
    5aac:	7d60      	ldrbne	r0, [r4, #21]
    5aae:	2800      	cmpne	r0, #0
    5ab0:	d009      	beq.n	5ac6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    5ab2:	f7fe fbb7 	bl	4224 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    5ab6:	7d20      	ldrb	r0, [r4, #20]
    5ab8:	b128      	cbz	r0, 5ac6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    5aba:	f002 f89b 	bl	7bf4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5abe:	f005 fa8f 	bl	afe0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    5ac2:	7525      	strb	r5, [r4, #20]
    5ac4:	7565      	strb	r5, [r4, #21]
    5ac6:	f1b8 0f00 	cmp.w	r8, #0
    5aca:	d10e      	bne.n	5aea <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    5acc:	e00c      	b.n	5ae8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x74>
    5ace:	7838      	ldrb	r0, [r7, #0]
    5ad0:	f004 fff2 	bl	aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    5ad4:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    5ad8:	04c0      	lsls	r0, r0, #19
    5ada:	0cc0      	lsrs	r0, r0, #19
    5adc:	d005      	beq.n	5aea <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    5ade:	2100      	movs	r1, #0
    5ae0:	2003      	movs	r0, #3
    5ae2:	f7fe f9e7 	bl	3eb4 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    5ae6:	e000      	b.n	5aea <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    5ae8:	b662      	cpsie	i
    5aea:	7838      	ldrb	r0, [r7, #0]
    5aec:	f005 f938 	bl	ad60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    5af0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    5af4:	2800      	cmp	r0, #0
    5af6:	7820      	ldrb	r0, [r4, #0]
    5af8:	d02f      	beq.n	5b5a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xe6>
    5afa:	2805      	cmp	r0, #5
    5afc:	d004      	beq.n	5b08 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x94>
    5afe:	f240 2157 	movw	r1, #599	; 0x257
    5b02:	2021      	movs	r0, #33	; 0x21
    5b04:	f7fa fd7e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b08:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    5b0a:	b120      	cbz	r0, 5b16 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    5b0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    5b10:	f000 fea2 	bl	6858 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    5b14:	e003      	b.n	5b1e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xaa>
    5b16:	f104 0050 	add.w	r0, r4, #80	; 0x50
    5b1a:	f000 fee7 	bl	68ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    5b1e:	7065      	strb	r5, [r4, #1]
    5b20:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    5b24:	2800      	cmp	r0, #0
    5b26:	bf18      	it	ne
    5b28:	260c      	movne	r6, #12
    5b2a:	f7fe fa71 	bl	4010 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    5b2e:	70a5      	strb	r5, [r4, #2]
    5b30:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    5b34:	62a5      	str	r5, [r4, #40]	; 0x28
    5b36:	7820      	ldrb	r0, [r4, #0]
    5b38:	2804      	cmp	r0, #4
    5b3a:	bf08      	it	eq
    5b3c:	f7ff fd02 	bleq	5544 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    5b40:	7025      	strb	r5, [r4, #0]
    5b42:	f7fe f9dd 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5b46:	4604      	mov	r4, r0
    5b48:	7800      	ldrb	r0, [r0, #0]
    5b4a:	f005 f8e7 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5b4e:	b178      	cbz	r0, 5b70 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xfc>
    5b50:	2020      	movs	r0, #32
    5b52:	7020      	strb	r0, [r4, #0]
    5b54:	4630      	mov	r0, r6
    5b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b5a:	2805      	cmp	r0, #5
    5b5c:	d1db      	bne.n	5b16 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    5b5e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    5b60:	2800      	cmp	r0, #0
    5b62:	d1d8      	bne.n	5b16 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    5b64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5b66:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5b6a:	f000 febf 	bl	68ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    5b6e:	e7d2      	b.n	5b16 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    5b70:	f240 3192 	movw	r1, #914	; 0x392
    5b74:	2021      	movs	r0, #33	; 0x21
    5b76:	f7fa fd45 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b7a:	0000      	.short	0x0000
    5b7c:	200007e0 	.word	0x200007e0

00005b80 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    5b80:	4801      	ldr	r0, [pc, #4]	; (5b88 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    5b82:	7800      	ldrb	r0, [r0, #0]
    5b84:	4770      	bx	lr
    5b86:	0000      	.short	0x0000
    5b88:	200007e0 	.word	0x200007e0

00005b8c <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    5b8c:	b510      	push	{r4, lr}
    5b8e:	4c15      	ldr	r4, [pc, #84]	; (5be4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x58>)
    5b90:	b086      	sub	sp, #24
    5b92:	7d20      	ldrb	r0, [r4, #20]
    5b94:	b198      	cbz	r0, 5bbe <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x32>
    5b96:	7860      	ldrb	r0, [r4, #1]
    5b98:	b988      	cbnz	r0, 5bbe <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x32>
    5b9a:	2300      	movs	r3, #0
    5b9c:	461a      	mov	r2, r3
    5b9e:	4619      	mov	r1, r3
    5ba0:	4668      	mov	r0, sp
    5ba2:	f000 fa8b 	bl	60bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x460>
    5ba6:	2800      	cmp	r0, #0
    5ba8:	bf04      	itt	eq
    5baa:	2001      	moveq	r0, #1
    5bac:	70a0      	strbeq	r0, [r4, #2]
    5bae:	d006      	beq.n	5bbe <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x32>
    5bb0:	f7fe f9a6 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5bb4:	7800      	ldrb	r0, [r0, #0]
    5bb6:	4669      	mov	r1, sp
    5bb8:	f004 fc5c 	bl	a474 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    5bbc:	b168      	cbz	r0, 5bda <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x4e>
    5bbe:	7d20      	ldrb	r0, [r4, #20]
    5bc0:	2800      	cmp	r0, #0
    5bc2:	bf04      	itt	eq
    5bc4:	b006      	addeq	sp, #24
    5bc6:	bd10      	popeq	{r4, pc}
    5bc8:	f002 f814 	bl	7bf4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5bcc:	f005 fa08 	bl	afe0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    5bd0:	2000      	movs	r0, #0
    5bd2:	7520      	strb	r0, [r4, #20]
    5bd4:	7560      	strb	r0, [r4, #21]
    5bd6:	b006      	add	sp, #24
    5bd8:	bd10      	pop	{r4, pc}
    5bda:	f240 71ae 	movw	r1, #1966	; 0x7ae
    5bde:	2021      	movs	r0, #33	; 0x21
    5be0:	f7fa fd10 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5be4:	200007e0 	.word	0x200007e0

00005be8 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    5be8:	b570      	push	{r4, r5, r6, lr}
    5bea:	2270      	movs	r2, #112	; 0x70
    5bec:	2100      	movs	r1, #0
    5bee:	4812      	ldr	r0, [pc, #72]	; (5c38 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x50>)
    5bf0:	f00a fcd5 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bf4:	f7fe f984 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5bf8:	2120      	movs	r1, #32
    5bfa:	7001      	strb	r1, [r0, #0]
    5bfc:	480f      	ldr	r0, [pc, #60]	; (5c3c <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x54>)
    5bfe:	2500      	movs	r5, #0
    5c00:	6005      	str	r5, [r0, #0]
    5c02:	6800      	ldr	r0, [r0, #0]
    5c04:	f641 016a 	movw	r1, #6250	; 0x186a
    5c08:	4288      	cmp	r0, r1
    5c0a:	d304      	bcc.n	5c16 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x2e>
    5c0c:	f640 01e9 	movw	r1, #2281	; 0x8e9
    5c10:	2021      	movs	r0, #33	; 0x21
    5c12:	f7fa fcf7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c16:	4c08      	ldr	r4, [pc, #32]	; (5c38 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x50>)
    5c18:	7820      	ldrb	r0, [r4, #0]
    5c1a:	2800      	cmp	r0, #0
    5c1c:	bf18      	it	ne
    5c1e:	f7ff ff29 	blne	5a74 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    5c22:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
    5c26:	f242 7510 	movw	r5, #10000	; 0x2710
    5c2a:	10a8      	asrs	r0, r5, #2
    5c2c:	6060      	str	r0, [r4, #4]
    5c2e:	f009 fa3e 	bl	f0ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5c32:	1a28      	subs	r0, r5, r0
    5c34:	60a0      	str	r0, [r4, #8]
    5c36:	bd70      	pop	{r4, r5, r6, pc}
    5c38:	200007e0 	.word	0x200007e0
    5c3c:	20000100 	.word	0x20000100

00005c40 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    5c40:	b510      	push	{r4, lr}
    5c42:	4c05      	ldr	r4, [pc, #20]	; (5c58 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x18>)
    5c44:	7820      	ldrb	r0, [r4, #0]
    5c46:	2800      	cmp	r0, #0
    5c48:	bf18      	it	ne
    5c4a:	f7ff ff13 	blne	5a74 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    5c4e:	2000      	movs	r0, #0
    5c50:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    5c54:	bd10      	pop	{r4, pc}
    5c56:	0000      	.short	0x0000
    5c58:	200007e0 	.word	0x200007e0

00005c5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    5c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c5e:	4c2b      	ldr	r4, [pc, #172]	; (5d0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb0>)
    5c60:	b083      	sub	sp, #12
    5c62:	7821      	ldrb	r1, [r4, #0]
    5c64:	b121      	cbz	r1, 5c70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14>
    5c66:	f44f 7147 	mov.w	r1, #796	; 0x31c
    5c6a:	2021      	movs	r0, #33	; 0x21
    5c6c:	f7fa fcca 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c70:	2200      	movs	r2, #0
    5c72:	9200      	str	r2, [sp, #0]
    5c74:	9201      	str	r2, [sp, #4]
    5c76:	9202      	str	r2, [sp, #8]
    5c78:	7803      	ldrb	r3, [r0, #0]
    5c7a:	4615      	mov	r5, r2
    5c7c:	f013 0f01 	tst.w	r3, #1
    5c80:	4611      	mov	r1, r2
    5c82:	466b      	mov	r3, sp
    5c84:	d004      	beq.n	5c90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>
    5c86:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    5c8a:	2501      	movs	r5, #1
    5c8c:	9100      	str	r1, [sp, #0]
    5c8e:	4629      	mov	r1, r5
    5c90:	f890 c000 	ldrb.w	ip, [r0]
    5c94:	f01c 0f02 	tst.w	ip, #2
    5c98:	d006      	beq.n	5ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c>
    5c9a:	e9d0 2c03 	ldrd	r2, ip, [r0, #12]
    5c9e:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    5ca2:	f045 0502 	orr.w	r5, r5, #2
    5ca6:	1c49      	adds	r1, r1, #1
    5ca8:	f890 c000 	ldrb.w	ip, [r0]
    5cac:	f01c 0f04 	tst.w	ip, #4
    5cb0:	d006      	beq.n	5cc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64>
    5cb2:	e9d0 2005 	ldrd	r2, r0, [r0, #20]
    5cb6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    5cba:	f045 0508 	orr.w	r5, r5, #8
    5cbe:	1c49      	adds	r1, r1, #1
    5cc0:	1e48      	subs	r0, r1, #1
    5cc2:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    5cc6:	461f      	mov	r7, r3
    5cc8:	2600      	movs	r6, #0
    5cca:	6062      	str	r2, [r4, #4]
    5ccc:	f009 f9ef 	bl	f0ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5cd0:	f015 0f01 	tst.w	r5, #1
    5cd4:	d003      	beq.n	5cde <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x82>
    5cd6:	9900      	ldr	r1, [sp, #0]
    5cd8:	1a09      	subs	r1, r1, r0
    5cda:	2601      	movs	r6, #1
    5cdc:	60a1      	str	r1, [r4, #8]
    5cde:	f015 0f02 	tst.w	r5, #2
    5ce2:	d006      	beq.n	5cf2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x96>
    5ce4:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
    5ce8:	eb04 0186 	add.w	r1, r4, r6, lsl #2
    5cec:	1a12      	subs	r2, r2, r0
    5cee:	1c76      	adds	r6, r6, #1
    5cf0:	608a      	str	r2, [r1, #8]
    5cf2:	f015 0f08 	tst.w	r5, #8
    5cf6:	d005      	beq.n	5d04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    5cf8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
    5cfc:	eb04 0286 	add.w	r2, r4, r6, lsl #2
    5d00:	1a08      	subs	r0, r1, r0
    5d02:	6090      	str	r0, [r2, #8]
    5d04:	b003      	add	sp, #12
    5d06:	2000      	movs	r0, #0
    5d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d0a:	0000      	.short	0x0000
    5d0c:	200007e0 	.word	0x200007e0
    5d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d14:	b086      	sub	sp, #24
    5d16:	460d      	mov	r5, r1
    5d18:	f7fe f8f2 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5d1c:	2601      	movs	r6, #1
    5d1e:	4c8a      	ldr	r4, [pc, #552]	; (5f48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ec>)
    5d20:	4607      	mov	r7, r0
    5d22:	f04f 0800 	mov.w	r8, #0
    5d26:	2d09      	cmp	r5, #9
    5d28:	f080 8108 	bcs.w	5f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    5d2c:	e8df f005 	tbb	[pc, r5]
    5d30:	a5a57e05 	.word	0xa5a57e05
    5d34:	f9ccfca0 	.word	0xf9ccfca0
    5d38:	00fb      	.short	0x00fb
    5d3a:	7526      	strb	r6, [r4, #20]
    5d3c:	7860      	ldrb	r0, [r4, #1]
    5d3e:	2800      	cmp	r0, #0
    5d40:	bf1c      	itt	ne
    5d42:	b006      	addne	sp, #24
    5d44:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d48:	7838      	ldrb	r0, [r7, #0]
    5d4a:	f004 fa93 	bl	a274 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    5d4e:	e9c4 0106 	strd	r0, r1, [r4, #24]
    5d52:	6d21      	ldr	r1, [r4, #80]	; 0x50
    5d54:	4605      	mov	r5, r0
    5d56:	1a40      	subs	r0, r0, r1
    5d58:	6861      	ldr	r1, [r4, #4]
    5d5a:	fbb0 f0f1 	udiv	r0, r0, r1
    5d5e:	2800      	cmp	r0, #0
    5d60:	bf14      	ite	ne
    5d62:	f04f 0901 	movne.w	r9, #1
    5d66:	f04f 0900 	moveq.w	r9, #0
    5d6a:	f8cd 8008 	str.w	r8, [sp, #8]
    5d6e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    5d72:	2800      	cmp	r0, #0
    5d74:	bf08      	it	eq
    5d76:	4640      	moveq	r0, r8
    5d78:	d022      	beq.n	5dc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    5d7a:	f009 f998 	bl	f0ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5d7e:	4684      	mov	ip, r0
    5d80:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5d82:	6862      	ldr	r2, [r4, #4]
    5d84:	1a29      	subs	r1, r5, r0
    5d86:	fbb1 f1f2 	udiv	r1, r1, r2
    5d8a:	fb02 f101 	mul.w	r1, r2, r1
    5d8e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    5d92:	1841      	adds	r1, r0, r1
    5d94:	f103 0301 	add.w	r3, r3, #1
    5d98:	1a69      	subs	r1, r5, r1
    5d9a:	f04f 0000 	mov.w	r0, #0
    5d9e:	f104 0208 	add.w	r2, r4, #8
    5da2:	b2db      	uxtb	r3, r3
    5da4:	f8d2 a000 	ldr.w	sl, [r2]
    5da8:	44e2      	add	sl, ip
    5daa:	458a      	cmp	sl, r1
    5dac:	d803      	bhi.n	5db6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x15a>
    5dae:	1c40      	adds	r0, r0, #1
    5db0:	eba1 010a 	sub.w	r1, r1, sl
    5db4:	b2c0      	uxtb	r0, r0
    5db6:	1d12      	adds	r2, r2, #4
    5db8:	1e5b      	subs	r3, r3, #1
    5dba:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    5dbe:	d1f1      	bne.n	5da4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x148>
    5dc0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    5dc4:	f88d 000c 	strb.w	r0, [sp, #12]
    5dc8:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    5dcc:	04c0      	lsls	r0, r0, #19
    5dce:	0cc0      	lsrs	r0, r0, #19
    5dd0:	d00f      	beq.n	5df2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    5dd2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5dd4:	9000      	str	r0, [sp, #0]
    5dd6:	2003      	movs	r0, #3
    5dd8:	f88d 0004 	strb.w	r0, [sp, #4]
    5ddc:	f88d 800d 	strb.w	r8, [sp, #13]
    5de0:	4668      	mov	r0, sp
    5de2:	f7fe f95d 	bl	40a0 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    5de6:	b1c8      	cbz	r0, 5e1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c0>
    5de8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    5dec:	2021      	movs	r0, #33	; 0x21
    5dee:	f7fa fc09 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5df2:	f1b9 0f00 	cmp.w	r9, #0
    5df6:	bf14      	ite	ne
    5df8:	f88d 8004 	strbne.w	r8, [sp, #4]
    5dfc:	f88d 6004 	strbeq.w	r6, [sp, #4]
    5e00:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e02:	6861      	ldr	r1, [r4, #4]
    5e04:	1a28      	subs	r0, r5, r0
    5e06:	fbb0 f2f1 	udiv	r2, r0, r1
    5e0a:	fb01 0012 	mls	r0, r1, r2, r0
    5e0e:	2800      	cmp	r0, #0
    5e10:	bf0c      	ite	eq
    5e12:	2001      	moveq	r0, #1
    5e14:	2000      	movne	r0, #0
    5e16:	f88d 000d 	strb.w	r0, [sp, #13]
    5e1a:	e7e1      	b.n	5de0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    5e1c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5e1e:	38e3      	subs	r0, #227	; 0xe3
    5e20:	6420      	str	r0, [r4, #64]	; 0x40
    5e22:	f005 f9f7 	bl	b214 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5e26:	b006      	add	sp, #24
    5e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e2c:	7860      	ldrb	r0, [r4, #1]
    5e2e:	b190      	cbz	r0, 5e56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1fa>
    5e30:	f7fe f9f8 	bl	4224 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    5e34:	7d20      	ldrb	r0, [r4, #20]
    5e36:	2800      	cmp	r0, #0
    5e38:	bf04      	itt	eq
    5e3a:	b006      	addeq	sp, #24
    5e3c:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e40:	f001 fed8 	bl	7bf4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5e44:	f005 f8cc 	bl	afe0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    5e48:	f884 8014 	strb.w	r8, [r4, #20]
    5e4c:	f884 8015 	strb.w	r8, [r4, #21]
    5e50:	b006      	add	sp, #24
    5e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e56:	7566      	strb	r6, [r4, #21]
    5e58:	f7fe f9de 	bl	4218 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    5e5c:	2800      	cmp	r0, #0
    5e5e:	bf04      	itt	eq
    5e60:	b006      	addeq	sp, #24
    5e62:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e66:	f240 11e1 	movw	r1, #481	; 0x1e1
    5e6a:	2021      	movs	r0, #33	; 0x21
    5e6c:	f7fa fbca 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e70:	b006      	add	sp, #24
    5e72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e76:	f002 ba0f 	b.w	8298 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    5e7a:	783d      	ldrb	r5, [r7, #0]
    5e7c:	f7fe f840 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5e80:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    5e84:	04c0      	lsls	r0, r0, #19
    5e86:	0cc0      	lsrs	r0, r0, #19
    5e88:	d003      	beq.n	5e92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x236>
    5e8a:	2101      	movs	r1, #1
    5e8c:	2003      	movs	r0, #3
    5e8e:	f7fe f811 	bl	3eb4 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    5e92:	2300      	movs	r3, #0
    5e94:	2201      	movs	r2, #1
    5e96:	4619      	mov	r1, r3
    5e98:	4668      	mov	r0, sp
    5e9a:	f000 f90f 	bl	60bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x460>
    5e9e:	b168      	cbz	r0, 5ebc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>
    5ea0:	4628      	mov	r0, r5
    5ea2:	4669      	mov	r1, sp
    5ea4:	f004 fae6 	bl	a474 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    5ea8:	2800      	cmp	r0, #0
    5eaa:	bf1c      	itt	ne
    5eac:	b006      	addne	sp, #24
    5eae:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5eb2:	f240 71c9 	movw	r1, #1993	; 0x7c9
    5eb6:	2021      	movs	r0, #33	; 0x21
    5eb8:	f7fa fba4 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ebc:	70a6      	strb	r6, [r4, #2]
    5ebe:	f000 f845 	bl	5f4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f0>
    5ec2:	b006      	add	sp, #24
    5ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ec8:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    5ecc:	04c0      	lsls	r0, r0, #19
    5ece:	0cc0      	lsrs	r0, r0, #19
    5ed0:	d01b      	beq.n	5f0a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ae>
    5ed2:	7878      	ldrb	r0, [r7, #1]
    5ed4:	f010 0f0c 	tst.w	r0, #12
    5ed8:	d01e      	beq.n	5f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2bc>
    5eda:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    5ede:	b9d8      	cbnz	r0, 5f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2bc>
    5ee0:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    5ee4:	2101      	movs	r1, #1
    5ee6:	f244 5036 	movw	r0, #17718	; 0x4536
    5eea:	f004 f899 	bl	a020 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5eee:	b998      	cbnz	r0, 5f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2bc>
    5ef0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    5ef2:	f244 5036 	movw	r0, #17718	; 0x4536
    5ef6:	4401      	add	r1, r0
    5ef8:	63a1      	str	r1, [r4, #56]	; 0x38
    5efa:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5efc:	4408      	add	r0, r1
    5efe:	6420      	str	r0, [r4, #64]	; 0x40
    5f00:	b006      	add	sp, #24
    5f02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f06:	f005 b985 	b.w	b214 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5f0a:	f000 f871 	bl	5ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x394>
    5f0e:	2800      	cmp	r0, #0
    5f10:	bf1c      	itt	ne
    5f12:	b006      	addne	sp, #24
    5f14:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f18:	b006      	add	sp, #24
    5f1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f1e:	f008 bffe 	b.w	ef1e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    5f22:	b006      	add	sp, #24
    5f24:	e001      	b.n	5f2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ce>
    5f26:	e004      	b.n	5f32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d6>
    5f28:	e008      	b.n	5f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    5f2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f2e:	f000 b80d 	b.w	5f4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f0>
    5f32:	f240 2113 	movw	r1, #531	; 0x213
    5f36:	2021      	movs	r0, #33	; 0x21
    5f38:	f7fa fb64 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f3c:	f240 2117 	movw	r1, #535	; 0x217
    5f40:	2021      	movs	r0, #33	; 0x21
    5f42:	f7fa fb5f 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f46:	0000      	.short	0x0000
    5f48:	200007e0 	.word	0x200007e0
    5f4c:	b570      	push	{r4, r5, r6, lr}
    5f4e:	4c27      	ldr	r4, [pc, #156]	; (5fec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x390>)
    5f50:	7820      	ldrb	r0, [r4, #0]
    5f52:	b170      	cbz	r0, 5f72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    5f54:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    5f58:	4620      	mov	r0, r4
    5f5a:	2500      	movs	r5, #0
    5f5c:	2900      	cmp	r1, #0
    5f5e:	6e80      	ldr	r0, [r0, #104]	; 0x68
    5f60:	7821      	ldrb	r1, [r4, #0]
    5f62:	d039      	beq.n	5fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x37c>
    5f64:	2905      	cmp	r1, #5
    5f66:	d009      	beq.n	5f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x320>
    5f68:	f240 2157 	movw	r1, #599	; 0x257
    5f6c:	2021      	movs	r0, #33	; 0x21
    5f6e:	f7fa fb49 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f72:	f240 117b 	movw	r1, #379	; 0x17b
    5f76:	2021      	movs	r0, #33	; 0x21
    5f78:	f7fa fb44 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f7c:	b120      	cbz	r0, 5f88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x32c>
    5f7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    5f82:	f000 fc69 	bl	6858 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    5f86:	e003      	b.n	5f90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x334>
    5f88:	f104 0050 	add.w	r0, r4, #80	; 0x50
    5f8c:	f000 fcae 	bl	68ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    5f90:	78a0      	ldrb	r0, [r4, #2]
    5f92:	b128      	cbz	r0, 5fa0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    5f94:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    5f98:	2800      	cmp	r0, #0
    5f9a:	bf08      	it	eq
    5f9c:	f7fe f97c 	bleq	4298 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    5fa0:	f7fe f836 	bl	4010 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    5fa4:	70a5      	strb	r5, [r4, #2]
    5fa6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    5faa:	62a5      	str	r5, [r4, #40]	; 0x28
    5fac:	7820      	ldrb	r0, [r4, #0]
    5fae:	2804      	cmp	r0, #4
    5fb0:	bf08      	it	eq
    5fb2:	f7ff fac7 	bleq	5544 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    5fb6:	7025      	strb	r5, [r4, #0]
    5fb8:	f7fd ffa2 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5fbc:	4604      	mov	r4, r0
    5fbe:	7800      	ldrb	r0, [r0, #0]
    5fc0:	f004 feac 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5fc4:	2800      	cmp	r0, #0
    5fc6:	bf1e      	ittt	ne
    5fc8:	2020      	movne	r0, #32
    5fca:	7020      	strbne	r0, [r4, #0]
    5fcc:	bd70      	popne	{r4, r5, r6, pc}
    5fce:	f240 3192 	movw	r1, #914	; 0x392
    5fd2:	2021      	movs	r0, #33	; 0x21
    5fd4:	f7fa fb16 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fd8:	2905      	cmp	r1, #5
    5fda:	bf08      	it	eq
    5fdc:	2800      	cmpeq	r0, #0
    5fde:	d1d3      	bne.n	5f88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x32c>
    5fe0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5fe2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5fe6:	f000 fc81 	bl	68ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    5fea:	e7cd      	b.n	5f88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x32c>
    5fec:	200007e0 	.word	0x200007e0
    5ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ff4:	f005 f9fa 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5ff8:	4c2f      	ldr	r4, [pc, #188]	; (60b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x45c>)
    5ffa:	4605      	mov	r5, r0
    5ffc:	460f      	mov	r7, r1
    5ffe:	7821      	ldrb	r1, [r4, #0]
    6000:	69a0      	ldr	r0, [r4, #24]
    6002:	2904      	cmp	r1, #4
    6004:	d109      	bne.n	601a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3be>
    6006:	6861      	ldr	r1, [r4, #4]
    6008:	6d22      	ldr	r2, [r4, #80]	; 0x50
    600a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    600e:	0049      	lsls	r1, r1, #1
    6010:	1a80      	subs	r0, r0, r2
    6012:	4288      	cmp	r0, r1
    6014:	bf38      	it	cc
    6016:	2602      	movcc	r6, #2
    6018:	d300      	bcc.n	601c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c0>
    601a:	2601      	movs	r6, #1
    601c:	4630      	mov	r0, r6
    601e:	f004 f8dd 	bl	a1dc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    6022:	2865      	cmp	r0, #101	; 0x65
    6024:	d33a      	bcc.n	609c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x440>
    6026:	f1b0 3fff 	cmp.w	r0, #4294967295
    602a:	bf08      	it	eq
    602c:	6be0      	ldreq	r0, [r4, #60]	; 0x3c
    602e:	d021      	beq.n	6074 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    6030:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
    6034:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6036:	eb0c 0100 	add.w	r1, ip, r0
    603a:	428a      	cmp	r2, r1
    603c:	bf98      	it	ls
    603e:	eba2 000c 	subls.w	r0, r2, ip
    6042:	f1b5 013a 	subs.w	r1, r5, #58	; 0x3a
    6046:	f147 33ff 	adc.w	r3, r7, #4294967295
    604a:	4602      	mov	r2, r0
    604c:	e9d4 070c 	ldrd	r0, r7, [r4, #48]	; 0x30
    6050:	1a40      	subs	r0, r0, r1
    6052:	eb67 0103 	sbc.w	r1, r7, r3
    6056:	2700      	movs	r7, #0
    6058:	46b8      	mov	r8, r7
    605a:	463b      	mov	r3, r7
    605c:	1a3f      	subs	r7, r7, r0
    605e:	eb78 0701 	sbcs.w	r7, r8, r1
    6062:	da05      	bge.n	6070 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>
    6064:	1a17      	subs	r7, r2, r0
    6066:	eb73 0701 	sbcs.w	r7, r3, r1
    606a:	bfa8      	it	ge
    606c:	4602      	movge	r2, r0
    606e:	4613      	mov	r3, r2
    6070:	eb0c 0003 	add.w	r0, ip, r3
    6074:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6076:	1a47      	subs	r7, r0, r1
    6078:	f241 3088 	movw	r0, #5000	; 0x1388
    607c:	4287      	cmp	r7, r0
    607e:	bf88      	it	hi
    6080:	f241 3788 	movwhi	r7, #5000	; 0x1388
    6084:	f005 f9b2 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    6088:	1b40      	subs	r0, r0, r5
    608a:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    608e:	4287      	cmp	r7, r0
    6090:	d304      	bcc.n	609c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x440>
    6092:	4631      	mov	r1, r6
    6094:	4638      	mov	r0, r7
    6096:	f003 ffc3 	bl	a020 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    609a:	b110      	cbz	r0, 60a2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x446>
    609c:	2000      	movs	r0, #0
    609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    60a4:	4438      	add	r0, r7
    60a6:	63a0      	str	r0, [r4, #56]	; 0x38
    60a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    60aa:	4438      	add	r0, r7
    60ac:	6420      	str	r0, [r4, #64]	; 0x40
    60ae:	f005 f8b1 	bl	b214 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    60b2:	2001      	movs	r0, #1
    60b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60b8:	200007e0 	.word	0x200007e0
    60bc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60c0:	b095      	sub	sp, #84	; 0x54
    60c2:	4616      	mov	r6, r2
    60c4:	4681      	mov	r9, r0
    60c6:	f7fd ff1b 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    60ca:	9009      	str	r0, [sp, #36]	; 0x24
    60cc:	f005 f98e 	bl	b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    60d0:	f04f 0a00 	mov.w	sl, #0
    60d4:	f8df 842c 	ldr.w	r8, [pc, #1068]	; 6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>
    60d8:	9105      	str	r1, [sp, #20]
    60da:	f88d a010 	strb.w	sl, [sp, #16]
    60de:	4607      	mov	r7, r0
    60e0:	4655      	mov	r5, sl
    60e2:	f8d8 4008 	ldr.w	r4, [r8, #8]
    60e6:	f008 ffe2 	bl	f0ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    60ea:	4601      	mov	r1, r0
    60ec:	f898 202f 	ldrb.w	r2, [r8, #47]	; 0x2f
    60f0:	2000      	movs	r0, #0
    60f2:	bf00      	nop
    60f4:	eb08 0380 	add.w	r3, r8, r0, lsl #2
    60f8:	1c40      	adds	r0, r0, #1
    60fa:	689b      	ldr	r3, [r3, #8]
    60fc:	eb05 0c01 	add.w	ip, r5, r1
    6100:	b2c0      	uxtb	r0, r0
    6102:	eb03 050c 	add.w	r5, r3, ip
    6106:	4282      	cmp	r2, r0
    6108:	d2f4      	bcs.n	60f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    610a:	48fe      	ldr	r0, [pc, #1016]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    610c:	6840      	ldr	r0, [r0, #4]
    610e:	4285      	cmp	r5, r0
    6110:	bf0c      	ite	eq
    6112:	2101      	moveq	r1, #1
    6114:	2100      	movne	r1, #0
    6116:	420e      	tst	r6, r1
    6118:	9111      	str	r1, [sp, #68]	; 0x44
    611a:	d008      	beq.n	612e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4d2>
    611c:	49f9      	ldr	r1, [pc, #996]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    611e:	780a      	ldrb	r2, [r1, #0]
    6120:	2a00      	cmp	r2, #0
    6122:	bf1a      	itte	ne
    6124:	f8b1 106c 	ldrhne.w	r1, [r1, #108]	; 0x6c
    6128:	2900      	cmpne	r1, #0
    612a:	2101      	moveq	r1, #1
    612c:	d001      	beq.n	6132 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4d6>
    612e:	f04f 0100 	mov.w	r1, #0
    6132:	9110      	str	r1, [sp, #64]	; 0x40
    6134:	9916      	ldr	r1, [sp, #88]	; 0x58
    6136:	2900      	cmp	r1, #0
    6138:	d07e      	beq.n	6238 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5dc>
    613a:	9805      	ldr	r0, [sp, #20]
    613c:	f517 68fa 	adds.w	r8, r7, #2000	; 0x7d0
    6140:	f140 0000 	adc.w	r0, r0, #0
    6144:	9003      	str	r0, [sp, #12]
    6146:	f000 fb7b 	bl	6840 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>
    614a:	f000 fc05 	bl	6958 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    614e:	4605      	mov	r5, r0
    6150:	48ec      	ldr	r0, [pc, #944]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    6152:	7800      	ldrb	r0, [r0, #0]
    6154:	2805      	cmp	r0, #5
    6156:	d141      	bne.n	61dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x580>
    6158:	4eea      	ldr	r6, [pc, #936]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    615a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    615c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
    6160:	f000 fbe0 	bl	6924 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    6164:	9000      	str	r0, [sp, #0]
    6166:	42a8      	cmp	r0, r5
    6168:	d01e      	beq.n	61a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54c>
    616a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    616c:	9900      	ldr	r1, [sp, #0]
    616e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    6172:	f000 fb95 	bl	68a0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    6176:	2000      	movs	r0, #0
    6178:	f8c6 0068 	str.w	r0, [r6, #104]	; 0x68
    617c:	f8d6 b028 	ldr.w	fp, [r6, #40]	; 0x28
    6180:	9e00      	ldr	r6, [sp, #0]
    6182:	f1bb 0f00 	cmp.w	fp, #0
    6186:	d01c      	beq.n	61c2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x566>
    6188:	b32e      	cbz	r6, 61d6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    618a:	f000 fb53 	bl	6834 <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>
    618e:	b1e8      	cbz	r0, 61cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x570>
    6190:	e9d6 0200 	ldrd	r0, r2, [r6]
    6194:	68b1      	ldr	r1, [r6, #8]
    6196:	1840      	adds	r0, r0, r1
    6198:	eb42 010a 	adc.w	r1, r2, sl
    619c:	e9cb 01be 	strd	r0, r1, [fp, #760]	; 0x2f8
    61a0:	8bb0      	ldrh	r0, [r6, #28]
    61a2:	f8ab 0314 	strh.w	r0, [fp, #788]	; 0x314
    61a6:	e019      	b.n	61dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x580>
    61a8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    61aa:	f501 713e 	add.w	r1, r1, #760	; 0x2f8
    61ae:	66b1      	str	r1, [r6, #104]	; 0x68
    61b0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    61b2:	6db0      	ldr	r0, [r6, #88]	; 0x58
    61b4:	f8d1 1300 	ldr.w	r1, [r1, #768]	; 0x300
    61b8:	4288      	cmp	r0, r1
    61ba:	bf38      	it	cc
    61bc:	4608      	movcc	r0, r1
    61be:	65b0      	str	r0, [r6, #88]	; 0x58
    61c0:	e7dc      	b.n	617c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x520>
    61c2:	f240 7185 	movw	r1, #1925	; 0x785
    61c6:	2021      	movs	r0, #33	; 0x21
    61c8:	f7fa fa1c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61cc:	f240 718b 	movw	r1, #1931	; 0x78b
    61d0:	2021      	movs	r0, #33	; 0x21
    61d2:	f7fa fa17 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61d6:	2000      	movs	r0, #0
    61d8:	e9cb 00be 	strd	r0, r0, [fp, #760]	; 0x2f8
    61dc:	4ec9      	ldr	r6, [pc, #804]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    61de:	4629      	mov	r1, r5
    61e0:	f106 0050 	add.w	r0, r6, #80	; 0x50
    61e4:	f000 fb5c 	bl	68a0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    61e8:	2d00      	cmp	r5, #0
    61ea:	bf1c      	itt	ne
    61ec:	8ba8      	ldrhne	r0, [r5, #28]
    61ee:	f8a6 006c 	strhne.w	r0, [r6, #108]	; 0x6c
    61f2:	46b3      	mov	fp, r6
    61f4:	6876      	ldr	r6, [r6, #4]
    61f6:	9803      	ldr	r0, [sp, #12]
    61f8:	bf08      	it	eq
    61fa:	2000      	moveq	r0, #0
    61fc:	d012      	beq.n	6224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c8>
    61fe:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
    6202:	682b      	ldr	r3, [r5, #0]
    6204:	e9cd 8000 	strd	r8, r0, [sp]
    6208:	185b      	adds	r3, r3, r1
    620a:	eb42 010a 	adc.w	r1, r2, sl
    620e:	4632      	mov	r2, r6
    6210:	4618      	mov	r0, r3
    6212:	f008 ff6e 	bl	f0f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    6216:	42b0      	cmp	r0, r6
    6218:	d904      	bls.n	6224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c8>
    621a:	f240 31f9 	movw	r1, #1017	; 0x3f9
    621e:	2021      	movs	r0, #33	; 0x21
    6220:	f7fa f9f0 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6224:	4605      	mov	r5, r0
    6226:	f000 fb11 	bl	684c <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>
    622a:	9903      	ldr	r1, [sp, #12]
    622c:	eb18 0605 	adds.w	r6, r8, r5
    6230:	eb41 080a 	adc.w	r8, r1, sl
    6234:	4659      	mov	r1, fp
    6236:	e000      	b.n	623a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5de>
    6238:	e01d      	b.n	6276 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61a>
    623a:	f8db 0004 	ldr.w	r0, [fp, #4]
    623e:	1a32      	subs	r2, r6, r0
    6240:	eb68 000a 	sbc.w	r0, r8, sl
    6244:	e9c1 2014 	strd	r2, r0, [r1, #80]	; 0x50
    6248:	9818      	ldr	r0, [sp, #96]	; 0x60
    624a:	b168      	cbz	r0, 6268 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    624c:	f242 7110 	movw	r1, #10000	; 0x2710
    6250:	4348      	muls	r0, r1
    6252:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    6256:	1830      	adds	r0, r6, r0
    6258:	eb48 010a 	adc.w	r1, r8, sl
    625c:	e9c2 0100 	strd	r0, r1, [r2]
    6260:	f04f 0b01 	mov.w	fp, #1
    6264:	f000 b99c 	b.w	65a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x944>
    6268:	f04f 32ff 	mov.w	r2, #4294967295
    626c:	0850      	lsrs	r0, r2, #1
    626e:	630a      	str	r2, [r1, #48]	; 0x30
    6270:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
    6274:	e7f4      	b.n	6260 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x604>
    6276:	9910      	ldr	r1, [sp, #64]	; 0x40
    6278:	2900      	cmp	r1, #0
    627a:	d074      	beq.n	6366 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70a>
    627c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>
    6280:	9809      	ldr	r0, [sp, #36]	; 0x24
    6282:	9d05      	ldr	r5, [sp, #20]
    6284:	f898 102e 	ldrb.w	r1, [r8, #46]	; 0x2e
    6288:	1d80      	adds	r0, r0, #6
    628a:	5c09      	ldrb	r1, [r1, r0]
    628c:	2908      	cmp	r1, #8
    628e:	d008      	beq.n	62a2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x646>
    6290:	2904      	cmp	r1, #4
    6292:	d00a      	beq.n	62aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64e>
    6294:	2902      	cmp	r1, #2
    6296:	d00e      	beq.n	62b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x65a>
    6298:	2208      	movs	r2, #8
    629a:	2901      	cmp	r1, #1
    629c:	d011      	beq.n	62c2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    629e:	f000 b98d 	b.w	65bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x960>
    62a2:	2240      	movs	r2, #64	; 0x40
    62a4:	2014      	movs	r0, #20
    62a6:	4613      	mov	r3, r2
    62a8:	e002      	b.n	62b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x654>
    62aa:	2210      	movs	r2, #16
    62ac:	2014      	movs	r0, #20
    62ae:	232e      	movs	r3, #46	; 0x2e
    62b0:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    62b4:	e009      	b.n	62ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66e>
    62b6:	2204      	movs	r2, #4
    62b8:	2012      	movs	r0, #18
    62ba:	4653      	mov	r3, sl
    62bc:	f04f 0c18 	mov.w	ip, #24
    62c0:	e003      	b.n	62ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66e>
    62c2:	202a      	movs	r0, #42	; 0x2a
    62c4:	4653      	mov	r3, sl
    62c6:	f04f 0c28 	mov.w	ip, #40	; 0x28
    62ca:	4463      	add	r3, ip
    62cc:	fb12 3000 	smlabb	r0, r2, r0, r3
    62d0:	b286      	uxth	r6, r0
    62d2:	4608      	mov	r0, r1
    62d4:	f001 fdda 	bl	7e8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    62d8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    62dc:	4401      	add	r1, r0
    62de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    62e2:	fbb1 f0f0 	udiv	r0, r1, r0
    62e6:	4430      	add	r0, r6
    62e8:	f100 06f4 	add.w	r6, r0, #244	; 0xf4
    62ec:	f108 0030 	add.w	r0, r8, #48	; 0x30
    62f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    62f4:	e9d0 1000 	ldrd	r1, r0, [r0]
    62f8:	4050      	eors	r0, r2
    62fa:	ea70 0001 	orns	r0, r0, r1
    62fe:	d026      	beq.n	634e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f2>
    6300:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    6304:	960b      	str	r6, [sp, #44]	; 0x2c
    6306:	f008 feb3 	bl	f070 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    630a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    630e:	2001      	movs	r0, #1
    6310:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    6314:	f008 feac 	bl	f070 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    6318:	f500 7081 	add.w	r0, r0, #258	; 0x102
    631c:	b281      	uxth	r1, r0
    631e:	19c8      	adds	r0, r1, r7
    6320:	eb4a 0105 	adc.w	r1, sl, r5
    6324:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    6328:	2002      	movs	r0, #2
    632a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    632e:	a80a      	add	r0, sp, #40	; 0x28
    6330:	f004 fa92 	bl	a858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    6334:	b190      	cbz	r0, 635c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>
    6336:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    633a:	1980      	adds	r0, r0, r6
    633c:	eb42 010a 	adc.w	r1, r2, sl
    6340:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
    6344:	1a10      	subs	r0, r2, r0
    6346:	eb73 0001 	sbcs.w	r0, r3, r1
    634a:	bf48      	it	mi
    634c:	2400      	movmi	r4, #0
    634e:	463e      	mov	r6, r7
    6350:	46d3      	mov	fp, sl
    6352:	f8dd 8014 	ldr.w	r8, [sp, #20]
    6356:	f000 b923 	b.w	65a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x944>
    635a:	e004      	b.n	6366 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70a>
    635c:	f240 5135 	movw	r1, #1333	; 0x535
    6360:	2021      	movs	r0, #33	; 0x21
    6362:	f7fa f94f 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6366:	b3ee      	cbz	r6, 63e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x788>
    6368:	4d66      	ldr	r5, [pc, #408]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    636a:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
    636e:	1a7a      	subs	r2, r7, r1
    6370:	fbb2 f2f0 	udiv	r2, r2, r0
    6374:	fb00 f202 	mul.w	r2, r0, r2
    6378:	1889      	adds	r1, r1, r2
    637a:	eb43 020a 	adc.w	r2, r3, sl
    637e:	180e      	adds	r6, r1, r0
    6380:	eb42 000a 	adc.w	r0, r2, sl
    6384:	9003      	str	r0, [sp, #12]
    6386:	ebb6 0807 	subs.w	r8, r6, r7
    638a:	f008 fe71 	bl	f070 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    638e:	f500 7081 	add.w	r0, r0, #258	; 0x102
    6392:	b280      	uxth	r0, r0
    6394:	4580      	cmp	r8, r0
    6396:	da10      	bge.n	63ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x75e>
    6398:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    639a:	6a28      	ldr	r0, [r5, #32]
    639c:	1ac1      	subs	r1, r0, r3
    639e:	6868      	ldr	r0, [r5, #4]
    63a0:	fbb1 f1f0 	udiv	r1, r1, r0
    63a4:	fb00 f101 	mul.w	r1, r0, r1
    63a8:	1859      	adds	r1, r3, r1
    63aa:	1a71      	subs	r1, r6, r1
    63ac:	fbb1 fbf0 	udiv	fp, r1, r0
    63b0:	9903      	ldr	r1, [sp, #12]
    63b2:	1980      	adds	r0, r0, r6
    63b4:	eb4a 0101 	adc.w	r1, sl, r1
    63b8:	e02e      	b.n	6418 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7bc>
    63ba:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    63be:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    63c0:	900b      	str	r0, [sp, #44]	; 0x2c
    63c2:	f008 fe55 	bl	f070 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    63c6:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    63ca:	2001      	movs	r0, #1
    63cc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    63d0:	e9d5 0214 	ldrd	r0, r2, [r5, #80]	; 0x50
    63d4:	6a29      	ldr	r1, [r5, #32]
    63d6:	1a0b      	subs	r3, r1, r0
    63d8:	6869      	ldr	r1, [r5, #4]
    63da:	fbb3 f3f1 	udiv	r3, r3, r1
    63de:	fb01 f303 	mul.w	r3, r1, r3
    63e2:	e000      	b.n	63e6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78a>
    63e4:	e01b      	b.n	641e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c2>
    63e6:	18c3      	adds	r3, r0, r3
    63e8:	eb42 020a 	adc.w	r2, r2, sl
    63ec:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    63f0:	782a      	ldrb	r2, [r5, #0]
    63f2:	2a04      	cmp	r2, #4
    63f4:	d107      	bne.n	6406 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7aa>
    63f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    63fa:	0052      	lsls	r2, r2, #1
    63fc:	1a18      	subs	r0, r3, r0
    63fe:	4290      	cmp	r0, r2
    6400:	bf38      	it	cc
    6402:	2002      	movcc	r0, #2
    6404:	d300      	bcc.n	6408 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ac>
    6406:	2001      	movs	r0, #1
    6408:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    640c:	a80a      	add	r0, sp, #40	; 0x28
    640e:	f007 fe8f 	bl	e130 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    6412:	4683      	mov	fp, r0
    6414:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    6418:	4606      	mov	r6, r0
    641a:	4688      	mov	r8, r1
    641c:	e0c0      	b.n	65a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x944>
    641e:	a904      	add	r1, sp, #16
    6420:	910a      	str	r1, [sp, #40]	; 0x28
    6422:	4938      	ldr	r1, [pc, #224]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    6424:	e9d1 2314 	ldrd	r2, r3, [r1, #80]	; 0x50
    6428:	1ab9      	subs	r1, r7, r2
    642a:	fbb1 f1f0 	udiv	r1, r1, r0
    642e:	fb00 f001 	mul.w	r0, r0, r1
    6432:	1810      	adds	r0, r2, r0
    6434:	eb43 010a 	adc.w	r1, r3, sl
    6438:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
    643c:	1a3c      	subs	r4, r7, r0
    643e:	f7fd fd5f 	bl	3f00 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    6442:	4683      	mov	fp, r0
    6444:	f008 fe14 	bl	f070 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    6448:	f500 7081 	add.w	r0, r0, #258	; 0x102
    644c:	b280      	uxth	r0, r0
    644e:	1825      	adds	r5, r4, r0
    6450:	2600      	movs	r6, #0
    6452:	462c      	mov	r4, r5
    6454:	f008 fe2b 	bl	f0ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    6458:	4680      	mov	r8, r0
    645a:	482a      	ldr	r0, [pc, #168]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    645c:	6840      	ldr	r0, [r0, #4]
    645e:	42a0      	cmp	r0, r4
    6460:	bf98      	it	ls
    6462:	1a24      	subls	r4, r4, r0
    6464:	4b27      	ldr	r3, [pc, #156]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    6466:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    646a:	2800      	cmp	r0, #0
    646c:	bf18      	it	ne
    646e:	f103 0108 	addne.w	r1, r3, #8
    6472:	d00a      	beq.n	648a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x82e>
    6474:	680a      	ldr	r2, [r1, #0]
    6476:	4442      	add	r2, r8
    6478:	42a2      	cmp	r2, r4
    647a:	d802      	bhi.n	6482 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x826>
    647c:	1aa4      	subs	r4, r4, r2
    647e:	1c72      	adds	r2, r6, #1
    6480:	b2d6      	uxtb	r6, r2
    6482:	1e40      	subs	r0, r0, #1
    6484:	f101 0104 	add.w	r1, r1, #4
    6488:	d1f4      	bne.n	6474 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>
    648a:	481e      	ldr	r0, [pc, #120]	; (6504 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a8>)
    648c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    6490:	900f      	str	r0, [sp, #60]	; 0x3c
    6492:	6880      	ldr	r0, [r0, #8]
    6494:	900d      	str	r0, [sp, #52]	; 0x34
    6496:	eb0b 0006 	add.w	r0, fp, r6
    649a:	7980      	ldrb	r0, [r0, #6]
    649c:	2808      	cmp	r0, #8
    649e:	d007      	beq.n	64b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x854>
    64a0:	2804      	cmp	r0, #4
    64a2:	d009      	beq.n	64b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x85c>
    64a4:	2802      	cmp	r0, #2
    64a6:	d00d      	beq.n	64c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x868>
    64a8:	2208      	movs	r2, #8
    64aa:	2801      	cmp	r0, #1
    64ac:	d010      	beq.n	64d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x874>
    64ae:	e085      	b.n	65bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x960>
    64b0:	2240      	movs	r2, #64	; 0x40
    64b2:	2114      	movs	r1, #20
    64b4:	4613      	mov	r3, r2
    64b6:	e002      	b.n	64be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x862>
    64b8:	2210      	movs	r2, #16
    64ba:	2114      	movs	r1, #20
    64bc:	232e      	movs	r3, #46	; 0x2e
    64be:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    64c2:	e009      	b.n	64d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x87c>
    64c4:	2204      	movs	r2, #4
    64c6:	2112      	movs	r1, #18
    64c8:	4653      	mov	r3, sl
    64ca:	f04f 0c18 	mov.w	ip, #24
    64ce:	e003      	b.n	64d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x87c>
    64d0:	212a      	movs	r1, #42	; 0x2a
    64d2:	4653      	mov	r3, sl
    64d4:	f04f 0c28 	mov.w	ip, #40	; 0x28
    64d8:	4463      	add	r3, ip
    64da:	fb12 3101 	smlabb	r1, r2, r1, r3
    64de:	fa1f fb81 	uxth.w	fp, r1
    64e2:	f001 fcd3 	bl	7e8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    64e6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    64ea:	4401      	add	r1, r0
    64ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    64f0:	fbb1 f0f0 	udiv	r0, r1, r0
    64f4:	eb0b 0100 	add.w	r1, fp, r0
    64f8:	1908      	adds	r0, r1, r4
    64fa:	990d      	ldr	r1, [sp, #52]	; 0x34
    64fc:	30f4      	adds	r0, #244	; 0xf4
    64fe:	4288      	cmp	r0, r1
    6500:	d806      	bhi.n	6510 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8b4>
    6502:	e001      	b.n	6508 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ac>
    6504:	200007e0 	.word	0x200007e0
    6508:	980f      	ldr	r0, [sp, #60]	; 0x3c
    650a:	6880      	ldr	r0, [r0, #8]
    650c:	1b04      	subs	r4, r0, r4
    650e:	e012      	b.n	6536 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8da>
    6510:	488c      	ldr	r0, [pc, #560]	; (6744 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae8>)
    6512:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    6516:	42b1      	cmp	r1, r6
    6518:	d919      	bls.n	654e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8f2>
    651a:	1c71      	adds	r1, r6, #1
    651c:	b2ce      	uxtb	r6, r1
    651e:	6841      	ldr	r1, [r0, #4]
    6520:	42a9      	cmp	r1, r5
    6522:	d90f      	bls.n	6544 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e8>
    6524:	eb00 0186 	add.w	r1, r0, r6, lsl #2
    6528:	6889      	ldr	r1, [r1, #8]
    652a:	eb01 0508 	add.w	r5, r1, r8
    652e:	bf00      	nop
    6530:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    6534:	6884      	ldr	r4, [r0, #8]
    6536:	2c00      	cmp	r4, #0
    6538:	da19      	bge.n	656e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x912>
    653a:	f240 41fa 	movw	r1, #1274	; 0x4fa
    653e:	2021      	movs	r0, #33	; 0x21
    6540:	f7fa f860 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6544:	f240 41d4 	movw	r1, #1236	; 0x4d4
    6548:	2021      	movs	r0, #33	; 0x21
    654a:	f7fa f85b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    654e:	6841      	ldr	r1, [r0, #4]
    6550:	462a      	mov	r2, r5
    6552:	428d      	cmp	r5, r1
    6554:	bf38      	it	cc
    6556:	460d      	movcc	r5, r1
    6558:	d3ea      	bcc.n	6530 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8d4>
    655a:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
    655e:	bf38      	it	cc
    6560:	004d      	lslcc	r5, r1, #1
    6562:	d3e5      	bcc.n	6530 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8d4>
    6564:	f240 41f1 	movw	r1, #1265	; 0x4f1
    6568:	2021      	movs	r0, #33	; 0x21
    656a:	f7fa f84b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    656e:	980a      	ldr	r0, [sp, #40]	; 0x28
    6570:	4b74      	ldr	r3, [pc, #464]	; (6744 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae8>)
    6572:	7006      	strb	r6, [r0, #0]
    6574:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    6578:	194e      	adds	r6, r1, r5
    657a:	eb40 080a 	adc.w	r8, r0, sl
    657e:	e9d3 0c14 	ldrd	r0, ip, [r3, #80]	; 0x50
    6582:	6999      	ldr	r1, [r3, #24]
    6584:	685d      	ldr	r5, [r3, #4]
    6586:	1a09      	subs	r1, r1, r0
    6588:	fbb1 f1f5 	udiv	r1, r1, r5
    658c:	fb01 f105 	mul.w	r1, r1, r5
    6590:	1840      	adds	r0, r0, r1
    6592:	eb4c 010a 	adc.w	r1, ip, sl
    6596:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    659a:	1a30      	subs	r0, r6, r0
    659c:	fbb0 fbf5 	udiv	fp, r0, r5
    65a0:	f89d 1010 	ldrb.w	r1, [sp, #16]
    65a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    65a6:	4408      	add	r0, r1
    65a8:	7980      	ldrb	r0, [r0, #6]
    65aa:	2808      	cmp	r0, #8
    65ac:	d00a      	beq.n	65c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x968>
    65ae:	2804      	cmp	r0, #4
    65b0:	d00c      	beq.n	65cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x970>
    65b2:	2802      	cmp	r0, #2
    65b4:	d010      	beq.n	65d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x97c>
    65b6:	2308      	movs	r3, #8
    65b8:	2801      	cmp	r0, #1
    65ba:	d013      	beq.n	65e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x988>
    65bc:	21f5      	movs	r1, #245	; 0xf5
    65be:	2005      	movs	r0, #5
    65c0:	f7fa f820 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65c4:	2340      	movs	r3, #64	; 0x40
    65c6:	2214      	movs	r2, #20
    65c8:	4619      	mov	r1, r3
    65ca:	e002      	b.n	65d2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x976>
    65cc:	2310      	movs	r3, #16
    65ce:	2214      	movs	r2, #20
    65d0:	212e      	movs	r1, #46	; 0x2e
    65d2:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    65d6:	e009      	b.n	65ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x990>
    65d8:	2304      	movs	r3, #4
    65da:	2212      	movs	r2, #18
    65dc:	4651      	mov	r1, sl
    65de:	f04f 0c18 	mov.w	ip, #24
    65e2:	e003      	b.n	65ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x990>
    65e4:	222a      	movs	r2, #42	; 0x2a
    65e6:	4651      	mov	r1, sl
    65e8:	f04f 0c28 	mov.w	ip, #40	; 0x28
    65ec:	4461      	add	r1, ip
    65ee:	fb13 1102 	smlabb	r1, r3, r2, r1
    65f2:	b28d      	uxth	r5, r1
    65f4:	f001 fc4a 	bl	7e8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    65f8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    65fc:	4401      	add	r1, r0
    65fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6602:	fbb1 f0f0 	udiv	r0, r1, r0
    6606:	4428      	add	r0, r5
    6608:	30f4      	adds	r0, #244	; 0xf4
    660a:	4a4e      	ldr	r2, [pc, #312]	; (6744 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae8>)
    660c:	9009      	str	r0, [sp, #36]	; 0x24
    660e:	4620      	mov	r0, r4
    6610:	e9d2 130c 	ldrd	r1, r3, [r2, #48]	; 0x30
    6614:	1b89      	subs	r1, r1, r6
    6616:	eb63 0508 	sbc.w	r5, r3, r8
    661a:	2300      	movs	r3, #0
    661c:	469c      	mov	ip, r3
    661e:	1a5b      	subs	r3, r3, r1
    6620:	eb7c 0305 	sbcs.w	r3, ip, r5
    6624:	bfa8      	it	ge
    6626:	4650      	movge	r0, sl
    6628:	da05      	bge.n	6636 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9da>
    662a:	1a43      	subs	r3, r0, r1
    662c:	eb7a 0305 	sbcs.w	r3, sl, r5
    6630:	bfa8      	it	ge
    6632:	460c      	movge	r4, r1
    6634:	4620      	mov	r0, r4
    6636:	f89d 1010 	ldrb.w	r1, [sp, #16]
    663a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    663e:	6889      	ldr	r1, [r1, #8]
    6640:	4281      	cmp	r1, r0
    6642:	bf98      	it	ls
    6644:	4608      	movls	r0, r1
    6646:	4614      	mov	r4, r2
    6648:	63d0      	str	r0, [r2, #60]	; 0x3c
    664a:	9810      	ldr	r0, [sp, #64]	; 0x40
    664c:	bb30      	cbnz	r0, 669c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa40>
    664e:	f1bb 0f00 	cmp.w	fp, #0
    6652:	d023      	beq.n	669c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa40>
    6654:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6658:	ea00 014b 	and.w	r1, r0, fp, lsl #1
    665c:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
    6660:	f008 f825 	bl	e6ae <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY>
    6664:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    6668:	1a09      	subs	r1, r1, r0
    666a:	b20a      	sxth	r2, r1
    666c:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
    6670:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6672:	b141      	cbz	r1, 6686 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa2a>
    6674:	f8a1 2314 	strh.w	r2, [r1, #788]	; 0x314
    6678:	e9d1 23be 	ldrd	r2, r3, [r1, #760]	; 0x2f8
    667c:	1812      	adds	r2, r2, r0
    667e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    6682:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    6686:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    668a:	ea4f 71e0 	mov.w	r1, r0, asr #31
    668e:	1836      	adds	r6, r6, r0
    6690:	eb48 0801 	adc.w	r8, r8, r1
    6694:	1810      	adds	r0, r2, r0
    6696:	4159      	adcs	r1, r3
    6698:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    669c:	9816      	ldr	r0, [sp, #88]	; 0x58
    669e:	2800      	cmp	r0, #0
    66a0:	bf18      	it	ne
    66a2:	e9c4 6806 	strdne	r6, r8, [r4, #24]
    66a6:	e9c4 6808 	strd	r6, r8, [r4, #32]
    66aa:	9811      	ldr	r0, [sp, #68]	; 0x44
    66ac:	2800      	cmp	r0, #0
    66ae:	bf14      	ite	ne
    66b0:	9809      	ldrne	r0, [sp, #36]	; 0x24
    66b2:	6be0      	ldreq	r0, [r4, #60]	; 0x3c
    66b4:	2501      	movs	r5, #1
    66b6:	63a0      	str	r0, [r4, #56]	; 0x38
    66b8:	f889 500b 	strb.w	r5, [r9, #11]
    66bc:	f008 fcd8 	bl	f070 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    66c0:	f8a9 0008 	strh.w	r0, [r9, #8]
    66c4:	7820      	ldrb	r0, [r4, #0]
    66c6:	2804      	cmp	r0, #4
    66c8:	d109      	bne.n	66de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa82>
    66ca:	6860      	ldr	r0, [r4, #4]
    66cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
    66ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    66d2:	0040      	lsls	r0, r0, #1
    66d4:	1ab1      	subs	r1, r6, r2
    66d6:	4281      	cmp	r1, r0
    66d8:	bf38      	it	cc
    66da:	2002      	movcc	r0, #2
    66dc:	d300      	bcc.n	66e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa84>
    66de:	2001      	movs	r0, #1
    66e0:	f889 000a 	strb.w	r0, [r9, #10]
    66e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    66e6:	f8c9 0004 	str.w	r0, [r9, #4]
    66ea:	9810      	ldr	r0, [sp, #64]	; 0x40
    66ec:	2800      	cmp	r0, #0
    66ee:	bf04      	itt	eq
    66f0:	f889 a000 	strbeq.w	sl, [r9]
    66f4:	e9c9 6804 	strdeq	r6, r8, [r9, #16]
    66f8:	d01a      	beq.n	6730 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xad4>
    66fa:	f889 5000 	strb.w	r5, [r9]
    66fe:	e9d4 020c 	ldrd	r0, r2, [r4, #48]	; 0x30
    6702:	9905      	ldr	r1, [sp, #20]
    6704:	1bc0      	subs	r0, r0, r7
    6706:	eb62 0101 	sbc.w	r1, r2, r1
    670a:	2200      	movs	r2, #0
    670c:	4613      	mov	r3, r2
    670e:	1a12      	subs	r2, r2, r0
    6710:	eb73 0201 	sbcs.w	r2, r3, r1
    6714:	da07      	bge.n	6726 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaca>
    6716:	4a0c      	ldr	r2, [pc, #48]	; (6748 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>)
    6718:	2300      	movs	r3, #0
    671a:	1a12      	subs	r2, r2, r0
    671c:	eb73 0201 	sbcs.w	r2, r3, r1
    6720:	bfb8      	it	lt
    6722:	4809      	ldrlt	r0, [pc, #36]	; (6748 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>)
    6724:	4682      	mov	sl, r0
    6726:	9809      	ldr	r0, [sp, #36]	; 0x24
    6728:	ebaa 0000 	sub.w	r0, sl, r0
    672c:	f8c9 0010 	str.w	r0, [r9, #16]
    6730:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    6732:	9809      	ldr	r0, [sp, #36]	; 0x24
    6734:	4281      	cmp	r1, r0
    6736:	bf2c      	ite	cs
    6738:	2001      	movcs	r0, #1
    673a:	2000      	movcc	r0, #0
    673c:	b019      	add	sp, #100	; 0x64
    673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6742:	0000      	.short	0x0000
    6744:	200007e0 	.word	0x200007e0
    6748:	0f424000 	.word	0x0f424000

0000674c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    674c:	4808      	ldr	r0, [pc, #32]	; (6770 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x24>)
    674e:	b510      	push	{r4, lr}
    6750:	2100      	movs	r1, #0
    6752:	6001      	str	r1, [r0, #0]
    6754:	6041      	str	r1, [r0, #4]
    6756:	6081      	str	r1, [r0, #8]
    6758:	60c1      	str	r1, [r0, #12]
    675a:	f000 f80b 	bl	6774 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    675e:	2800      	cmp	r0, #0
    6760:	bf08      	it	eq
    6762:	bd10      	popeq	{r4, pc}
    6764:	f240 1117 	movw	r1, #279	; 0x117
    6768:	2035      	movs	r0, #53	; 0x35
    676a:	f7f9 ff4b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    676e:	0000      	.short	0x0000
    6770:	20000b40 	.word	0x20000b40

00006774 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    6774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6778:	4f2a      	ldr	r7, [pc, #168]	; (6824 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xb0>)
    677a:	b082      	sub	sp, #8
    677c:	2001      	movs	r0, #1
    677e:	7038      	strb	r0, [r7, #0]
    6780:	2500      	movs	r5, #0
    6782:	9500      	str	r5, [sp, #0]
    6784:	f64f 76ff 	movw	r6, #65535	; 0xffff
    6788:	9501      	str	r5, [sp, #4]
    678a:	e025      	b.n	67d8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x64>
    678c:	9800      	ldr	r0, [sp, #0]
    678e:	2800      	cmp	r0, #0
    6790:	bf1c      	itt	ne
    6792:	f890 1318 	ldrbne.w	r1, [r0, #792]	; 0x318
    6796:	2900      	cmpne	r1, #0
    6798:	d01e      	beq.n	67d8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x64>
    679a:	8800      	ldrh	r0, [r0, #0]
    679c:	42b0      	cmp	r0, r6
    679e:	bf18      	it	ne
    67a0:	f04f 0820 	movne.w	r8, #32
    67a4:	d038      	beq.n	6818 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xa4>
    67a6:	2100      	movs	r1, #0
    67a8:	f007 f9ea 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    67ac:	0004      	movs	r4, r0
    67ae:	d019      	beq.n	67e4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x70>
    67b0:	f894 0319 	ldrb.w	r0, [r4, #793]	; 0x319
    67b4:	f004 fad4 	bl	ad60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    67b8:	f884 5318 	strb.w	r5, [r4, #792]	; 0x318
    67bc:	f894 0319 	ldrb.w	r0, [r4, #793]	; 0x319
    67c0:	f004 faac 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    67c4:	b198      	cbz	r0, 67ee <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x7a>
    67c6:	f884 8319 	strb.w	r8, [r4, #793]	; 0x319
    67ca:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    67ce:	f000 f88d 	bl	68ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    67d2:	9500      	str	r5, [sp, #0]
    67d4:	9501      	str	r5, [sp, #4]
    67d6:	e01a      	b.n	680e <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x9a>
    67d8:	4668      	mov	r0, sp
    67da:	f7fa f989 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    67de:	2800      	cmp	r0, #0
    67e0:	d0d4      	beq.n	678c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x18>
    67e2:	e019      	b.n	6818 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xa4>
    67e4:	f240 1199 	movw	r1, #409	; 0x199
    67e8:	2035      	movs	r0, #53	; 0x35
    67ea:	f7f9 ff0b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67ee:	f44f 71c4 	mov.w	r1, #392	; 0x188
    67f2:	2035      	movs	r0, #53	; 0x35
    67f4:	f7f9 ff06 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67f8:	9800      	ldr	r0, [sp, #0]
    67fa:	2800      	cmp	r0, #0
    67fc:	bf1c      	itt	ne
    67fe:	f890 1318 	ldrbne.w	r1, [r0, #792]	; 0x318
    6802:	2900      	cmpne	r1, #0
    6804:	d003      	beq.n	680e <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x9a>
    6806:	8800      	ldrh	r0, [r0, #0]
    6808:	42b0      	cmp	r0, r6
    680a:	d1cc      	bne.n	67a6 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x32>
    680c:	e004      	b.n	6818 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xa4>
    680e:	4668      	mov	r0, sp
    6810:	f7fa f96e 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6814:	2800      	cmp	r0, #0
    6816:	d0ef      	beq.n	67f8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x84>
    6818:	703d      	strb	r5, [r7, #0]
    681a:	b002      	add	sp, #8
    681c:	2000      	movs	r0, #0
    681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6822:	0000      	.short	0x0000
    6824:	20000b40 	.word	0x20000b40

00006828 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    6828:	4901      	ldr	r1, [pc, #4]	; (6830 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    682a:	7048      	strb	r0, [r1, #1]
    682c:	4770      	bx	lr
    682e:	0000      	.short	0x0000
    6830:	20000b40 	.word	0x20000b40

00006834 <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>:
    6834:	4801      	ldr	r0, [pc, #4]	; (683c <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ+0x8>)
    6836:	7900      	ldrb	r0, [r0, #4]
    6838:	4770      	bx	lr
    683a:	0000      	.short	0x0000
    683c:	20000104 	.word	0x20000104

00006840 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>:
    6840:	4901      	ldr	r1, [pc, #4]	; (6848 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY+0x8>)
    6842:	2001      	movs	r0, #1
    6844:	7108      	strb	r0, [r1, #4]
    6846:	4770      	bx	lr
    6848:	20000104 	.word	0x20000104

0000684c <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>:
    684c:	4901      	ldr	r1, [pc, #4]	; (6854 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI+0x8>)
    684e:	2000      	movs	r0, #0
    6850:	7108      	strb	r0, [r1, #4]
    6852:	4770      	bx	lr
    6854:	20000104 	.word	0x20000104

00006858 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6858:	b510      	push	{r4, lr}
    685a:	6981      	ldr	r1, [r0, #24]
    685c:	b119      	cbz	r1, 6866 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    685e:	6882      	ldr	r2, [r0, #8]
    6860:	688b      	ldr	r3, [r1, #8]
    6862:	429a      	cmp	r2, r3
    6864:	d203      	bcs.n	686e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6866:	21c0      	movs	r1, #192	; 0xc0
    6868:	2037      	movs	r0, #55	; 0x37
    686a:	f7f9 fecb 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    686e:	6942      	ldr	r2, [r0, #20]
    6870:	614a      	str	r2, [r1, #20]
    6872:	6903      	ldr	r3, [r0, #16]
    6874:	610b      	str	r3, [r1, #16]
    6876:	2a00      	cmp	r2, #0
    6878:	bf12      	itee	ne
    687a:	6111      	strne	r1, [r2, #16]
    687c:	4a07      	ldreq	r2, [pc, #28]	; (689c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x44>)
    687e:	6011      	streq	r1, [r2, #0]
    6880:	690a      	ldr	r2, [r1, #16]
    6882:	2a00      	cmp	r2, #0
    6884:	bf08      	it	eq
    6886:	2000      	moveq	r0, #0
    6888:	d005      	beq.n	6896 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3e>
    688a:	6151      	str	r1, [r2, #20]
    688c:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6890:	4410      	add	r0, r2
    6892:	688a      	ldr	r2, [r1, #8]
    6894:	1a80      	subs	r0, r0, r2
    6896:	60c8      	str	r0, [r1, #12]
    6898:	bd10      	pop	{r4, pc}
    689a:	0000      	.short	0x0000
    689c:	20000104 	.word	0x20000104

000068a0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    68a0:	b510      	push	{r4, lr}
    68a2:	2300      	movs	r3, #0
    68a4:	6141      	str	r1, [r0, #20]
    68a6:	b1c1      	cbz	r1, 68da <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    68a8:	690a      	ldr	r2, [r1, #16]
    68aa:	6108      	str	r0, [r1, #16]
    68ac:	6102      	str	r2, [r0, #16]
    68ae:	2a00      	cmp	r2, #0
    68b0:	bf18      	it	ne
    68b2:	6150      	strne	r0, [r2, #20]
    68b4:	6941      	ldr	r1, [r0, #20]
    68b6:	60c3      	str	r3, [r0, #12]
    68b8:	2900      	cmp	r1, #0
    68ba:	bf08      	it	eq
    68bc:	bd10      	popeq	{r4, pc}
    68be:	68ca      	ldr	r2, [r1, #12]
    68c0:	b17a      	cbz	r2, 68e2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    68c2:	f8d0 c008 	ldr.w	ip, [r0, #8]
    68c6:	4562      	cmp	r2, ip
    68c8:	bf24      	itt	cs
    68ca:	eba2 020c 	subcs.w	r2, r2, ip
    68ce:	60c2      	strcs	r2, [r0, #12]
    68d0:	d207      	bcs.n	68e2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    68d2:	212b      	movs	r1, #43	; 0x2b
    68d4:	2037      	movs	r0, #55	; 0x37
    68d6:	f7f9 fe95 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68da:	4903      	ldr	r1, [pc, #12]	; (68e8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x48>)
    68dc:	6103      	str	r3, [r0, #16]
    68de:	6008      	str	r0, [r1, #0]
    68e0:	e7e8      	b.n	68b4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x14>
    68e2:	60cb      	str	r3, [r1, #12]
    68e4:	bd10      	pop	{r4, pc}
    68e6:	0000      	.short	0x0000
    68e8:	20000104 	.word	0x20000104

000068ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    68ec:	6941      	ldr	r1, [r0, #20]
    68ee:	b149      	cbz	r1, 6904 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    68f0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    68f4:	441a      	add	r2, r3
    68f6:	68cb      	ldr	r3, [r1, #12]
    68f8:	441a      	add	r2, r3
    68fa:	60ca      	str	r2, [r1, #12]
    68fc:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6900:	6111      	str	r1, [r2, #16]
    6902:	e002      	b.n	690a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6904:	4a06      	ldr	r2, [pc, #24]	; (6920 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6906:	6901      	ldr	r1, [r0, #16]
    6908:	6011      	str	r1, [r2, #0]
    690a:	6901      	ldr	r1, [r0, #16]
    690c:	6940      	ldr	r0, [r0, #20]
    690e:	2900      	cmp	r1, #0
    6910:	bf1c      	itt	ne
    6912:	6148      	strne	r0, [r1, #20]
    6914:	4770      	bxne	lr
    6916:	2800      	cmp	r0, #0
    6918:	bf1c      	itt	ne
    691a:	2100      	movne	r1, #0
    691c:	60c1      	strne	r1, [r0, #12]
    691e:	4770      	bx	lr
    6920:	20000104 	.word	0x20000104

00006924 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    6924:	490b      	ldr	r1, [pc, #44]	; (6954 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    6926:	4684      	mov	ip, r0
    6928:	2000      	movs	r0, #0
    692a:	6809      	ldr	r1, [r1, #0]
    692c:	4602      	mov	r2, r0
    692e:	1e43      	subs	r3, r0, #1
    6930:	b169      	cbz	r1, 694e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2a>
    6932:	68ca      	ldr	r2, [r1, #12]
    6934:	4562      	cmp	r2, ip
    6936:	bf28      	it	cs
    6938:	4293      	cmpcs	r3, r2
    693a:	bf84      	itt	hi
    693c:	4613      	movhi	r3, r2
    693e:	4608      	movhi	r0, r1
    6940:	460a      	mov	r2, r1
    6942:	6909      	ldr	r1, [r1, #16]
    6944:	2900      	cmp	r1, #0
    6946:	d1f4      	bne.n	6932 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0xe>
    6948:	2800      	cmp	r0, #0
    694a:	bf18      	it	ne
    694c:	4770      	bxne	lr
    694e:	4610      	mov	r0, r2
    6950:	4770      	bx	lr
    6952:	0000      	.short	0x0000
    6954:	20000104 	.word	0x20000104

00006958 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    6958:	4805      	ldr	r0, [pc, #20]	; (6970 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x18>)
    695a:	6801      	ldr	r1, [r0, #0]
    695c:	2000      	movs	r0, #0
    695e:	2900      	cmp	r1, #0
    6960:	bf08      	it	eq
    6962:	4770      	bxeq	lr
    6964:	4608      	mov	r0, r1
    6966:	6909      	ldr	r1, [r1, #16]
    6968:	2900      	cmp	r1, #0
    696a:	d1fb      	bne.n	6964 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    696c:	4770      	bx	lr
    696e:	0000      	.short	0x0000
    6970:	20000104 	.word	0x20000104

00006974 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    6974:	4802      	ldr	r0, [pc, #8]	; (6980 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0xc>)
    6976:	2100      	movs	r1, #0
    6978:	6001      	str	r1, [r0, #0]
    697a:	6041      	str	r1, [r0, #4]
    697c:	4770      	bx	lr
    697e:	0000      	.short	0x0000
    6980:	20000104 	.word	0x20000104

00006984 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    6984:	4904      	ldr	r1, [pc, #16]	; (6998 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x14>)
    6986:	2000      	movs	r0, #0
    6988:	680a      	ldr	r2, [r1, #0]
    698a:	2a00      	cmp	r2, #0
    698c:	bf12      	itee	ne
    698e:	200c      	movne	r0, #12
    6990:	2200      	moveq	r2, #0
    6992:	604a      	streq	r2, [r1, #4]
    6994:	4770      	bx	lr
    6996:	0000      	.short	0x0000
    6998:	20000104 	.word	0x20000104

0000699c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    699c:	4903      	ldr	r1, [pc, #12]	; (69ac <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    699e:	884a      	ldrh	r2, [r1, #2]
    69a0:	8002      	strh	r2, [r0, #0]
    69a2:	7809      	ldrb	r1, [r1, #0]
    69a4:	7081      	strb	r1, [r0, #2]
    69a6:	2000      	movs	r0, #0
    69a8:	4770      	bx	lr
    69aa:	0000      	.short	0x0000
    69ac:	20000adc 	.word	0x20000adc

000069b0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    69b0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    69b4:	460e      	mov	r6, r1
    69b6:	4605      	mov	r5, r0
    69b8:	7807      	ldrb	r7, [r0, #0]
    69ba:	f009 f91d 	bl	fbf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x156>
    69be:	2800      	cmp	r0, #0
    69c0:	d10a      	bne.n	69d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    69c2:	4628      	mov	r0, r5
    69c4:	f009 f8de 	bl	fb84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    69c8:	2800      	cmp	r0, #0
    69ca:	d105      	bne.n	69d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    69cc:	2002      	movs	r0, #2
    69ce:	f7fa f80b 	bl	9e8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    69d2:	4287      	cmp	r7, r0
    69d4:	d302      	bcc.n	69dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    69d6:	2007      	movs	r0, #7
    69d8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    69dc:	2102      	movs	r1, #2
    69de:	4638      	mov	r0, r7
    69e0:	f007 f8ce 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    69e4:	0004      	movs	r4, r0
    69e6:	d003      	beq.n	69f0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x40>
    69e8:	f008 f9aa 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    69ec:	bb68      	cbnz	r0, 6a4a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    69ee:	e00b      	b.n	6a08 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x58>
    69f0:	2102      	movs	r1, #2
    69f2:	4638      	mov	r0, r7
    69f4:	f007 f8ba 	bl	db6c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    69f8:	0004      	movs	r4, r0
    69fa:	d011      	beq.n	6a20 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    69fc:	4825      	ldr	r0, [pc, #148]	; (6a94 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe4>)
    69fe:	f990 1000 	ldrsb.w	r1, [r0]
    6a02:	4620      	mov	r0, r4
    6a04:	f007 fe9d 	bl	e742 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6a08:	4638      	mov	r0, r7
    6a0a:	f009 fa03 	bl	fe14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
    6a0e:	b1f0      	cbz	r0, 6a4e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
    6a10:	3040      	adds	r0, #64	; 0x40
    6a12:	f009 faf0 	bl	fff6 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
    6a16:	b1d0      	cbz	r0, 6a4e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
    6a18:	7868      	ldrb	r0, [r5, #1]
    6a1a:	07c1      	lsls	r1, r0, #31
    6a1c:	d10b      	bne.n	6a36 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
    6a1e:	e004      	b.n	6a2a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    6a20:	f241 31e8 	movw	r1, #5096	; 0x13e8
    6a24:	2039      	movs	r0, #57	; 0x39
    6a26:	f7f9 fded 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a2a:	0781      	lsls	r1, r0, #30
    6a2c:	d403      	bmi.n	6a36 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
    6a2e:	06c1      	lsls	r1, r0, #27
    6a30:	d401      	bmi.n	6a36 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
    6a32:	0680      	lsls	r0, r0, #26
    6a34:	d501      	bpl.n	6a3a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8a>
    6a36:	2012      	movs	r0, #18
    6a38:	e7ce      	b.n	69d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6a3a:	4620      	mov	r0, r4
    6a3c:	f007 ff68 	bl	e910 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6a40:	f009 f84d 	bl	fade <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c>
    6a44:	7da9      	ldrb	r1, [r5, #22]
    6a46:	4288      	cmp	r0, r1
    6a48:	d001      	beq.n	6a4e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
    6a4a:	200c      	movs	r0, #12
    6a4c:	e7c4      	b.n	69d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6a4e:	4620      	mov	r0, r4
    6a50:	f007 ff45 	bl	e8de <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6a54:	7030      	strb	r0, [r6, #0]
    6a56:	74e8      	strb	r0, [r5, #19]
    6a58:	4629      	mov	r1, r5
    6a5a:	4620      	mov	r0, r4
    6a5c:	f7fb fdcc 	bl	25f8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6a60:	4606      	mov	r6, r0
    6a62:	7e68      	ldrb	r0, [r5, #25]
    6a64:	b1a0      	cbz	r0, 6a90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe0>
    6a66:	b99e      	cbnz	r6, 6a90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe0>
    6a68:	2200      	movs	r2, #0
    6a6a:	4668      	mov	r0, sp
    6a6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    6a6e:	f007 f969 	bl	dd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6a72:	2200      	movs	r2, #0
    6a74:	2101      	movs	r1, #1
    6a76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    6a78:	f007 f9e1 	bl	de3e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6a7c:	2204      	movs	r2, #4
    6a7e:	4668      	mov	r0, sp
    6a80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    6a82:	f007 f95f 	bl	dd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6a86:	2200      	movs	r2, #0
    6a88:	4611      	mov	r1, r2
    6a8a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    6a8c:	f007 f9d7 	bl	de3e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6a90:	4630      	mov	r0, r6
    6a92:	e7a1      	b.n	69d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6a94:	2000010c 	.word	0x2000010c

00006a98 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6a98:	7801      	ldrb	r1, [r0, #0]
    6a9a:	b171      	cbz	r1, 6aba <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6a9c:	7841      	ldrb	r1, [r0, #1]
    6a9e:	b161      	cbz	r1, 6aba <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6aa0:	8841      	ldrh	r1, [r0, #2]
    6aa2:	291b      	cmp	r1, #27
    6aa4:	d309      	bcc.n	6aba <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6aa6:	8881      	ldrh	r1, [r0, #4]
    6aa8:	291b      	cmp	r1, #27
    6aaa:	d306      	bcc.n	6aba <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6aac:	4904      	ldr	r1, [pc, #16]	; (6ac0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6aae:	6802      	ldr	r2, [r0, #0]
    6ab0:	600a      	str	r2, [r1, #0]
    6ab2:	8880      	ldrh	r0, [r0, #4]
    6ab4:	8088      	strh	r0, [r1, #4]
    6ab6:	2000      	movs	r0, #0
    6ab8:	4770      	bx	lr
    6aba:	2012      	movs	r0, #18
    6abc:	4770      	bx	lr
    6abe:	0000      	.short	0x0000
    6ac0:	20000adc 	.word	0x20000adc

00006ac4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6ac4:	6800      	ldr	r0, [r0, #0]
    6ac6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    6aca:	d303      	bcc.n	6ad4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x10>
    6acc:	4902      	ldr	r1, [pc, #8]	; (6ad8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x14>)
    6ace:	6088      	str	r0, [r1, #8]
    6ad0:	2000      	movs	r0, #0
    6ad2:	4770      	bx	lr
    6ad4:	2012      	movs	r0, #18
    6ad6:	4770      	bx	lr
    6ad8:	20000adc 	.word	0x20000adc

00006adc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    6adc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6ade:	4605      	mov	r5, r0
    6ae0:	7800      	ldrb	r0, [r0, #0]
    6ae2:	b198      	cbz	r0, 6b0c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    6ae4:	4668      	mov	r0, sp
    6ae6:	f005 ffdf 	bl	caa8 <mpsl_fem_pa_is_configured>
    6aea:	f89d 0000 	ldrb.w	r0, [sp]
    6aee:	b108      	cbz	r0, 6af4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x18>
    6af0:	2401      	movs	r4, #1
    6af2:	e000      	b.n	6af6 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
    6af4:	2400      	movs	r4, #0
    6af6:	a801      	add	r0, sp, #4
    6af8:	f005 ffbe 	bl	ca78 <mpsl_fem_lna_is_configured>
    6afc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6b00:	b100      	cbz	r0, 6b04 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x28>
    6b02:	2001      	movs	r0, #1
    6b04:	4304      	orrs	r4, r0
    6b06:	d001      	beq.n	6b0c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    6b08:	200c      	movs	r0, #12
    6b0a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6b0c:	4902      	ldr	r1, [pc, #8]	; (6b18 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x3c>)
    6b0e:	7828      	ldrb	r0, [r5, #0]
    6b10:	7208      	strb	r0, [r1, #8]
    6b12:	2000      	movs	r0, #0
    6b14:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6b16:	0000      	.short	0x0000
    6b18:	20000b50 	.word	0x20000b50

00006b1c <sym_AZDVN5NCVR7WZFBQMTBKDS4ZECELF7HJDO5FKMQ>:
    6b1c:	4901      	ldr	r1, [pc, #4]	; (6b24 <sym_AZDVN5NCVR7WZFBQMTBKDS4ZECELF7HJDO5FKMQ+0x8>)
    6b1e:	7708      	strb	r0, [r1, #28]
    6b20:	2000      	movs	r0, #0
    6b22:	4770      	bx	lr
    6b24:	20000b50 	.word	0x20000b50

00006b28 <sym_BLF47GKHG6ZQOW3KS7Z2FM5ECAJ3LF5DPZBMLNA>:
    6b28:	4901      	ldr	r1, [pc, #4]	; (6b30 <sym_BLF47GKHG6ZQOW3KS7Z2FM5ECAJ3LF5DPZBMLNA+0x8>)
    6b2a:	7748      	strb	r0, [r1, #29]
    6b2c:	2000      	movs	r0, #0
    6b2e:	4770      	bx	lr
    6b30:	20000b50 	.word	0x20000b50

00006b34 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    6b34:	4801      	ldr	r0, [pc, #4]	; (6b3c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    6b36:	f990 0000 	ldrsb.w	r0, [r0]
    6b3a:	4770      	bx	lr
    6b3c:	2000010c 	.word	0x2000010c

00006b40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6b40:	4a03      	ldr	r2, [pc, #12]	; (6b50 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    6b42:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    6b46:	6001      	str	r1, [r0, #0]
    6b48:	6042      	str	r2, [r0, #4]
    6b4a:	2000      	movs	r0, #0
    6b4c:	4770      	bx	lr
    6b4e:	0000      	.short	0x0000
    6b50:	00007134 	.word	0x00007134
    6b54:	b51c      	push	{r2, r3, r4, lr}
    6b56:	4909      	ldr	r1, [pc, #36]	; (6b7c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3c>)
    6b58:	e9d1 0100 	ldrd	r0, r1, [r1]
    6b5c:	e9cd 0100 	strd	r0, r1, [sp]
    6b60:	e005      	b.n	6b6e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    6b62:	9800      	ldr	r0, [sp, #0]
    6b64:	f008 f8ec 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6b68:	b108      	cbz	r0, 6b6e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    6b6a:	2001      	movs	r0, #1
    6b6c:	bd1c      	pop	{r2, r3, r4, pc}
    6b6e:	4668      	mov	r0, sp
    6b70:	f7f9 ffbe 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6b74:	2800      	cmp	r0, #0
    6b76:	d0f4      	beq.n	6b62 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x22>
    6b78:	2000      	movs	r0, #0
    6b7a:	bd1c      	pop	{r2, r3, r4, pc}
    6b7c:	00007134 	.word	0x00007134
    6b80:	b570      	push	{r4, r5, r6, lr}
    6b82:	4604      	mov	r4, r0
    6b84:	7800      	ldrb	r0, [r0, #0]
    6b86:	2500      	movs	r5, #0
    6b88:	2801      	cmp	r0, #1
    6b8a:	d004      	beq.n	6b96 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x56>
    6b8c:	b118      	cbz	r0, 6b96 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x56>
    6b8e:	2802      	cmp	r0, #2
    6b90:	d001      	beq.n	6b96 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x56>
    6b92:	2803      	cmp	r0, #3
    6b94:	d168      	bne.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6b96:	7860      	ldrb	r0, [r4, #1]
    6b98:	b128      	cbz	r0, 6ba6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x66>
    6b9a:	2801      	cmp	r0, #1
    6b9c:	d003      	beq.n	6ba6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x66>
    6b9e:	2802      	cmp	r0, #2
    6ba0:	d001      	beq.n	6ba6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x66>
    6ba2:	2803      	cmp	r0, #3
    6ba4:	d160      	bne.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6ba6:	7e60      	ldrb	r0, [r4, #25]
    6ba8:	b910      	cbnz	r0, 6bb0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x70>
    6baa:	78a0      	ldrb	r0, [r4, #2]
    6bac:	2801      	cmp	r0, #1
    6bae:	d15b      	bne.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6bb0:	78a0      	ldrb	r0, [r4, #2]
    6bb2:	08c1      	lsrs	r1, r0, #3
    6bb4:	d158      	bne.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6bb6:	0781      	lsls	r1, r0, #30
    6bb8:	d504      	bpl.n	6bc4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x84>
    6bba:	2802      	cmp	r0, #2
    6bbc:	d154      	bne.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6bbe:	492c      	ldr	r1, [pc, #176]	; (6c70 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x130>)
    6bc0:	7a49      	ldrb	r1, [r1, #9]
    6bc2:	b3e9      	cbz	r1, 6c40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x100>
    6bc4:	0740      	lsls	r0, r0, #29
    6bc6:	d04f      	beq.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6bc8:	f000 fb68 	bl	729c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    6bcc:	4601      	mov	r1, r0
    6bce:	78a0      	ldrb	r0, [r4, #2]
    6bd0:	ea30 0101 	bics.w	r1, r0, r1
    6bd4:	d001      	beq.n	6bda <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x9a>
    6bd6:	2011      	movs	r0, #17
    6bd8:	bd70      	pop	{r4, r5, r6, pc}
    6bda:	07c0      	lsls	r0, r0, #31
    6bdc:	d006      	beq.n	6bec <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xac>
    6bde:	78e0      	ldrb	r0, [r4, #3]
    6be0:	2301      	movs	r3, #1
    6be2:	6922      	ldr	r2, [r4, #16]
    6be4:	68a1      	ldr	r1, [r4, #8]
    6be6:	f009 f8b2 	bl	fd4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ac>
    6bea:	4605      	mov	r5, r0
    6bec:	78a0      	ldrb	r0, [r4, #2]
    6bee:	0780      	lsls	r0, r0, #30
    6bf0:	d506      	bpl.n	6c00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc0>
    6bf2:	78e0      	ldrb	r0, [r4, #3]
    6bf4:	2302      	movs	r3, #2
    6bf6:	6922      	ldr	r2, [r4, #16]
    6bf8:	68a1      	ldr	r1, [r4, #8]
    6bfa:	f009 f8a8 	bl	fd4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ac>
    6bfe:	4305      	orrs	r5, r0
    6c00:	78a0      	ldrb	r0, [r4, #2]
    6c02:	0740      	lsls	r0, r0, #29
    6c04:	d506      	bpl.n	6c14 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd4>
    6c06:	78e0      	ldrb	r0, [r4, #3]
    6c08:	2304      	movs	r3, #4
    6c0a:	6922      	ldr	r2, [r4, #16]
    6c0c:	68a1      	ldr	r1, [r4, #8]
    6c0e:	f009 f89e 	bl	fd4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ac>
    6c12:	4305      	orrs	r5, r0
    6c14:	b10d      	cbz	r5, 6c1a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xda>
    6c16:	4628      	mov	r0, r5
    6c18:	bd70      	pop	{r4, r5, r6, pc}
    6c1a:	78a0      	ldrb	r0, [r4, #2]
    6c1c:	2805      	cmp	r0, #5
    6c1e:	d11f      	bne.n	6c60 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x120>
    6c20:	e9d4 1503 	ldrd	r1, r5, [r4, #12]
    6c24:	7920      	ldrb	r0, [r4, #4]
    6c26:	2304      	movs	r3, #4
    6c28:	6962      	ldr	r2, [r4, #20]
    6c2a:	f009 f890 	bl	fd4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ac>
    6c2e:	2800      	cmp	r0, #0
    6c30:	d1f2      	bne.n	6c18 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd8>
    6c32:	2001      	movs	r0, #1
    6c34:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    6c38:	690a      	ldr	r2, [r1, #16]
    6c3a:	4415      	add	r5, r2
    6c3c:	1822      	adds	r2, r4, r0
    6c3e:	e000      	b.n	6c42 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x102>
    6c40:	e012      	b.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6c42:	78d3      	ldrb	r3, [r2, #3]
    6c44:	7892      	ldrb	r2, [r2, #2]
    6c46:	4293      	cmp	r3, r2
    6c48:	d10e      	bne.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6c4a:	688a      	ldr	r2, [r1, #8]
    6c4c:	6849      	ldr	r1, [r1, #4]
    6c4e:	428a      	cmp	r2, r1
    6c50:	d10a      	bne.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6c52:	1c40      	adds	r0, r0, #1
    6c54:	b2c0      	uxtb	r0, r0
    6c56:	2802      	cmp	r0, #2
    6c58:	d3ec      	bcc.n	6c34 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xf4>
    6c5a:	68a0      	ldr	r0, [r4, #8]
    6c5c:	42a8      	cmp	r0, r5
    6c5e:	d303      	bcc.n	6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6c60:	7e20      	ldrb	r0, [r4, #24]
    6c62:	b108      	cbz	r0, 6c68 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x128>
    6c64:	2807      	cmp	r0, #7
    6c66:	d901      	bls.n	6c6c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x12c>
    6c68:	2012      	movs	r0, #18
    6c6a:	bd70      	pop	{r4, r5, r6, pc}
    6c6c:	2000      	movs	r0, #0
    6c6e:	bd70      	pop	{r4, r5, r6, pc}
    6c70:	20000b50 	.word	0x20000b50
    6c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c78:	461d      	mov	r5, r3
    6c7a:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    6c7e:	f1a1 0c06 	sub.w	ip, r1, #6
    6c82:	f640 437a 	movw	r3, #3194	; 0xc7a
    6c86:	9e08      	ldr	r6, [sp, #32]
    6c88:	459c      	cmp	ip, r3
    6c8a:	d805      	bhi.n	6c98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x158>
    6c8c:	f1a2 0c06 	sub.w	ip, r2, #6
    6c90:	459c      	cmp	ip, r3
    6c92:	d801      	bhi.n	6c98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x158>
    6c94:	2301      	movs	r3, #1
    6c96:	e000      	b.n	6c9a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x15a>
    6c98:	2300      	movs	r3, #0
    6c9a:	b120      	cbz	r0, 6ca6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x166>
    6c9c:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
    6ca0:	b168      	cbz	r0, 6cbe <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x17e>
    6ca2:	b96b      	cbnz	r3, 6cc0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x180>
    6ca4:	e002      	b.n	6cac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x16c>
    6ca6:	4815      	ldr	r0, [pc, #84]	; (6cfc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1bc>)
    6ca8:	7a00      	ldrb	r0, [r0, #8]
    6caa:	e7f9      	b.n	6ca0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x160>
    6cac:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    6cb0:	2806      	cmp	r0, #6
    6cb2:	d821      	bhi.n	6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cb4:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    6cb8:	2806      	cmp	r0, #6
    6cba:	d901      	bls.n	6cc0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x180>
    6cbc:	e01c      	b.n	6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cbe:	b1db      	cbz	r3, 6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cc0:	4291      	cmp	r1, r2
    6cc2:	d819      	bhi.n	6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cc4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    6cc8:	d216      	bcs.n	6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cca:	f1a4 000a 	sub.w	r0, r4, #10
    6cce:	f640 4176 	movw	r1, #3190	; 0xc76
    6cd2:	4288      	cmp	r0, r1
    6cd4:	d810      	bhi.n	6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cd6:	4610      	mov	r0, r2
    6cd8:	f007 fa09 	bl	e0ee <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6cdc:	1c6d      	adds	r5, r5, #1
    6cde:	4368      	muls	r0, r5
    6ce0:	f240 2171 	movw	r1, #625	; 0x271
    6ce4:	0040      	lsls	r0, r0, #1
    6ce6:	434c      	muls	r4, r1
    6ce8:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    6cec:	d204      	bcs.n	6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cee:	42b7      	cmp	r7, r6
    6cf0:	d802      	bhi.n	6cf8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b8>
    6cf2:	2001      	movs	r0, #1
    6cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cf8:	2000      	movs	r0, #0
    6cfa:	e7fb      	b.n	6cf4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1b4>
    6cfc:	20000b50 	.word	0x20000b50
    6d00:	b510      	push	{r4, lr}
    6d02:	4812      	ldr	r0, [pc, #72]	; (6d4c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x20c>)
    6d04:	2100      	movs	r1, #0
    6d06:	4a12      	ldr	r2, [pc, #72]	; (6d50 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x210>)
    6d08:	75c1      	strb	r1, [r0, #23]
    6d0a:	8301      	strh	r1, [r0, #24]
    6d0c:	231b      	movs	r3, #27
    6d0e:	8013      	strh	r3, [r2, #0]
    6d10:	f44f 74a4 	mov.w	r4, #328	; 0x148
    6d14:	8054      	strh	r4, [r2, #2]
    6d16:	8093      	strh	r3, [r2, #4]
    6d18:	80d4      	strh	r4, [r2, #6]
    6d1a:	7481      	strb	r1, [r0, #18]
    6d1c:	74c1      	strb	r1, [r0, #19]
    6d1e:	7251      	strb	r1, [r2, #9]
    6d20:	2403      	movs	r4, #3
    6d22:	7004      	strb	r4, [r0, #0]
    6d24:	2402      	movs	r4, #2
    6d26:	7044      	strb	r4, [r0, #1]
    6d28:	8043      	strh	r3, [r0, #2]
    6d2a:	8083      	strh	r3, [r0, #4]
    6d2c:	f640 63a6 	movw	r3, #3750	; 0xea6
    6d30:	6083      	str	r3, [r0, #8]
    6d32:	005b      	lsls	r3, r3, #1
    6d34:	60c3      	str	r3, [r0, #12]
    6d36:	23f9      	movs	r3, #249	; 0xf9
    6d38:	7713      	strb	r3, [r2, #28]
    6d3a:	7751      	strb	r1, [r2, #29]
    6d3c:	7211      	strb	r1, [r2, #8]
    6d3e:	7691      	strb	r1, [r2, #26]
    6d40:	7581      	strb	r1, [r0, #22]
    6d42:	7401      	strb	r1, [r0, #16]
    6d44:	4803      	ldr	r0, [pc, #12]	; (6d54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x214>)
    6d46:	7001      	strb	r1, [r0, #0]
    6d48:	bd10      	pop	{r4, pc}
    6d4a:	0000      	.short	0x0000
    6d4c:	20000adc 	.word	0x20000adc
    6d50:	20000b50 	.word	0x20000b50
    6d54:	20000114 	.word	0x20000114
    6d58:	b530      	push	{r4, r5, lr}
    6d5a:	b087      	sub	sp, #28
    6d5c:	4605      	mov	r5, r0
    6d5e:	8808      	ldrh	r0, [r1, #0]
    6d60:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d64:	4813      	ldr	r0, [pc, #76]	; (6db4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x274>)
    6d66:	460c      	mov	r4, r1
    6d68:	ab03      	add	r3, sp, #12
    6d6a:	7c81      	ldrb	r1, [r0, #18]
    6d6c:	f88d 1006 	strb.w	r1, [sp, #6]
    6d70:	7cc1      	ldrb	r1, [r0, #19]
    6d72:	f88d 1007 	strb.w	r1, [sp, #7]
    6d76:	8a80      	ldrh	r0, [r0, #20]
    6d78:	f8ad 0008 	strh.w	r0, [sp, #8]
    6d7c:	a804      	add	r0, sp, #16
    6d7e:	9000      	str	r0, [sp, #0]
    6d80:	aa01      	add	r2, sp, #4
    6d82:	4621      	mov	r1, r4
    6d84:	4628      	mov	r0, r5
    6d86:	f009 f80c 	bl	fda2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x300>
    6d8a:	0005      	movs	r5, r0
    6d8c:	d110      	bne.n	6db0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x270>
    6d8e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6d92:	f88d 0014 	strb.w	r0, [sp, #20]
    6d96:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6d9a:	f88d 0015 	strb.w	r0, [sp, #21]
    6d9e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6da2:	f8ad 0016 	strh.w	r0, [sp, #22]
    6da6:	a905      	add	r1, sp, #20
    6da8:	4620      	mov	r0, r4
    6daa:	f007 f9bd 	bl	e128 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6dae:	4628      	mov	r0, r5
    6db0:	b007      	add	sp, #28
    6db2:	bd30      	pop	{r4, r5, pc}
    6db4:	20000adc 	.word	0x20000adc
    6db8:	4904      	ldr	r1, [pc, #16]	; (6dcc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x28c>)
    6dba:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    6dbe:	4288      	cmp	r0, r1
    6dc0:	d301      	bcc.n	6dc6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x286>
    6dc2:	2000      	movs	r0, #0
    6dc4:	4770      	bx	lr
    6dc6:	2001      	movs	r0, #1
    6dc8:	4770      	bx	lr
    6dca:	0000      	.short	0x0000
    6dcc:	0270f3cc 	.word	0x0270f3cc
    6dd0:	4904      	ldr	r1, [pc, #16]	; (6de4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a4>)
    6dd2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    6dd6:	4288      	cmp	r0, r1
    6dd8:	d301      	bcc.n	6dde <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x29e>
    6dda:	2000      	movs	r0, #0
    6ddc:	4770      	bx	lr
    6dde:	2001      	movs	r0, #1
    6de0:	4770      	bx	lr
    6de2:	0000      	.short	0x0000
    6de4:	009c363d 	.word	0x009c363d
    6de8:	4904      	ldr	r1, [pc, #16]	; (6dfc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2bc>)
    6dea:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    6dee:	4288      	cmp	r0, r1
    6df0:	d301      	bcc.n	6df6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2b6>
    6df2:	2000      	movs	r0, #0
    6df4:	4770      	bx	lr
    6df6:	2001      	movs	r0, #1
    6df8:	4770      	bx	lr
    6dfa:	0000      	.short	0x0000
    6dfc:	009c363d 	.word	0x009c363d
    6e00:	b510      	push	{r4, lr}
    6e02:	2102      	movs	r1, #2
    6e04:	2000      	movs	r0, #0
    6e06:	f006 febb 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6e0a:	0004      	movs	r4, r0
    6e0c:	d10a      	bne.n	6e24 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e4>
    6e0e:	2102      	movs	r1, #2
    6e10:	f006 feac 	bl	db6c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6e14:	0004      	movs	r4, r0
    6e16:	d007      	beq.n	6e28 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e8>
    6e18:	4806      	ldr	r0, [pc, #24]	; (6e34 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2f4>)
    6e1a:	f990 1000 	ldrsb.w	r1, [r0]
    6e1e:	4620      	mov	r0, r4
    6e20:	f007 fc8f 	bl	e742 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6e24:	4620      	mov	r0, r4
    6e26:	bd10      	pop	{r4, pc}
    6e28:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    6e2c:	2039      	movs	r0, #57	; 0x39
    6e2e:	f7f9 fbe9 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e32:	0000      	.short	0x0000
    6e34:	2000010c 	.word	0x2000010c
    6e38:	b530      	push	{r4, r5, lr}
    6e3a:	2200      	movs	r2, #0
    6e3c:	4d07      	ldr	r5, [pc, #28]	; (6e5c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x31c>)
    6e3e:	e009      	b.n	6e54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x314>
    6e40:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    6e44:	462b      	mov	r3, r5
    6e46:	429c      	cmp	r4, r3
    6e48:	d800      	bhi.n	6e4c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x30c>
    6e4a:	4623      	mov	r3, r4
    6e4c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    6e50:	1c52      	adds	r2, r2, #1
    6e52:	b2d2      	uxtb	r2, r2
    6e54:	428a      	cmp	r2, r1
    6e56:	d3f3      	bcc.n	6e40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x300>
    6e58:	bd30      	pop	{r4, r5, pc}
    6e5a:	0000      	.short	0x0000
    6e5c:	00f42400 	.word	0x00f42400
    6e60:	4904      	ldr	r1, [pc, #16]	; (6e74 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x334>)
    6e62:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    6e66:	4288      	cmp	r0, r1
    6e68:	d301      	bcc.n	6e6e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x32e>
    6e6a:	2000      	movs	r0, #0
    6e6c:	4770      	bx	lr
    6e6e:	2001      	movs	r0, #1
    6e70:	4770      	bx	lr
    6e72:	0000      	.short	0x0000
    6e74:	0270f9a8 	.word	0x0270f9a8
    6e78:	4904      	ldr	r1, [pc, #16]	; (6e8c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x34c>)
    6e7a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    6e7e:	4288      	cmp	r0, r1
    6e80:	d301      	bcc.n	6e86 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x346>
    6e82:	2000      	movs	r0, #0
    6e84:	4770      	bx	lr
    6e86:	2001      	movs	r0, #1
    6e88:	4770      	bx	lr
    6e8a:	0000      	.short	0x0000
    6e8c:	0270f9a8 	.word	0x0270f9a8
    6e90:	4a09      	ldr	r2, [pc, #36]	; (6eb8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x378>)
    6e92:	4290      	cmp	r0, r2
    6e94:	d80b      	bhi.n	6eae <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x36e>
    6e96:	2901      	cmp	r1, #1
    6e98:	d002      	beq.n	6ea0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x360>
    6e9a:	2904      	cmp	r1, #4
    6e9c:	d003      	beq.n	6ea6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x366>
    6e9e:	e008      	b.n	6eb2 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x372>
    6ea0:	f240 7153 	movw	r1, #1875	; 0x753
    6ea4:	e001      	b.n	6eaa <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x36a>
    6ea6:	f640 11c4 	movw	r1, #2500	; 0x9c4
    6eaa:	4288      	cmp	r0, r1
    6eac:	d201      	bcs.n	6eb2 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x372>
    6eae:	2000      	movs	r0, #0
    6eb0:	4770      	bx	lr
    6eb2:	2001      	movs	r0, #1
    6eb4:	4770      	bx	lr
    6eb6:	0000      	.short	0x0000
    6eb8:	0270fd8f 	.word	0x0270fd8f

00006ebc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    6ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6ec0:	460d      	mov	r5, r1
    6ec2:	4680      	mov	r8, r0
    6ec4:	4604      	mov	r4, r0
    6ec6:	f007 fd0d 	bl	e8e4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    6eca:	b198      	cbz	r0, 6ef4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    6ecc:	4620      	mov	r0, r4
    6ece:	f007 fcfa 	bl	e8c6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6ed2:	b130      	cbz	r0, 6ee2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    6ed4:	f8b5 1001 	ldrh.w	r1, [r5, #1]
    6ed8:	2012      	movs	r0, #18
    6eda:	2900      	cmp	r1, #0
    6edc:	d00b      	beq.n	6ef6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6ede:	2980      	cmp	r1, #128	; 0x80
    6ee0:	d809      	bhi.n	6ef6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6ee2:	4620      	mov	r0, r4
    6ee4:	f007 fcb7 	bl	e856 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    6ee8:	b140      	cbz	r0, 6efc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    6eea:	4640      	mov	r0, r8
    6eec:	f007 fbea 	bl	e6c4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    6ef0:	b130      	cbz	r0, 6f00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    6ef2:	e00a      	b.n	6f0a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    6ef4:	2042      	movs	r0, #66	; 0x42
    6ef6:	b004      	add	sp, #16
    6ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6efc:	200c      	movs	r0, #12
    6efe:	e7fa      	b.n	6ef6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6f00:	4640      	mov	r0, r8
    6f02:	f007 fcd2 	bl	e8aa <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    6f06:	2800      	cmp	r0, #0
    6f08:	d07e      	beq.n	7008 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    6f0a:	4640      	mov	r0, r8
    6f0c:	f007 ff18 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6f10:	2800      	cmp	r0, #0
    6f12:	d1f3      	bne.n	6efc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    6f14:	4640      	mov	r0, r8
    6f16:	f007 fbf2 	bl	e6fe <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    6f1a:	2800      	cmp	r0, #0
    6f1c:	d1ee      	bne.n	6efc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    6f1e:	4640      	mov	r0, r8
    6f20:	f7fb fa4a 	bl	23b8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    6f24:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    6f28:	f242 7110 	movw	r1, #10000	; 0x2710
    6f2c:	fb00 f901 	mul.w	r9, r0, r1
    6f30:	78e9      	ldrb	r1, [r5, #3]
    6f32:	4640      	mov	r0, r8
    6f34:	f007 fc86 	bl	e844 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    6f38:	7828      	ldrb	r0, [r5, #0]
    6f3a:	2103      	movs	r1, #3
    6f3c:	f006 fe20 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6f40:	4604      	mov	r4, r0
    6f42:	7828      	ldrb	r0, [r5, #0]
    6f44:	2105      	movs	r1, #5
    6f46:	f006 fe1b 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6f4a:	4d64      	ldr	r5, [pc, #400]	; (70dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x220>)
    6f4c:	b11c      	cbz	r4, 6f56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x9a>
    6f4e:	b1a0      	cbz	r0, 6f7a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    6f50:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
    6f54:	e0b5      	b.n	70c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
    6f56:	b318      	cbz	r0, 6fa0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
    6f58:	f890 60bd 	ldrb.w	r6, [r0, #189]	; 0xbd
    6f5c:	4604      	mov	r4, r0
    6f5e:	4f60      	ldr	r7, [pc, #384]	; (70e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x224>)
    6f60:	6838      	ldr	r0, [r7, #0]
    6f62:	b1e8      	cbz	r0, 6fa0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
    6f64:	f104 0040 	add.w	r0, r4, #64	; 0x40
    6f68:	4604      	mov	r4, r0
    6f6a:	f009 f844 	bl	fff6 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
    6f6e:	b1b8      	cbz	r0, 6fa0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
    6f70:	4620      	mov	r0, r4
    6f72:	f009 f860 	bl	10036 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
    6f76:	b110      	cbz	r0, 6f7e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    6f78:	e012      	b.n	6fa0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
    6f7a:	2600      	movs	r6, #0
    6f7c:	e7ef      	b.n	6f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xa2>
    6f7e:	b13e      	cbz	r6, 6f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd4>
    6f80:	4958      	ldr	r1, [pc, #352]	; (70e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x228>)
    6f82:	4620      	mov	r0, r4
    6f84:	6809      	ldr	r1, [r1, #0]
    6f86:	4788      	blx	r1
    6f88:	b150      	cbz	r0, 6fa0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
    6f8a:	f241 6114 	movw	r1, #5652	; 0x1614
    6f8e:	e098      	b.n	70c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
    6f90:	683a      	ldr	r2, [r7, #0]
    6f92:	4620      	mov	r0, r4
    6f94:	68e9      	ldr	r1, [r5, #12]
    6f96:	4790      	blx	r2
    6f98:	b110      	cbz	r0, 6fa0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
    6f9a:	f241 6119 	movw	r1, #5657	; 0x1619
    6f9e:	e090      	b.n	70c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
    6fa0:	4640      	mov	r0, r8
    6fa2:	f007 fc86 	bl	e8b2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    6fa6:	b148      	cbz	r0, 6fbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    6fa8:	4640      	mov	r0, r8
    6faa:	f007 fc8c 	bl	e8c6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6fae:	4e4e      	ldr	r6, [pc, #312]	; (70e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22c>)
    6fb0:	b180      	cbz	r0, 6fd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x118>
    6fb2:	4640      	mov	r0, r8
    6fb4:	f007 fc8b 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    6fb8:	b150      	cbz	r0, 6fd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x114>
    6fba:	e00b      	b.n	6fd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x118>
    6fbc:	464a      	mov	r2, r9
    6fbe:	2100      	movs	r1, #0
    6fc0:	4640      	mov	r0, r8
    6fc2:	f7fc fdc1 	bl	3b48 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6fc6:	2800      	cmp	r0, #0
    6fc8:	d095      	beq.n	6ef6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6fca:	f241 6122 	movw	r1, #5666	; 0x1622
    6fce:	e078      	b.n	70c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
    6fd0:	7a30      	ldrb	r0, [r6, #8]
    6fd2:	b1c8      	cbz	r0, 7008 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    6fd4:	2101      	movs	r1, #1
    6fd6:	a801      	add	r0, sp, #4
    6fd8:	f7f9 fdac 	bl	b34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    6fdc:	0004      	movs	r4, r0
    6fde:	d05a      	beq.n	7096 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
    6fe0:	2100      	movs	r1, #0
    6fe2:	f7fa fdd7 	bl	1b94 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    6fe6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6fea:	8020      	strh	r0, [r4, #0]
    6fec:	4621      	mov	r1, r4
    6fee:	4640      	mov	r0, r8
    6ff0:	f007 fc90 	bl	e914 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    6ff4:	f000 f94c 	bl	7290 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6ff8:	0940      	lsrs	r0, r0, #5
    6ffa:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6ffe:	07c0      	lsls	r0, r0, #31
    7000:	f104 0030 	add.w	r0, r4, #48	; 0x30
    7004:	d006      	beq.n	7014 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    7006:	e000      	b.n	700a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    7008:	e002      	b.n	7010 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x154>
    700a:	886a      	ldrh	r2, [r5, #2]
    700c:	88a9      	ldrh	r1, [r5, #4]
    700e:	e003      	b.n	7018 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    7010:	2012      	movs	r0, #18
    7012:	e770      	b.n	6ef6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    7014:	221b      	movs	r2, #27
    7016:	4611      	mov	r1, r2
    7018:	84c2      	strh	r2, [r0, #38]	; 0x26
    701a:	8501      	strh	r1, [r0, #40]	; 0x28
    701c:	f000 f938 	bl	7290 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7020:	0788      	lsls	r0, r1, #30
    7022:	d506      	bpl.n	7032 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x176>
    7024:	2001      	movs	r0, #1
    7026:	f88d 0008 	strb.w	r0, [sp, #8]
    702a:	a802      	add	r0, sp, #8
    702c:	9403      	str	r4, [sp, #12]
    702e:	f008 f8ca 	bl	f1c6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    7032:	7a30      	ldrb	r0, [r6, #8]
    7034:	b100      	cbz	r0, 7038 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17c>
    7036:	2001      	movs	r0, #1
    7038:	492b      	ldr	r1, [pc, #172]	; (70e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22c>)
    703a:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
    703e:	220b      	movs	r2, #11
    7040:	310c      	adds	r1, #12
    7042:	f104 007c 	add.w	r0, r4, #124	; 0x7c
    7046:	f009 fa30 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    704a:	7df0      	ldrb	r0, [r6, #23]
    704c:	f884 0087 	strb.w	r0, [r4, #135]	; 0x87
    7050:	69b0      	ldr	r0, [r6, #24]
    7052:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    7056:	68a8      	ldr	r0, [r5, #8]
    7058:	6320      	str	r0, [r4, #48]	; 0x30
    705a:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    705e:	b110      	cbz	r0, 7066 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    7060:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    7064:	e001      	b.n	706a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    7066:	f641 564c 	movw	r6, #7500	; 0x1d4c
    706a:	4640      	mov	r0, r8
    706c:	f007 fc2f 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    7070:	b910      	cbnz	r0, 7078 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>
    7072:	4640      	mov	r0, r8
    7074:	f007 fc4c 	bl	e910 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    7078:	4621      	mov	r1, r4
    707a:	2001      	movs	r0, #1
    707c:	6166      	str	r6, [r4, #20]
    707e:	f7ff fe6b 	bl	6d58 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x218>
    7082:	b150      	cbz	r0, 709a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    7084:	2101      	movs	r1, #1
    7086:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    708a:	f7f9 fdbf 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    708e:	b110      	cbz	r0, 7096 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
    7090:	f241 617c 	movw	r1, #5756	; 0x167c
    7094:	e015      	b.n	70c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
    7096:	2009      	movs	r0, #9
    7098:	e72d      	b.n	6ef6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    709a:	7868      	ldrb	r0, [r5, #1]
    709c:	9000      	str	r0, [sp, #0]
    709e:	782b      	ldrb	r3, [r5, #0]
    70a0:	88aa      	ldrh	r2, [r5, #4]
    70a2:	8869      	ldrh	r1, [r5, #2]
    70a4:	8820      	ldrh	r0, [r4, #0]
    70a6:	f7f9 fe95 	bl	dd4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    70aa:	b110      	cbz	r0, 70b2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    70ac:	f241 6187 	movw	r1, #5767	; 0x1687
    70b0:	e007      	b.n	70c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
    70b2:	464a      	mov	r2, r9
    70b4:	4621      	mov	r1, r4
    70b6:	4640      	mov	r0, r8
    70b8:	f7fc fd46 	bl	3b48 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    70bc:	b120      	cbz	r0, 70c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    70be:	f241 6189 	movw	r1, #5769	; 0x1689
    70c2:	2039      	movs	r0, #57	; 0x39
    70c4:	f7f9 fa9e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70c8:	4808      	ldr	r0, [pc, #32]	; (70ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>)
    70ca:	6843      	ldr	r3, [r0, #4]
    70cc:	b123      	cbz	r3, 70d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21c>
    70ce:	2200      	movs	r2, #0
    70d0:	f504 71ad 	add.w	r1, r4, #346	; 0x15a
    70d4:	4620      	mov	r0, r4
    70d6:	4798      	blx	r3
    70d8:	2000      	movs	r0, #0
    70da:	e70c      	b.n	6ef6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    70dc:	20000adc 	.word	0x20000adc
    70e0:	20000120 	.word	0x20000120
    70e4:	2000011c 	.word	0x2000011c
    70e8:	20000b50 	.word	0x20000b50
    70ec:	2000010c 	.word	0x2000010c
    70f0:	b51c      	push	{r2, r3, r4, lr}
    70f2:	f008 fe9e 	bl	fe32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x390>
    70f6:	b110      	cbz	r0, 70fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x242>
    70f8:	f7fd f8ee 	bl	42d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    70fc:	b970      	cbnz	r0, 711c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x260>
    70fe:	490c      	ldr	r1, [pc, #48]	; (7130 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>)
    7100:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7104:	e9cd 0100 	strd	r0, r1, [sp]
    7108:	e00a      	b.n	7120 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    710a:	9c00      	ldr	r4, [sp, #0]
    710c:	4620      	mov	r0, r4
    710e:	f007 fe17 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7112:	b128      	cbz	r0, 7120 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7114:	4620      	mov	r0, r4
    7116:	f007 fc0c 	bl	e932 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    711a:	b108      	cbz	r0, 7120 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    711c:	2001      	movs	r0, #1
    711e:	bd1c      	pop	{r2, r3, r4, pc}
    7120:	4668      	mov	r0, sp
    7122:	f7f9 fce5 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7126:	2800      	cmp	r0, #0
    7128:	d0ef      	beq.n	710a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    712a:	2000      	movs	r0, #0
    712c:	bd1c      	pop	{r2, r3, r4, pc}
    712e:	0000      	.short	0x0000
    7130:	00007134 	.word	0x00007134
    7134:	00000000 	.word	0x00000000
    7138:	00020000 	.word	0x00020000
    713c:	00000000 	.word	0x00000000
    7140:	00020000 	.word	0x00020000
    7144:	0c124b0c 	.word	0x0c124b0c
    7148:	124b0059 	.word	0x124b0059
	...
    7158:	00020000 	.word	0x00020000
    715c:	00000000 	.word	0x00000000
    7160:	00030000 	.word	0x00030000
    7164:	00000000 	.word	0x00000000
    7168:	00050000 	.word	0x00050000
    716c:	00000000 	.word	0x00000000
    7170:	00020000 	.word	0x00020000
    7174:	00000000 	.word	0x00000000
    7178:	00020000 	.word	0x00020000
    717c:	00000000 	.word	0x00000000
    7180:	00040000 	.word	0x00040000
    7184:	00fa01f4 	.word	0x00fa01f4
    7188:	00640096 	.word	0x00640096
    718c:	0032004b 	.word	0x0032004b
    7190:	0014001e 	.word	0x0014001e
    7194:	0005000a 	.word	0x0005000a
    7198:	00010002 	.word	0x00010002

0000719c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    719c:	b570      	push	{r4, r5, r6, lr}
    719e:	460d      	mov	r5, r1
    71a0:	f7fb f810 	bl	21c4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    71a4:	4c05      	ldr	r4, [pc, #20]	; (71bc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    71a6:	6065      	str	r5, [r4, #4]
    71a8:	68a0      	ldr	r0, [r4, #8]
    71aa:	f008 fed1 	bl	ff50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    71ae:	f008 fc55 	bl	fa5c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    71b2:	f7fb f8b3 	bl	231c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    71b6:	2001      	movs	r0, #1
    71b8:	7020      	strb	r0, [r4, #0]
    71ba:	bd70      	pop	{r4, r5, r6, pc}
    71bc:	20000124 	.word	0x20000124

000071c0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    71c0:	4801      	ldr	r0, [pc, #4]	; (71c8 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    71c2:	7800      	ldrb	r0, [r0, #0]
    71c4:	4770      	bx	lr
    71c6:	0000      	.short	0x0000
    71c8:	20000124 	.word	0x20000124

000071cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>:
    71cc:	4801      	ldr	r0, [pc, #4]	; (71d4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A+0x8>)
    71ce:	7840      	ldrb	r0, [r0, #1]
    71d0:	4770      	bx	lr
    71d2:	0000      	.short	0x0000
    71d4:	20000124 	.word	0x20000124

000071d8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>:
    71d8:	4901      	ldr	r1, [pc, #4]	; (71e0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q+0x8>)
    71da:	7048      	strb	r0, [r1, #1]
    71dc:	4770      	bx	lr
    71de:	0000      	.short	0x0000
    71e0:	20000124 	.word	0x20000124

000071e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    71e4:	b510      	push	{r4, lr}
    71e6:	4c06      	ldr	r4, [pc, #24]	; (7200 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    71e8:	68e0      	ldr	r0, [r4, #12]
    71ea:	f008 feb1 	bl	ff50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    71ee:	6920      	ldr	r0, [r4, #16]
    71f0:	f008 feae 	bl	ff50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    71f4:	f008 fc55 	bl	faa2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    71f8:	2000      	movs	r0, #0
    71fa:	7020      	strb	r0, [r4, #0]
    71fc:	bd10      	pop	{r4, pc}
    71fe:	0000      	.short	0x0000
    7200:	20000124 	.word	0x20000124

00007204 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7204:	b510      	push	{r4, lr}
    7206:	4905      	ldr	r1, [pc, #20]	; (721c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    7208:	4805      	ldr	r0, [pc, #20]	; (7220 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    720a:	f008 fe94 	bl	ff36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    720e:	4804      	ldr	r0, [pc, #16]	; (7220 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7214:	4903      	ldr	r1, [pc, #12]	; (7224 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    7216:	1d00      	adds	r0, r0, #4
    7218:	f008 be8d 	b.w	ff36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    721c:	20000138 	.word	0x20000138
    7220:	2000012c 	.word	0x2000012c
    7224:	20000140 	.word	0x20000140

00007228 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    7228:	b510      	push	{r4, lr}
    722a:	4905      	ldr	r1, [pc, #20]	; (7240 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    722c:	4805      	ldr	r0, [pc, #20]	; (7244 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    722e:	f008 fe82 	bl	ff36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    7232:	4804      	ldr	r0, [pc, #16]	; (7244 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    7234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7238:	4903      	ldr	r1, [pc, #12]	; (7248 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    723a:	1d00      	adds	r0, r0, #4
    723c:	f008 be7b 	b.w	ff36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    7240:	20000148 	.word	0x20000148
    7244:	2000012c 	.word	0x2000012c
    7248:	20000150 	.word	0x20000150

0000724c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    724c:	4801      	ldr	r0, [pc, #4]	; (7254 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    724e:	7880      	ldrb	r0, [r0, #2]
    7250:	4770      	bx	lr
    7252:	0000      	.short	0x0000
    7254:	20000124 	.word	0x20000124
    7258:	b510      	push	{r4, lr}
    725a:	f7fc fd63 	bl	3d24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    725e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7262:	4801      	ldr	r0, [pc, #4]	; (7268 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x1c>)
    7264:	f7fb bb1e 	b.w	28a4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    7268:	20001290 	.word	0x20001290
    726c:	b510      	push	{r4, lr}
    726e:	f7ff fb81 	bl	6974 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    7272:	f7fe fcb9 	bl	5be8 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    7276:	f7ff fa69 	bl	674c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    727a:	f7ff fc5b 	bl	6b34 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    727e:	4601      	mov	r1, r0
    7280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7284:	4801      	ldr	r0, [pc, #4]	; (728c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    7286:	f7fc bedf 	b.w	4048 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    728a:	0000      	.short	0x0000
    728c:	20001290 	.word	0x20001290

00007290 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7290:	4901      	ldr	r1, [pc, #4]	; (7298 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7292:	e9d1 0100 	ldrd	r0, r1, [r1]
    7296:	4770      	bx	lr
    7298:	20000020 	.word	0x20000020

0000729c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    729c:	4909      	ldr	r1, [pc, #36]	; (72c4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x28>)
    729e:	8808      	ldrh	r0, [r1, #0]
    72a0:	7909      	ldrb	r1, [r1, #4]
    72a2:	0ac2      	lsrs	r2, r0, #11
    72a4:	0a00      	lsrs	r0, r0, #8
    72a6:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
    72aa:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    72ae:	07d2      	lsls	r2, r2, #31
    72b0:	f000 0001 	and.w	r0, r0, #1
    72b4:	1800      	adds	r0, r0, r0
    72b6:	ea40 7252 	orr.w	r2, r0, r2, lsr #29
    72ba:	b2d0      	uxtb	r0, r2
    72bc:	f040 0001 	orr.w	r0, r0, #1
    72c0:	4770      	bx	lr
    72c2:	0000      	.short	0x0000
    72c4:	20000020 	.word	0x20000020

000072c8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    72c8:	b510      	push	{r4, lr}
    72ca:	f005 f885 	bl	c3d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    72ce:	2200      	movs	r2, #0
    72d0:	4b08      	ldr	r3, [pc, #32]	; (72f4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    72d2:	4611      	mov	r1, r2
    72d4:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    72d8:	4284      	cmp	r4, r0
    72da:	d303      	bcc.n	72e4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    72dc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    72e0:	7882      	ldrb	r2, [r0, #2]
    72e2:	e003      	b.n	72ec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    72e4:	1c49      	adds	r1, r1, #1
    72e6:	b2c9      	uxtb	r1, r1
    72e8:	290c      	cmp	r1, #12
    72ea:	d3f3      	bcc.n	72d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    72ec:	4802      	ldr	r0, [pc, #8]	; (72f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    72ee:	7002      	strb	r2, [r0, #0]
    72f0:	bd10      	pop	{r4, pc}
    72f2:	0000      	.short	0x0000
    72f4:	0000ffc0 	.word	0x0000ffc0
    72f8:	2000021b 	.word	0x2000021b

000072fc <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    72fc:	4802      	ldr	r0, [pc, #8]	; (7308 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    72fe:	7800      	ldrb	r0, [r0, #0]
    7300:	f000 0007 	and.w	r0, r0, #7
    7304:	4770      	bx	lr
    7306:	0000      	.short	0x0000
    7308:	2000021b 	.word	0x2000021b

0000730c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    730c:	b570      	push	{r4, r5, r6, lr}
    730e:	4605      	mov	r5, r0
    7310:	4616      	mov	r6, r2
    7312:	460c      	mov	r4, r1
    7314:	2002      	movs	r0, #2
    7316:	f000 f8f1 	bl	74fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    731a:	4905      	ldr	r1, [pc, #20]	; (7330 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    731c:	2001      	movs	r0, #1
    731e:	7008      	strb	r0, [r1, #0]
    7320:	4904      	ldr	r1, [pc, #16]	; (7334 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7322:	1ef0      	subs	r0, r6, #3
    7324:	6008      	str	r0, [r1, #0]
    7326:	4804      	ldr	r0, [pc, #16]	; (7338 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7328:	6005      	str	r5, [r0, #0]
    732a:	1f00      	subs	r0, r0, #4
    732c:	6004      	str	r4, [r0, #0]
    732e:	bd70      	pop	{r4, r5, r6, pc}
    7330:	2000021c 	.word	0x2000021c
    7334:	4000f510 	.word	0x4000f510
    7338:	4000f508 	.word	0x4000f508

0000733c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    733c:	4810      	ldr	r0, [pc, #64]	; (7380 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x44>)
    733e:	7801      	ldrb	r1, [r0, #0]
    7340:	b1a9      	cbz	r1, 736e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x32>
    7342:	4a10      	ldr	r2, [pc, #64]	; (7384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    7344:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7348:	6011      	str	r1, [r2, #0]
    734a:	490f      	ldr	r1, [pc, #60]	; (7388 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    734c:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    7350:	2200      	movs	r2, #0
    7352:	2b00      	cmp	r3, #0
    7354:	bf1c      	itt	ne
    7356:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    735a:	2b00      	cmpne	r3, #0
    735c:	d002      	beq.n	7364 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    735e:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    7362:	b141      	cbz	r1, 7376 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    7364:	7042      	strb	r2, [r0, #1]
    7366:	f04f 0110 	mov.w	r1, #16
    736a:	7081      	strb	r1, [r0, #2]
    736c:	7002      	strb	r2, [r0, #0]
    736e:	f04f 0000 	mov.w	r0, #0
    7372:	f000 b8c3 	b.w	74fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7376:	2101      	movs	r1, #1
    7378:	7041      	strb	r1, [r0, #1]
    737a:	4904      	ldr	r1, [pc, #16]	; (738c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    737c:	6809      	ldr	r1, [r1, #0]
    737e:	e7f4      	b.n	736a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2e>
    7380:	2000021c 	.word	0x2000021c
    7384:	4001f508 	.word	0x4001f508
    7388:	4000f000 	.word	0x4000f000
    738c:	4000f400 	.word	0x4000f400

00007390 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>:
    7390:	b510      	push	{r4, lr}
    7392:	2002      	movs	r0, #2
    7394:	f000 f8b2 	bl	74fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7398:	4806      	ldr	r0, [pc, #24]	; (73b4 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x24>)
    739a:	2201      	movs	r2, #1
    739c:	2100      	movs	r1, #0
    739e:	7002      	strb	r2, [r0, #0]
    73a0:	4805      	ldr	r0, [pc, #20]	; (73b8 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x28>)
    73a2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    73a6:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    73aa:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    73ae:	6002      	str	r2, [r0, #0]
    73b0:	bd10      	pop	{r4, pc}
    73b2:	0000      	.short	0x0000
    73b4:	2000021c 	.word	0x2000021c
    73b8:	4000f000 	.word	0x4000f000

000073bc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    73bc:	b510      	push	{r4, lr}
    73be:	2002      	movs	r0, #2
    73c0:	f000 f89c 	bl	74fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    73c4:	4907      	ldr	r1, [pc, #28]	; (73e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    73c6:	2001      	movs	r0, #1
    73c8:	7008      	strb	r0, [r1, #0]
    73ca:	4907      	ldr	r1, [pc, #28]	; (73e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    73cc:	2000      	movs	r0, #0
    73ce:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    73d2:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    73d6:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    73da:	4904      	ldr	r1, [pc, #16]	; (73ec <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    73dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    73e0:	6008      	str	r0, [r1, #0]
    73e2:	bd10      	pop	{r4, pc}
    73e4:	2000021c 	.word	0x2000021c
    73e8:	4000f000 	.word	0x4000f000
    73ec:	4001f504 	.word	0x4001f504

000073f0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    73f0:	4803      	ldr	r0, [pc, #12]	; (7400 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    73f2:	2100      	movs	r1, #0
    73f4:	7001      	strb	r1, [r0, #0]
    73f6:	7041      	strb	r1, [r0, #1]
    73f8:	2110      	movs	r1, #16
    73fa:	7081      	strb	r1, [r0, #2]
    73fc:	4770      	bx	lr
    73fe:	0000      	.short	0x0000
    7400:	2000021c 	.word	0x2000021c

00007404 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7404:	480c      	ldr	r0, [pc, #48]	; (7438 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    7406:	7801      	ldrb	r1, [r0, #0]
    7408:	2900      	cmp	r1, #0
    740a:	bf04      	itt	eq
    740c:	7880      	ldrbeq	r0, [r0, #2]
    740e:	4770      	bxeq	lr
    7410:	480a      	ldr	r0, [pc, #40]	; (743c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    7412:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    7416:	2900      	cmp	r1, #0
    7418:	bf1c      	itt	ne
    741a:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    741e:	2900      	cmpne	r1, #0
    7420:	d002      	beq.n	7428 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    7422:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7426:	b110      	cbz	r0, 742e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    7428:	f04f 0010 	mov.w	r0, #16
    742c:	4770      	bx	lr
    742e:	4804      	ldr	r0, [pc, #16]	; (7440 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    7430:	6800      	ldr	r0, [r0, #0]
    7432:	b2c0      	uxtb	r0, r0
    7434:	4770      	bx	lr
    7436:	0000      	.short	0x0000
    7438:	2000021c 	.word	0x2000021c
    743c:	4000f000 	.word	0x4000f000
    7440:	4000f400 	.word	0x4000f400

00007444 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    7444:	4811      	ldr	r0, [pc, #68]	; (748c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x48>)
    7446:	b510      	push	{r4, lr}
    7448:	7802      	ldrb	r2, [r0, #0]
    744a:	4b11      	ldr	r3, [pc, #68]	; (7490 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>)
    744c:	7840      	ldrb	r0, [r0, #1]
    744e:	21c8      	movs	r1, #200	; 0xc8
    7450:	1e49      	subs	r1, r1, #1
    7452:	b2c9      	uxtb	r1, r1
    7454:	b15a      	cbz	r2, 746e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2a>
    7456:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    745a:	f1bc 0f00 	cmp.w	ip, #0
    745e:	d00c      	beq.n	747a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    7460:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    7464:	b138      	cbz	r0, 7476 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    7466:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    746a:	b160      	cbz	r0, 7486 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    746c:	e003      	b.n	7476 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    746e:	2802      	cmp	r0, #2
    7470:	d003      	beq.n	747a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    7472:	2801      	cmp	r0, #1
    7474:	d007      	beq.n	7486 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    7476:	2000      	movs	r0, #0
    7478:	bd10      	pop	{r4, pc}
    747a:	2900      	cmp	r1, #0
    747c:	d1e8      	bne.n	7450 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    747e:	21ca      	movs	r1, #202	; 0xca
    7480:	203b      	movs	r0, #59	; 0x3b
    7482:	f7f9 f8bf 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7486:	2001      	movs	r0, #1
    7488:	bd10      	pop	{r4, pc}
    748a:	0000      	.short	0x0000
    748c:	2000021c 	.word	0x2000021c
    7490:	4000f000 	.word	0x4000f000

00007494 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7494:	4905      	ldr	r1, [pc, #20]	; (74ac <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7496:	2000      	movs	r0, #0
    7498:	780a      	ldrb	r2, [r1, #0]
    749a:	b11a      	cbz	r2, 74a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    749c:	4b05      	ldr	r3, [pc, #20]	; (74b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>)
    749e:	4a04      	ldr	r2, [pc, #16]	; (74b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1c>)
    74a0:	601a      	str	r2, [r3, #0]
    74a2:	7008      	strb	r0, [r1, #0]
    74a4:	7048      	strb	r0, [r1, #1]
    74a6:	7088      	strb	r0, [r1, #2]
    74a8:	4770      	bx	lr
    74aa:	0000      	.short	0x0000
    74ac:	2000021f 	.word	0x2000021f
    74b0:	02020000 	.word	0x02020000
    74b4:	4001f508 	.word	0x4001f508

000074b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    74b8:	4802      	ldr	r0, [pc, #8]	; (74c4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    74ba:	2100      	movs	r1, #0
    74bc:	7001      	strb	r1, [r0, #0]
    74be:	7041      	strb	r1, [r0, #1]
    74c0:	7081      	strb	r1, [r0, #2]
    74c2:	4770      	bx	lr
    74c4:	2000021f 	.word	0x2000021f

000074c8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    74c8:	b510      	push	{r4, lr}
    74ca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    74ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    74d2:	2000      	movs	r0, #0
    74d4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    74d8:	f3bf 8f4f 	dsb	sy
    74dc:	f3bf 8f6f 	isb	sy
    74e0:	4904      	ldr	r1, [pc, #16]	; (74f4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    74e2:	6008      	str	r0, [r1, #0]
    74e4:	6008      	str	r0, [r1, #0]
    74e6:	f7ff ffd5 	bl	7494 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    74ea:	4903      	ldr	r1, [pc, #12]	; (74f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>)
    74ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    74f0:	6008      	str	r0, [r1, #0]
    74f2:	bd10      	pop	{r4, pc}
    74f4:	4000f500 	.word	0x4000f500
    74f8:	4001f508 	.word	0x4001f508

000074fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    74fc:	b570      	push	{r4, r5, r6, lr}
    74fe:	4c11      	ldr	r4, [pc, #68]	; (7544 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    7500:	4605      	mov	r5, r0
    7502:	2000      	movs	r0, #0
    7504:	6020      	str	r0, [r4, #0]
    7506:	6020      	str	r0, [r4, #0]
    7508:	f7ff ffc4 	bl	7494 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    750c:	490e      	ldr	r1, [pc, #56]	; (7548 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    750e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7512:	6008      	str	r0, [r1, #0]
    7514:	2d00      	cmp	r5, #0
    7516:	bf08      	it	eq
    7518:	bd70      	popeq	{r4, r5, r6, pc}
    751a:	480c      	ldr	r0, [pc, #48]	; (754c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    751c:	490c      	ldr	r1, [pc, #48]	; (7550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    751e:	2d01      	cmp	r5, #1
    7520:	bf04      	itt	eq
    7522:	2202      	moveq	r2, #2
    7524:	6022      	streq	r2, [r4, #0]
    7526:	d00b      	beq.n	7540 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    7528:	2d02      	cmp	r5, #2
    752a:	d003      	beq.n	7534 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x38>
    752c:	2182      	movs	r1, #130	; 0x82
    752e:	203d      	movs	r0, #61	; 0x3d
    7530:	f7f9 f868 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7534:	2203      	movs	r2, #3
    7536:	6022      	str	r2, [r4, #0]
    7538:	6008      	str	r0, [r1, #0]
    753a:	4906      	ldr	r1, [pc, #24]	; (7554 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    753c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7540:	6008      	str	r0, [r1, #0]
    7542:	bd70      	pop	{r4, r5, r6, pc}
    7544:	4000f500 	.word	0x4000f500
    7548:	4001f508 	.word	0x4001f508
    754c:	20001494 	.word	0x20001494
    7550:	4000f514 	.word	0x4000f514
    7554:	4001f504 	.word	0x4001f504

00007558 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7558:	4805      	ldr	r0, [pc, #20]	; (7570 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    755a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    755e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7562:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7566:	2100      	movs	r1, #0
    7568:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    756c:	4770      	bx	lr
    756e:	0000      	.short	0x0000
    7570:	40001000 	.word	0x40001000

00007574 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7574:	4904      	ldr	r1, [pc, #16]	; (7588 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7576:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    757a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    757e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7582:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7586:	4770      	bx	lr
    7588:	40001000 	.word	0x40001000

0000758c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    758c:	4801      	ldr	r0, [pc, #4]	; (7594 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    758e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    7592:	4770      	bx	lr
    7594:	20000b80 	.word	0x20000b80

00007598 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7598:	4902      	ldr	r1, [pc, #8]	; (75a4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    759a:	5c08      	ldrb	r0, [r1, r0]
    759c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    75a0:	4770      	bx	lr
    75a2:	0000      	.short	0x0000
    75a4:	00008b4c 	.word	0x00008b4c

000075a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    75a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75ac:	f005 f9ae 	bl	c90c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    75b0:	f005 fa22 	bl	c9f8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    75b4:	4c4d      	ldr	r4, [pc, #308]	; (76ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x144>)
    75b6:	4680      	mov	r8, r0
    75b8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    75bc:	f010 0f10 	tst.w	r0, #16
    75c0:	bf14      	ite	ne
    75c2:	f04f 0901 	movne.w	r9, #1
    75c6:	f04f 0900 	moveq.w	r9, #0
    75ca:	2010      	movs	r0, #16
    75cc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    75d0:	2002      	movs	r0, #2
    75d2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    75d6:	4d46      	ldr	r5, [pc, #280]	; (76f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x148>)
    75d8:	f8df a118 	ldr.w	sl, [pc, #280]	; 76f4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14c>
    75dc:	2600      	movs	r6, #0
    75de:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
    75e2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    75e6:	f8ca 0000 	str.w	r0, [sl]
    75ea:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    75ee:	f04f 0701 	mov.w	r7, #1
    75f2:	f010 0fff 	tst.w	r0, #255	; 0xff
    75f6:	d016      	beq.n	7626 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7e>
    75f8:	20ff      	movs	r0, #255	; 0xff
    75fa:	f88d 0000 	strb.w	r0, [sp]
    75fe:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    7602:	6127      	str	r7, [r4, #16]
    7604:	e005      	b.n	7612 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6a>
    7606:	bf00      	nop
    7608:	f89d 0000 	ldrb.w	r0, [sp]
    760c:	1e40      	subs	r0, r0, #1
    760e:	f88d 0000 	strb.w	r0, [sp]
    7612:	f89d 1000 	ldrb.w	r1, [sp]
    7616:	b119      	cbz	r1, 7620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x78>
    7618:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    761c:	2800      	cmp	r0, #0
    761e:	d0f3      	beq.n	7608 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x60>
    7620:	f89d 0000 	ldrb.w	r0, [sp]
    7624:	b140      	cbz	r0, 7638 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>
    7626:	8ba8      	ldrh	r0, [r5, #28]
    7628:	2896      	cmp	r0, #150	; 0x96
    762a:	d324      	bcc.n	7676 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    762c:	7a68      	ldrb	r0, [r5, #9]
    762e:	2801      	cmp	r0, #1
    7630:	d007      	beq.n	7642 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9a>
    7632:	2802      	cmp	r0, #2
    7634:	d012      	beq.n	765c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xb4>
    7636:	e01e      	b.n	7676 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    7638:	f640 01aa 	movw	r1, #2218	; 0x8aa
    763c:	203e      	movs	r0, #62	; 0x3e
    763e:	f7f8 ffe1 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7642:	f005 fa1f 	bl	ca84 <mpsl_fem_pa_configuration_clear>
    7646:	2800      	cmp	r0, #0
    7648:	bf18      	it	ne
    764a:	f1b0 3fff 	cmpne.w	r0, #4294967295
    764e:	d012      	beq.n	7676 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    7650:	f640 01bb 	movw	r1, #2235	; 0x8bb
    7654:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7658:	f7f8 ffd4 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    765c:	f005 fa00 	bl	ca60 <mpsl_fem_lna_configuration_clear>
    7660:	2800      	cmp	r0, #0
    7662:	bf18      	it	ne
    7664:	f1b0 3fff 	cmpne.w	r0, #4294967295
    7668:	d005      	beq.n	7676 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    766a:	f640 01c1 	movw	r1, #2241	; 0x8c1
    766e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7672:	f7f8 ffc7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7676:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    767a:	2000      	movs	r0, #0
    767c:	f001 f930 	bl	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    7680:	71ee      	strb	r6, [r5, #7]
    7682:	722e      	strb	r6, [r5, #8]
    7684:	726e      	strb	r6, [r5, #9]
    7686:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
    768a:	b1e0      	cbz	r0, 76c6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x11e>
    768c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
    7690:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
    7694:	f040 0002 	orr.w	r0, r0, #2
    7698:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    769c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    76a0:	f8ca 0000 	str.w	r0, [sl]
    76a4:	4914      	ldr	r1, [pc, #80]	; (76f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x150>)
    76a6:	2000      	movs	r0, #0
    76a8:	680a      	ldr	r2, [r1, #0]
    76aa:	f360 4213 	bfi	r2, r0, #16, #4
    76ae:	600a      	str	r2, [r1, #0]
    76b0:	6968      	ldr	r0, [r5, #20]
    76b2:	4912      	ldr	r1, [pc, #72]	; (76fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x154>)
    76b4:	f020 0003 	bic.w	r0, r0, #3
    76b8:	6168      	str	r0, [r5, #20]
    76ba:	6008      	str	r0, [r1, #0]
    76bc:	4911      	ldr	r1, [pc, #68]	; (7704 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x15c>)
    76be:	4810      	ldr	r0, [pc, #64]	; (7700 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x158>)
    76c0:	6008      	str	r0, [r1, #0]
    76c2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    76c6:	f1b9 0f00 	cmp.w	r9, #0
    76ca:	bf1c      	itt	ne
    76cc:	2010      	movne	r0, #16
    76ce:	f8c4 0304 	strne.w	r0, [r4, #772]	; 0x304
    76d2:	f1b8 0f00 	cmp.w	r8, #0
    76d6:	bf18      	it	ne
    76d8:	6127      	strne	r7, [r4, #16]
    76da:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    76de:	2800      	cmp	r0, #0
    76e0:	bf1c      	itt	ne
    76e2:	6127      	strne	r7, [r4, #16]
    76e4:	f885 6045 	strbne.w	r6, [r5, #69]	; 0x45
    76e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76ec:	40001000 	.word	0x40001000
    76f0:	20000b80 	.word	0x20000b80
    76f4:	4001f508 	.word	0x4001f508
    76f8:	40001514 	.word	0x40001514
    76fc:	40001900 	.word	0x40001900
    7700:	00023280 	.word	0x00023280
    7704:	40001910 	.word	0x40001910

00007708 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    770c:	4c54      	ldr	r4, [pc, #336]	; (7860 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x158>)
    770e:	4605      	mov	r5, r0
    7710:	b087      	sub	sp, #28
    7712:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    7716:	4689      	mov	r9, r1
    7718:	f010 0f01 	tst.w	r0, #1
    771c:	d013      	beq.n	7746 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3e>
    771e:	2d00      	cmp	r5, #0
    7720:	bf0c      	ite	eq
    7722:	2004      	moveq	r0, #4
    7724:	2002      	movne	r0, #2
    7726:	f88d 0014 	strb.w	r0, [sp, #20]
    772a:	2000      	movs	r0, #0
    772c:	f88d 0015 	strb.w	r0, [sp, #21]
    7730:	f88d 0016 	strb.w	r0, [sp, #22]
    7734:	a805      	add	r0, sp, #20
    7736:	f005 f8b9 	bl	c8ac <mpsl_cx_request>
    773a:	b148      	cbz	r0, 7750 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x48>
    773c:	f640 21d2 	movw	r1, #2770	; 0xad2
    7740:	203e      	movs	r0, #62	; 0x3e
    7742:	f7f8 ff5f 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7746:	f240 7185 	movw	r1, #1925	; 0x785
    774a:	203e      	movs	r0, #62	; 0x3e
    774c:	f7f8 ff5a 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7750:	4e44      	ldr	r6, [pc, #272]	; (7864 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x15c>)
    7752:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    7756:	f040 0001 	orr.w	r0, r0, #1
    775a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    775e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    7762:	f04f 0802 	mov.w	r8, #2
    7766:	f040 0002 	orr.w	r0, r0, #2
    776a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    776e:	2701      	movs	r7, #1
    7770:	b115      	cbz	r5, 7778 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>
    7772:	2d01      	cmp	r5, #1
    7774:	d006      	beq.n	7784 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x7c>
    7776:	e00b      	b.n	7790 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>
    7778:	4648      	mov	r0, r9
    777a:	f001 f96f 	bl	8a5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    777e:	7267      	strb	r7, [r4, #9]
    7780:	6037      	str	r7, [r6, #0]
    7782:	e005      	b.n	7790 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>
    7784:	4648      	mov	r0, r9
    7786:	f001 f8e5 	bl	8954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
    778a:	f884 8009 	strb.w	r8, [r4, #9]
    778e:	6077      	str	r7, [r6, #4]
    7790:	4835      	ldr	r0, [pc, #212]	; (7868 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x160>)
    7792:	64c7      	str	r7, [r0, #76]	; 0x4c
    7794:	4835      	ldr	r0, [pc, #212]	; (786c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x164>)
    7796:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    779a:	8ba1      	ldrh	r1, [r4, #28]
    779c:	2996      	cmp	r1, #150	; 0x96
    779e:	d32e      	bcc.n	77fe <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
    77a0:	4933      	ldr	r1, [pc, #204]	; (7870 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
    77a2:	b135      	cbz	r5, 77b2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xaa>
    77a4:	2d01      	cmp	r5, #1
    77a6:	d017      	beq.n	77d8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xd0>
    77a8:	f240 7169 	movw	r1, #1897	; 0x769
    77ac:	203e      	movs	r0, #62	; 0x3e
    77ae:	f7f8 ff29 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77b2:	f100 0228 	add.w	r2, r0, #40	; 0x28
    77b6:	e9c1 0202 	strd	r0, r2, [r1, #8]
    77ba:	492e      	ldr	r1, [pc, #184]	; (7874 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x16c>)
    77bc:	482c      	ldr	r0, [pc, #176]	; (7870 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
    77be:	f005 f967 	bl	ca90 <mpsl_fem_pa_configuration_set>
    77c2:	2800      	cmp	r0, #0
    77c4:	bf18      	it	ne
    77c6:	f1b0 3fff 	cmpne.w	r0, #4294967295
    77ca:	d018      	beq.n	77fe <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
    77cc:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    77d0:	f04f 003e 	mov.w	r0, #62	; 0x3e
    77d4:	f7f8 ff16 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77d8:	f100 0229 	add.w	r2, r0, #41	; 0x29
    77dc:	e9c1 0202 	strd	r0, r2, [r1, #8]
    77e0:	4924      	ldr	r1, [pc, #144]	; (7874 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x16c>)
    77e2:	4823      	ldr	r0, [pc, #140]	; (7870 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
    77e4:	f005 f942 	bl	ca6c <mpsl_fem_lna_configuration_set>
    77e8:	2800      	cmp	r0, #0
    77ea:	bf18      	it	ne
    77ec:	f1b0 3fff 	cmpne.w	r0, #4294967295
    77f0:	d005      	beq.n	77fe <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
    77f2:	f240 7165 	movw	r1, #1893	; 0x765
    77f6:	f04f 003e 	mov.w	r0, #62	; 0x3e
    77fa:	f7f8 ff03 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77fe:	f88d 8000 	strb.w	r8, [sp]
    7802:	2d00      	cmp	r5, #0
    7804:	bf0c      	ite	eq
    7806:	2001      	moveq	r0, #1
    7808:	2000      	movne	r0, #0
    780a:	f88d 0001 	strb.w	r0, [sp, #1]
    780e:	4668      	mov	r0, sp
    7810:	f005 f8d6 	bl	c9c0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    7814:	a805      	add	r0, sp, #20
    7816:	f005 f837 	bl	c888 <mpsl_cx_granted_ops_get>
    781a:	b120      	cbz	r0, 7826 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x11e>
    781c:	f640 21f2 	movw	r1, #2802	; 0xaf2
    7820:	203e      	movs	r0, #62	; 0x3e
    7822:	f7f8 feef 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7826:	7a61      	ldrb	r1, [r4, #9]
    7828:	f89d 0014 	ldrb.w	r0, [sp, #20]
    782c:	2901      	cmp	r1, #1
    782e:	bf08      	it	eq
    7830:	ea27 0090 	biceq.w	r0, r7, r0, lsr #2
    7834:	d004      	beq.n	7840 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x138>
    7836:	2902      	cmp	r1, #2
    7838:	bf14      	ite	ne
    783a:	2000      	movne	r0, #0
    783c:	ea27 0050 	biceq.w	r0, r7, r0, lsr #1
    7840:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    7844:	2800      	cmp	r0, #0
    7846:	bf04      	itt	eq
    7848:	b007      	addeq	sp, #28
    784a:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    784e:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
    7852:	4909      	ldr	r1, [pc, #36]	; (7878 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x170>)
    7854:	6008      	str	r0, [r1, #0]
    7856:	6137      	str	r7, [r6, #16]
    7858:	b007      	add	sp, #28
    785a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    785e:	0000      	.short	0x0000
    7860:	20000b80 	.word	0x20000b80
    7864:	40001000 	.word	0x40001000
    7868:	40008000 	.word	0x40008000
    786c:	4000800c 	.word	0x4000800c
    7870:	20000160 	.word	0x20000160
    7874:	00008b74 	.word	0x00008b74
    7878:	4001f508 	.word	0x4001f508

0000787c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7880:	4c90      	ldr	r4, [pc, #576]	; (7ac4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x248>)
    7882:	0005      	movs	r5, r0
    7884:	b087      	sub	sp, #28
    7886:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    788a:	460f      	mov	r7, r1
    788c:	f040 0002 	orr.w	r0, r0, #2
    7890:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    7894:	bf0c      	ite	eq
    7896:	2004      	moveq	r0, #4
    7898:	2002      	movne	r0, #2
    789a:	f88d 0000 	strb.w	r0, [sp]
    789e:	f04f 0a00 	mov.w	sl, #0
    78a2:	f88d a001 	strb.w	sl, [sp, #1]
    78a6:	f88d a002 	strb.w	sl, [sp, #2]
    78aa:	4668      	mov	r0, sp
    78ac:	f004 fffe 	bl	c8ac <mpsl_cx_request>
    78b0:	b120      	cbz	r0, 78bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x40>
    78b2:	f640 21d2 	movw	r1, #2770	; 0xad2
    78b6:	203e      	movs	r0, #62	; 0x3e
    78b8:	f7f8 fea4 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78bc:	f8df b208 	ldr.w	fp, [pc, #520]	; 7ac8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x24c>
    78c0:	4e82      	ldr	r6, [pc, #520]	; (7acc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x250>)
    78c2:	f04f 0800 	mov.w	r8, #0
    78c6:	f04f 0901 	mov.w	r9, #1
    78ca:	b115      	cbz	r5, 78d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    78cc:	2d01      	cmp	r5, #1
    78ce:	d020      	beq.n	7912 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    78d0:	e037      	b.n	7942 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
    78d2:	4638      	mov	r0, r7
    78d4:	f001 f8c2 	bl	8a5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    78d8:	f884 9009 	strb.w	r9, [r4, #9]
    78dc:	79e0      	ldrb	r0, [r4, #7]
    78de:	2801      	cmp	r0, #1
    78e0:	d105      	bne.n	78ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x72>
    78e2:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    78e6:	f040 0008 	orr.w	r0, r0, #8
    78ea:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    78ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    78f0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    78f4:	6320      	str	r0, [r4, #48]	; 0x30
    78f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    78fa:	f8cb 0000 	str.w	r0, [fp]
    78fe:	4874      	ldr	r0, [pc, #464]	; (7ad0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x254>)
    7900:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    7904:	f500 71fa 	add.w	r1, r0, #500	; 0x1f4
    7908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    790c:	fbb1 f8f0 	udiv	r8, r1, r0
    7910:	e017      	b.n	7942 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
    7912:	4638      	mov	r0, r7
    7914:	f001 f81e 	bl	8954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
    7918:	2002      	movs	r0, #2
    791a:	7260      	strb	r0, [r4, #9]
    791c:	79e0      	ldrb	r0, [r4, #7]
    791e:	2801      	cmp	r0, #1
    7920:	d105      	bne.n	792e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb2>
    7922:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    7926:	f040 0004 	orr.w	r0, r0, #4
    792a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    792e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7930:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7934:	6320      	str	r0, [r4, #48]	; 0x30
    7936:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    793a:	f8cb 0000 	str.w	r0, [fp]
    793e:	f04f 0829 	mov.w	r8, #41	; 0x29
    7942:	79e0      	ldrb	r0, [r4, #7]
    7944:	2800      	cmp	r0, #0
    7946:	bf04      	itt	eq
    7948:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    794c:	f040 0002 	orreq.w	r0, r0, #2
    7950:	d006      	beq.n	7960 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    7952:	2801      	cmp	r0, #1
    7954:	bf04      	itt	eq
    7956:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    795a:	f040 0004 	orreq.w	r0, r0, #4
    795e:	d101      	bne.n	7964 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe8>
    7960:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    7964:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    7968:	f8df b168 	ldr.w	fp, [pc, #360]	; 7ad4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x258>
    796c:	f010 0f01 	tst.w	r0, #1
    7970:	d029      	beq.n	79c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    7972:	f010 0f02 	tst.w	r0, #2
    7976:	d016      	beq.n	79a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x12a>
    7978:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    797c:	f040 0001 	orr.w	r0, r0, #1
    7980:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    7984:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
    7988:	b2c0      	uxtb	r0, r0
    798a:	280b      	cmp	r0, #11
    798c:	bf18      	it	ne
    798e:	280a      	cmpne	r0, #10
    7990:	d003      	beq.n	799a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x11e>
    7992:	2803      	cmp	r0, #3
    7994:	bf18      	it	ne
    7996:	2802      	cmpne	r0, #2
    7998:	d115      	bne.n	79c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    799a:	f240 613e 	movw	r1, #1598	; 0x63e
    799e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    79a2:	f7f8 fe2f 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79a6:	f010 0f04 	tst.w	r0, #4
    79aa:	d00c      	beq.n	79c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    79ac:	494b      	ldr	r1, [pc, #300]	; (7adc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x260>)
    79ae:	484a      	ldr	r0, [pc, #296]	; (7ad8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>)
    79b0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    79b4:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
    79b8:	b128      	cbz	r0, 79c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    79ba:	f240 6146 	movw	r1, #1606	; 0x646
    79be:	f04f 003e 	mov.w	r0, #62	; 0x3e
    79c2:	f7f8 fe1f 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79c6:	f008 fbd9 	bl	1017c <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    79ca:	b128      	cbz	r0, 79d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    79cc:	f7ff fdec 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    79d0:	b007      	add	sp, #28
    79d2:	2000      	movs	r0, #0
    79d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79d8:	f008 fbe2 	bl	101a0 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>
    79dc:	f88d a004 	strb.w	sl, [sp, #4]
    79e0:	2d00      	cmp	r5, #0
    79e2:	bf14      	ite	ne
    79e4:	2100      	movne	r1, #0
    79e6:	2101      	moveq	r1, #1
    79e8:	f88d 1005 	strb.w	r1, [sp, #5]
    79ec:	e9cd b002 	strd	fp, r0, [sp, #8]
    79f0:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    79f4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    79f8:	9004      	str	r0, [sp, #16]
    79fa:	bf18      	it	ne
    79fc:	f649 71ba 	movwne	r1, #40890	; 0x9fba
    7a00:	d104      	bne.n	7a0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x190>
    7a02:	4833      	ldr	r0, [pc, #204]	; (7ad0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x254>)
    7a04:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    7a08:	f500 7116 	add.w	r1, r0, #600	; 0x258
    7a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7a10:	fbb1 f0f0 	udiv	r0, r1, r0
    7a14:	9005      	str	r0, [sp, #20]
    7a16:	a801      	add	r0, sp, #4
    7a18:	f004 ffd2 	bl	c9c0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    7a1c:	8ba1      	ldrh	r1, [r4, #28]
    7a1e:	2000      	movs	r0, #0
    7a20:	2996      	cmp	r1, #150	; 0x96
    7a22:	d32c      	bcc.n	7a7e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    7a24:	492e      	ldr	r1, [pc, #184]	; (7ae0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
    7a26:	b135      	cbz	r5, 7a36 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ba>
    7a28:	2d01      	cmp	r5, #1
    7a2a:	d016      	beq.n	7a5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1de>
    7a2c:	f240 7169 	movw	r1, #1897	; 0x769
    7a30:	203e      	movs	r0, #62	; 0x3e
    7a32:	f7f8 fde7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a36:	2228      	movs	r2, #40	; 0x28
    7a38:	e9c1 0202 	strd	r0, r2, [r1, #8]
    7a3c:	4929      	ldr	r1, [pc, #164]	; (7ae4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x268>)
    7a3e:	4828      	ldr	r0, [pc, #160]	; (7ae0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
    7a40:	f005 f826 	bl	ca90 <mpsl_fem_pa_configuration_set>
    7a44:	2800      	cmp	r0, #0
    7a46:	bf18      	it	ne
    7a48:	f1b0 3fff 	cmpne.w	r0, #4294967295
    7a4c:	d017      	beq.n	7a7e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    7a4e:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    7a52:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7a56:	f7f8 fdd5 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a5a:	2229      	movs	r2, #41	; 0x29
    7a5c:	e9c1 0202 	strd	r0, r2, [r1, #8]
    7a60:	4920      	ldr	r1, [pc, #128]	; (7ae4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x268>)
    7a62:	481f      	ldr	r0, [pc, #124]	; (7ae0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
    7a64:	f005 f802 	bl	ca6c <mpsl_fem_lna_configuration_set>
    7a68:	2800      	cmp	r0, #0
    7a6a:	bf18      	it	ne
    7a6c:	f1b0 3fff 	cmpne.w	r0, #4294967295
    7a70:	d005      	beq.n	7a7e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    7a72:	f240 7165 	movw	r1, #1893	; 0x765
    7a76:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7a7a:	f7f8 fdc3 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a7e:	a806      	add	r0, sp, #24
    7a80:	f004 ff02 	bl	c888 <mpsl_cx_granted_ops_get>
    7a84:	b120      	cbz	r0, 7a90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x214>
    7a86:	f640 21f2 	movw	r1, #2802	; 0xaf2
    7a8a:	203e      	movs	r0, #62	; 0x3e
    7a8c:	f7f8 fdba 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a90:	7a61      	ldrb	r1, [r4, #9]
    7a92:	f89d 0018 	ldrb.w	r0, [sp, #24]
    7a96:	2901      	cmp	r1, #1
    7a98:	bf08      	it	eq
    7a9a:	ea29 0090 	biceq.w	r0, r9, r0, lsr #2
    7a9e:	d004      	beq.n	7aaa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x22e>
    7aa0:	2902      	cmp	r1, #2
    7aa2:	bf14      	ite	ne
    7aa4:	2000      	movne	r0, #0
    7aa6:	ea29 0050 	biceq.w	r0, r9, r0, lsr #1
    7aaa:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    7aae:	b128      	cbz	r0, 7abc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x240>
    7ab0:	490d      	ldr	r1, [pc, #52]	; (7ae8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x26c>)
    7ab2:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
    7ab6:	6008      	str	r0, [r1, #0]
    7ab8:	f8c6 9010 	str.w	r9, [r6, #16]
    7abc:	b007      	add	sp, #28
    7abe:	4640      	mov	r0, r8
    7ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ac4:	20000b80 	.word	0x20000b80
    7ac8:	4001f504 	.word	0x4001f504
    7acc:	40001000 	.word	0x40001000
    7ad0:	00008b3a 	.word	0x00008b3a
    7ad4:	40008000 	.word	0x40008000
    7ad8:	40001008 	.word	0x40001008
    7adc:	4001f098 	.word	0x4001f098
    7ae0:	20000160 	.word	0x20000160
    7ae4:	00008b74 	.word	0x00008b74
    7ae8:	4001f508 	.word	0x4001f508

00007aec <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7aec:	b510      	push	{r4, lr}
    7aee:	4604      	mov	r4, r0
    7af0:	4807      	ldr	r0, [pc, #28]	; (7b10 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x24>)
    7af2:	f004 fecf 	bl	c894 <mpsl_cx_register_callback>
    7af6:	b120      	cbz	r0, 7b02 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x16>
    7af8:	f640 112a 	movw	r1, #2346	; 0x92a
    7afc:	203e      	movs	r0, #62	; 0x3e
    7afe:	f7f8 fd81 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b02:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    7b06:	4803      	ldr	r0, [pc, #12]	; (7b14 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x28>)
    7b08:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    7b0c:	bd10      	pop	{r4, pc}
    7b0e:	0000      	.short	0x0000
    7b10:	00008929 	.word	0x00008929
    7b14:	20000b70 	.word	0x20000b70

00007b18 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7b18:	b510      	push	{r4, lr}
    7b1a:	4c0f      	ldr	r4, [pc, #60]	; (7b58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7b1c:	4603      	mov	r3, r0
    7b1e:	2002      	movs	r0, #2
    7b20:	7320      	strb	r0, [r4, #12]
    7b22:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    7b26:	8ba0      	ldrh	r0, [r4, #28]
    7b28:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7b2c:	7e22      	ldrb	r2, [r4, #24]
    7b2e:	f1bc 0f01 	cmp.w	ip, #1
    7b32:	d00d      	beq.n	7b50 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7b34:	f001 f88c 	bl	8c50 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7b38:	6120      	str	r0, [r4, #16]
    7b3a:	4808      	ldr	r0, [pc, #32]	; (7b5c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7b3c:	2100      	movs	r1, #0
    7b3e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7b42:	6921      	ldr	r1, [r4, #16]
    7b44:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b46:	4408      	add	r0, r1
    7b48:	4905      	ldr	r1, [pc, #20]	; (7b60 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    7b4a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7b4e:	bd10      	pop	{r4, pc}
    7b50:	f001 f89c 	bl	8c8c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7b54:	e7f0      	b.n	7b38 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x20>
    7b56:	0000      	.short	0x0000
    7b58:	20000b80 	.word	0x20000b80
    7b5c:	40008000 	.word	0x40008000
    7b60:	40008004 	.word	0x40008004

00007b64 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b68:	2248      	movs	r2, #72	; 0x48
    7b6a:	2100      	movs	r1, #0
    7b6c:	481d      	ldr	r0, [pc, #116]	; (7be4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    7b6e:	f008 fd16 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7b72:	481c      	ldr	r0, [pc, #112]	; (7be4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    7b74:	2400      	movs	r4, #0
    7b76:	21ff      	movs	r1, #255	; 0xff
    7b78:	71c4      	strb	r4, [r0, #7]
    7b7a:	7204      	strb	r4, [r0, #8]
    7b7c:	7244      	strb	r4, [r0, #9]
    7b7e:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
    7b82:	215f      	movs	r1, #95	; 0x5f
    7b84:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7b88:	f008 fbd9 	bl	1033e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7b8c:	4f16      	ldr	r7, [pc, #88]	; (7be8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    7b8e:	4d17      	ldr	r5, [pc, #92]	; (7bec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
    7b90:	4e17      	ldr	r6, [pc, #92]	; (7bf0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
    7b92:	b928      	cbnz	r0, 7ba0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    7b94:	f008 fbea 	bl	1036c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7b98:	b910      	cbnz	r0, 7ba0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    7b9a:	f008 fbf1 	bl	10380 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7b9e:	b140      	cbz	r0, 7bb2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4e>
    7ba0:	2224      	movs	r2, #36	; 0x24
    7ba2:	21ff      	movs	r1, #255	; 0xff
    7ba4:	4638      	mov	r0, r7
    7ba6:	f008 fcfa 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7baa:	602c      	str	r4, [r5, #0]
    7bac:	6034      	str	r4, [r6, #0]
    7bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bb2:	f008 fc25 	bl	10400 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7bb6:	b910      	cbnz	r0, 7bbe <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5a>
    7bb8:	f008 fc18 	bl	103ec <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7bbc:	b140      	cbz	r0, 7bd0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6c>
    7bbe:	2240      	movs	r2, #64	; 0x40
    7bc0:	21ff      	movs	r1, #255	; 0xff
    7bc2:	4638      	mov	r0, r7
    7bc4:	f008 fceb 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7bc8:	602c      	str	r4, [r5, #0]
    7bca:	6034      	str	r4, [r6, #0]
    7bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bd0:	2238      	movs	r2, #56	; 0x38
    7bd2:	21ff      	movs	r1, #255	; 0xff
    7bd4:	4638      	mov	r0, r7
    7bd6:	f008 fce2 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7bda:	602c      	str	r4, [r5, #0]
    7bdc:	6034      	str	r4, [r6, #0]
    7bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7be2:	0000      	.short	0x0000
    7be4:	20000b80 	.word	0x20000b80
    7be8:	40000e00 	.word	0x40000e00
    7bec:	40000e08 	.word	0x40000e08
    7bf0:	40000e10 	.word	0x40000e10

00007bf4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bf8:	4e29      	ldr	r6, [pc, #164]	; (7ca0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xac>)
    7bfa:	4c28      	ldr	r4, [pc, #160]	; (7c9c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xa8>)
    7bfc:	2000      	movs	r0, #0
    7bfe:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    7c02:	1d27      	adds	r7, r4, #4
    7c04:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    7c08:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    7c0c:	f106 0804 	add.w	r8, r6, #4
    7c10:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    7c14:	f7ff fcc8 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7c18:	4d22      	ldr	r5, [pc, #136]	; (7ca4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb0>)
    7c1a:	8ba8      	ldrh	r0, [r5, #28]
    7c1c:	2896      	cmp	r0, #150	; 0x96
    7c1e:	d30c      	bcc.n	7c3a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    7c20:	f004 ff18 	bl	ca54 <mpsl_fem_disable>
    7c24:	2800      	cmp	r0, #0
    7c26:	bf18      	it	ne
    7c28:	f1b0 3fff 	cmpne.w	r0, #4294967295
    7c2c:	d005      	beq.n	7c3a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    7c2e:	f240 516d 	movw	r1, #1389	; 0x56d
    7c32:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7c36:	f7f8 fce5 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c3a:	f004 fe31 	bl	c8a0 <mpsl_cx_release>
    7c3e:	b120      	cbz	r0, 7c4a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x56>
    7c40:	f240 5181 	movw	r1, #1409	; 0x581
    7c44:	203e      	movs	r0, #62	; 0x3e
    7c46:	f7f8 fcdd 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c4a:	6b28      	ldr	r0, [r5, #48]	; 0x30
    7c4c:	4916      	ldr	r1, [pc, #88]	; (7ca8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb4>)
    7c4e:	f040 6044 	orr.w	r0, r0, #205520896	; 0xc400000
    7c52:	6008      	str	r0, [r1, #0]
    7c54:	2000      	movs	r0, #0
    7c56:	6328      	str	r0, [r5, #48]	; 0x30
    7c58:	7328      	strb	r0, [r5, #12]
    7c5a:	6268      	str	r0, [r5, #36]	; 0x24
    7c5c:	6228      	str	r0, [r5, #32]
    7c5e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    7c62:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    7c66:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    7c6a:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    7c6e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    7c72:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    7c76:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    7c7a:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    7c7e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7c82:	2002      	movs	r0, #2
    7c84:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    7c88:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    7c8c:	f3bf 8f4f 	dsb	sy
    7c90:	f3bf 8f6f 	isb	sy
    7c94:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c9c:	40008000 	.word	0x40008000
    7ca0:	40008008 	.word	0x40008008
    7ca4:	20000b80 	.word	0x20000b80
    7ca8:	4001f508 	.word	0x4001f508

00007cac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cb0:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    7cb4:	2701      	movs	r7, #1
    7cb6:	f04f 0902 	mov.w	r9, #2
    7cba:	2500      	movs	r5, #0
    7cbc:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    7cc0:	f3bf 8f4f 	dsb	sy
    7cc4:	f3bf 8f6f 	isb	sy
    7cc8:	4c39      	ldr	r4, [pc, #228]	; (7db0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7cca:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
    7cce:	f8c4 7ffc 	str.w	r7, [r4, #4092]	; 0xffc
    7cd2:	f008 fb6b 	bl	103ac <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7cd6:	4e37      	ldr	r6, [pc, #220]	; (7db4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    7cd8:	b118      	cbz	r0, 7ce2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    7cda:	6830      	ldr	r0, [r6, #0]
    7cdc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7ce0:	6030      	str	r0, [r6, #0]
    7ce2:	f008 fb57 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7ce6:	b138      	cbz	r0, 7cf8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    7ce8:	6830      	ldr	r0, [r6, #0]
    7cea:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7cee:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    7cf2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    7cf6:	6030      	str	r0, [r6, #0]
    7cf8:	f008 fb68 	bl	103cc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7cfc:	b130      	cbz	r0, 7d0c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x60>
    7cfe:	482e      	ldr	r0, [pc, #184]	; (7db8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    7d00:	6801      	ldr	r1, [r0, #0]
    7d02:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    7d06:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7d0a:	6001      	str	r1, [r0, #0]
    7d0c:	492c      	ldr	r1, [pc, #176]	; (7dc0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    7d0e:	482b      	ldr	r0, [pc, #172]	; (7dbc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    7d10:	6008      	str	r0, [r1, #0]
    7d12:	f004 fed9 	bl	cac8 <mpsl_fem_device_config_254_apply_get>
    7d16:	b140      	cbz	r0, 7d2a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    7d18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7d1c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    7d20:	f1b0 3fff 	cmp.w	r0, #4294967295
    7d24:	bf1c      	itt	ne
    7d26:	4927      	ldrne	r1, [pc, #156]	; (7dc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    7d28:	6008      	strne	r0, [r1, #0]
    7d2a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    7d2e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7d30:	f1b0 3fff 	cmp.w	r0, #4294967295
    7d34:	d004      	beq.n	7d40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x94>
    7d36:	4924      	ldr	r1, [pc, #144]	; (7dc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    7d38:	680a      	ldr	r2, [r1, #0]
    7d3a:	f360 4217 	bfi	r2, r0, #16, #8
    7d3e:	600a      	str	r2, [r1, #0]
    7d40:	f240 1103 	movw	r1, #259	; 0x103
    7d44:	f240 605b 	movw	r0, #1627	; 0x65b
    7d48:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    7d4c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7d50:	481e      	ldr	r0, [pc, #120]	; (7dcc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    7d52:	6007      	str	r7, [r0, #0]
    7d54:	481e      	ldr	r0, [pc, #120]	; (7dd0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    7d56:	4a1f      	ldr	r2, [pc, #124]	; (7dd4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    7d58:	2103      	movs	r1, #3
    7d5a:	7607      	strb	r7, [r0, #24]
    7d5c:	6011      	str	r1, [r2, #0]
    7d5e:	f240 2101 	movw	r1, #513	; 0x201
    7d62:	f8c4 1650 	str.w	r1, [r4, #1616]	; 0x650
    7d66:	2102      	movs	r1, #2
    7d68:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    7d6c:	4a1a      	ldr	r2, [pc, #104]	; (7dd8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    7d6e:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    7d72:	6011      	str	r1, [r2, #0]
    7d74:	f1a0 0110 	sub.w	r1, r0, #16
    7d78:	2296      	movs	r2, #150	; 0x96
    7d7a:	870d      	strh	r5, [r1, #56]	; 0x38
    7d7c:	4917      	ldr	r1, [pc, #92]	; (7ddc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x130>)
    7d7e:	6245      	str	r5, [r0, #36]	; 0x24
    7d80:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    7d84:	700d      	strb	r5, [r1, #0]
    7d86:	8382      	strh	r2, [r0, #28]
    7d88:	4a15      	ldr	r2, [pc, #84]	; (7de0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x134>)
    7d8a:	6812      	ldr	r2, [r2, #0]
    7d8c:	6142      	str	r2, [r0, #20]
    7d8e:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
    7d92:	f8c8 9280 	str.w	r9, [r8, #640]	; 0x280
    7d96:	2010      	movs	r0, #16
    7d98:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7d9c:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
    7da0:	6848      	ldr	r0, [r1, #4]
    7da2:	2800      	cmp	r0, #0
    7da4:	bf08      	it	eq
    7da6:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7daa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dae:	4700      	bx	r0
    7db0:	40001000 	.word	0x40001000
    7db4:	4000173c 	.word	0x4000173c
    7db8:	40001740 	.word	0x40001740
    7dbc:	8900002c 	.word	0x8900002c
    7dc0:	40001778 	.word	0x40001778
    7dc4:	4000174c 	.word	0x4000174c
    7dc8:	4000158c 	.word	0x4000158c
    7dcc:	40001530 	.word	0x40001530
    7dd0:	20000b80 	.word	0x20000b80
    7dd4:	40001510 	.word	0x40001510
    7dd8:	4001f504 	.word	0x4001f504
    7ddc:	20000158 	.word	0x20000158
    7de0:	40001900 	.word	0x40001900

00007de4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7de4:	4901      	ldr	r1, [pc, #4]	; (7dec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7de6:	7648      	strb	r0, [r1, #25]
    7de8:	4770      	bx	lr
    7dea:	0000      	.short	0x0000
    7dec:	20000b80 	.word	0x20000b80

00007df0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    7df0:	4901      	ldr	r1, [pc, #4]	; (7df8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    7df2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7df6:	4770      	bx	lr
    7df8:	00008bb0 	.word	0x00008bb0

00007dfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    7dfc:	491e      	ldr	r1, [pc, #120]	; (7e78 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    7dfe:	b510      	push	{r4, lr}
    7e00:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    7e04:	4a1d      	ldr	r2, [pc, #116]	; (7e7c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    7e06:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    7e0a:	f040 0001 	orr.w	r0, r0, #1
    7e0e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
    7e12:	f010 0f01 	tst.w	r0, #1
    7e16:	bf08      	it	eq
    7e18:	bd10      	popeq	{r4, pc}
    7e1a:	f010 0f02 	tst.w	r0, #2
    7e1e:	d016      	beq.n	7e4e <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x52>
    7e20:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7e24:	f040 0001 	orr.w	r0, r0, #1
    7e28:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7e2c:	f8d1 0550 	ldr.w	r0, [r1, #1360]	; 0x550
    7e30:	b2c0      	uxtb	r0, r0
    7e32:	280b      	cmp	r0, #11
    7e34:	bf18      	it	ne
    7e36:	280a      	cmpne	r0, #10
    7e38:	d003      	beq.n	7e42 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x46>
    7e3a:	2803      	cmp	r0, #3
    7e3c:	bf1c      	itt	ne
    7e3e:	2802      	cmpne	r0, #2
    7e40:	bd10      	popne	{r4, pc}
    7e42:	f240 613e 	movw	r1, #1598	; 0x63e
    7e46:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7e4a:	f7f8 fbdb 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e4e:	f010 0f04 	tst.w	r0, #4
    7e52:	bf08      	it	eq
    7e54:	bd10      	popeq	{r4, pc}
    7e56:	480a      	ldr	r0, [pc, #40]	; (7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    7e58:	490a      	ldr	r1, [pc, #40]	; (7e84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    7e5a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    7e5e:	480a      	ldr	r0, [pc, #40]	; (7e88 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    7e60:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    7e64:	2800      	cmp	r0, #0
    7e66:	bf08      	it	eq
    7e68:	bd10      	popeq	{r4, pc}
    7e6a:	f240 6146 	movw	r1, #1606	; 0x646
    7e6e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7e72:	f7f8 fbc7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e76:	0000      	.short	0x0000
    7e78:	40001000 	.word	0x40001000
    7e7c:	20000b80 	.word	0x20000b80
    7e80:	40001008 	.word	0x40001008
    7e84:	4001f098 	.word	0x4001f098
    7e88:	40008000 	.word	0x40008000

00007e8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    7e8c:	4901      	ldr	r1, [pc, #4]	; (7e94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    7e8e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7e92:	4770      	bx	lr
    7e94:	00008bd4 	.word	0x00008bd4

00007e98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    7e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e9c:	b089      	sub	sp, #36	; 0x24
    7e9e:	4690      	mov	r8, r2
    7ea0:	460d      	mov	r5, r1
    7ea2:	0007      	movs	r7, r0
    7ea4:	bf0c      	ite	eq
    7ea6:	2004      	moveq	r0, #4
    7ea8:	2002      	movne	r0, #2
    7eaa:	f88d 0000 	strb.w	r0, [sp]
    7eae:	2000      	movs	r0, #0
    7eb0:	f88d 0001 	strb.w	r0, [sp, #1]
    7eb4:	f88d 0002 	strb.w	r0, [sp, #2]
    7eb8:	4668      	mov	r0, sp
    7eba:	f004 fcf7 	bl	c8ac <mpsl_cx_request>
    7ebe:	b120      	cbz	r0, 7eca <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    7ec0:	f640 21d2 	movw	r1, #2770	; 0xad2
    7ec4:	203e      	movs	r0, #62	; 0x3e
    7ec6:	f7f8 fb9d 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eca:	4e8a      	ldr	r6, [pc, #552]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    7ecc:	f8df a228 	ldr.w	sl, [pc, #552]	; 80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
    7ed0:	4c8a      	ldr	r4, [pc, #552]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    7ed2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    7ed6:	f04f 0901 	mov.w	r9, #1
    7eda:	b137      	cbz	r7, 7eea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    7edc:	2f01      	cmp	r7, #1
    7ede:	d01a      	beq.n	7f16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7e>
    7ee0:	f640 012d 	movw	r1, #2093	; 0x82d
    7ee4:	203e      	movs	r0, #62	; 0x3e
    7ee6:	f7f8 fb8d 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eea:	4640      	mov	r0, r8
    7eec:	f000 fdb6 	bl	8a5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    7ef0:	4883      	ldr	r0, [pc, #524]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    7ef2:	f884 9009 	strb.w	r9, [r4, #9]
    7ef6:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
    7efa:	79e0      	ldrb	r0, [r4, #7]
    7efc:	2801      	cmp	r0, #1
    7efe:	d004      	beq.n	7f0a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x72>
    7f00:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    7f04:	fbb1 f1fb 	udiv	r1, r1, fp
    7f08:	1a6d      	subs	r5, r5, r1
    7f0a:	2800      	cmp	r0, #0
    7f0c:	bf04      	itt	eq
    7f0e:	4630      	moveq	r0, r6
    7f10:	f8ca 6514 	streq.w	r6, [sl, #1300]	; 0x514
    7f14:	e011      	b.n	7f3a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa2>
    7f16:	4640      	mov	r0, r8
    7f18:	f000 fd1c 	bl	8954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
    7f1c:	2002      	movs	r0, #2
    7f1e:	7260      	strb	r0, [r4, #9]
    7f20:	79e1      	ldrb	r1, [r4, #7]
    7f22:	2901      	cmp	r1, #1
    7f24:	d004      	beq.n	7f30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x98>
    7f26:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    7f2a:	fbb0 f0fb 	udiv	r0, r0, fp
    7f2e:	1a2d      	subs	r5, r5, r0
    7f30:	4874      	ldr	r0, [pc, #464]	; (8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>)
    7f32:	2900      	cmp	r1, #0
    7f34:	bf08      	it	eq
    7f36:	f8ca 0514 	streq.w	r0, [sl, #1300]	; 0x514
    7f3a:	4873      	ldr	r0, [pc, #460]	; (8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>)
    7f3c:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    7f40:	4a72      	ldr	r2, [pc, #456]	; (810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    7f42:	4651      	mov	r1, sl
    7f44:	f8ca 2510 	str.w	r2, [sl, #1296]	; 0x510
    7f48:	2210      	movs	r2, #16
    7f4a:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
    7f4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7f50:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    7f54:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7f58:	0103      	lsls	r3, r0, #4
    7f5a:	6322      	str	r2, [r4, #48]	; 0x30
    7f5c:	f8cc 3000 	str.w	r3, [ip]
    7f60:	79e3      	ldrb	r3, [r4, #7]
    7f62:	2b00      	cmp	r3, #0
    7f64:	bf04      	itt	eq
    7f66:	f894 3034 	ldrbeq.w	r3, [r4, #52]	; 0x34
    7f6a:	f043 0302 	orreq.w	r3, r3, #2
    7f6e:	d006      	beq.n	7f7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe6>
    7f70:	2b01      	cmp	r3, #1
    7f72:	bf04      	itt	eq
    7f74:	f894 3034 	ldrbeq.w	r3, [r4, #52]	; 0x34
    7f78:	f043 0304 	orreq.w	r3, r3, #4
    7f7c:	d101      	bne.n	7f82 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xea>
    7f7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    7f82:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    7f86:	f013 0f01 	tst.w	r3, #1
    7f8a:	d028      	beq.n	7fde <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
    7f8c:	f013 0f02 	tst.w	r3, #2
    7f90:	d016      	beq.n	7fc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x128>
    7f92:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    7f96:	f043 0301 	orr.w	r3, r3, #1
    7f9a:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    7f9e:	f8d6 3550 	ldr.w	r3, [r6, #1360]	; 0x550
    7fa2:	b2db      	uxtb	r3, r3
    7fa4:	2b0b      	cmp	r3, #11
    7fa6:	bf18      	it	ne
    7fa8:	2b0a      	cmpne	r3, #10
    7faa:	d003      	beq.n	7fb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x11c>
    7fac:	2b03      	cmp	r3, #3
    7fae:	bf18      	it	ne
    7fb0:	2b02      	cmpne	r3, #2
    7fb2:	d114      	bne.n	7fde <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
    7fb4:	f240 613e 	movw	r1, #1598	; 0x63e
    7fb8:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7fbc:	f7f8 fb22 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fc0:	f013 0f04 	tst.w	r3, #4
    7fc4:	d00b      	beq.n	7fde <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
    7fc6:	4b53      	ldr	r3, [pc, #332]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    7fc8:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
    7fcc:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    7fd0:	b12b      	cbz	r3, 7fde <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
    7fd2:	f240 6146 	movw	r1, #1606	; 0x646
    7fd6:	f04f 003e 	mov.w	r0, #62	; 0x3e
    7fda:	f7f8 fb13 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fde:	f8c0 904c 	str.w	r9, [r0, #76]	; 0x4c
    7fe2:	4b4d      	ldr	r3, [pc, #308]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    7fe4:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
    7fe8:	f8df a130 	ldr.w	sl, [pc, #304]	; 811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    7fec:	42ab      	cmp	r3, r5
    7fee:	d311      	bcc.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    7ff0:	2300      	movs	r3, #0
    7ff2:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    7ff6:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
    7ffa:	f422 2000 	bic.w	r0, r2, #524288	; 0x80000
    7ffe:	6320      	str	r0, [r4, #48]	; 0x30
    8000:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    8004:	f8ca 0000 	str.w	r0, [sl]
    8008:	f7ff face 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    800c:	b009      	add	sp, #36	; 0x24
    800e:	2000      	movs	r0, #0
    8010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8014:	2100      	movs	r1, #0
    8016:	f88d 1004 	strb.w	r1, [sp, #4]
    801a:	2f00      	cmp	r7, #0
    801c:	bf0c      	ite	eq
    801e:	2201      	moveq	r2, #1
    8020:	2200      	movne	r2, #0
    8022:	f88d 2005 	strb.w	r2, [sp, #5]
    8026:	9504      	str	r5, [sp, #16]
    8028:	e9cd 0102 	strd	r0, r1, [sp, #8]
    802c:	bf03      	ittte	eq
    802e:	4834      	ldreq	r0, [pc, #208]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    8030:	f830 0018 	ldrheq.w	r0, [r0, r8, lsl #1]
    8034:	f500 7016 	addeq.w	r0, r0, #600	; 0x258
    8038:	f649 70ba 	movwne	r0, #40890	; 0x9fba
    803c:	fbb0 f0fb 	udiv	r0, r0, fp
    8040:	9005      	str	r0, [sp, #20]
    8042:	a801      	add	r0, sp, #4
    8044:	f004 fcbc 	bl	c9c0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    8048:	8ba0      	ldrh	r0, [r4, #28]
    804a:	2896      	cmp	r0, #150	; 0x96
    804c:	d32e      	bcc.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    804e:	4834      	ldr	r0, [pc, #208]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    8050:	b137      	cbz	r7, 8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    8052:	2f01      	cmp	r7, #1
    8054:	d017      	beq.n	8086 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86>
    8056:	f240 7169 	movw	r1, #1897	; 0x769
    805a:	203e      	movs	r0, #62	; 0x3e
    805c:	f7f8 fad2 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8060:	f105 0128 	add.w	r1, r5, #40	; 0x28
    8064:	e9c0 5102 	strd	r5, r1, [r0, #8]
    8068:	492e      	ldr	r1, [pc, #184]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    806a:	482d      	ldr	r0, [pc, #180]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    806c:	f004 fd10 	bl	ca90 <mpsl_fem_pa_configuration_set>
    8070:	2800      	cmp	r0, #0
    8072:	bf18      	it	ne
    8074:	f1b0 3fff 	cmpne.w	r0, #4294967295
    8078:	d018      	beq.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    807a:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    807e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    8082:	f7f8 fabf 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8086:	f105 0129 	add.w	r1, r5, #41	; 0x29
    808a:	e9c0 5102 	strd	r5, r1, [r0, #8]
    808e:	4925      	ldr	r1, [pc, #148]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    8090:	4823      	ldr	r0, [pc, #140]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    8092:	f004 fceb 	bl	ca6c <mpsl_fem_lna_configuration_set>
    8096:	2800      	cmp	r0, #0
    8098:	bf18      	it	ne
    809a:	f1b0 3fff 	cmpne.w	r0, #4294967295
    809e:	d005      	beq.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    80a0:	f240 7165 	movw	r1, #1893	; 0x765
    80a4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    80a8:	f7f8 faac 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80ac:	4668      	mov	r0, sp
    80ae:	f004 fbeb 	bl	c888 <mpsl_cx_granted_ops_get>
    80b2:	b120      	cbz	r0, 80be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbe>
    80b4:	f640 21f2 	movw	r1, #2802	; 0xaf2
    80b8:	203e      	movs	r0, #62	; 0x3e
    80ba:	f7f8 faa3 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80be:	7a61      	ldrb	r1, [r4, #9]
    80c0:	f89d 0000 	ldrb.w	r0, [sp]
    80c4:	2901      	cmp	r1, #1
    80c6:	bf08      	it	eq
    80c8:	ea29 0090 	biceq.w	r0, r9, r0, lsr #2
    80cc:	d004      	beq.n	80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>
    80ce:	2902      	cmp	r1, #2
    80d0:	bf14      	ite	ne
    80d2:	2000      	movne	r0, #0
    80d4:	ea29 0050 	biceq.w	r0, r9, r0, lsr #1
    80d8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    80dc:	b128      	cbz	r0, 80ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea>
    80de:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
    80e2:	f8ca 0000 	str.w	r0, [sl]
    80e6:	f8c6 9010 	str.w	r9, [r6, #16]
    80ea:	b009      	add	sp, #36	; 0x24
    80ec:	2001      	movs	r0, #1
    80ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80f2:	0000      	.short	0x0000
    80f4:	40001000 	.word	0x40001000
    80f8:	4001f098 	.word	0x4001f098
    80fc:	20000b80 	.word	0x20000b80
    8100:	00008b3a 	.word	0x00008b3a
    8104:	40001004 	.word	0x40001004
    8108:	40008000 	.word	0x40008000
    810c:	40008140 	.word	0x40008140
    8110:	4001f504 	.word	0x4001f504
    8114:	40001008 	.word	0x40001008
    8118:	4000800c 	.word	0x4000800c
    811c:	4001f508 	.word	0x4001f508
    8120:	20000160 	.word	0x20000160
    8124:	00008b74 	.word	0x00008b74

00008128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8128:	b530      	push	{r4, r5, lr}
    812a:	4c2d      	ldr	r4, [pc, #180]	; (81e0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xb8>)
    812c:	b087      	sub	sp, #28
    812e:	000d      	movs	r5, r1
    8130:	71e0      	strb	r0, [r4, #7]
    8132:	72a2      	strb	r2, [r4, #10]
    8134:	bf0c      	ite	eq
    8136:	2001      	moveq	r0, #1
    8138:	2002      	movne	r0, #2
    813a:	7220      	strb	r0, [r4, #8]
    813c:	2801      	cmp	r0, #1
    813e:	d006      	beq.n	814e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x26>
    8140:	2802      	cmp	r0, #2
    8142:	d026      	beq.n	8192 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    8144:	f640 2163 	movw	r1, #2659	; 0xa63
    8148:	203e      	movs	r0, #62	; 0x3e
    814a:	f7f8 fa5b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    814e:	7a60      	ldrb	r0, [r4, #9]
    8150:	2802      	cmp	r0, #2
    8152:	d11e      	bne.n	8192 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    8154:	4610      	mov	r0, r2
    8156:	f994 2019 	ldrsb.w	r2, [r4, #25]
    815a:	7ea1      	ldrb	r1, [r4, #26]
    815c:	ab05      	add	r3, sp, #20
    815e:	f000 fdf5 	bl	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8162:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    8166:	f000 fdb3 	bl	8cd0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    816a:	f10d 0015 	add.w	r0, sp, #21
    816e:	f004 fc95 	bl	ca9c <mpsl_fem_pa_gain_set>
    8172:	b120      	cbz	r0, 817e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    8174:	f240 6115 	movw	r1, #1557	; 0x615
    8178:	203e      	movs	r0, #62	; 0x3e
    817a:	f7f8 fa43 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    817e:	20ff      	movs	r0, #255	; 0xff
    8180:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    8184:	4817      	ldr	r0, [pc, #92]	; (81e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xbc>)
    8186:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    818a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    818e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8192:	7a62      	ldrb	r2, [r4, #9]
    8194:	7e20      	ldrb	r0, [r4, #24]
    8196:	2a02      	cmp	r2, #2
    8198:	8ba2      	ldrh	r2, [r4, #28]
    819a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    819e:	d016      	beq.n	81ce <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xa6>
    81a0:	4b11      	ldr	r3, [pc, #68]	; (81e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc0>)
    81a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    81a6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    81aa:	fbb0 f0f1 	udiv	r0, r0, r1
    81ae:	4410      	add	r0, r2
    81b0:	2101      	movs	r1, #1
    81b2:	f88d 1000 	strb.w	r1, [sp]
    81b6:	2d00      	cmp	r5, #0
    81b8:	bf0c      	ite	eq
    81ba:	2101      	moveq	r1, #1
    81bc:	2100      	movne	r1, #0
    81be:	f88d 1001 	strb.w	r1, [sp, #1]
    81c2:	9001      	str	r0, [sp, #4]
    81c4:	4668      	mov	r0, sp
    81c6:	f004 fbfb 	bl	c9c0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    81ca:	b007      	add	sp, #28
    81cc:	bd30      	pop	{r4, r5, pc}
    81ce:	4b07      	ldr	r3, [pc, #28]	; (81ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc4>)
    81d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    81d4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    81d8:	fbb0 f0f1 	udiv	r0, r0, r1
    81dc:	1a10      	subs	r0, r2, r0
    81de:	e7e7      	b.n	81b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x88>
    81e0:	20000b80 	.word	0x20000b80
    81e4:	40001000 	.word	0x40001000
    81e8:	00008b28 	.word	0x00008b28
    81ec:	00008bd4 	.word	0x00008bd4

000081f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    81f0:	4903      	ldr	r1, [pc, #12]	; (8200 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>)
    81f2:	6809      	ldr	r1, [r1, #0]
    81f4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    81f8:	4249      	negs	r1, r1
    81fa:	7001      	strb	r1, [r0, #0]
    81fc:	2001      	movs	r0, #1
    81fe:	4770      	bx	lr
    8200:	40001548 	.word	0x40001548

00008204 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8204:	4903      	ldr	r1, [pc, #12]	; (8214 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8206:	0e02      	lsrs	r2, r0, #24
    8208:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    820c:	0200      	lsls	r0, r0, #8
    820e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8212:	4770      	bx	lr
    8214:	40001000 	.word	0x40001000

00008218 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8218:	4901      	ldr	r1, [pc, #4]	; (8220 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    821a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    821e:	4770      	bx	lr
    8220:	40001000 	.word	0x40001000

00008224 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8224:	b510      	push	{r4, lr}
    8226:	2200      	movs	r2, #0
    8228:	2901      	cmp	r1, #1
    822a:	d010      	beq.n	824e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    822c:	2902      	cmp	r1, #2
    822e:	bf08      	it	eq
    8230:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    8234:	d00b      	beq.n	824e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    8236:	2904      	cmp	r1, #4
    8238:	bf14      	ite	ne
    823a:	2908      	cmpne	r1, #8
    823c:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    8240:	d005      	beq.n	824e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    8242:	f240 21d9 	movw	r1, #729	; 0x2d9
    8246:	f04f 003e 	mov.w	r0, #62	; 0x3e
    824a:	f7f8 f9db 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    824e:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    8252:	4a0c      	ldr	r2, [pc, #48]	; (8284 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x60>)
    8254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8258:	6011      	str	r1, [r2, #0]
    825a:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    825e:	1d11      	adds	r1, r2, #4
    8260:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    8264:	6008      	str	r0, [r1, #0]
    8266:	4808      	ldr	r0, [pc, #32]	; (8288 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x64>)
    8268:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    826c:	b2c0      	uxtb	r0, r0
    826e:	2803      	cmp	r0, #3
    8270:	bf1c      	itt	ne
    8272:	280b      	cmpne	r0, #11
    8274:	bd10      	popne	{r4, pc}
    8276:	f240 21f1 	movw	r1, #753	; 0x2f1
    827a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    827e:	f7f8 f9c1 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8282:	0000      	.short	0x0000
    8284:	40001514 	.word	0x40001514
    8288:	40001000 	.word	0x40001000

0000828c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    828c:	4901      	ldr	r1, [pc, #4]	; (8294 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    828e:	7688      	strb	r0, [r1, #26]
    8290:	4770      	bx	lr
    8292:	0000      	.short	0x0000
    8294:	20000b80 	.word	0x20000b80

00008298 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    829c:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; 8694 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    82a0:	2701      	movs	r7, #1
    82a2:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
    82a6:	48fc      	ldr	r0, [pc, #1008]	; (8698 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    82a8:	f8d0 b540 	ldr.w	fp, [r0, #1344]	; 0x540
    82ac:	f007 ff64 	bl	10178 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    82b0:	4cfa      	ldr	r4, [pc, #1000]	; (869c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    82b2:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; 86a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    82b6:	4dfb      	ldr	r5, [pc, #1004]	; (86a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    82b8:	e9c4 0b0f 	strd	r0, fp, [r4, #60]	; 0x3c
    82bc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    82c0:	2600      	movs	r6, #0
    82c2:	b1d8      	cbz	r0, 82fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x64>
    82c4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    82c8:	f110 0900 	adds.w	r9, r0, #0
    82cc:	bf18      	it	ne
    82ce:	f04f 0901 	movne.w	r9, #1
    82d2:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    82d6:	2800      	cmp	r0, #0
    82d8:	bf18      	it	ne
    82da:	2001      	movne	r0, #1
    82dc:	ea50 0109 	orrs.w	r1, r0, r9
    82e0:	d015      	beq.n	830e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    82e2:	2180      	movs	r1, #128	; 0x80
    82e4:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    82e8:	0309      	lsls	r1, r1, #12
    82ea:	f8ca 1000 	str.w	r1, [sl]
    82ee:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    82f2:	f090 0f01 	teq	r0, #1
    82f6:	bf18      	it	ne
    82f8:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82fc:	8ba0      	ldrh	r0, [r4, #28]
    82fe:	2896      	cmp	r0, #150	; 0x96
    8300:	d37e      	bcc.n	8400 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    8302:	7a60      	ldrb	r0, [r4, #9]
    8304:	2801      	cmp	r0, #1
    8306:	d07c      	beq.n	8402 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16a>
    8308:	2802      	cmp	r0, #2
    830a:	d07b      	beq.n	8404 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>
    830c:	e0ba      	b.n	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    830e:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
    8312:	49e5      	ldr	r1, [pc, #916]	; (86a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    8314:	f8df b394 	ldr.w	fp, [pc, #916]	; 86ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>
    8318:	b338      	cbz	r0, 836a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd2>
    831a:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    831e:	616f      	str	r7, [r5, #20]
    8320:	20ff      	movs	r0, #255	; 0xff
    8322:	9000      	str	r0, [sp, #0]
    8324:	e002      	b.n	832c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x94>
    8326:	1e40      	subs	r0, r0, #1
    8328:	9000      	str	r0, [sp, #0]
    832a:	d019      	beq.n	8360 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    832c:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    8330:	2800      	cmp	r0, #0
    8332:	9800      	ldr	r0, [sp, #0]
    8334:	d0f7      	beq.n	8326 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    8336:	b198      	cbz	r0, 8360 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    8338:	6808      	ldr	r0, [r1, #0]
    833a:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
    833e:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8342:	4558      	cmp	r0, fp
    8344:	bf3c      	itt	cc
    8346:	2000      	movcc	r0, #0
    8348:	f000 faca 	blcc	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    834c:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
    8350:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    8354:	2001      	movs	r0, #1
    8356:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    835a:	642f      	str	r7, [r5, #64]	; 0x40
    835c:	63af      	str	r7, [r5, #56]	; 0x38
    835e:	e007      	b.n	8370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd8>
    8360:	f640 3199 	movw	r1, #2969	; 0xb99
    8364:	203e      	movs	r0, #62	; 0x3e
    8366:	f7f8 f94d 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    836a:	f1b9 0f00 	cmp.w	r9, #0
    836e:	d003      	beq.n	8378 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    8370:	f1b9 0f00 	cmp.w	r9, #0
    8374:	d02a      	beq.n	83cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    8376:	e063      	b.n	8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    8378:	6808      	ldr	r0, [r1, #0]
    837a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    837e:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    8382:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    8386:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
    838a:	b149      	cbz	r1, 83a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    838c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    8390:	4281      	cmp	r1, r0
    8392:	d218      	bcs.n	83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    8394:	2000      	movs	r0, #0
    8396:	f000 faa3 	bl	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    839a:	642f      	str	r7, [r5, #64]	; 0x40
    839c:	63af      	str	r7, [r5, #56]	; 0x38
    839e:	e012      	b.n	83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    83a0:	49c3      	ldr	r1, [pc, #780]	; (86b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    83a2:	6809      	ldr	r1, [r1, #0]
    83a4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    83a8:	b28a      	uxth	r2, r1
    83aa:	0c09      	lsrs	r1, r1, #16
    83ac:	4298      	cmp	r0, r3
    83ae:	d303      	bcc.n	83b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x120>
    83b0:	2a0f      	cmp	r2, #15
    83b2:	d906      	bls.n	83c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    83b4:	2902      	cmp	r1, #2
    83b6:	d204      	bcs.n	83c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    83b8:	2001      	movs	r0, #1
    83ba:	f000 fa91 	bl	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    83be:	642f      	str	r7, [r5, #64]	; 0x40
    83c0:	e001      	b.n	83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    83c2:	642f      	str	r7, [r5, #64]	; 0x40
    83c4:	63af      	str	r7, [r5, #56]	; 0x38
    83c6:	f8db 0000 	ldr.w	r0, [fp]
    83ca:	9000      	str	r0, [sp, #0]
    83cc:	2080      	movs	r0, #128	; 0x80
    83ce:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    83d2:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40
    83d6:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
    83da:	49b6      	ldr	r1, [pc, #728]	; (86b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    83dc:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    83e0:	f643 2298 	movw	r2, #15000	; 0x3a98
    83e4:	4410      	add	r0, r2
    83e6:	4ab4      	ldr	r2, [pc, #720]	; (86b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    83e8:	4288      	cmp	r0, r1
    83ea:	d21c      	bcs.n	8426 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x18e>
    83ec:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
    83f0:	f242 7110 	movw	r1, #10000	; 0x2710
    83f4:	4408      	add	r0, r1
    83f6:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    83fa:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    83fe:	e002      	b.n	8406 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16e>
    8400:	e040      	b.n	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    8402:	e025      	b.n	8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    8404:	e031      	b.n	846a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d2>
    8406:	49ad      	ldr	r1, [pc, #692]	; (86bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    8408:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    840c:	48ac      	ldr	r0, [pc, #688]	; (86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    840e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8412:	49ac      	ldr	r1, [pc, #688]	; (86c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    8414:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    8418:	6008      	str	r0, [r1, #0]
    841a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    841c:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    8420:	6320      	str	r0, [r4, #48]	; 0x30
    8422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8426:	2000      	movs	r0, #0
    8428:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    842c:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    8430:	2080      	movs	r0, #128	; 0x80
    8432:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    8436:	0300      	lsls	r0, r0, #12
    8438:	f8ca 0000 	str.w	r0, [sl]
    843c:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    8440:	2080      	movs	r0, #128	; 0x80
    8442:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    8446:	0300      	lsls	r0, r0, #12
    8448:	f8ca 0000 	str.w	r0, [sl]
    844c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8450:	f004 fb18 	bl	ca84 <mpsl_fem_pa_configuration_clear>
    8454:	2800      	cmp	r0, #0
    8456:	bf18      	it	ne
    8458:	f1b0 3fff 	cmpne.w	r0, #4294967295
    845c:	d012      	beq.n	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    845e:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8462:	f04f 003e 	mov.w	r0, #62	; 0x3e
    8466:	f7f8 f8cd 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    846a:	f004 faf9 	bl	ca60 <mpsl_fem_lna_configuration_clear>
    846e:	2800      	cmp	r0, #0
    8470:	bf18      	it	ne
    8472:	f1b0 3fff 	cmpne.w	r0, #4294967295
    8476:	d005      	beq.n	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    8478:	f640 01c1 	movw	r1, #2241	; 0x8c1
    847c:	f04f 003e 	mov.w	r0, #62	; 0x3e
    8480:	f7f8 f8c0 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8484:	4986      	ldr	r1, [pc, #536]	; (86a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    8486:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8488:	6008      	str	r0, [r1, #0]
    848a:	6326      	str	r6, [r4, #48]	; 0x30
    848c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8490:	f020 001d 	bic.w	r0, r0, #29
    8494:	f420 7080 	bic.w	r0, r0, #256	; 0x100
    8498:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    849c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    84a0:	7b20      	ldrb	r0, [r4, #12]
    84a2:	f04f 0900 	mov.w	r9, #0
    84a6:	2800      	cmp	r0, #0
    84a8:	bf1b      	ittet	ne
    84aa:	f8d8 0144 	ldrne.w	r0, [r8, #324]	; 0x144
    84ae:	2800      	cmpne	r0, #0
    84b0:	2000      	moveq	r0, #0
    84b2:	2001      	movne	r0, #1
    84b4:	7a61      	ldrb	r1, [r4, #9]
    84b6:	2901      	cmp	r1, #1
    84b8:	d002      	beq.n	84c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x228>
    84ba:	2902      	cmp	r1, #2
    84bc:	d00a      	beq.n	84d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x23c>
    84be:	e005      	b.n	84cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    84c0:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    84c4:	2800      	cmp	r0, #0
    84c6:	bf18      	it	ne
    84c8:	f04f 0908 	movne.w	r9, #8
    84cc:	f019 0f0b 	tst.w	r9, #11
    84d0:	d118      	bne.n	8504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x26c>
    84d2:	e011      	b.n	84f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x260>
    84d4:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
    84d8:	2900      	cmp	r1, #0
    84da:	bf18      	it	ne
    84dc:	f04f 0902 	movne.w	r9, #2
    84e0:	4979      	ldr	r1, [pc, #484]	; (86c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
    84e2:	6809      	ldr	r1, [r1, #0]
    84e4:	f011 0f01 	tst.w	r1, #1
    84e8:	bf08      	it	eq
    84ea:	f049 0904 	orreq.w	r9, r9, #4
    84ee:	2800      	cmp	r0, #0
    84f0:	bf18      	it	ne
    84f2:	f049 0901 	orrne.w	r9, r9, #1
    84f6:	e7e9      	b.n	84cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    84f8:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    84fc:	2800      	cmp	r0, #0
    84fe:	bf18      	it	ne
    8500:	f049 0910 	orrne.w	r9, r9, #16
    8504:	4871      	ldr	r0, [pc, #452]	; (86cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
    8506:	7800      	ldrb	r0, [r0, #0]
    8508:	b1c0      	cbz	r0, 853c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a4>
    850a:	4871      	ldr	r0, [pc, #452]	; (86d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    850c:	6800      	ldr	r0, [r0, #0]
    850e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    8512:	bf1b      	ittet	ne
    8514:	f8d5 1114 	ldrne.w	r1, [r5, #276]	; 0x114
    8518:	2900      	cmpne	r1, #0
    851a:	2100      	moveq	r1, #0
    851c:	2101      	movne	r1, #1
    851e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    8522:	2800      	cmp	r0, #0
    8524:	bf1b      	ittet	ne
    8526:	f8d5 0118 	ldrne.w	r0, [r5, #280]	; 0x118
    852a:	2800      	cmpne	r0, #0
    852c:	2000      	moveq	r0, #0
    852e:	2001      	movne	r0, #1
    8530:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    8534:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
    8538:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    853c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    8540:	2800      	cmp	r0, #0
    8542:	bf18      	it	ne
    8544:	2001      	movne	r0, #1
    8546:	f88d 0000 	strb.w	r0, [sp]
    854a:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    854e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    8552:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    8556:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    855a:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
    855e:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
    8562:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
    8566:	f8c5 616c 	str.w	r6, [r5, #364]	; 0x16c
    856a:	4668      	mov	r0, sp
    856c:	f004 fa1a 	bl	c9a4 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    8570:	2800      	cmp	r0, #0
    8572:	bf18      	it	ne
    8574:	f049 0910 	orrne.w	r9, r9, #16
    8578:	f8c8 6144 	str.w	r6, [r8, #324]	; 0x144
    857c:	f019 0f10 	tst.w	r9, #16
    8580:	d006      	beq.n	8590 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
    8582:	f019 0f08 	tst.w	r9, #8
    8586:	bf02      	ittt	eq
    8588:	7a60      	ldrbeq	r0, [r4, #9]
    858a:	2801      	cmpeq	r0, #1
    858c:	f049 0920 	orreq.w	r9, r9, #32
    8590:	4850      	ldr	r0, [pc, #320]	; (86d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    8592:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8596:	6260      	str	r0, [r4, #36]	; 0x24
    8598:	4846      	ldr	r0, [pc, #280]	; (86b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    859a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    859e:	6220      	str	r0, [r4, #32]
    85a0:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    85a4:	2802      	cmp	r0, #2
    85a6:	bf1c      	itt	ne
    85a8:	7a60      	ldrbne	r0, [r4, #9]
    85aa:	2802      	cmpne	r0, #2
    85ac:	7e21      	ldrb	r1, [r4, #24]
    85ae:	d00e      	beq.n	85ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x336>
    85b0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    85b4:	7a62      	ldrb	r2, [r4, #9]
    85b6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    85ba:	7a20      	ldrb	r0, [r4, #8]
    85bc:	f04f 0a00 	mov.w	sl, #0
    85c0:	b188      	cbz	r0, 85e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
    85c2:	f019 0f11 	tst.w	r9, #17
    85c6:	d013      	beq.n	85f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    85c8:	f7fe ffee 	bl	75a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    85cc:	e03e      	b.n	864c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    85ce:	2904      	cmp	r1, #4
    85d0:	bf18      	it	ne
    85d2:	2908      	cmpne	r1, #8
    85d4:	d1ec      	bne.n	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
    85d6:	4840      	ldr	r0, [pc, #256]	; (86d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    85d8:	6800      	ldr	r0, [r0, #0]
    85da:	f010 0f06 	tst.w	r0, #6
    85de:	bf0c      	ite	eq
    85e0:	2108      	moveq	r1, #8
    85e2:	2104      	movne	r1, #4
    85e4:	e7e4      	b.n	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
    85e6:	71e6      	strb	r6, [r4, #7]
    85e8:	7226      	strb	r6, [r4, #8]
    85ea:	7266      	strb	r6, [r4, #9]
    85ec:	7326      	strb	r6, [r4, #12]
    85ee:	e02d      	b.n	864c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    85f0:	2801      	cmp	r0, #1
    85f2:	bf14      	ite	ne
    85f4:	f04f 0801 	movne.w	r8, #1
    85f8:	f04f 0800 	moveq.w	r8, #0
    85fc:	79e0      	ldrb	r0, [r4, #7]
    85fe:	2801      	cmp	r0, #1
    8600:	bf18      	it	ne
    8602:	2000      	movne	r0, #0
    8604:	9000      	str	r0, [sp, #0]
    8606:	71e6      	strb	r6, [r4, #7]
    8608:	7226      	strb	r6, [r4, #8]
    860a:	7266      	strb	r6, [r4, #9]
    860c:	8ba0      	ldrh	r0, [r4, #28]
    860e:	2300      	movs	r3, #0
    8610:	b3ea      	cbz	r2, 868e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f6>
    8612:	f1b8 0f00 	cmp.w	r8, #0
    8616:	d077      	beq.n	8708 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    8618:	f1b8 0f00 	cmp.w	r8, #0
    861c:	d005      	beq.n	862a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    861e:	2a01      	cmp	r2, #1
    8620:	d07f      	beq.n	8722 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48a>
    8622:	f007 fd64 	bl	100ee <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8626:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8628:	1843      	adds	r3, r0, r1
    862a:	9800      	ldr	r0, [sp, #0]
    862c:	4619      	mov	r1, r3
    862e:	b140      	cbz	r0, 8642 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    8630:	f10b 003b 	add.w	r0, fp, #59	; 0x3b
    8634:	4288      	cmp	r0, r1
    8636:	bf92      	itee	ls
    8638:	71e7      	strbls	r7, [r4, #7]
    863a:	612f      	strhi	r7, [r5, #16]
    863c:	f04f 0a01 	movhi.w	sl, #1
    8640:	d804      	bhi.n	864c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    8642:	7aa2      	ldrb	r2, [r4, #10]
    8644:	4640      	mov	r0, r8
    8646:	f7ff fc27 	bl	7e98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    864a:	b308      	cbz	r0, 8690 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    864c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    8650:	b1e0      	cbz	r0, 868c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    8652:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8656:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
    865a:	f040 0002 	orr.w	r0, r0, #2
    865e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8662:	480f      	ldr	r0, [pc, #60]	; (86a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    8664:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    8668:	6001      	str	r1, [r0, #0]
    866a:	481c      	ldr	r0, [pc, #112]	; (86dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    866c:	2100      	movs	r1, #0
    866e:	6802      	ldr	r2, [r0, #0]
    8670:	f361 4213 	bfi	r2, r1, #16, #4
    8674:	6002      	str	r2, [r0, #0]
    8676:	6960      	ldr	r0, [r4, #20]
    8678:	4919      	ldr	r1, [pc, #100]	; (86e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
    867a:	f020 0003 	bic.w	r0, r0, #3
    867e:	6160      	str	r0, [r4, #20]
    8680:	6008      	str	r0, [r1, #0]
    8682:	4919      	ldr	r1, [pc, #100]	; (86e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>)
    8684:	4817      	ldr	r0, [pc, #92]	; (86e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
    8686:	6008      	str	r0, [r1, #0]
    8688:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    868c:	e02e      	b.n	86ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>
    868e:	e036      	b.n	86fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    8690:	e04c      	b.n	872c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x494>
    8692:	e039      	b.n	8708 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    8694:	40008000 	.word	0x40008000
    8698:	4000800c 	.word	0x4000800c
    869c:	20000b80 	.word	0x20000b80
    86a0:	4001f508 	.word	0x4001f508
    86a4:	40001000 	.word	0x40001000
    86a8:	40001548 	.word	0x40001548
    86ac:	4000111c 	.word	0x4000111c
    86b0:	40001574 	.word	0x40001574
    86b4:	40008004 	.word	0x40008004
    86b8:	40008140 	.word	0x40008140
    86bc:	4001f098 	.word	0x4001f098
    86c0:	40001014 	.word	0x40001014
    86c4:	4001f504 	.word	0x4001f504
    86c8:	40001400 	.word	0x40001400
    86cc:	20000158 	.word	0x20000158
    86d0:	40001640 	.word	0x40001640
    86d4:	40008008 	.word	0x40008008
    86d8:	40001414 	.word	0x40001414
    86dc:	40001514 	.word	0x40001514
    86e0:	40001900 	.word	0x40001900
    86e4:	00023280 	.word	0x00023280
    86e8:	40001910 	.word	0x40001910
    86ec:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8854 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5bc>
    86f0:	f019 0f01 	tst.w	r9, #1
    86f4:	d01f      	beq.n	8736 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x49e>
    86f6:	f8d8 0000 	ldr.w	r0, [r8]
    86fa:	4780      	blx	r0
    86fc:	e052      	b.n	87a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x50c>
    86fe:	f640 016e 	movw	r1, #2158	; 0x86e
    8702:	203e      	movs	r0, #62	; 0x3e
    8704:	f7f7 ff7e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8708:	2a01      	cmp	r2, #1
    870a:	d005      	beq.n	8718 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x480>
    870c:	f007 fcfd 	bl	1010a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8710:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8712:	1843      	adds	r3, r0, r1
    8714:	e789      	b.n	862a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    8716:	e004      	b.n	8722 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48a>
    8718:	f000 faee 	bl	8cf8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    871c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    871e:	1843      	adds	r3, r0, r1
    8720:	e783      	b.n	862a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    8722:	f000 fadb 	bl	8cdc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8726:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8728:	1843      	adds	r3, r0, r1
    872a:	e77e      	b.n	862a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    872c:	f640 21c4 	movw	r1, #2756	; 0xac4
    8730:	203e      	movs	r0, #62	; 0x3e
    8732:	f7f7 ff67 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8736:	f019 0f02 	tst.w	r9, #2
    873a:	d02a      	beq.n	8792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fa>
    873c:	f019 0f04 	tst.w	r9, #4
    8740:	d121      	bne.n	8786 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    8742:	f007 fe43 	bl	103cc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8746:	b9f0      	cbnz	r0, 8786 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    8748:	f007 fe30 	bl	103ac <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    874c:	b9d8      	cbnz	r0, 8786 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    874e:	4842      	ldr	r0, [pc, #264]	; (8858 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c0>)
    8750:	6800      	ldr	r0, [r0, #0]
    8752:	f3c0 6b00 	ubfx	fp, r0, #24, #1
    8756:	f3c0 5342 	ubfx	r3, r0, #21, #3
    875a:	f000 020f 	and.w	r2, r0, #15
    875e:	f3c0 1103 	ubfx	r1, r0, #4, #4
    8762:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    8766:	f1bb 0f00 	cmp.w	fp, #0
    876a:	d00c      	beq.n	8786 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    876c:	2a00      	cmp	r2, #0
    876e:	bf19      	ittee	ne
    8770:	2900      	cmpne	r1, #0
    8772:	f1bc 0f00 	cmpne.w	ip, #0
    8776:	f3c0 4004 	ubfxeq	r0, r0, #16, #5
    877a:	2801      	cmpeq	r0, #1
    877c:	d103      	bne.n	8786 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    877e:	2b03      	cmp	r3, #3
    8780:	bf38      	it	cc
    8782:	f049 0904 	orrcc.w	r9, r9, #4
    8786:	ea27 0099 	bic.w	r0, r7, r9, lsr #2
    878a:	4651      	mov	r1, sl
    878c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8790:	e007      	b.n	87a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x50a>
    8792:	f019 0f28 	tst.w	r9, #40	; 0x28
    8796:	d005      	beq.n	87a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x50c>
    8798:	f8d8 2008 	ldr.w	r2, [r8, #8]
    879c:	ea27 1159 	bic.w	r1, r7, r9, lsr #5
    87a0:	4650      	mov	r0, sl
    87a2:	4790      	blx	r2
    87a4:	f019 0f10 	tst.w	r9, #16
    87a8:	bf1c      	itt	ne
    87aa:	f8d8 000c 	ldrne.w	r0, [r8, #12]
    87ae:	4780      	blxne	r0
    87b0:	7a60      	ldrb	r0, [r4, #9]
    87b2:	2802      	cmp	r0, #2
    87b4:	d118      	bne.n	87e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x550>
    87b6:	7b20      	ldrb	r0, [r4, #12]
    87b8:	b1b0      	cbz	r0, 87e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x550>
    87ba:	2802      	cmp	r0, #2
    87bc:	d006      	beq.n	87cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x534>
    87be:	2801      	cmp	r0, #1
    87c0:	d035      	beq.n	882e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x596>
    87c2:	f640 4166 	movw	r1, #3174	; 0xc66
    87c6:	203e      	movs	r0, #62	; 0x3e
    87c8:	f7f7 ff1c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87cc:	6921      	ldr	r1, [r4, #16]
    87ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    87d0:	4408      	add	r0, r1
    87d2:	4922      	ldr	r1, [pc, #136]	; (885c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c4>)
    87d4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    87da:	4921      	ldr	r1, [pc, #132]	; (8860 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c8>)
    87dc:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    87e0:	6320      	str	r0, [r4, #48]	; 0x30
    87e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    87e6:	6008      	str	r0, [r1, #0]
    87e8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    87ec:	2800      	cmp	r0, #0
    87ee:	bf18      	it	ne
    87f0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87f4:	f019 0f10 	tst.w	r9, #16
    87f8:	bf14      	ite	ne
    87fa:	9600      	strne	r6, [sp, #0]
    87fc:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8800:	9800      	ldr	r0, [sp, #0]
    8802:	1c40      	adds	r0, r0, #1
    8804:	9000      	str	r0, [sp, #0]
    8806:	f1b0 3fff 	cmp.w	r0, #4294967295
    880a:	d01d      	beq.n	8848 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>
    880c:	f8d5 0550 	ldr.w	r0, [r5, #1360]	; 0x550
    8810:	b2c0      	uxtb	r0, r0
    8812:	2804      	cmp	r0, #4
    8814:	bf18      	it	ne
    8816:	280c      	cmpne	r0, #12
    8818:	d0f2      	beq.n	8800 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    881a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    881e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8822:	f04f 0002 	mov.w	r0, #2
    8826:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    882a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    882e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8830:	6920      	ldr	r0, [r4, #16]
    8832:	4288      	cmp	r0, r1
    8834:	bf84      	itt	hi
    8836:	4909      	ldrhi	r1, [pc, #36]	; (885c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c4>)
    8838:	f8c1 0540 	strhi.w	r0, [r1, #1344]	; 0x540
    883c:	d8cc      	bhi.n	87d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x540>
    883e:	f640 4167 	movw	r1, #3175	; 0xc67
    8842:	203e      	movs	r0, #62	; 0x3e
    8844:	f7f7 fede 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8848:	f640 418f 	movw	r1, #3215	; 0xc8f
    884c:	203e      	movs	r0, #62	; 0x3e
    884e:	f7f7 fed9 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8852:	0000      	.short	0x0000
    8854:	20000b70 	.word	0x20000b70
    8858:	40001450 	.word	0x40001450
    885c:	40008004 	.word	0x40008004
    8860:	4001f504 	.word	0x4001f504

00008864 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    8864:	b510      	push	{r4, lr}
    8866:	4b19      	ldr	r3, [pc, #100]	; (88cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x68>)
    8868:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    886c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    8870:	f8c4 c620 	str.w	ip, [r4, #1568]	; 0x620
    8874:	f891 c000 	ldrb.w	ip, [r1]
    8878:	f8d1 1001 	ldr.w	r1, [r1, #1]
    887c:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    8880:	f8c4 1600 	str.w	r1, [r4, #1536]	; 0x600
    8884:	4912      	ldr	r1, [pc, #72]	; (88d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x6c>)
    8886:	f8d1 c000 	ldr.w	ip, [r1]
    888a:	2101      	movs	r1, #1
    888c:	fa01 f000 	lsl.w	r0, r1, r0
    8890:	ea4c 0100 	orr.w	r1, ip, r0
    8894:	b2c9      	uxtb	r1, r1
    8896:	b132      	cbz	r2, 88a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42>
    8898:	2a01      	cmp	r2, #1
    889a:	d00b      	beq.n	88b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    889c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    88a0:	203e      	movs	r0, #62	; 0x3e
    88a2:	f7f7 feaf 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88a6:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    88aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
    88ae:	ea22 0000 	bic.w	r0, r2, r0
    88b2:	e005      	b.n	88c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>
    88b4:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    88b8:	b2c0      	uxtb	r0, r0
    88ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
    88be:	4310      	orrs	r0, r2
    88c0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    88c4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    88c8:	bd10      	pop	{r4, pc}
    88ca:	0000      	.short	0x0000
    88cc:	40001000 	.word	0x40001000
    88d0:	40001640 	.word	0x40001640

000088d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    88d4:	4901      	ldr	r1, [pc, #4]	; (88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    88d6:	2001      	movs	r0, #1
    88d8:	7008      	strb	r0, [r1, #0]
    88da:	4770      	bx	lr
    88dc:	20000158 	.word	0x20000158
    88e0:	4a0e      	ldr	r2, [pc, #56]	; (891c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>)
    88e2:	490f      	ldr	r1, [pc, #60]	; (8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c>)
    88e4:	6813      	ldr	r3, [r2, #0]
    88e6:	b170      	cbz	r0, 8906 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32>
    88e8:	f023 0382 	bic.w	r3, r3, #130	; 0x82
    88ec:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
    88f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    88f4:	6013      	str	r3, [r2, #0]
    88f6:	680a      	ldr	r2, [r1, #0]
    88f8:	f022 0210 	bic.w	r2, r2, #16
    88fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    8900:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8904:	e005      	b.n	8912 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e>
    8906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    890a:	6013      	str	r3, [r2, #0]
    890c:	680a      	ldr	r2, [r1, #0]
    890e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    8912:	600a      	str	r2, [r1, #0]
    8914:	4903      	ldr	r1, [pc, #12]	; (8924 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x50>)
    8916:	f881 0036 	strb.w	r0, [r1, #54]	; 0x36
    891a:	4770      	bx	lr
    891c:	4000173c 	.word	0x4000173c
    8920:	4000177c 	.word	0x4000177c
    8924:	20000b80 	.word	0x20000b80
    8928:	4908      	ldr	r1, [pc, #32]	; (894c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    892a:	7a4a      	ldrb	r2, [r1, #9]
    892c:	2101      	movs	r1, #1
    892e:	2a01      	cmp	r2, #1
    8930:	bf08      	it	eq
    8932:	ea21 0090 	biceq.w	r0, r1, r0, lsr #2
    8936:	d004      	beq.n	8942 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    8938:	2a02      	cmp	r2, #2
    893a:	bf0c      	ite	eq
    893c:	ea21 0050 	biceq.w	r0, r1, r0, lsr #1
    8940:	4770      	bxne	lr
    8942:	2800      	cmp	r0, #0
    8944:	bf1c      	itt	ne
    8946:	4802      	ldrne	r0, [pc, #8]	; (8950 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    8948:	6101      	strne	r1, [r0, #16]
    894a:	4770      	bx	lr
    894c:	20000b80 	.word	0x20000b80
    8950:	40001000 	.word	0x40001000
    8954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8956:	4c3b      	ldr	r4, [pc, #236]	; (8a44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x170>)
    8958:	4605      	mov	r5, r0
    895a:	2d01      	cmp	r5, #1
    895c:	7620      	strb	r0, [r4, #24]
    895e:	483a      	ldr	r0, [pc, #232]	; (8a48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x174>)
    8960:	bf08      	it	eq
    8962:	2103      	moveq	r1, #3
    8964:	d010      	beq.n	8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    8966:	2d02      	cmp	r5, #2
    8968:	bf08      	it	eq
    896a:	2104      	moveq	r1, #4
    896c:	d00c      	beq.n	8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    896e:	2d04      	cmp	r5, #4
    8970:	bf08      	it	eq
    8972:	2106      	moveq	r1, #6
    8974:	d008      	beq.n	8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    8976:	2d08      	cmp	r5, #8
    8978:	bf08      	it	eq
    897a:	2105      	moveq	r1, #5
    897c:	d004      	beq.n	8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    897e:	f640 5186 	movw	r1, #3462	; 0xd86
    8982:	203e      	movs	r0, #62	; 0x3e
    8984:	f7f7 fe3e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8988:	6001      	str	r1, [r0, #0]
    898a:	7ea1      	ldrb	r1, [r4, #26]
    898c:	482f      	ldr	r0, [pc, #188]	; (8a4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x178>)
    898e:	5c40      	ldrb	r0, [r0, r1]
    8990:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8994:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8998:	bf3a      	itte	cc
    899a:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    899e:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    89a2:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    89a6:	4e2a      	ldr	r6, [pc, #168]	; (8a50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>)
    89a8:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
    89ac:	4a29      	ldr	r2, [pc, #164]	; (8a54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>)
    89ae:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    89b2:	6010      	str	r0, [r2, #0]
    89b4:	7a20      	ldrb	r0, [r4, #8]
    89b6:	2801      	cmp	r0, #1
    89b8:	d113      	bne.n	89e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x10e>
    89ba:	7aa0      	ldrb	r0, [r4, #10]
    89bc:	f994 2019 	ldrsb.w	r2, [r4, #25]
    89c0:	466b      	mov	r3, sp
    89c2:	f000 f9c3 	bl	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    89c6:	f99d 0000 	ldrsb.w	r0, [sp]
    89ca:	f000 f981 	bl	8cd0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    89ce:	f10d 0001 	add.w	r0, sp, #1
    89d2:	f004 f863 	bl	ca9c <mpsl_fem_pa_gain_set>
    89d6:	b120      	cbz	r0, 89e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x10e>
    89d8:	f240 6115 	movw	r1, #1557	; 0x615
    89dc:	203e      	movs	r0, #62	; 0x3e
    89de:	f7f7 fe11 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89e2:	20ff      	movs	r0, #255	; 0xff
    89e4:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    89e8:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    89ec:	f440 7088 	orr.w	r0, r0, #272	; 0x110
    89f0:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    89f4:	f007 fd04 	bl	10400 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    89f8:	b180      	cbz	r0, 8a1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    89fa:	f015 0f0c 	tst.w	r5, #12
    89fe:	d00a      	beq.n	8a16 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x142>
    8a00:	2001      	movs	r0, #1
    8a02:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8a06:	f7ff ff6b 	bl	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8a0a:	2001      	movs	r0, #1
    8a0c:	63f0      	str	r0, [r6, #60]	; 0x3c
    8a0e:	6430      	str	r0, [r6, #64]	; 0x40
    8a10:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    8a14:	e002      	b.n	8a1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    8a16:	2000      	movs	r0, #0
    8a18:	f7ff ff62 	bl	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8a1c:	4628      	mov	r0, r5
    8a1e:	f000 f8fd 	bl	8c1c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    8a22:	f007 fcd3 	bl	103cc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8a26:	2800      	cmp	r0, #0
    8a28:	bf18      	it	ne
    8a2a:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    8a2c:	f007 fcbe 	bl	103ac <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8a30:	2800      	cmp	r0, #0
    8a32:	bf18      	it	ne
    8a34:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    8a36:	4808      	ldr	r0, [pc, #32]	; (8a58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>)
    8a38:	6801      	ldr	r1, [r0, #0]
    8a3a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8a3e:	6001      	str	r1, [r0, #0]
    8a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a42:	0000      	.short	0x0000
    8a44:	20000b80 	.word	0x20000b80
    8a48:	40001510 	.word	0x40001510
    8a4c:	00008b4c 	.word	0x00008b4c
    8a50:	40001000 	.word	0x40001000
    8a54:	40001554 	.word	0x40001554
    8a58:	40001568 	.word	0x40001568
    8a5c:	b538      	push	{r3, r4, r5, lr}
    8a5e:	4a2c      	ldr	r2, [pc, #176]	; (8b10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>)
    8a60:	4604      	mov	r4, r0
    8a62:	2c01      	cmp	r4, #1
    8a64:	7610      	strb	r0, [r2, #24]
    8a66:	482b      	ldr	r0, [pc, #172]	; (8b14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x240>)
    8a68:	bf08      	it	eq
    8a6a:	2103      	moveq	r1, #3
    8a6c:	d010      	beq.n	8a90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    8a6e:	2c02      	cmp	r4, #2
    8a70:	bf08      	it	eq
    8a72:	2104      	moveq	r1, #4
    8a74:	d00c      	beq.n	8a90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    8a76:	2c04      	cmp	r4, #4
    8a78:	bf08      	it	eq
    8a7a:	2106      	moveq	r1, #6
    8a7c:	d008      	beq.n	8a90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    8a7e:	2c08      	cmp	r4, #8
    8a80:	bf08      	it	eq
    8a82:	2105      	moveq	r1, #5
    8a84:	d004      	beq.n	8a90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    8a86:	f640 5186 	movw	r1, #3462	; 0xd86
    8a8a:	203e      	movs	r0, #62	; 0x3e
    8a8c:	f7f7 fdba 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a90:	6001      	str	r1, [r0, #0]
    8a92:	7e91      	ldrb	r1, [r2, #26]
    8a94:	4820      	ldr	r0, [pc, #128]	; (8b18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>)
    8a96:	5c40      	ldrb	r0, [r0, r1]
    8a98:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8a9c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8aa0:	bf3a      	itte	cc
    8aa2:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    8aa6:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    8aaa:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    8aae:	4b1b      	ldr	r3, [pc, #108]	; (8b1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>)
    8ab0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    8ab4:	4b1a      	ldr	r3, [pc, #104]	; (8b20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24c>)
    8ab6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8aba:	6018      	str	r0, [r3, #0]
    8abc:	4620      	mov	r0, r4
    8abe:	f992 2019 	ldrsb.w	r2, [r2, #25]
    8ac2:	466b      	mov	r3, sp
    8ac4:	f000 f942 	bl	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8ac8:	f99d 0000 	ldrsb.w	r0, [sp]
    8acc:	f000 f900 	bl	8cd0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8ad0:	f10d 0001 	add.w	r0, sp, #1
    8ad4:	f003 ffe2 	bl	ca9c <mpsl_fem_pa_gain_set>
    8ad8:	b120      	cbz	r0, 8ae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x210>
    8ada:	f240 6115 	movw	r1, #1557	; 0x615
    8ade:	203e      	movs	r0, #62	; 0x3e
    8ae0:	f7f7 fd90 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ae4:	f007 fc72 	bl	103cc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8ae8:	2800      	cmp	r0, #0
    8aea:	bf08      	it	eq
    8aec:	bd38      	popeq	{r3, r4, r5, pc}
    8aee:	4a0d      	ldr	r2, [pc, #52]	; (8b24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x250>)
    8af0:	6811      	ldr	r1, [r2, #0]
    8af2:	0650      	lsls	r0, r2, #25
    8af4:	2c02      	cmp	r4, #2
    8af6:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8afa:	bf0c      	ite	eq
    8afc:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    8b00:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    8b04:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8b08:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8b0c:	6010      	str	r0, [r2, #0]
    8b0e:	bd38      	pop	{r3, r4, r5, pc}
    8b10:	20000b80 	.word	0x20000b80
    8b14:	40001510 	.word	0x40001510
    8b18:	00008b4c 	.word	0x00008b4c
    8b1c:	40001000 	.word	0x40001000
    8b20:	40001554 	.word	0x40001554
    8b24:	40001588 	.word	0x40001588
    8b28:	05dc0000 	.word	0x05dc0000
    8b2c:	000003e8 	.word	0x000003e8
	...
    8b38:	000017d4 	.word	0x000017d4
    8b3c:	a1e0a62c 	.word	0xa1e0a62c
    8b40:	a8200000 	.word	0xa8200000
    8b44:	00000000 	.word	0x00000000
    8b48:	a8200000 	.word	0xa8200000
    8b4c:	0a080604 	.word	0x0a080604
    8b50:	12100e0c 	.word	0x12100e0c
    8b54:	1c181614 	.word	0x1c181614
    8b58:	2422201e 	.word	0x2422201e
    8b5c:	2c2a2826 	.word	0x2c2a2826
    8b60:	3432302e 	.word	0x3432302e
    8b64:	3c3a3836 	.word	0x3c3a3836
    8b68:	4442403e 	.word	0x4442403e
    8b6c:	4c4a4846 	.word	0x4c4a4846
    8b70:	501a024e 	.word	0x501a024e
    8b74:	00000001 	.word	0x00000001
    8b78:	40001110 	.word	0x40001110
	...
    8b90:	00001e14 	.word	0x00001e14
    8b94:	00001130 	.word	0x00001130
    8b98:	00000000 	.word	0x00000000
    8b9c:	0000ea60 	.word	0x0000ea60
	...
    8bac:	0000ea60 	.word	0x0000ea60
    8bb0:	00000000 	.word	0x00000000
    8bb4:	00000028 	.word	0x00000028
    8bb8:	00000018 	.word	0x00000018
    8bbc:	00000000 	.word	0x00000000
    8bc0:	00000150 	.word	0x00000150
	...
    8bd0:	00000150 	.word	0x00000150
    8bd4:	00000000 	.word	0x00000000
    8bd8:	00001e14 	.word	0x00001e14
    8bdc:	00001130 	.word	0x00001130
    8be0:	00000000 	.word	0x00000000
    8be4:	00005fb4 	.word	0x00005fb4
	...
    8bf4:	0000733c 	.word	0x0000733c
    8bf8:	00000000 	.word	0x00000000
    8bfc:	00001770 	.word	0x00001770
    8c00:	00000fa0 	.word	0x00000fa0
    8c04:	00000000 	.word	0x00000000
    8c08:	0000283c 	.word	0x0000283c
	...
    8c18:	0000283c 	.word	0x0000283c

00008c1c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
    8c1c:	b510      	push	{r4, lr}
    8c1e:	4604      	mov	r4, r0
    8c20:	f007 fbee 	bl	10400 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8c24:	2800      	cmp	r0, #0
    8c26:	bf08      	it	eq
    8c28:	bd10      	popeq	{r4, pc}
    8c2a:	4908      	ldr	r1, [pc, #32]	; (8c4c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
    8c2c:	2c08      	cmp	r4, #8
    8c2e:	bf18      	it	ne
    8c30:	2c04      	cmpne	r4, #4
    8c32:	6808      	ldr	r0, [r1, #0]
    8c34:	bf03      	ittte	eq
    8c36:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
    8c3a:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
    8c3e:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    8c42:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
    8c46:	6008      	str	r0, [r1, #0]
    8c48:	bd10      	pop	{r4, pc}
    8c4a:	0000      	.short	0x0000
    8c4c:	40001740 	.word	0x40001740

00008c50 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8c50:	b570      	push	{r4, r5, r6, lr}
    8c52:	4605      	mov	r5, r0
    8c54:	4614      	mov	r4, r2
    8c56:	4608      	mov	r0, r1
    8c58:	f7ff f918 	bl	7e8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8c5c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8c60:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8c64:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8c68:	4807      	ldr	r0, [pc, #28]	; (8c88 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8c6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8c6e:	4408      	add	r0, r1
    8c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c74:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8c78:	fbb0 f5f1 	udiv	r5, r0, r1
    8c7c:	4620      	mov	r0, r4
    8c7e:	f7ff f8b7 	bl	7df0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c82:	4428      	add	r0, r5
    8c84:	1d40      	adds	r0, r0, #5
    8c86:	bd70      	pop	{r4, r5, r6, pc}
    8c88:	00008d28 	.word	0x00008d28

00008c8c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8c8c:	b570      	push	{r4, r5, r6, lr}
    8c8e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8ccc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x40>
    8c92:	461c      	mov	r4, r3
    8c94:	4b0c      	ldr	r3, [pc, #48]	; (8cc8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c96:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
    8c9a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    8c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ca2:	ebcc 10c0 	rsb	r0, ip, r0, lsl #7
    8ca6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8caa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8cae:	4418      	add	r0, r3
    8cb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8cb4:	fbb0 f5f1 	udiv	r5, r0, r1
    8cb8:	4610      	mov	r0, r2
    8cba:	f7ff f899 	bl	7df0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8cbe:	4428      	add	r0, r5
    8cc0:	4420      	add	r0, r4
    8cc2:	1d40      	adds	r0, r0, #5
    8cc4:	bd70      	pop	{r4, r5, r6, pc}
    8cc6:	0000      	.short	0x0000
    8cc8:	00008d28 	.word	0x00008d28
    8ccc:	00008d14 	.word	0x00008d14

00008cd0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8cd0:	4901      	ldr	r1, [pc, #4]	; (8cd8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8cd2:	b2c0      	uxtb	r0, r0
    8cd4:	6008      	str	r0, [r1, #0]
    8cd6:	4770      	bx	lr
    8cd8:	4000150c 	.word	0x4000150c

00008cdc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8cdc:	4a05      	ldr	r2, [pc, #20]	; (8cf4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8cde:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ce6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8cea:	fbb1 f1f2 	udiv	r1, r1, r2
    8cee:	4408      	add	r0, r1
    8cf0:	1e80      	subs	r0, r0, #2
    8cf2:	4770      	bx	lr
    8cf4:	00008d14 	.word	0x00008d14

00008cf8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8cf8:	4a05      	ldr	r2, [pc, #20]	; (8d10 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8cfa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8d02:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8d06:	fbb1 f1f2 	udiv	r1, r1, r2
    8d0a:	4408      	add	r0, r1
    8d0c:	4770      	bx	lr
    8d0e:	0000      	.short	0x0000
    8d10:	00008d14 	.word	0x00008d14
    8d14:	05dc0000 	.word	0x05dc0000
    8d18:	000003e8 	.word	0x000003e8
	...
    8d24:	000017d4 	.word	0x000017d4
    8d28:	00000000 	.word	0x00000000
    8d2c:	00001e14 	.word	0x00001e14
    8d30:	00001130 	.word	0x00001130
    8d34:	00000000 	.word	0x00000000
    8d38:	0000ea60 	.word	0x0000ea60
	...
    8d48:	0000ea60 	.word	0x0000ea60

00008d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d50:	461e      	mov	r6, r3
    8d52:	4690      	mov	r8, r2
    8d54:	460f      	mov	r7, r1
    8d56:	4605      	mov	r5, r0
    8d58:	f000 f85a 	bl	8e10 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8d5c:	4c25      	ldr	r4, [pc, #148]	; (8df4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa8>)
    8d5e:	4681      	mov	r9, r0
    8d60:	7820      	ldrb	r0, [r4, #0]
    8d62:	42a8      	cmp	r0, r5
    8d64:	bf04      	itt	eq
    8d66:	7860      	ldrbeq	r0, [r4, #1]
    8d68:	42b8      	cmpeq	r0, r7
    8d6a:	d10b      	bne.n	8d84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
    8d6c:	f994 0002 	ldrsb.w	r0, [r4, #2]
    8d70:	4540      	cmp	r0, r8
    8d72:	bf04      	itt	eq
    8d74:	78e0      	ldrbeq	r0, [r4, #3]
    8d76:	4548      	cmpeq	r0, r9
    8d78:	d104      	bne.n	8d84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
    8d7a:	88a0      	ldrh	r0, [r4, #4]
    8d7c:	8030      	strh	r0, [r6, #0]
    8d7e:	79a0      	ldrb	r0, [r4, #6]
    8d80:	70b0      	strb	r0, [r6, #2]
    8d82:	e033      	b.n	8dec <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa0>
    8d84:	4642      	mov	r2, r8
    8d86:	2d01      	cmp	r5, #1
    8d88:	bf08      	it	eq
    8d8a:	2000      	moveq	r0, #0
    8d8c:	d010      	beq.n	8db0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8d8e:	2d02      	cmp	r5, #2
    8d90:	bf08      	it	eq
    8d92:	2001      	moveq	r0, #1
    8d94:	d00c      	beq.n	8db0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8d96:	2d04      	cmp	r5, #4
    8d98:	bf08      	it	eq
    8d9a:	2003      	moveq	r0, #3
    8d9c:	d008      	beq.n	8db0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8d9e:	2d08      	cmp	r5, #8
    8da0:	bf08      	it	eq
    8da2:	2002      	moveq	r0, #2
    8da4:	d004      	beq.n	8db0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8da6:	f240 4162 	movw	r1, #1122	; 0x462
    8daa:	2006      	movs	r0, #6
    8dac:	f7f7 fc2a 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8db0:	466b      	mov	r3, sp
    8db2:	4639      	mov	r1, r7
    8db4:	f000 f8a4 	bl	8f00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8db8:	b118      	cbz	r0, 8dc2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8dba:	213d      	movs	r1, #61	; 0x3d
    8dbc:	2075      	movs	r0, #117	; 0x75
    8dbe:	f7f7 fc21 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dc2:	4638      	mov	r0, r7
    8dc4:	f7fe fbe8 	bl	7598 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8dc8:	4602      	mov	r2, r0
    8dca:	2300      	movs	r3, #0
    8dcc:	4631      	mov	r1, r6
    8dce:	f99d 0000 	ldrsb.w	r0, [sp]
    8dd2:	f003 fe6f 	bl	cab4 <mpsl_fem_tx_power_split>
    8dd6:	71e0      	strb	r0, [r4, #7]
    8dd8:	8830      	ldrh	r0, [r6, #0]
    8dda:	80a0      	strh	r0, [r4, #4]
    8ddc:	78b0      	ldrb	r0, [r6, #2]
    8dde:	71a0      	strb	r0, [r4, #6]
    8de0:	7025      	strb	r5, [r4, #0]
    8de2:	7067      	strb	r7, [r4, #1]
    8de4:	f884 8002 	strb.w	r8, [r4, #2]
    8de8:	f884 9003 	strb.w	r9, [r4, #3]
    8dec:	f994 0007 	ldrsb.w	r0, [r4, #7]
    8df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8df4:	20000224 	.word	0x20000224

00008df8 <sym_J56TGVTWOJVG4QNSVN7ORTC7AKSOICPGYZ3JG6A>:
    8df8:	4901      	ldr	r1, [pc, #4]	; (8e00 <sym_J56TGVTWOJVG4QNSVN7ORTC7AKSOICPGYZ3JG6A+0x8>)
    8dfa:	6008      	str	r0, [r1, #0]
    8dfc:	4770      	bx	lr
    8dfe:	0000      	.short	0x0000
    8e00:	20000178 	.word	0x20000178

00008e04 <sym_GNNG3GPFBTJTB7WCYU4SVHQQOQZGAXXXZFSD6PY>:
    8e04:	4901      	ldr	r1, [pc, #4]	; (8e0c <sym_GNNG3GPFBTJTB7WCYU4SVHQQOQZGAXXXZFSD6PY+0x8>)
    8e06:	6048      	str	r0, [r1, #4]
    8e08:	4770      	bx	lr
    8e0a:	0000      	.short	0x0000
    8e0c:	20000178 	.word	0x20000178

00008e10 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8e10:	4801      	ldr	r0, [pc, #4]	; (8e18 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8e12:	7800      	ldrb	r0, [r0, #0]
    8e14:	4770      	bx	lr
    8e16:	0000      	.short	0x0000
    8e18:	20000180 	.word	0x20000180

00008e1c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8e1c:	b570      	push	{r4, r5, r6, lr}
    8e1e:	4c17      	ldr	r4, [pc, #92]	; (8e7c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8e20:	7860      	ldrb	r0, [r4, #1]
    8e22:	2800      	cmp	r0, #0
    8e24:	d123      	bne.n	8e6e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8e26:	2001      	movs	r0, #1
    8e28:	7060      	strb	r0, [r4, #1]
    8e2a:	f007 faa9 	bl	10380 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8e2e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8e32:	b928      	cbnz	r0, 8e40 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8e34:	f007 fada 	bl	103ec <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8e38:	b910      	cbnz	r0, 8e40 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8e3a:	f007 fae1 	bl	10400 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8e3e:	b120      	cbz	r0, 8e4a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8e40:	480f      	ldr	r0, [pc, #60]	; (8e80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8e42:	6060      	str	r0, [r4, #4]
    8e44:	70a5      	strb	r5, [r4, #2]
    8e46:	2008      	movs	r0, #8
    8e48:	e010      	b.n	8e6c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8e4a:	f007 fa6e 	bl	1032a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8e4e:	b940      	cbnz	r0, 8e62 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8e50:	f007 fa75 	bl	1033e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8e54:	b928      	cbnz	r0, 8e62 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8e56:	f007 fa89 	bl	1036c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8e5a:	b910      	cbnz	r0, 8e62 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8e5c:	f007 fa9a 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8e60:	b130      	cbz	r0, 8e70 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8e62:	4807      	ldr	r0, [pc, #28]	; (8e80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8e64:	3031      	adds	r0, #49	; 0x31
    8e66:	6060      	str	r0, [r4, #4]
    8e68:	70a5      	strb	r5, [r4, #2]
    8e6a:	2004      	movs	r0, #4
    8e6c:	70e0      	strb	r0, [r4, #3]
    8e6e:	bd70      	pop	{r4, r5, r6, pc}
    8e70:	f240 113f 	movw	r1, #319	; 0x13f
    8e74:	2074      	movs	r0, #116	; 0x74
    8e76:	f003 fb9d 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e7a:	0000      	.short	0x0000
    8e7c:	20000180 	.word	0x20000180
    8e80:	0001071d 	.word	0x0001071d

00008e84 <mpsl_tx_power_radio_supported_power_adjust>:
    8e84:	4a06      	ldr	r2, [pc, #24]	; (8ea0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8e86:	b500      	push	{lr}
    8e88:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8e8c:	4290      	cmp	r0, r2
    8e8e:	db01      	blt.n	8e94 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8e90:	4610      	mov	r0, r2
    8e92:	bd00      	pop	{pc}
    8e94:	f000 f808 	bl	8ea8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8e98:	4902      	ldr	r1, [pc, #8]	; (8ea4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8e9a:	5608      	ldrsb	r0, [r1, r0]
    8e9c:	bd00      	pop	{pc}
    8e9e:	0000      	.short	0x0000
    8ea0:	20000180 	.word	0x20000180
    8ea4:	0001070f 	.word	0x0001070f

00008ea8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8ea8:	4602      	mov	r2, r0
    8eaa:	4813      	ldr	r0, [pc, #76]	; (8ef8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8eac:	b510      	push	{r4, lr}
    8eae:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	db01      	blt.n	8eba <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8eb6:	200d      	movs	r0, #13
    8eb8:	bd10      	pop	{r4, pc}
    8eba:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8ebe:	429a      	cmp	r2, r3
    8ec0:	dc01      	bgt.n	8ec6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8ec2:	2000      	movs	r0, #0
    8ec4:	bd10      	pop	{r4, pc}
    8ec6:	b101      	cbz	r1, 8eca <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8ec8:	2101      	movs	r1, #1
    8eca:	1ad4      	subs	r4, r2, r3
    8ecc:	6843      	ldr	r3, [r0, #4]
    8ece:	5d18      	ldrb	r0, [r3, r4]
    8ed0:	4c0a      	ldr	r4, [pc, #40]	; (8efc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8ed2:	5624      	ldrsb	r4, [r4, r0]
    8ed4:	4294      	cmp	r4, r2
    8ed6:	d0f5      	beq.n	8ec4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8ed8:	4c08      	ldr	r4, [pc, #32]	; (8efc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8eda:	4408      	add	r0, r1
    8edc:	343f      	adds	r4, #63	; 0x3f
    8ede:	b2c0      	uxtb	r0, r0
    8ee0:	b2d2      	uxtb	r2, r2
    8ee2:	42a3      	cmp	r3, r4
    8ee4:	d1ee      	bne.n	8ec4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8ee6:	2900      	cmp	r1, #0
    8ee8:	d0ec      	beq.n	8ec4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8eea:	2a01      	cmp	r2, #1
    8eec:	d001      	beq.n	8ef2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8eee:	2a02      	cmp	r2, #2
    8ef0:	d1e8      	bne.n	8ec4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8ef2:	1c40      	adds	r0, r0, #1
    8ef4:	b2c0      	uxtb	r0, r0
    8ef6:	bd10      	pop	{r4, pc}
    8ef8:	20000180 	.word	0x20000180
    8efc:	0001070f 	.word	0x0001070f

00008f00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f04:	461c      	mov	r4, r3
    8f06:	4690      	mov	r8, r2
    8f08:	460d      	mov	r5, r1
    8f0a:	4606      	mov	r6, r0
    8f0c:	f06f 0715 	mvn.w	r7, #21
    8f10:	2804      	cmp	r0, #4
    8f12:	d804      	bhi.n	8f1e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8f14:	b11c      	cbz	r4, 8f1e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8f16:	f007 f90c 	bl	10132 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x8>
    8f1a:	42a8      	cmp	r0, r5
    8f1c:	d802      	bhi.n	8f24 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8f1e:	4638      	mov	r0, r7
    8f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f24:	4805      	ldr	r0, [pc, #20]	; (8f3c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8f26:	4642      	mov	r2, r8
    8f28:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8f2c:	b118      	cbz	r0, 8f36 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8f2e:	5740      	ldrsb	r0, [r0, r5]
    8f30:	4282      	cmp	r2, r0
    8f32:	dd00      	ble.n	8f36 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8f34:	4602      	mov	r2, r0
    8f36:	7022      	strb	r2, [r4, #0]
    8f38:	2000      	movs	r0, #0
    8f3a:	e7f1      	b.n	8f20 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8f3c:	20000bc8 	.word	0x20000bc8

00008f40 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8f40:	4801      	ldr	r0, [pc, #4]	; (8f48 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8f42:	7800      	ldrb	r0, [r0, #0]
    8f44:	4770      	bx	lr
    8f46:	0000      	.short	0x0000
    8f48:	20000188 	.word	0x20000188

00008f4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8f4c:	4905      	ldr	r1, [pc, #20]	; (8f64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8f4e:	780a      	ldrb	r2, [r1, #0]
    8f50:	4290      	cmp	r0, r2
    8f52:	d301      	bcc.n	8f58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8f54:	2000      	movs	r0, #0
    8f56:	4770      	bx	lr
    8f58:	6849      	ldr	r1, [r1, #4]
    8f5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8f5e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8f62:	4770      	bx	lr
    8f64:	20000188 	.word	0x20000188

00008f68 <MPSL_IRQ_RADIO_Handler>:
    8f68:	490e      	ldr	r1, [pc, #56]	; (8fa4 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8f6a:	b510      	push	{r4, lr}
    8f6c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8f70:	2820      	cmp	r0, #32
    8f72:	d012      	beq.n	8f9a <MPSL_IRQ_RADIO_Handler+0x32>
    8f74:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8f78:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8f7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8f80:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8f84:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8f88:	6840      	ldr	r0, [r0, #4]
    8f8a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8f8e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f96:	2104      	movs	r1, #4
    8f98:	4710      	bx	r2
    8f9a:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8f9e:	2070      	movs	r0, #112	; 0x70
    8fa0:	f003 fb08 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8fa4:	20000fdc 	.word	0x20000fdc
    8fa8:	b570      	push	{r4, r5, r6, lr}
    8faa:	4605      	mov	r5, r0
    8fac:	2a20      	cmp	r2, #32
    8fae:	d028      	beq.n	9002 <MPSL_IRQ_RADIO_Handler+0x9a>
    8fb0:	4819      	ldr	r0, [pc, #100]	; (9018 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8fb2:	4c1a      	ldr	r4, [pc, #104]	; (901c <MPSL_IRQ_RADIO_Handler+0xb4>)
    8fb4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8fb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8fbc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8fc0:	4423      	add	r3, r4
    8fc2:	2920      	cmp	r1, #32
    8fc4:	d022      	beq.n	900c <MPSL_IRQ_RADIO_Handler+0xa4>
    8fc6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8fca:	7840      	ldrb	r0, [r0, #1]
    8fcc:	784c      	ldrb	r4, [r1, #1]
    8fce:	7048      	strb	r0, [r1, #1]
    8fd0:	4620      	mov	r0, r4
    8fd2:	4601      	mov	r1, r0
    8fd4:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8fd8:	4291      	cmp	r1, r2
    8fda:	7005      	strb	r5, [r0, #0]
    8fdc:	7840      	ldrb	r0, [r0, #1]
    8fde:	d1f8      	bne.n	8fd2 <MPSL_IRQ_RADIO_Handler+0x6a>
    8fe0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8fe4:	2a20      	cmp	r2, #32
    8fe6:	bf1a      	itte	ne
    8fe8:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8fec:	7054      	strbne	r4, [r2, #1]
    8fee:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8ff2:	2220      	movs	r2, #32
    8ff4:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8ff8:	f88c 2001 	strb.w	r2, [ip, #1]
    8ffc:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    9000:	bd70      	pop	{r4, r5, r6, pc}
    9002:	f44f 7126 	mov.w	r1, #664	; 0x298
    9006:	2070      	movs	r0, #112	; 0x70
    9008:	f003 fad4 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    900c:	f893 4020 	ldrb.w	r4, [r3, #32]
    9010:	7840      	ldrb	r0, [r0, #1]
    9012:	f883 0020 	strb.w	r0, [r3, #32]
    9016:	e7db      	b.n	8fd0 <MPSL_IRQ_RADIO_Handler+0x68>
    9018:	20000f5c 	.word	0x20000f5c
    901c:	20000fdc 	.word	0x20000fdc
    9020:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9024:	b08d      	sub	sp, #52	; 0x34
    9026:	4615      	mov	r5, r2
    9028:	460c      	mov	r4, r1
    902a:	f002 f9f1 	bl	b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    902e:	4428      	add	r0, r5
    9030:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9034:	9008      	str	r0, [sp, #32]
    9036:	6821      	ldr	r1, [r4, #0]
    9038:	1a08      	subs	r0, r1, r0
    903a:	0200      	lsls	r0, r0, #8
    903c:	17c1      	asrs	r1, r0, #31
    903e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9042:	1200      	asrs	r0, r0, #8
    9044:	2800      	cmp	r0, #0
    9046:	f300 80f0 	bgt.w	922a <MPSL_IRQ_RADIO_Handler+0x2c2>
    904a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    904e:	48cd      	ldr	r0, [pc, #820]	; (9384 <MPSL_IRQ_RADIO_Handler+0x41c>)
    9050:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    9054:	4408      	add	r0, r1
    9056:	9009      	str	r0, [sp, #36]	; 0x24
    9058:	f890 5020 	ldrb.w	r5, [r0, #32]
    905c:	2020      	movs	r0, #32
    905e:	4eca      	ldr	r6, [pc, #808]	; (9388 <MPSL_IRQ_RADIO_Handler+0x420>)
    9060:	f10d 0a18 	add.w	sl, sp, #24
    9064:	f10d 091c 	add.w	r9, sp, #28
    9068:	f88d 0018 	strb.w	r0, [sp, #24]
    906c:	2d20      	cmp	r5, #32
    906e:	bf1c      	itt	ne
    9070:	48c6      	ldrne	r0, [pc, #792]	; (938c <MPSL_IRQ_RADIO_Handler+0x424>)
    9072:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    9076:	d038      	beq.n	90ea <MPSL_IRQ_RADIO_Handler+0x182>
    9078:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    907c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9080:	f100 0108 	add.w	r1, r0, #8
    9084:	68c0      	ldr	r0, [r0, #12]
    9086:	6827      	ldr	r7, [r4, #0]
    9088:	1a38      	subs	r0, r7, r0
    908a:	0200      	lsls	r0, r0, #8
    908c:	17c2      	asrs	r2, r0, #31
    908e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9092:	1200      	asrs	r0, r0, #8
    9094:	d429      	bmi.n	90ea <MPSL_IRQ_RADIO_Handler+0x182>
    9096:	89e0      	ldrh	r0, [r4, #14]
    9098:	b300      	cbz	r0, 90dc <MPSL_IRQ_RADIO_Handler+0x174>
    909a:	89c8      	ldrh	r0, [r1, #14]
    909c:	b9f0      	cbnz	r0, 90dc <MPSL_IRQ_RADIO_Handler+0x174>
    909e:	6808      	ldr	r0, [r1, #0]
    90a0:	9003      	str	r0, [sp, #12]
    90a2:	f003 f8e7 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90a6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90aa:	bf08      	it	eq
    90ac:	200d      	moveq	r0, #13
    90ae:	d00b      	beq.n	90c8 <MPSL_IRQ_RADIO_Handler+0x160>
    90b0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90b4:	3856      	subs	r0, #86	; 0x56
    90b6:	bf08      	it	eq
    90b8:	201c      	moveq	r0, #28
    90ba:	d005      	beq.n	90c8 <MPSL_IRQ_RADIO_Handler+0x160>
    90bc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90c0:	389f      	subs	r0, #159	; 0x9f
    90c2:	bf14      	ite	ne
    90c4:	2000      	movne	r0, #0
    90c6:	2032      	moveq	r0, #50	; 0x32
    90c8:	1c41      	adds	r1, r0, #1
    90ca:	9803      	ldr	r0, [sp, #12]
    90cc:	1a38      	subs	r0, r7, r0
    90ce:	0200      	lsls	r0, r0, #8
    90d0:	17c2      	asrs	r2, r0, #31
    90d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90d6:	1200      	asrs	r0, r0, #8
    90d8:	4288      	cmp	r0, r1
    90da:	db06      	blt.n	90ea <MPSL_IRQ_RADIO_Handler+0x182>
    90dc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    90e0:	f88a 5000 	strb.w	r5, [sl]
    90e4:	7845      	ldrb	r5, [r0, #1]
    90e6:	2d20      	cmp	r5, #32
    90e8:	d1c6      	bne.n	9078 <MPSL_IRQ_RADIO_Handler+0x110>
    90ea:	f89a 0000 	ldrb.w	r0, [sl]
    90ee:	f889 0000 	strb.w	r0, [r9]
    90f2:	2d20      	cmp	r5, #32
    90f4:	bf1c      	itt	ne
    90f6:	48a5      	ldrne	r0, [pc, #660]	; (938c <MPSL_IRQ_RADIO_Handler+0x424>)
    90f8:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    90fc:	f000 813e 	beq.w	937c <MPSL_IRQ_RADIO_Handler+0x414>
    9100:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9104:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9108:	6861      	ldr	r1, [r4, #4]
    910a:	f8d7 8008 	ldr.w	r8, [r7, #8]
    910e:	f107 0008 	add.w	r0, r7, #8
    9112:	eba8 0101 	sub.w	r1, r8, r1
    9116:	0209      	lsls	r1, r1, #8
    9118:	17ca      	asrs	r2, r1, #31
    911a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    911e:	1209      	asrs	r1, r1, #8
    9120:	d427      	bmi.n	9172 <MPSL_IRQ_RADIO_Handler+0x20a>
    9122:	89c0      	ldrh	r0, [r0, #14]
    9124:	2800      	cmp	r0, #0
    9126:	f000 8129 	beq.w	937c <MPSL_IRQ_RADIO_Handler+0x414>
    912a:	89e0      	ldrh	r0, [r4, #14]
    912c:	2800      	cmp	r0, #0
    912e:	f040 8125 	bne.w	937c <MPSL_IRQ_RADIO_Handler+0x414>
    9132:	f8d4 a000 	ldr.w	sl, [r4]
    9136:	f003 f89d 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    913a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    913e:	bf08      	it	eq
    9140:	200d      	moveq	r0, #13
    9142:	d00b      	beq.n	915c <MPSL_IRQ_RADIO_Handler+0x1f4>
    9144:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9148:	3856      	subs	r0, #86	; 0x56
    914a:	bf08      	it	eq
    914c:	201c      	moveq	r0, #28
    914e:	d005      	beq.n	915c <MPSL_IRQ_RADIO_Handler+0x1f4>
    9150:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9154:	389f      	subs	r0, #159	; 0x9f
    9156:	bf14      	ite	ne
    9158:	2000      	movne	r0, #0
    915a:	2032      	moveq	r0, #50	; 0x32
    915c:	1c41      	adds	r1, r0, #1
    915e:	eba8 000a 	sub.w	r0, r8, sl
    9162:	0200      	lsls	r0, r0, #8
    9164:	17c2      	asrs	r2, r0, #31
    9166:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    916a:	1200      	asrs	r0, r0, #8
    916c:	4288      	cmp	r0, r1
    916e:	f280 8105 	bge.w	937c <MPSL_IRQ_RADIO_Handler+0x414>
    9172:	f889 5000 	strb.w	r5, [r9]
    9176:	7e38      	ldrb	r0, [r7, #24]
    9178:	7c21      	ldrb	r1, [r4, #16]
    917a:	4288      	cmp	r0, r1
    917c:	d906      	bls.n	918c <MPSL_IRQ_RADIO_Handler+0x224>
    917e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9182:	7845      	ldrb	r5, [r0, #1]
    9184:	2d20      	cmp	r5, #32
    9186:	d1bb      	bne.n	9100 <MPSL_IRQ_RADIO_Handler+0x198>
    9188:	f000 b8f8 	b.w	937c <MPSL_IRQ_RADIO_Handler+0x414>
    918c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    9190:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9194:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9198:	8ac1      	ldrh	r1, [r0, #22]
    919a:	68c5      	ldr	r5, [r0, #12]
    919c:	bbe1      	cbnz	r1, 9218 <MPSL_IRQ_RADIO_Handler+0x2b0>
    919e:	89e1      	ldrh	r1, [r4, #14]
    91a0:	b3d1      	cbz	r1, 9218 <MPSL_IRQ_RADIO_Handler+0x2b0>
    91a2:	6887      	ldr	r7, [r0, #8]
    91a4:	f003 f866 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91a8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91ac:	bf08      	it	eq
    91ae:	200d      	moveq	r0, #13
    91b0:	d00b      	beq.n	91ca <MPSL_IRQ_RADIO_Handler+0x262>
    91b2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91b6:	3856      	subs	r0, #86	; 0x56
    91b8:	bf08      	it	eq
    91ba:	201c      	moveq	r0, #28
    91bc:	d005      	beq.n	91ca <MPSL_IRQ_RADIO_Handler+0x262>
    91be:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91c2:	389f      	subs	r0, #159	; 0x9f
    91c4:	bf14      	ite	ne
    91c6:	2000      	movne	r0, #0
    91c8:	2032      	moveq	r0, #50	; 0x32
    91ca:	1c41      	adds	r1, r0, #1
    91cc:	1be8      	subs	r0, r5, r7
    91ce:	0200      	lsls	r0, r0, #8
    91d0:	17c2      	asrs	r2, r0, #31
    91d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91d6:	1200      	asrs	r0, r0, #8
    91d8:	4288      	cmp	r0, r1
    91da:	da1d      	bge.n	9218 <MPSL_IRQ_RADIO_Handler+0x2b0>
    91dc:	f003 f84a 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91e0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91e4:	bf08      	it	eq
    91e6:	200d      	moveq	r0, #13
    91e8:	d00b      	beq.n	9202 <MPSL_IRQ_RADIO_Handler+0x29a>
    91ea:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91ee:	3856      	subs	r0, #86	; 0x56
    91f0:	bf08      	it	eq
    91f2:	201c      	moveq	r0, #28
    91f4:	d005      	beq.n	9202 <MPSL_IRQ_RADIO_Handler+0x29a>
    91f6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91fa:	389f      	subs	r0, #159	; 0x9f
    91fc:	bf14      	ite	ne
    91fe:	2000      	movne	r0, #0
    9200:	2032      	moveq	r0, #50	; 0x32
    9202:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9206:	1c40      	adds	r0, r0, #1
    9208:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    920c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9210:	6889      	ldr	r1, [r1, #8]
    9212:	4408      	add	r0, r1
    9214:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    9218:	9808      	ldr	r0, [sp, #32]
    921a:	1a28      	subs	r0, r5, r0
    921c:	0200      	lsls	r0, r0, #8
    921e:	17c1      	asrs	r1, r0, #31
    9220:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9224:	1200      	asrs	r0, r0, #8
    9226:	2800      	cmp	r0, #0
    9228:	dd03      	ble.n	9232 <MPSL_IRQ_RADIO_Handler+0x2ca>
    922a:	b011      	add	sp, #68	; 0x44
    922c:	2000      	movs	r0, #0
    922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9232:	6820      	ldr	r0, [r4, #0]
    9234:	42a8      	cmp	r0, r5
    9236:	d902      	bls.n	923e <MPSL_IRQ_RADIO_Handler+0x2d6>
    9238:	68a1      	ldr	r1, [r4, #8]
    923a:	1c49      	adds	r1, r1, #1
    923c:	60a1      	str	r1, [r4, #8]
    923e:	6861      	ldr	r1, [r4, #4]
    9240:	f10d 0a18 	add.w	sl, sp, #24
    9244:	1a08      	subs	r0, r1, r0
    9246:	4428      	add	r0, r5
    9248:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    924c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9250:	e9c4 1000 	strd	r1, r0, [r4]
    9254:	9810      	ldr	r0, [sp, #64]	; 0x40
    9256:	900b      	str	r0, [sp, #44]	; 0x2c
    9258:	9809      	ldr	r0, [sp, #36]	; 0x24
    925a:	f10d 081c 	add.w	r8, sp, #28
    925e:	f890 5020 	ldrb.w	r5, [r0, #32]
    9262:	2020      	movs	r0, #32
    9264:	f88d 0018 	strb.w	r0, [sp, #24]
    9268:	2d20      	cmp	r5, #32
    926a:	d03c      	beq.n	92e6 <MPSL_IRQ_RADIO_Handler+0x37e>
    926c:	4947      	ldr	r1, [pc, #284]	; (938c <MPSL_IRQ_RADIO_Handler+0x424>)
    926e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9270:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    9274:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9278:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    927c:	f100 0108 	add.w	r1, r0, #8
    9280:	68c0      	ldr	r0, [r0, #12]
    9282:	6827      	ldr	r7, [r4, #0]
    9284:	1a38      	subs	r0, r7, r0
    9286:	0200      	lsls	r0, r0, #8
    9288:	17c2      	asrs	r2, r0, #31
    928a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    928e:	1200      	asrs	r0, r0, #8
    9290:	d429      	bmi.n	92e6 <MPSL_IRQ_RADIO_Handler+0x37e>
    9292:	89e0      	ldrh	r0, [r4, #14]
    9294:	b300      	cbz	r0, 92d8 <MPSL_IRQ_RADIO_Handler+0x370>
    9296:	89c8      	ldrh	r0, [r1, #14]
    9298:	b9f0      	cbnz	r0, 92d8 <MPSL_IRQ_RADIO_Handler+0x370>
    929a:	f8d1 9000 	ldr.w	r9, [r1]
    929e:	f002 ffe9 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92a2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92a6:	bf08      	it	eq
    92a8:	200d      	moveq	r0, #13
    92aa:	d00b      	beq.n	92c4 <MPSL_IRQ_RADIO_Handler+0x35c>
    92ac:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    92b0:	3856      	subs	r0, #86	; 0x56
    92b2:	bf08      	it	eq
    92b4:	201c      	moveq	r0, #28
    92b6:	d005      	beq.n	92c4 <MPSL_IRQ_RADIO_Handler+0x35c>
    92b8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    92bc:	389f      	subs	r0, #159	; 0x9f
    92be:	bf14      	ite	ne
    92c0:	2000      	movne	r0, #0
    92c2:	2032      	moveq	r0, #50	; 0x32
    92c4:	1c41      	adds	r1, r0, #1
    92c6:	eba7 0009 	sub.w	r0, r7, r9
    92ca:	0200      	lsls	r0, r0, #8
    92cc:	17c2      	asrs	r2, r0, #31
    92ce:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    92d2:	1200      	asrs	r0, r0, #8
    92d4:	4288      	cmp	r0, r1
    92d6:	db06      	blt.n	92e6 <MPSL_IRQ_RADIO_Handler+0x37e>
    92d8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    92dc:	f88a 5000 	strb.w	r5, [sl]
    92e0:	7845      	ldrb	r5, [r0, #1]
    92e2:	2d20      	cmp	r5, #32
    92e4:	d1c6      	bne.n	9274 <MPSL_IRQ_RADIO_Handler+0x30c>
    92e6:	f89a 0000 	ldrb.w	r0, [sl]
    92ea:	f888 0000 	strb.w	r0, [r8]
    92ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    92f0:	2d20      	cmp	r5, #32
    92f2:	bf1c      	itt	ne
    92f4:	4925      	ldrne	r1, [pc, #148]	; (938c <MPSL_IRQ_RADIO_Handler+0x424>)
    92f6:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    92fa:	d03f      	beq.n	937c <MPSL_IRQ_RADIO_Handler+0x414>
    92fc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9300:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9304:	6860      	ldr	r0, [r4, #4]
    9306:	f8d7 9008 	ldr.w	r9, [r7, #8]
    930a:	f107 0108 	add.w	r1, r7, #8
    930e:	eba9 0000 	sub.w	r0, r9, r0
    9312:	0200      	lsls	r0, r0, #8
    9314:	17c2      	asrs	r2, r0, #31
    9316:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    931a:	1200      	asrs	r0, r0, #8
    931c:	d422      	bmi.n	9364 <MPSL_IRQ_RADIO_Handler+0x3fc>
    931e:	89c8      	ldrh	r0, [r1, #14]
    9320:	b360      	cbz	r0, 937c <MPSL_IRQ_RADIO_Handler+0x414>
    9322:	89e0      	ldrh	r0, [r4, #14]
    9324:	bb50      	cbnz	r0, 937c <MPSL_IRQ_RADIO_Handler+0x414>
    9326:	f8d4 a000 	ldr.w	sl, [r4]
    932a:	f002 ffa3 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    932e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9332:	bf08      	it	eq
    9334:	200d      	moveq	r0, #13
    9336:	d00b      	beq.n	9350 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9338:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    933c:	3856      	subs	r0, #86	; 0x56
    933e:	bf08      	it	eq
    9340:	201c      	moveq	r0, #28
    9342:	d005      	beq.n	9350 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9344:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9348:	389f      	subs	r0, #159	; 0x9f
    934a:	bf14      	ite	ne
    934c:	2000      	movne	r0, #0
    934e:	2032      	moveq	r0, #50	; 0x32
    9350:	1c41      	adds	r1, r0, #1
    9352:	eba9 000a 	sub.w	r0, r9, sl
    9356:	0200      	lsls	r0, r0, #8
    9358:	17c2      	asrs	r2, r0, #31
    935a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    935e:	1200      	asrs	r0, r0, #8
    9360:	4288      	cmp	r0, r1
    9362:	da0b      	bge.n	937c <MPSL_IRQ_RADIO_Handler+0x414>
    9364:	f888 5000 	strb.w	r5, [r8]
    9368:	7e38      	ldrb	r0, [r7, #24]
    936a:	7c21      	ldrb	r1, [r4, #16]
    936c:	4288      	cmp	r0, r1
    936e:	f67f af0d 	bls.w	918c <MPSL_IRQ_RADIO_Handler+0x224>
    9372:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9376:	7845      	ldrb	r5, [r0, #1]
    9378:	2d20      	cmp	r5, #32
    937a:	d1bf      	bne.n	92fc <MPSL_IRQ_RADIO_Handler+0x394>
    937c:	b011      	add	sp, #68	; 0x44
    937e:	2001      	movs	r0, #1
    9380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9384:	20000fdc 	.word	0x20000fdc
    9388:	20000bdc 	.word	0x20000bdc
    938c:	20000f5c 	.word	0x20000f5c
    9390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9394:	460f      	mov	r7, r1
    9396:	4606      	mov	r6, r0
    9398:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    939c:	494b      	ldr	r1, [pc, #300]	; (94cc <MPSL_IRQ_RADIO_Handler+0x564>)
    939e:	4699      	mov	r9, r3
    93a0:	4408      	add	r0, r1
    93a2:	4692      	mov	sl, r2
    93a4:	f890 4020 	ldrb.w	r4, [r0, #32]
    93a8:	2020      	movs	r0, #32
    93aa:	7010      	strb	r0, [r2, #0]
    93ac:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    93b0:	2c20      	cmp	r4, #32
    93b2:	bf1c      	itt	ne
    93b4:	4846      	ldrne	r0, [pc, #280]	; (94d0 <MPSL_IRQ_RADIO_Handler+0x568>)
    93b6:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    93ba:	d038      	beq.n	942e <MPSL_IRQ_RADIO_Handler+0x4c6>
    93bc:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    93c0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    93c4:	f100 0108 	add.w	r1, r0, #8
    93c8:	68c0      	ldr	r0, [r0, #12]
    93ca:	6835      	ldr	r5, [r6, #0]
    93cc:	1a28      	subs	r0, r5, r0
    93ce:	0200      	lsls	r0, r0, #8
    93d0:	17c2      	asrs	r2, r0, #31
    93d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    93d6:	1200      	asrs	r0, r0, #8
    93d8:	d429      	bmi.n	942e <MPSL_IRQ_RADIO_Handler+0x4c6>
    93da:	89f0      	ldrh	r0, [r6, #14]
    93dc:	b300      	cbz	r0, 9420 <MPSL_IRQ_RADIO_Handler+0x4b8>
    93de:	89c8      	ldrh	r0, [r1, #14]
    93e0:	b9f0      	cbnz	r0, 9420 <MPSL_IRQ_RADIO_Handler+0x4b8>
    93e2:	6808      	ldr	r0, [r1, #0]
    93e4:	9000      	str	r0, [sp, #0]
    93e6:	f002 ff45 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    93ea:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    93ee:	bf08      	it	eq
    93f0:	200d      	moveq	r0, #13
    93f2:	d00b      	beq.n	940c <MPSL_IRQ_RADIO_Handler+0x4a4>
    93f4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    93f8:	3856      	subs	r0, #86	; 0x56
    93fa:	bf08      	it	eq
    93fc:	201c      	moveq	r0, #28
    93fe:	d005      	beq.n	940c <MPSL_IRQ_RADIO_Handler+0x4a4>
    9400:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9404:	389f      	subs	r0, #159	; 0x9f
    9406:	bf14      	ite	ne
    9408:	2000      	movne	r0, #0
    940a:	2032      	moveq	r0, #50	; 0x32
    940c:	1c41      	adds	r1, r0, #1
    940e:	9800      	ldr	r0, [sp, #0]
    9410:	1a28      	subs	r0, r5, r0
    9412:	0200      	lsls	r0, r0, #8
    9414:	17c2      	asrs	r2, r0, #31
    9416:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    941a:	1200      	asrs	r0, r0, #8
    941c:	4288      	cmp	r0, r1
    941e:	db06      	blt.n	942e <MPSL_IRQ_RADIO_Handler+0x4c6>
    9420:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9424:	f88a 4000 	strb.w	r4, [sl]
    9428:	7844      	ldrb	r4, [r0, #1]
    942a:	2c20      	cmp	r4, #32
    942c:	d1c6      	bne.n	93bc <MPSL_IRQ_RADIO_Handler+0x454>
    942e:	f89a 0000 	ldrb.w	r0, [sl]
    9432:	f889 0000 	strb.w	r0, [r9]
    9436:	2c20      	cmp	r4, #32
    9438:	bf1c      	itt	ne
    943a:	4825      	ldrne	r0, [pc, #148]	; (94d0 <MPSL_IRQ_RADIO_Handler+0x568>)
    943c:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    9440:	d040      	beq.n	94c4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9442:	bf00      	nop
    9444:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9448:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    944c:	6870      	ldr	r0, [r6, #4]
    944e:	68bd      	ldr	r5, [r7, #8]
    9450:	f107 0108 	add.w	r1, r7, #8
    9454:	1a28      	subs	r0, r5, r0
    9456:	0200      	lsls	r0, r0, #8
    9458:	17c2      	asrs	r2, r0, #31
    945a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    945e:	1200      	asrs	r0, r0, #8
    9460:	d422      	bmi.n	94a8 <MPSL_IRQ_RADIO_Handler+0x540>
    9462:	89c8      	ldrh	r0, [r1, #14]
    9464:	b370      	cbz	r0, 94c4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9466:	89f0      	ldrh	r0, [r6, #14]
    9468:	bb60      	cbnz	r0, 94c4 <MPSL_IRQ_RADIO_Handler+0x55c>
    946a:	f8d6 b000 	ldr.w	fp, [r6]
    946e:	f002 ff01 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9472:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9476:	bf08      	it	eq
    9478:	200d      	moveq	r0, #13
    947a:	d00b      	beq.n	9494 <MPSL_IRQ_RADIO_Handler+0x52c>
    947c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9480:	3856      	subs	r0, #86	; 0x56
    9482:	bf08      	it	eq
    9484:	201c      	moveq	r0, #28
    9486:	d005      	beq.n	9494 <MPSL_IRQ_RADIO_Handler+0x52c>
    9488:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    948c:	389f      	subs	r0, #159	; 0x9f
    948e:	bf14      	ite	ne
    9490:	2000      	movne	r0, #0
    9492:	2032      	moveq	r0, #50	; 0x32
    9494:	1c41      	adds	r1, r0, #1
    9496:	eba5 000b 	sub.w	r0, r5, fp
    949a:	0200      	lsls	r0, r0, #8
    949c:	17c2      	asrs	r2, r0, #31
    949e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    94a2:	1200      	asrs	r0, r0, #8
    94a4:	4288      	cmp	r0, r1
    94a6:	da0d      	bge.n	94c4 <MPSL_IRQ_RADIO_Handler+0x55c>
    94a8:	f889 4000 	strb.w	r4, [r9]
    94ac:	7e38      	ldrb	r0, [r7, #24]
    94ae:	7c31      	ldrb	r1, [r6, #16]
    94b0:	4288      	cmp	r0, r1
    94b2:	d802      	bhi.n	94ba <MPSL_IRQ_RADIO_Handler+0x552>
    94b4:	2000      	movs	r0, #0
    94b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94ba:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    94be:	7844      	ldrb	r4, [r0, #1]
    94c0:	2c20      	cmp	r4, #32
    94c2:	d1bf      	bne.n	9444 <MPSL_IRQ_RADIO_Handler+0x4dc>
    94c4:	2001      	movs	r0, #1
    94c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94ca:	0000      	.short	0x0000
    94cc:	20000fdc 	.word	0x20000fdc
    94d0:	20000f5c 	.word	0x20000f5c
    94d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94d8:	b098      	sub	sp, #96	; 0x60
    94da:	4615      	mov	r5, r2
    94dc:	f002 fa5a 	bl	b994 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    94e0:	4604      	mov	r4, r0
    94e2:	f002 fcef 	bl	bec4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    94e6:	4606      	mov	r6, r0
    94e8:	9819      	ldr	r0, [sp, #100]	; 0x64
    94ea:	2801      	cmp	r0, #1
    94ec:	bf18      	it	ne
    94ee:	2802      	cmpne	r0, #2
    94f0:	d005      	beq.n	94fe <MPSL_IRQ_RADIO_Handler+0x596>
    94f2:	f640 1192 	movw	r1, #2450	; 0x992
    94f6:	f04f 0070 	mov.w	r0, #112	; 0x70
    94fa:	f003 f85b 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94fe:	49fa      	ldr	r1, [pc, #1000]	; (98e8 <MPSL_IRQ_RADIO_Handler+0x980>)
    9500:	2001      	movs	r0, #1
    9502:	6008      	str	r0, [r1, #0]
    9504:	49f9      	ldr	r1, [pc, #996]	; (98ec <MPSL_IRQ_RADIO_Handler+0x984>)
    9506:	6889      	ldr	r1, [r1, #8]
    9508:	6008      	str	r0, [r1, #0]
    950a:	2000      	movs	r0, #0
    950c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9510:	900a      	str	r0, [sp, #40]	; 0x28
    9512:	1e40      	subs	r0, r0, #1
    9514:	900b      	str	r0, [sp, #44]	; 0x2c
    9516:	49f6      	ldr	r1, [pc, #984]	; (98f0 <MPSL_IRQ_RADIO_Handler+0x988>)
    9518:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    951c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9520:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9524:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    9528:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    952c:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    9530:	6989      	ldr	r1, [r1, #24]
    9532:	9110      	str	r1, [sp, #64]	; 0x40
    9534:	f006 fe36 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9538:	4602      	mov	r2, r0
    953a:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    953e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    9542:	4bec      	ldr	r3, [pc, #944]	; (98f4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9544:	4440      	add	r0, r8
    9546:	1c41      	adds	r1, r0, #1
    9548:	1850      	adds	r0, r2, r1
    954a:	429a      	cmp	r2, r3
    954c:	d854      	bhi.n	95f8 <MPSL_IRQ_RADIO_Handler+0x690>
    954e:	4dea      	ldr	r5, [pc, #936]	; (98f8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9550:	42a9      	cmp	r1, r5
    9552:	dc58      	bgt.n	9606 <MPSL_IRQ_RADIO_Handler+0x69e>
    9554:	426a      	negs	r2, r5
    9556:	4291      	cmp	r1, r2
    9558:	db5d      	blt.n	9616 <MPSL_IRQ_RADIO_Handler+0x6ae>
    955a:	1c59      	adds	r1, r3, #1
    955c:	4281      	cmp	r1, r0
    955e:	bfdc      	itt	le
    9560:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9564:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9568:	dd05      	ble.n	9576 <MPSL_IRQ_RADIO_Handler+0x60e>
    956a:	2800      	cmp	r0, #0
    956c:	bfbc      	itt	lt
    956e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9572:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9576:	9014      	str	r0, [sp, #80]	; 0x50
    9578:	48e0      	ldr	r0, [pc, #896]	; (98fc <MPSL_IRQ_RADIO_Handler+0x994>)
    957a:	f1b8 0f00 	cmp.w	r8, #0
    957e:	8b80      	ldrh	r0, [r0, #28]
    9580:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    9584:	bf14      	ite	ne
    9586:	f04f 0a01 	movne.w	sl, #1
    958a:	f04f 0a00 	moveq.w	sl, #0
    958e:	f002 ff99 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9592:	9016      	str	r0, [sp, #88]	; 0x58
    9594:	f1ba 0f00 	cmp.w	sl, #0
    9598:	d008      	beq.n	95ac <MPSL_IRQ_RADIO_Handler+0x644>
    959a:	48d8      	ldr	r0, [pc, #864]	; (98fc <MPSL_IRQ_RADIO_Handler+0x994>)
    959c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    959e:	f1b0 3fff 	cmp.w	r0, #4294967295
    95a2:	bf02      	ittt	eq
    95a4:	9816      	ldreq	r0, [sp, #88]	; 0x58
    95a6:	2800      	cmpeq	r0, #0
    95a8:	2701      	moveq	r7, #1
    95aa:	d001      	beq.n	95b0 <MPSL_IRQ_RADIO_Handler+0x648>
    95ac:	f04f 0700 	mov.w	r7, #0
    95b0:	f002 fe60 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    95b4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    95b8:	bf08      	it	eq
    95ba:	200d      	moveq	r0, #13
    95bc:	d00b      	beq.n	95d6 <MPSL_IRQ_RADIO_Handler+0x66e>
    95be:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    95c2:	3856      	subs	r0, #86	; 0x56
    95c4:	bf08      	it	eq
    95c6:	201c      	moveq	r0, #28
    95c8:	d005      	beq.n	95d6 <MPSL_IRQ_RADIO_Handler+0x66e>
    95ca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    95ce:	389f      	subs	r0, #159	; 0x9f
    95d0:	bf14      	ite	ne
    95d2:	2000      	movne	r0, #0
    95d4:	2032      	moveq	r0, #50	; 0x32
    95d6:	f04f 0900 	mov.w	r9, #0
    95da:	46cb      	mov	fp, r9
    95dc:	9013      	str	r0, [sp, #76]	; 0x4c
    95de:	4546      	cmp	r6, r8
    95e0:	d936      	bls.n	9650 <MPSL_IRQ_RADIO_Handler+0x6e8>
    95e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    95e4:	f8df 930c 	ldr.w	r9, [pc, #780]	; 98f4 <MPSL_IRQ_RADIO_Handler+0x98c>
    95e8:	ea6f 0c06 	mvn.w	ip, r6
    95ec:	4669      	mov	r1, sp
    95ee:	aa17      	add	r2, sp, #92	; 0x5c
    95f0:	eb03 000c 	add.w	r0, r3, ip
    95f4:	454b      	cmp	r3, r9
    95f6:	d904      	bls.n	9602 <MPSL_IRQ_RADIO_Handler+0x69a>
    95f8:	f240 519e 	movw	r1, #1438	; 0x59e
    95fc:	2070      	movs	r0, #112	; 0x70
    95fe:	f002 ffd9 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9602:	45ac      	cmp	ip, r5
    9604:	dd04      	ble.n	9610 <MPSL_IRQ_RADIO_Handler+0x6a8>
    9606:	f240 519f 	movw	r1, #1439	; 0x59f
    960a:	2070      	movs	r0, #112	; 0x70
    960c:	f002 ffd2 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9610:	4bbb      	ldr	r3, [pc, #748]	; (9900 <MPSL_IRQ_RADIO_Handler+0x998>)
    9612:	459c      	cmp	ip, r3
    9614:	da04      	bge.n	9620 <MPSL_IRQ_RADIO_Handler+0x6b8>
    9616:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    961a:	2070      	movs	r0, #112	; 0x70
    961c:	f002 ffca 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9620:	4bb8      	ldr	r3, [pc, #736]	; (9904 <MPSL_IRQ_RADIO_Handler+0x99c>)
    9622:	4283      	cmp	r3, r0
    9624:	bfdc      	itt	le
    9626:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    962a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    962e:	dd05      	ble.n	963c <MPSL_IRQ_RADIO_Handler+0x6d4>
    9630:	2800      	cmp	r0, #0
    9632:	bfbc      	itt	lt
    9634:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9638:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    963c:	f001 ff04 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9640:	9800      	ldr	r0, [sp, #0]
    9642:	990c      	ldr	r1, [sp, #48]	; 0x30
    9644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9648:	9000      	str	r0, [sp, #0]
    964a:	1a08      	subs	r0, r1, r0
    964c:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    9650:	2f00      	cmp	r7, #0
    9652:	bf18      	it	ne
    9654:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    9658:	d105      	bne.n	9666 <MPSL_IRQ_RADIO_Handler+0x6fe>
    965a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    965e:	2800      	cmp	r0, #0
    9660:	bf18      	it	ne
    9662:	f04f 0b02 	movne.w	fp, #2
    9666:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    966a:	d008      	beq.n	967e <MPSL_IRQ_RADIO_Handler+0x716>
    966c:	980c      	ldr	r0, [sp, #48]	; 0x30
    966e:	1b00      	subs	r0, r0, r4
    9670:	0200      	lsls	r0, r0, #8
    9672:	17c1      	asrs	r1, r0, #31
    9674:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9678:	1200      	asrs	r0, r0, #8
    967a:	2801      	cmp	r0, #1
    967c:	da02      	bge.n	9684 <MPSL_IRQ_RADIO_Handler+0x71c>
    967e:	2003      	movs	r0, #3
    9680:	9d18      	ldr	r5, [sp, #96]	; 0x60
    9682:	e00d      	b.n	96a0 <MPSL_IRQ_RADIO_Handler+0x738>
    9684:	b157      	cbz	r7, 969c <MPSL_IRQ_RADIO_Handler+0x734>
    9686:	489d      	ldr	r0, [pc, #628]	; (98fc <MPSL_IRQ_RADIO_Handler+0x994>)
    9688:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    968c:	b130      	cbz	r0, 969c <MPSL_IRQ_RADIO_Handler+0x734>
    968e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9692:	f110 0b00 	adds.w	fp, r0, #0
    9696:	bf18      	it	ne
    9698:	f04f 0b02 	movne.w	fp, #2
    969c:	4625      	mov	r5, r4
    969e:	2000      	movs	r0, #0
    96a0:	4483      	add	fp, r0
    96a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    96a4:	eba0 0009 	sub.w	r0, r0, r9
    96a8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96ac:	1e48      	subs	r0, r1, #1
    96ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    96b2:	1b42      	subs	r2, r0, r5
    96b4:	0212      	lsls	r2, r2, #8
    96b6:	17d3      	asrs	r3, r2, #31
    96b8:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    96bc:	1212      	asrs	r2, r2, #8
    96be:	455a      	cmp	r2, fp
    96c0:	db04      	blt.n	96cc <MPSL_IRQ_RADIO_Handler+0x764>
    96c2:	f1b9 0f00 	cmp.w	r9, #0
    96c6:	bf18      	it	ne
    96c8:	910c      	strne	r1, [sp, #48]	; 0x30
    96ca:	e02d      	b.n	9728 <MPSL_IRQ_RADIO_Handler+0x7c0>
    96cc:	f1b9 0f00 	cmp.w	r9, #0
    96d0:	d005      	beq.n	96de <MPSL_IRQ_RADIO_Handler+0x776>
    96d2:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    96d6:	b920      	cbnz	r0, 96e2 <MPSL_IRQ_RADIO_Handler+0x77a>
    96d8:	f002 fbea 	bl	beb0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    96dc:	b108      	cbz	r0, 96e2 <MPSL_IRQ_RADIO_Handler+0x77a>
    96de:	b9af      	cbnz	r7, 970c <MPSL_IRQ_RADIO_Handler+0x7a4>
    96e0:	e00c      	b.n	96fc <MPSL_IRQ_RADIO_Handler+0x794>
    96e2:	b92f      	cbnz	r7, 96f0 <MPSL_IRQ_RADIO_Handler+0x788>
    96e4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    96e8:	2800      	cmp	r0, #0
    96ea:	bf18      	it	ne
    96ec:	f1ab 0b02 	subne.w	fp, fp, #2
    96f0:	f04f 0900 	mov.w	r9, #0
    96f4:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    96f8:	464e      	mov	r6, r9
    96fa:	e007      	b.n	970c <MPSL_IRQ_RADIO_Handler+0x7a4>
    96fc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9700:	b120      	cbz	r0, 970c <MPSL_IRQ_RADIO_Handler+0x7a4>
    9702:	2000      	movs	r0, #0
    9704:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9708:	f1ab 0b02 	sub.w	fp, fp, #2
    970c:	980c      	ldr	r0, [sp, #48]	; 0x30
    970e:	eba0 0109 	sub.w	r1, r0, r9
    9712:	1e48      	subs	r0, r1, #1
    9714:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9718:	1b42      	subs	r2, r0, r5
    971a:	0212      	lsls	r2, r2, #8
    971c:	17d3      	asrs	r3, r2, #31
    971e:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9722:	1212      	asrs	r2, r2, #8
    9724:	455a      	cmp	r2, fp
    9726:	db7d      	blt.n	9824 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9728:	4a74      	ldr	r2, [pc, #464]	; (98fc <MPSL_IRQ_RADIO_Handler+0x994>)
    972a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    972c:	1a89      	subs	r1, r1, r2
    972e:	0209      	lsls	r1, r1, #8
    9730:	17cb      	asrs	r3, r1, #31
    9732:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    9736:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9738:	1209      	asrs	r1, r1, #8
    973a:	b93b      	cbnz	r3, 974c <MPSL_IRQ_RADIO_Handler+0x7e4>
    973c:	f1b2 3fff 	cmp.w	r2, #4294967295
    9740:	bf1c      	itt	ne
    9742:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    9744:	4291      	cmpne	r1, r2
    9746:	bfb8      	it	lt
    9748:	2100      	movlt	r1, #0
    974a:	db00      	blt.n	974e <MPSL_IRQ_RADIO_Handler+0x7e6>
    974c:	2101      	movs	r1, #1
    974e:	ea3a 0101 	bics.w	r1, sl, r1
    9752:	d167      	bne.n	9824 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9754:	9919      	ldr	r1, [sp, #100]	; 0x64
    9756:	4605      	mov	r5, r0
    9758:	f04f 0900 	mov.w	r9, #0
    975c:	9105      	str	r1, [sp, #20]
    975e:	f001 ffdd 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9762:	1a28      	subs	r0, r5, r0
    9764:	0200      	lsls	r0, r0, #8
    9766:	17c1      	asrs	r1, r0, #31
    9768:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    976c:	ea4f 2b20 	mov.w	fp, r0, asr #8
    9770:	f002 fd80 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9774:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9778:	bf08      	it	eq
    977a:	200d      	moveq	r0, #13
    977c:	d00b      	beq.n	9796 <MPSL_IRQ_RADIO_Handler+0x82e>
    977e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9782:	3856      	subs	r0, #86	; 0x56
    9784:	bf08      	it	eq
    9786:	201c      	moveq	r0, #28
    9788:	d005      	beq.n	9796 <MPSL_IRQ_RADIO_Handler+0x82e>
    978a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    978e:	389f      	subs	r0, #159	; 0x9f
    9790:	bf14      	ite	ne
    9792:	2000      	movne	r0, #0
    9794:	2032      	moveq	r0, #50	; 0x32
    9796:	300b      	adds	r0, #11
    9798:	4558      	cmp	r0, fp
    979a:	dd1f      	ble.n	97dc <MPSL_IRQ_RADIO_Handler+0x874>
    979c:	9805      	ldr	r0, [sp, #20]
    979e:	2801      	cmp	r0, #1
    97a0:	d001      	beq.n	97a6 <MPSL_IRQ_RADIO_Handler+0x83e>
    97a2:	b147      	cbz	r7, 97b6 <MPSL_IRQ_RADIO_Handler+0x84e>
    97a4:	e012      	b.n	97cc <MPSL_IRQ_RADIO_Handler+0x864>
    97a6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    97aa:	d11c      	bne.n	97e6 <MPSL_IRQ_RADIO_Handler+0x87e>
    97ac:	f640 1113 	movw	r1, #2323	; 0x913
    97b0:	2070      	movs	r0, #112	; 0x70
    97b2:	f002 feff 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97b6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    97ba:	d007      	beq.n	97cc <MPSL_IRQ_RADIO_Handler+0x864>
    97bc:	1b60      	subs	r0, r4, r5
    97be:	0200      	lsls	r0, r0, #8
    97c0:	17c1      	asrs	r1, r0, #31
    97c2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    97c6:	1200      	asrs	r0, r0, #8
    97c8:	2804      	cmp	r0, #4
    97ca:	dd04      	ble.n	97d6 <MPSL_IRQ_RADIO_Handler+0x86e>
    97cc:	462c      	mov	r4, r5
    97ce:	4620      	mov	r0, r4
    97d0:	f001 ffca 	bl	b768 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    97d4:	e007      	b.n	97e6 <MPSL_IRQ_RADIO_Handler+0x87e>
    97d6:	2800      	cmp	r0, #0
    97d8:	dc63      	bgt.n	98a2 <MPSL_IRQ_RADIO_Handler+0x93a>
    97da:	e004      	b.n	97e6 <MPSL_IRQ_RADIO_Handler+0x87e>
    97dc:	462c      	mov	r4, r5
    97de:	4620      	mov	r0, r4
    97e0:	f001 ffc2 	bl	b768 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    97e4:	46d1      	mov	r9, sl
    97e6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    97ea:	d055      	beq.n	9898 <MPSL_IRQ_RADIO_Handler+0x930>
    97ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    97ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    97f0:	1b00      	subs	r0, r0, r4
    97f2:	1b12      	subs	r2, r2, r4
    97f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    97f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    97fc:	2801      	cmp	r0, #1
    97fe:	d350      	bcc.n	98a2 <MPSL_IRQ_RADIO_Handler+0x93a>
    9800:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9804:	bf98      	it	ls
    9806:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    980a:	d84a      	bhi.n	98a2 <MPSL_IRQ_RADIO_Handler+0x93a>
    980c:	4620      	mov	r0, r4
    980e:	f006 fcc9 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9812:	9914      	ldr	r1, [sp, #80]	; 0x50
    9814:	4a38      	ldr	r2, [pc, #224]	; (98f8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9816:	1a0d      	subs	r5, r1, r0
    9818:	f04f 0b00 	mov.w	fp, #0
    981c:	1aaa      	subs	r2, r5, r2
    981e:	f17b 0200 	sbcs.w	r2, fp, #0
    9822:	e000      	b.n	9826 <MPSL_IRQ_RADIO_Handler+0x8be>
    9824:	e03d      	b.n	98a2 <MPSL_IRQ_RADIO_Handler+0x93a>
    9826:	d316      	bcc.n	9856 <MPSL_IRQ_RADIO_Handler+0x8ee>
    9828:	4a33      	ldr	r2, [pc, #204]	; (98f8 <MPSL_IRQ_RADIO_Handler+0x990>)
    982a:	1a43      	subs	r3, r0, r1
    982c:	1a9a      	subs	r2, r3, r2
    982e:	f17b 0200 	sbcs.w	r2, fp, #0
    9832:	d310      	bcc.n	9856 <MPSL_IRQ_RADIO_Handler+0x8ee>
    9834:	4a2f      	ldr	r2, [pc, #188]	; (98f4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9836:	42aa      	cmp	r2, r5
    9838:	bf3e      	ittt	cc
    983a:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    983e:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    9842:	1845      	addcc	r5, r0, r1
    9844:	d307      	bcc.n	9856 <MPSL_IRQ_RADIO_Handler+0x8ee>
    9846:	429a      	cmp	r2, r3
    9848:	d22f      	bcs.n	98aa <MPSL_IRQ_RADIO_Handler+0x942>
    984a:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    984e:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9852:	4408      	add	r0, r1
    9854:	4245      	negs	r5, r0
    9856:	4f29      	ldr	r7, [pc, #164]	; (98fc <MPSL_IRQ_RADIO_Handler+0x994>)
    9858:	7fb8      	ldrb	r0, [r7, #30]
    985a:	b358      	cbz	r0, 98b4 <MPSL_IRQ_RADIO_Handler+0x94c>
    985c:	9819      	ldr	r0, [sp, #100]	; 0x64
    985e:	2801      	cmp	r0, #1
    9860:	d005      	beq.n	986e <MPSL_IRQ_RADIO_Handler+0x906>
    9862:	2002      	movs	r0, #2
    9864:	f002 f9d0 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9868:	2001      	movs	r0, #1
    986a:	f002 f9cd 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    986e:	45b0      	cmp	r8, r6
    9870:	d22c      	bcs.n	98cc <MPSL_IRQ_RADIO_Handler+0x964>
    9872:	eba5 0106 	sub.w	r1, r5, r6
    9876:	f04f 0002 	mov.w	r0, #2
    987a:	f002 f90f 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    987e:	b390      	cbz	r0, 98e6 <MPSL_IRQ_RADIO_Handler+0x97e>
    9880:	f1b8 0f00 	cmp.w	r8, #0
    9884:	bf1c      	itt	ne
    9886:	eba5 0108 	subne.w	r1, r5, r8
    988a:	2001      	movne	r0, #1
    988c:	d044      	beq.n	9918 <MPSL_IRQ_RADIO_Handler+0x9b0>
    988e:	bf00      	nop
    9890:	f002 f904 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9894:	b338      	cbz	r0, 98e6 <MPSL_IRQ_RADIO_Handler+0x97e>
    9896:	e03f      	b.n	9918 <MPSL_IRQ_RADIO_Handler+0x9b0>
    9898:	f640 2131 	movw	r1, #2609	; 0xa31
    989c:	2070      	movs	r0, #112	; 0x70
    989e:	f002 fe89 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98a2:	b01b      	add	sp, #108	; 0x6c
    98a4:	2000      	movs	r0, #0
    98a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98aa:	f640 3105 	movw	r1, #2821	; 0xb05
    98ae:	2070      	movs	r0, #112	; 0x70
    98b0:	f002 fe80 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98b4:	45b0      	cmp	r8, r6
    98b6:	bf34      	ite	cc
    98b8:	4630      	movcc	r0, r6
    98ba:	4640      	movcs	r0, r8
    98bc:	301e      	adds	r0, #30
    98be:	42a8      	cmp	r0, r5
    98c0:	dbcc      	blt.n	985c <MPSL_IRQ_RADIO_Handler+0x8f4>
    98c2:	f640 2145 	movw	r1, #2629	; 0xa45
    98c6:	2070      	movs	r0, #112	; 0x70
    98c8:	f002 fe74 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98cc:	d91c      	bls.n	9908 <MPSL_IRQ_RADIO_Handler+0x9a0>
    98ce:	eba5 0108 	sub.w	r1, r5, r8
    98d2:	2001      	movs	r0, #1
    98d4:	f002 f8e2 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    98d8:	b128      	cbz	r0, 98e6 <MPSL_IRQ_RADIO_Handler+0x97e>
    98da:	2e00      	cmp	r6, #0
    98dc:	bf1c      	itt	ne
    98de:	1ba9      	subne	r1, r5, r6
    98e0:	2002      	movne	r0, #2
    98e2:	d019      	beq.n	9918 <MPSL_IRQ_RADIO_Handler+0x9b0>
    98e4:	e7d4      	b.n	9890 <MPSL_IRQ_RADIO_Handler+0x928>
    98e6:	e042      	b.n	996e <MPSL_IRQ_RADIO_Handler+0xa06>
    98e8:	40000508 	.word	0x40000508
    98ec:	20000190 	.word	0x20000190
    98f0:	20000bdc 	.word	0x20000bdc
    98f4:	1e847fff 	.word	0x1e847fff
    98f8:	0f424000 	.word	0x0f424000
    98fc:	20000fdc 	.word	0x20000fdc
    9900:	f0bdc000 	.word	0xf0bdc000
    9904:	1e848000 	.word	0x1e848000
    9908:	ea56 0008 	orrs.w	r0, r6, r8
    990c:	d004      	beq.n	9918 <MPSL_IRQ_RADIO_Handler+0x9b0>
    990e:	f640 1176 	movw	r1, #2422	; 0x976
    9912:	2070      	movs	r0, #112	; 0x70
    9914:	f002 fe4e 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9918:	4629      	mov	r1, r5
    991a:	2000      	movs	r0, #0
    991c:	f002 f8be 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9920:	b328      	cbz	r0, 996e <MPSL_IRQ_RADIO_Handler+0xa06>
    9922:	2601      	movs	r6, #1
    9924:	f1ba 0f00 	cmp.w	sl, #0
    9928:	bf04      	itt	eq
    992a:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    992e:	2800      	cmpeq	r0, #0
    9930:	d002      	beq.n	9938 <MPSL_IRQ_RADIO_Handler+0x9d0>
    9932:	f1b9 0f00 	cmp.w	r9, #0
    9936:	d024      	beq.n	9982 <MPSL_IRQ_RADIO_Handler+0xa1a>
    9938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    993a:	f1b0 3fff 	cmp.w	r0, #4294967295
    993e:	d004      	beq.n	994a <MPSL_IRQ_RADIO_Handler+0x9e2>
    9940:	f002 fc9e 	bl	c280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9944:	f04f 30ff 	mov.w	r0, #4294967295
    9948:	62f8      	str	r0, [r7, #44]	; 0x2c
    994a:	f1b9 0f00 	cmp.w	r9, #0
    994e:	d01c      	beq.n	998a <MPSL_IRQ_RADIO_Handler+0xa22>
    9950:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9952:	1a20      	subs	r0, r4, r0
    9954:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9958:	2005      	movs	r0, #5
    995a:	f002 f89f 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    995e:	b360      	cbz	r0, 99ba <MPSL_IRQ_RADIO_Handler+0xa52>
    9960:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9964:	2800      	cmp	r0, #0
    9966:	bf08      	it	eq
    9968:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    996c:	e015      	b.n	999a <MPSL_IRQ_RADIO_Handler+0xa32>
    996e:	2002      	movs	r0, #2
    9970:	f002 f94a 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9974:	2001      	movs	r0, #1
    9976:	f002 f947 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    997a:	b01b      	add	sp, #108	; 0x6c
    997c:	2000      	movs	r0, #0
    997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9984:	f1b0 3fff 	cmp.w	r0, #4294967295
    9988:	d012      	beq.n	99b0 <MPSL_IRQ_RADIO_Handler+0xa48>
    998a:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    998e:	b120      	cbz	r0, 999a <MPSL_IRQ_RADIO_Handler+0xa32>
    9990:	2005      	movs	r0, #5
    9992:	f002 f939 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9996:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    999a:	eba5 0008 	sub.w	r0, r5, r8
    999e:	f1a0 0119 	sub.w	r1, r0, #25
    99a2:	2900      	cmp	r1, #0
    99a4:	dc0e      	bgt.n	99c4 <MPSL_IRQ_RADIO_Handler+0xa5c>
    99a6:	f640 216e 	movw	r1, #2670	; 0xa6e
    99aa:	2070      	movs	r0, #112	; 0x70
    99ac:	f002 fe02 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    99b0:	f002 fc82 	bl	c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    99b4:	f001 feb2 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    99b8:	e7c6      	b.n	9948 <MPSL_IRQ_RADIO_Handler+0x9e0>
    99ba:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    99be:	2070      	movs	r0, #112	; 0x70
    99c0:	f002 fdf8 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    99c4:	2003      	movs	r0, #3
    99c6:	f002 f869 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    99ca:	b1c0      	cbz	r0, 99fe <MPSL_IRQ_RADIO_Handler+0xa96>
    99cc:	480e      	ldr	r0, [pc, #56]	; (9a08 <MPSL_IRQ_RADIO_Handler+0xaa0>)
    99ce:	6880      	ldr	r0, [r0, #8]
    99d0:	f8c0 b000 	str.w	fp, [r0]
    99d4:	480d      	ldr	r0, [pc, #52]	; (9a0c <MPSL_IRQ_RADIO_Handler+0xaa4>)
    99d6:	f8c0 b000 	str.w	fp, [r0]
    99da:	ac0a      	add	r4, sp, #40	; 0x28
    99dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    99e0:	6038      	str	r0, [r7, #0]
    99e2:	6079      	str	r1, [r7, #4]
    99e4:	60ba      	str	r2, [r7, #8]
    99e6:	60fb      	str	r3, [r7, #12]
    99e8:	ac0e      	add	r4, sp, #56	; 0x38
    99ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    99ee:	6138      	str	r0, [r7, #16]
    99f0:	6179      	str	r1, [r7, #20]
    99f2:	61ba      	str	r2, [r7, #24]
    99f4:	61fb      	str	r3, [r7, #28]
    99f6:	b01b      	add	sp, #108	; 0x6c
    99f8:	2001      	movs	r0, #1
    99fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99fe:	f640 2176 	movw	r1, #2678	; 0xa76
    9a02:	2070      	movs	r0, #112	; 0x70
    9a04:	f002 fdd6 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a08:	20000190 	.word	0x20000190
    9a0c:	40000508 	.word	0x40000508
    9a10:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a14:	4614      	mov	r4, r2
    9a16:	460d      	mov	r5, r1
    9a18:	f04f 0a00 	mov.w	sl, #0
    9a1c:	890a      	ldrh	r2, [r1, #8]
    9a1e:	4651      	mov	r1, sl
    9a20:	f362 411f 	bfi	r1, r2, #16, #16
    9a24:	7aaa      	ldrb	r2, [r5, #10]
    9a26:	46d1      	mov	r9, sl
    9a28:	f362 0907 	bfi	r9, r2, #0, #8
    9a2c:	7aea      	ldrb	r2, [r5, #11]
    9a2e:	4606      	mov	r6, r0
    9a30:	f362 290f 	bfi	r9, r2, #8, #8
    9a34:	782a      	ldrb	r2, [r5, #0]
    9a36:	b083      	sub	sp, #12
    9a38:	6840      	ldr	r0, [r0, #4]
    9a3a:	f8c4 a000 	str.w	sl, [r4]
    9a3e:	f362 4917 	bfi	r9, r2, #16, #8
    9a42:	f8c4 a004 	str.w	sl, [r4, #4]
    9a46:	f8c4 9010 	str.w	r9, [r4, #16]
    9a4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    9a4e:	4f9d      	ldr	r7, [pc, #628]	; (9cc4 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    9a50:	6870      	ldr	r0, [r6, #4]
    9a52:	fba0 8907 	umull	r8, r9, r0, r7
    9a56:	6830      	ldr	r0, [r6, #0]
    9a58:	f006 fba4 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9a5c:	eb10 0108 	adds.w	r1, r0, r8
    9a60:	eb4a 0209 	adc.w	r2, sl, r9
    9a64:	7828      	ldrb	r0, [r5, #0]
    9a66:	ea4f 0967 	mov.w	r9, r7, asr #1
    9a6a:	f1c9 0b00 	rsb	fp, r9, #0
    9a6e:	b170      	cbz	r0, 9a8e <MPSL_IRQ_RADIO_Handler+0xb26>
    9a70:	89e0      	ldrh	r0, [r4, #14]
    9a72:	f894 8011 	ldrb.w	r8, [r4, #17]
    9a76:	43c0      	mvns	r0, r0
    9a78:	f8d5 a004 	ldr.w	sl, [r5, #4]
    9a7c:	f104 020c 	add.w	r2, r4, #12
    9a80:	4548      	cmp	r0, r9
    9a82:	dd7c      	ble.n	9b7e <MPSL_IRQ_RADIO_Handler+0xc16>
    9a84:	f240 519f 	movw	r1, #1439	; 0x59f
    9a88:	2070      	movs	r0, #112	; 0x70
    9a8a:	f002 fd93 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a8e:	f8df c238 	ldr.w	ip, [pc, #568]	; 9cc8 <MPSL_IRQ_RADIO_Handler+0xd60>
    9a92:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    9a96:	eb11 0a0c 	adds.w	sl, r1, ip
    9a9a:	f142 0c00 	adc.w	ip, r2, #0
    9a9e:	ebb0 0a0a 	subs.w	sl, r0, sl
    9aa2:	eb73 0c0c 	sbcs.w	ip, r3, ip
    9aa6:	d272      	bcs.n	9b8e <MPSL_IRQ_RADIO_Handler+0xc26>
    9aa8:	1a41      	subs	r1, r0, r1
    9aaa:	eb73 0102 	sbcs.w	r1, r3, r2
    9aae:	d36e      	bcc.n	9b8e <MPSL_IRQ_RADIO_Handler+0xc26>
    9ab0:	ebb0 0608 	subs.w	r6, r0, r8
    9ab4:	42b7      	cmp	r7, r6
    9ab6:	d82b      	bhi.n	9b10 <MPSL_IRQ_RADIO_Handler+0xba8>
    9ab8:	89e0      	ldrh	r0, [r4, #14]
    9aba:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9abe:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9ac2:	43c1      	mvns	r1, r0
    9ac4:	4a81      	ldr	r2, [pc, #516]	; (9ccc <MPSL_IRQ_RADIO_Handler+0xd64>)
    9ac6:	eb08 0001 	add.w	r0, r8, r1
    9aca:	4542      	cmp	r2, r8
    9acc:	d32b      	bcc.n	9b26 <MPSL_IRQ_RADIO_Handler+0xbbe>
    9ace:	4549      	cmp	r1, r9
    9ad0:	dcd8      	bgt.n	9a84 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9ad2:	4559      	cmp	r1, fp
    9ad4:	db66      	blt.n	9ba4 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9ad6:	4287      	cmp	r7, r0
    9ad8:	bfdc      	itt	le
    9ada:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9ade:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9ae2:	dd05      	ble.n	9af0 <MPSL_IRQ_RADIO_Handler+0xb88>
    9ae4:	2800      	cmp	r0, #0
    9ae6:	bfbc      	itt	lt
    9ae8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9aec:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9af0:	466a      	mov	r2, sp
    9af2:	a901      	add	r1, sp, #4
    9af4:	f001 fca8 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9af8:	89e0      	ldrh	r0, [r4, #14]
    9afa:	f89d 1000 	ldrb.w	r1, [sp]
    9afe:	1a30      	subs	r0, r6, r0
    9b00:	1a40      	subs	r0, r0, r1
    9b02:	1e40      	subs	r0, r0, #1
    9b04:	42b8      	cmp	r0, r7
    9b06:	d302      	bcc.n	9b0e <MPSL_IRQ_RADIO_Handler+0xba6>
    9b08:	68a0      	ldr	r0, [r4, #8]
    9b0a:	1c40      	adds	r0, r0, #1
    9b0c:	60a0      	str	r0, [r4, #8]
    9b0e:	4646      	mov	r6, r8
    9b10:	89e0      	ldrh	r0, [r4, #14]
    9b12:	4b6e      	ldr	r3, [pc, #440]	; (9ccc <MPSL_IRQ_RADIO_Handler+0xd64>)
    9b14:	43c1      	mvns	r1, r0
    9b16:	686d      	ldr	r5, [r5, #4]
    9b18:	f894 8011 	ldrb.w	r8, [r4, #17]
    9b1c:	1870      	adds	r0, r6, r1
    9b1e:	f104 020c 	add.w	r2, r4, #12
    9b22:	429e      	cmp	r6, r3
    9b24:	d904      	bls.n	9b30 <MPSL_IRQ_RADIO_Handler+0xbc8>
    9b26:	f240 519e 	movw	r1, #1438	; 0x59e
    9b2a:	2070      	movs	r0, #112	; 0x70
    9b2c:	f002 fd42 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b30:	4549      	cmp	r1, r9
    9b32:	dca7      	bgt.n	9a84 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9b34:	4559      	cmp	r1, fp
    9b36:	db35      	blt.n	9ba4 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9b38:	4287      	cmp	r7, r0
    9b3a:	bfdc      	itt	le
    9b3c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9b40:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9b44:	dd05      	ble.n	9b52 <MPSL_IRQ_RADIO_Handler+0xbea>
    9b46:	2800      	cmp	r0, #0
    9b48:	bfbc      	itt	lt
    9b4a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9b4e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9b52:	4621      	mov	r1, r4
    9b54:	f001 fc78 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9b58:	6820      	ldr	r0, [r4, #0]
    9b5a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9b5e:	1970      	adds	r0, r6, r5
    9b60:	1c40      	adds	r0, r0, #1
    9b62:	6021      	str	r1, [r4, #0]
    9b64:	f1b8 0f00 	cmp.w	r8, #0
    9b68:	bf08      	it	eq
    9b6a:	307a      	addeq	r0, #122	; 0x7a
    9b6c:	d004      	beq.n	9b78 <MPSL_IRQ_RADIO_Handler+0xc10>
    9b6e:	f1b8 0f01 	cmp.w	r8, #1
    9b72:	bf08      	it	eq
    9b74:	3048      	addeq	r0, #72	; 0x48
    9b76:	d13a      	bne.n	9bee <MPSL_IRQ_RADIO_Handler+0xc86>
    9b78:	f001 fc4a 	bl	b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9b7c:	e001      	b.n	9b82 <MPSL_IRQ_RADIO_Handler+0xc1a>
    9b7e:	e00e      	b.n	9b9e <MPSL_IRQ_RADIO_Handler+0xc36>
    9b80:	e005      	b.n	9b8e <MPSL_IRQ_RADIO_Handler+0xc26>
    9b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b86:	6060      	str	r0, [r4, #4]
    9b88:	b007      	add	sp, #28
    9b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b8e:	6830      	ldr	r0, [r6, #0]
    9b90:	1e40      	subs	r0, r0, #1
    9b92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b96:	6020      	str	r0, [r4, #0]
    9b98:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9b9c:	e7f3      	b.n	9b86 <MPSL_IRQ_RADIO_Handler+0xc1e>
    9b9e:	4601      	mov	r1, r0
    9ba0:	4558      	cmp	r0, fp
    9ba2:	da04      	bge.n	9bae <MPSL_IRQ_RADIO_Handler+0xc46>
    9ba4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9ba8:	2070      	movs	r0, #112	; 0x70
    9baa:	f002 fd03 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bae:	4287      	cmp	r7, r0
    9bb0:	bfdc      	itt	le
    9bb2:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    9bb6:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    9bba:	dd05      	ble.n	9bc8 <MPSL_IRQ_RADIO_Handler+0xc60>
    9bbc:	2800      	cmp	r0, #0
    9bbe:	bfbc      	itt	lt
    9bc0:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9bc4:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    9bc8:	4621      	mov	r1, r4
    9bca:	f001 fc3d 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9bce:	6820      	ldr	r0, [r4, #0]
    9bd0:	f1b8 0f00 	cmp.w	r8, #0
    9bd4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9bd8:	f10a 0001 	add.w	r0, sl, #1
    9bdc:	6021      	str	r1, [r4, #0]
    9bde:	bf08      	it	eq
    9be0:	307a      	addeq	r0, #122	; 0x7a
    9be2:	d009      	beq.n	9bf8 <MPSL_IRQ_RADIO_Handler+0xc90>
    9be4:	f1b8 0f01 	cmp.w	r8, #1
    9be8:	bf08      	it	eq
    9bea:	3048      	addeq	r0, #72	; 0x48
    9bec:	d004      	beq.n	9bf8 <MPSL_IRQ_RADIO_Handler+0xc90>
    9bee:	f240 6139 	movw	r1, #1593	; 0x639
    9bf2:	2070      	movs	r0, #112	; 0x70
    9bf4:	f002 fcde 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bf8:	f001 fc0a 	bl	b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9bfc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9c00:	6061      	str	r1, [r4, #4]
    9c02:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    9c06:	aa01      	add	r2, sp, #4
    9c08:	4669      	mov	r1, sp
    9c0a:	4648      	mov	r0, r9
    9c0c:	6837      	ldr	r7, [r6, #0]
    9c0e:	f001 fc1b 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9c12:	f002 f957 	bl	bec4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9c16:	f001 fbfb 	bl	b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9c1a:	4680      	mov	r8, r0
    9c1c:	482c      	ldr	r0, [pc, #176]	; (9cd0 <MPSL_IRQ_RADIO_Handler+0xd68>)
    9c1e:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9c22:	2920      	cmp	r1, #32
    9c24:	d02a      	beq.n	9c7c <MPSL_IRQ_RADIO_Handler+0xd14>
    9c26:	68c0      	ldr	r0, [r0, #12]
    9c28:	1d40      	adds	r0, r0, #5
    9c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9c2e:	bf00      	nop
    9c30:	e9d4 2100 	ldrd	r2, r1, [r4]
    9c34:	1a89      	subs	r1, r1, r2
    9c36:	4401      	add	r1, r0
    9c38:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c3c:	e9c4 0100 	strd	r0, r1, [r4]
    9c40:	6831      	ldr	r1, [r6, #0]
    9c42:	4281      	cmp	r1, r0
    9c44:	d902      	bls.n	9c4c <MPSL_IRQ_RADIO_Handler+0xce4>
    9c46:	68a0      	ldr	r0, [r4, #8]
    9c48:	1c40      	adds	r0, r0, #1
    9c4a:	60a0      	str	r0, [r4, #8]
    9c4c:	6832      	ldr	r2, [r6, #0]
    9c4e:	6928      	ldr	r0, [r5, #16]
    9c50:	4621      	mov	r1, r4
    9c52:	9b06      	ldr	r3, [sp, #24]
    9c54:	f7ff f9e4 	bl	9020 <MPSL_IRQ_RADIO_Handler+0xb8>
    9c58:	2800      	cmp	r0, #0
    9c5a:	bf1c      	itt	ne
    9c5c:	b007      	addne	sp, #28
    9c5e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c62:	e9d4 1000 	ldrd	r1, r0, [r4]
    9c66:	1a40      	subs	r0, r0, r1
    9c68:	6831      	ldr	r1, [r6, #0]
    9c6a:	6021      	str	r1, [r4, #0]
    9c6c:	6831      	ldr	r1, [r6, #0]
    9c6e:	4408      	add	r0, r1
    9c70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9c74:	6060      	str	r0, [r4, #4]
    9c76:	b007      	add	sp, #28
    9c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c7c:	3709      	adds	r7, #9
    9c7e:	f1b9 0f00 	cmp.w	r9, #0
    9c82:	d016      	beq.n	9cb2 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9c84:	f002 fc1e 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9c88:	b998      	cbnz	r0, 9cb2 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9c8a:	f002 faf3 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9c8e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9c92:	bf08      	it	eq
    9c94:	200d      	moveq	r0, #13
    9c96:	d00b      	beq.n	9cb0 <MPSL_IRQ_RADIO_Handler+0xd48>
    9c98:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9c9c:	3856      	subs	r0, #86	; 0x56
    9c9e:	bf08      	it	eq
    9ca0:	201c      	moveq	r0, #28
    9ca2:	d005      	beq.n	9cb0 <MPSL_IRQ_RADIO_Handler+0xd48>
    9ca4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9ca8:	389f      	subs	r0, #159	; 0x9f
    9caa:	bf14      	ite	ne
    9cac:	2000      	movne	r0, #0
    9cae:	2032      	moveq	r0, #50	; 0x32
    9cb0:	4407      	add	r7, r0
    9cb2:	9800      	ldr	r0, [sp, #0]
    9cb4:	4580      	cmp	r8, r0
    9cb6:	bf84      	itt	hi
    9cb8:	eba8 0000 	subhi.w	r0, r8, r0
    9cbc:	4407      	addhi	r7, r0
    9cbe:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9cc2:	e7b5      	b.n	9c30 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9cc4:	1e848000 	.word	0x1e848000
    9cc8:	0f424000 	.word	0x0f424000
    9ccc:	1e847fff 	.word	0x1e847fff
    9cd0:	20000fdc 	.word	0x20000fdc
    9cd4:	b570      	push	{r4, r5, r6, lr}
    9cd6:	4d1e      	ldr	r5, [pc, #120]	; (9d50 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9cd8:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9cdc:	2820      	cmp	r0, #32
    9cde:	bf18      	it	ne
    9ce0:	bd70      	popne	{r4, r5, r6, pc}
    9ce2:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9ce6:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9cea:	4428      	add	r0, r5
    9cec:	f890 4020 	ldrb.w	r4, [r0, #32]
    9cf0:	2c20      	cmp	r4, #32
    9cf2:	d027      	beq.n	9d44 <MPSL_IRQ_RADIO_Handler+0xddc>
    9cf4:	4b17      	ldr	r3, [pc, #92]	; (9d54 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9cf6:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9cfa:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9cfe:	7849      	ldrb	r1, [r1, #1]
    9d00:	f880 1020 	strb.w	r1, [r0, #32]
    9d04:	20ff      	movs	r0, #255	; 0xff
    9d06:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9d0a:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9d0e:	4621      	mov	r1, r4
    9d10:	2002      	movs	r0, #2
    9d12:	f000 f891 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    9d16:	2000      	movs	r0, #0
    9d18:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9d1c:	77a8      	strb	r0, [r5, #30]
    9d1e:	490e      	ldr	r1, [pc, #56]	; (9d58 <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9d20:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9d24:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9d28:	7e00      	ldrb	r0, [r0, #24]
    9d2a:	2800      	cmp	r0, #0
    9d2c:	bf08      	it	eq
    9d2e:	f002 fe5d 	bleq	c9ec <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9d32:	2000      	movs	r0, #0
    9d34:	4909      	ldr	r1, [pc, #36]	; (9d5c <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9d36:	6849      	ldr	r1, [r1, #4]
    9d38:	2900      	cmp	r1, #0
    9d3a:	bf08      	it	eq
    9d3c:	bd70      	popeq	{r4, r5, r6, pc}
    9d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9d42:	4708      	bx	r1
    9d44:	f240 3132 	movw	r1, #818	; 0x332
    9d48:	2070      	movs	r0, #112	; 0x70
    9d4a:	f002 fc33 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d4e:	0000      	.short	0x0000
    9d50:	20000fdc 	.word	0x20000fdc
    9d54:	20000f5c 	.word	0x20000f5c
    9d58:	20000bdc 	.word	0x20000bdc
    9d5c:	20000190 	.word	0x20000190
    9d60:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9d64:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9e28 <MPSL_IRQ_RADIO_Handler+0xec0>
    9d68:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9d6c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9d70:	4440      	add	r0, r8
    9d72:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9d76:	2c20      	cmp	r4, #32
    9d78:	bf08      	it	eq
    9d7a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d7e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9e2c <MPSL_IRQ_RADIO_Handler+0xec4>
    9d82:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9e30 <MPSL_IRQ_RADIO_Handler+0xec8>
    9d86:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9d8a:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9d8e:	2607      	movs	r6, #7
    9d90:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9d94:	2801      	cmp	r0, #1
    9d96:	d00e      	beq.n	9db6 <MPSL_IRQ_RADIO_Handler+0xe4e>
    9d98:	2804      	cmp	r0, #4
    9d9a:	bf08      	it	eq
    9d9c:	2602      	moveq	r6, #2
    9d9e:	d00a      	beq.n	9db6 <MPSL_IRQ_RADIO_Handler+0xe4e>
    9da0:	2805      	cmp	r0, #5
    9da2:	bf0c      	ite	eq
    9da4:	2603      	moveq	r6, #3
    9da6:	2806      	cmpne	r0, #6
    9da8:	d005      	beq.n	9db6 <MPSL_IRQ_RADIO_Handler+0xe4e>
    9daa:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9dae:	f04f 0070 	mov.w	r0, #112	; 0x70
    9db2:	f002 fbff 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9db6:	f1bb 0f00 	cmp.w	fp, #0
    9dba:	bf18      	it	ne
    9dbc:	f3af 8000 	nopne.w
    9dc0:	f3ef 8010 	mrs	r0, PRIMASK
    9dc4:	b672      	cpsid	i
    9dc6:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9dca:	784a      	ldrb	r2, [r1, #1]
    9dcc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9dd0:	4441      	add	r1, r8
    9dd2:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9dd6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9dda:	42a2      	cmp	r2, r4
    9ddc:	bf04      	itt	eq
    9dde:	2220      	moveq	r2, #32
    9de0:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9de4:	b1c0      	cbz	r0, 9e18 <MPSL_IRQ_RADIO_Handler+0xeb0>
    9de6:	462a      	mov	r2, r5
    9de8:	4621      	mov	r1, r4
    9dea:	2001      	movs	r0, #1
    9dec:	f000 f824 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    9df0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9df4:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9df8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9dfc:	6840      	ldr	r0, [r0, #4]
    9dfe:	4631      	mov	r1, r6
    9e00:	4790      	blx	r2
    9e02:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9e06:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9e0a:	4440      	add	r0, r8
    9e0c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9e10:	2c20      	cmp	r4, #32
    9e12:	d1ba      	bne.n	9d8a <MPSL_IRQ_RADIO_Handler+0xe22>
    9e14:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e18:	4806      	ldr	r0, [pc, #24]	; (9e34 <MPSL_IRQ_RADIO_Handler+0xecc>)
    9e1a:	2800      	cmp	r0, #0
    9e1c:	bf18      	it	ne
    9e1e:	f3af 8000 	nopne.w
    9e22:	b662      	cpsie	i
    9e24:	e7df      	b.n	9de6 <MPSL_IRQ_RADIO_Handler+0xe7e>
    9e26:	0000      	.short	0x0000
    9e28:	20000fdc 	.word	0x20000fdc
    9e2c:	00000000 	.word	0x00000000
    9e30:	20000f5c 	.word	0x20000f5c
    9e34:	00000000 	.word	0x00000000
    9e38:	f8df c058 	ldr.w	ip, [pc, #88]	; 9e94 <MPSL_IRQ_RADIO_Handler+0xf2c>
    9e3c:	b510      	push	{r4, lr}
    9e3e:	2300      	movs	r3, #0
    9e40:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9e44:	2807      	cmp	r0, #7
    9e46:	d21f      	bcs.n	9e88 <MPSL_IRQ_RADIO_Handler+0xf20>
    9e48:	e8df f000 	tbb	[pc, r0]
    9e4c:	05050505 	.word	0x05050505
    9e50:	00040404 	.word	0x00040404
    9e54:	2301      	movs	r3, #1
    9e56:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	bf08      	it	eq
    9e5e:	bd10      	popeq	{r4, pc}
    9e60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9e64:	480c      	ldr	r0, [pc, #48]	; (9e98 <MPSL_IRQ_RADIO_Handler+0xf30>)
    9e66:	4402      	add	r2, r0
    9e68:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9e6c:	2820      	cmp	r0, #32
    9e6e:	bf0e      	itee	eq
    9e70:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9e74:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9e78:	7041      	strbne	r1, [r0, #1]
    9e7a:	2020      	movs	r0, #32
    9e7c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9e80:	7058      	strb	r0, [r3, #1]
    9e82:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9e86:	bd10      	pop	{r4, pc}
    9e88:	f240 216e 	movw	r1, #622	; 0x26e
    9e8c:	2070      	movs	r0, #112	; 0x70
    9e8e:	f002 fb91 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e92:	0000      	.short	0x0000
    9e94:	20000f5c 	.word	0x20000f5c
    9e98:	20000fdc 	.word	0x20000fdc
    9e9c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9ea0:	460f      	mov	r7, r1
    9ea2:	4680      	mov	r8, r0
    9ea4:	f8df a160 	ldr.w	sl, [pc, #352]	; a008 <MPSL_IRQ_RADIO_Handler+0x10a0>
    9ea8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9eac:	4450      	add	r0, sl
    9eae:	f1b8 0f01 	cmp.w	r8, #1
    9eb2:	f890 4020 	ldrb.w	r4, [r0, #32]
    9eb6:	4625      	mov	r5, r4
    9eb8:	bf18      	it	ne
    9eba:	f1b8 0f02 	cmpne.w	r8, #2
    9ebe:	d005      	beq.n	9ecc <MPSL_IRQ_RADIO_Handler+0xf64>
    9ec0:	f640 21ac 	movw	r1, #2732	; 0xaac
    9ec4:	f04f 0070 	mov.w	r0, #112	; 0x70
    9ec8:	f002 fb74 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ecc:	f04f 0b00 	mov.w	fp, #0
    9ed0:	2d20      	cmp	r5, #32
    9ed2:	d042      	beq.n	9f5a <MPSL_IRQ_RADIO_Handler+0xff2>
    9ed4:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9ed8:	2600      	movs	r6, #0
    9eda:	2800      	cmp	r0, #0
    9edc:	bf08      	it	eq
    9ede:	2602      	moveq	r6, #2
    9ee0:	f001 fc1c 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9ee4:	f8df c124 	ldr.w	ip, [pc, #292]	; a00c <MPSL_IRQ_RADIO_Handler+0x10a4>
    9ee8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9eec:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9ef0:	688a      	ldr	r2, [r1, #8]
    9ef2:	68c9      	ldr	r1, [r1, #12]
    9ef4:	1a12      	subs	r2, r2, r0
    9ef6:	1a09      	subs	r1, r1, r0
    9ef8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9efc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9f00:	4296      	cmp	r6, r2
    9f02:	bf99      	ittee	ls
    9f04:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9f08:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9f0c:	4a40      	ldrhi	r2, [pc, #256]	; (a010 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9f0e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9f12:	d920      	bls.n	9f56 <MPSL_IRQ_RADIO_Handler+0xfee>
    9f14:	4622      	mov	r2, r4
    9f16:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9f1a:	784c      	ldrb	r4, [r1, #1]
    9f1c:	2c20      	cmp	r4, #32
    9f1e:	d012      	beq.n	9f46 <MPSL_IRQ_RADIO_Handler+0xfde>
    9f20:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9f24:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9f28:	688b      	ldr	r3, [r1, #8]
    9f2a:	68c9      	ldr	r1, [r1, #12]
    9f2c:	1a1b      	subs	r3, r3, r0
    9f2e:	1a09      	subs	r1, r1, r0
    9f30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9f34:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9f38:	429e      	cmp	r6, r3
    9f3a:	bf9c      	itt	ls
    9f3c:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9f40:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9f44:	d8e6      	bhi.n	9f14 <MPSL_IRQ_RADIO_Handler+0xfac>
    9f46:	2a20      	cmp	r2, #32
    9f48:	d005      	beq.n	9f56 <MPSL_IRQ_RADIO_Handler+0xfee>
    9f4a:	463b      	mov	r3, r7
    9f4c:	2120      	movs	r1, #32
    9f4e:	2004      	movs	r0, #4
    9f50:	f7ff f82a 	bl	8fa8 <MPSL_IRQ_RADIO_Handler+0x40>
    9f54:	4604      	mov	r4, r0
    9f56:	42ac      	cmp	r4, r5
    9f58:	d116      	bne.n	9f88 <MPSL_IRQ_RADIO_Handler+0x1020>
    9f5a:	482e      	ldr	r0, [pc, #184]	; (a014 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9f5c:	2800      	cmp	r0, #0
    9f5e:	bf18      	it	ne
    9f60:	f3af 8000 	nopne.w
    9f64:	f001 fbda 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9f68:	4603      	mov	r3, r0
    9f6a:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9f6e:	2820      	cmp	r0, #32
    9f70:	d00d      	beq.n	9f8e <MPSL_IRQ_RADIO_Handler+0x1026>
    9f72:	f8da 0008 	ldr.w	r0, [sl, #8]
    9f76:	1c99      	adds	r1, r3, #2
    9f78:	1a08      	subs	r0, r1, r0
    9f7a:	0200      	lsls	r0, r0, #8
    9f7c:	17c1      	asrs	r1, r0, #31
    9f7e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9f82:	1200      	asrs	r0, r0, #8
    9f84:	2800      	cmp	r0, #0
    9f86:	dd02      	ble.n	9f8e <MPSL_IRQ_RADIO_Handler+0x1026>
    9f88:	2000      	movs	r0, #0
    9f8a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9f8e:	2d20      	cmp	r5, #32
    9f90:	d014      	beq.n	9fbc <MPSL_IRQ_RADIO_Handler+0x1054>
    9f92:	462a      	mov	r2, r5
    9f94:	4641      	mov	r1, r8
    9f96:	4618      	mov	r0, r3
    9f98:	f7ff fa9c 	bl	94d4 <MPSL_IRQ_RADIO_Handler+0x56c>
    9f9c:	2800      	cmp	r0, #0
    9f9e:	bf1e      	ittt	ne
    9fa0:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9fa4:	2002      	movne	r0, #2
    9fa6:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9faa:	463b      	mov	r3, r7
    9fac:	462a      	mov	r2, r5
    9fae:	2120      	movs	r1, #32
    9fb0:	2004      	movs	r0, #4
    9fb2:	f7fe fff9 	bl	8fa8 <MPSL_IRQ_RADIO_Handler+0x40>
    9fb6:	2000      	movs	r0, #0
    9fb8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9fbc:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9fc0:	f1b0 3fff 	cmp.w	r0, #4294967295
    9fc4:	d005      	beq.n	9fd2 <MPSL_IRQ_RADIO_Handler+0x106a>
    9fc6:	f002 f95b 	bl	c280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9fca:	f04f 30ff 	mov.w	r0, #4294967295
    9fce:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9fd2:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9fd6:	b120      	cbz	r0, 9fe2 <MPSL_IRQ_RADIO_Handler+0x107a>
    9fd8:	2005      	movs	r0, #5
    9fda:	f001 fe15 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9fde:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9fe2:	2004      	movs	r0, #4
    9fe4:	f001 fe10 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9fe8:	f001 fe7e 	bl	bce8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9fec:	2020      	movs	r0, #32
    9fee:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9ff2:	4809      	ldr	r0, [pc, #36]	; (a018 <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9ff4:	6880      	ldr	r0, [r0, #8]
    9ff6:	f8c0 b000 	str.w	fp, [r0]
    9ffa:	4808      	ldr	r0, [pc, #32]	; (a01c <MPSL_IRQ_RADIO_Handler+0x10b4>)
    9ffc:	f8c0 b000 	str.w	fp, [r0]
    a000:	2001      	movs	r0, #1
    a002:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a006:	0000      	.short	0x0000
    a008:	20000fdc 	.word	0x20000fdc
    a00c:	20000bdc 	.word	0x20000bdc
    a010:	20000f5c 	.word	0x20000f5c
    a014:	00000000 	.word	0x00000000
    a018:	20000190 	.word	0x20000190
    a01c:	40000508 	.word	0x40000508

0000a020 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a024:	4e69      	ldr	r6, [pc, #420]	; (a1cc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a026:	4607      	mov	r7, r0
    a028:	b08d      	sub	sp, #52	; 0x34
    a02a:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    a02e:	4688      	mov	r8, r1
    a030:	2820      	cmp	r0, #32
    a032:	d055      	beq.n	a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    a034:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    a038:	f106 0408 	add.w	r4, r6, #8
    a03c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a040:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    a044:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    a048:	2020      	movs	r0, #32
    a04a:	f88d 0020 	strb.w	r0, [sp, #32]
    a04e:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a052:	aa0a      	add	r2, sp, #40	; 0x28
    a054:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a058:	4430      	add	r0, r6
    a05a:	a909      	add	r1, sp, #36	; 0x24
    a05c:	f890 5020 	ldrb.w	r5, [r0, #32]
    a060:	68f0      	ldr	r0, [r6, #12]
    a062:	9002      	str	r0, [sp, #8]
    a064:	6830      	ldr	r0, [r6, #0]
    a066:	4438      	add	r0, r7
    a068:	f001 f9ee 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a06c:	f8da 000c 	ldr.w	r0, [sl, #12]
    a070:	9909      	ldr	r1, [sp, #36]	; 0x24
    a072:	2f65      	cmp	r7, #101	; 0x65
    a074:	4408      	add	r0, r1
    a076:	d338      	bcc.n	a0ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a078:	4a55      	ldr	r2, [pc, #340]	; (a1d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    a07a:	2100      	movs	r1, #0
    a07c:	1bd2      	subs	r2, r2, r7
    a07e:	eb71 0201 	sbcs.w	r2, r1, r1
    a082:	d332      	bcc.n	a0ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a084:	6822      	ldr	r2, [r4, #0]
    a086:	1a82      	subs	r2, r0, r2
    a088:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a08c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a090:	d82b      	bhi.n	a0ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a092:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a096:	6060      	str	r0, [r4, #4]
    a098:	4630      	mov	r0, r6
    a09a:	f884 8010 	strb.w	r8, [r4, #16]
    a09e:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    a0a2:	f10d 0a20 	add.w	sl, sp, #32
    a0a6:	2d20      	cmp	r5, #32
    a0a8:	bf1c      	itt	ne
    a0aa:	494a      	ldrne	r1, [pc, #296]	; (a1d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a0ac:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    a0b0:	d050      	beq.n	a154 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a0b2:	bf00      	nop
    a0b4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    a0b8:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    a0bc:	6861      	ldr	r1, [r4, #4]
    a0be:	f8d8 6008 	ldr.w	r6, [r8, #8]
    a0c2:	f108 0008 	add.w	r0, r8, #8
    a0c6:	1a71      	subs	r1, r6, r1
    a0c8:	0209      	lsls	r1, r1, #8
    a0ca:	17ca      	asrs	r2, r1, #31
    a0cc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a0d0:	1209      	asrs	r1, r1, #8
    a0d2:	d42d      	bmi.n	a130 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    a0d4:	89c0      	ldrh	r0, [r0, #14]
    a0d6:	2800      	cmp	r0, #0
    a0d8:	d03c      	beq.n	a154 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a0da:	89e0      	ldrh	r0, [r4, #14]
    a0dc:	b148      	cbz	r0, a0f2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    a0de:	e039      	b.n	a154 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a0e0:	f640 3173 	movw	r1, #2931	; 0xb73
    a0e4:	2070      	movs	r0, #112	; 0x70
    a0e6:	f002 fa65 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0ea:	b00d      	add	sp, #52	; 0x34
    a0ec:	2001      	movs	r0, #1
    a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0f2:	6820      	ldr	r0, [r4, #0]
    a0f4:	900c      	str	r0, [sp, #48]	; 0x30
    a0f6:	f002 f8bd 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a0fa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a0fe:	bf08      	it	eq
    a100:	200d      	moveq	r0, #13
    a102:	d00b      	beq.n	a11c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a104:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a108:	3856      	subs	r0, #86	; 0x56
    a10a:	bf08      	it	eq
    a10c:	201c      	moveq	r0, #28
    a10e:	d005      	beq.n	a11c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a110:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a114:	389f      	subs	r0, #159	; 0x9f
    a116:	bf14      	ite	ne
    a118:	2000      	movne	r0, #0
    a11a:	2032      	moveq	r0, #50	; 0x32
    a11c:	1c41      	adds	r1, r0, #1
    a11e:	980c      	ldr	r0, [sp, #48]	; 0x30
    a120:	1a30      	subs	r0, r6, r0
    a122:	0200      	lsls	r0, r0, #8
    a124:	17c2      	asrs	r2, r0, #31
    a126:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    a12a:	1200      	asrs	r0, r0, #8
    a12c:	4288      	cmp	r0, r1
    a12e:	da11      	bge.n	a154 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a130:	f88a 5000 	strb.w	r5, [sl]
    a134:	f898 1018 	ldrb.w	r1, [r8, #24]
    a138:	7c20      	ldrb	r0, [r4, #16]
    a13a:	4281      	cmp	r1, r0
    a13c:	d805      	bhi.n	a14a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    a13e:	9802      	ldr	r0, [sp, #8]
    a140:	6060      	str	r0, [r4, #4]
    a142:	b00d      	add	sp, #52	; 0x34
    a144:	2002      	movs	r0, #2
    a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a14a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    a14e:	7845      	ldrb	r5, [r0, #1]
    a150:	2d20      	cmp	r5, #32
    a152:	d1af      	bne.n	a0b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    a154:	2005      	movs	r0, #5
    a156:	f001 fd57 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a15a:	4c1c      	ldr	r4, [pc, #112]	; (a1cc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a15c:	f04f 30ff 	mov.w	r0, #4294967295
    a160:	6060      	str	r0, [r4, #4]
    a162:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    a166:	f89d 2020 	ldrb.w	r2, [sp, #32]
    a16a:	2120      	movs	r1, #32
    a16c:	2a20      	cmp	r2, #32
    a16e:	d003      	beq.n	a178 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    a170:	2005      	movs	r0, #5
    a172:	f7fe ff19 	bl	8fa8 <MPSL_IRQ_RADIO_Handler+0x40>
    a176:	e004      	b.n	a182 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    a178:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a17c:	4420      	add	r0, r4
    a17e:	f890 0020 	ldrb.w	r0, [r0, #32]
    a182:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    a186:	4913      	ldr	r1, [pc, #76]	; (a1d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a188:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a18c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    a190:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a194:	7048      	strb	r0, [r1, #1]
    a196:	6820      	ldr	r0, [r4, #0]
    a198:	4438      	add	r0, r7
    a19a:	6020      	str	r0, [r4, #0]
    a19c:	20ff      	movs	r0, #255	; 0xff
    a19e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    a1a2:	7e60      	ldrb	r0, [r4, #25]
    a1a4:	2801      	cmp	r0, #1
    a1a6:	d105      	bne.n	a1b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    a1a8:	68e0      	ldr	r0, [r4, #12]
    a1aa:	1e40      	subs	r0, r0, #1
    a1ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a1b0:	f001 fb8e 	bl	b8d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a1b4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a1b8:	2820      	cmp	r0, #32
    a1ba:	d003      	beq.n	a1c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    a1bc:	4806      	ldr	r0, [pc, #24]	; (a1d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    a1be:	7840      	ldrb	r0, [r0, #1]
    a1c0:	f002 facc 	bl	c75c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a1c4:	b00d      	add	sp, #52	; 0x34
    a1c6:	2000      	movs	r0, #0
    a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1cc:	20000fdc 	.word	0x20000fdc
    a1d0:	0f424000 	.word	0x0f424000
    a1d4:	20000f5c 	.word	0x20000f5c
    a1d8:	20000190 	.word	0x20000190

0000a1dc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    a1dc:	b570      	push	{r4, r5, r6, lr}
    a1de:	4a24      	ldr	r2, [pc, #144]	; (a270 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    a1e0:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    a1e4:	2920      	cmp	r1, #32
    a1e6:	d03a      	beq.n	a25e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    a1e8:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    a1ec:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    a1f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1f4:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    a1f8:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    a1fc:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    a200:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a204:	4411      	add	r1, r2
    a206:	f891 1020 	ldrb.w	r1, [r1, #32]
    a20a:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    a20e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    a212:	2920      	cmp	r1, #32
    a214:	d028      	beq.n	a268 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    a216:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    a21a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    a21e:	7e2d      	ldrb	r5, [r5, #24]
    a220:	4285      	cmp	r5, r0
    a222:	bf84      	itt	hi
    a224:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    a228:	7849      	ldrbhi	r1, [r1, #1]
    a22a:	d8f2      	bhi.n	a212 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    a22c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a230:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a234:	f8dc 000c 	ldr.w	r0, [ip, #12]
    a238:	6889      	ldr	r1, [r1, #8]
    a23a:	6814      	ldr	r4, [r2, #0]
    a23c:	1a08      	subs	r0, r1, r0
    a23e:	0200      	lsls	r0, r0, #8
    a240:	17c1      	asrs	r1, r0, #31
    a242:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    a246:	1200      	asrs	r0, r0, #8
    a248:	d407      	bmi.n	a25a <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    a24a:	f005 ffab 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a24e:	f104 0165 	add.w	r1, r4, #101	; 0x65
    a252:	4288      	cmp	r0, r1
    a254:	bf24      	itt	cs
    a256:	1b00      	subcs	r0, r0, r4
    a258:	bd70      	popcs	{r4, r5, r6, pc}
    a25a:	2000      	movs	r0, #0
    a25c:	bd70      	pop	{r4, r5, r6, pc}
    a25e:	f640 3145 	movw	r1, #2885	; 0xb45
    a262:	2070      	movs	r0, #112	; 0x70
    a264:	f002 f9a6 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a268:	f04f 30ff 	mov.w	r0, #4294967295
    a26c:	bd70      	pop	{r4, r5, r6, pc}
    a26e:	0000      	.short	0x0000
    a270:	20000fdc 	.word	0x20000fdc

0000a274 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a274:	b570      	push	{r4, r5, r6, lr}
    a276:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a27a:	4809      	ldr	r0, [pc, #36]	; (a2a0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a27c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a280:	4908      	ldr	r1, [pc, #32]	; (a2a4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a282:	6920      	ldr	r0, [r4, #16]
    a284:	fba0 5601 	umull	r5, r6, r0, r1
    a288:	68a0      	ldr	r0, [r4, #8]
    a28a:	f005 ff8b 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a28e:	8ae1      	ldrh	r1, [r4, #22]
    a290:	7d22      	ldrb	r2, [r4, #20]
    a292:	1c40      	adds	r0, r0, #1
    a294:	4411      	add	r1, r2
    a296:	4408      	add	r0, r1
    a298:	1940      	adds	r0, r0, r5
    a29a:	f146 0100 	adc.w	r1, r6, #0
    a29e:	bd70      	pop	{r4, r5, r6, pc}
    a2a0:	20000bdc 	.word	0x20000bdc
    a2a4:	1e848000 	.word	0x1e848000

0000a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2aa:	4d6f      	ldr	r5, [pc, #444]	; (a468 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a2ac:	2601      	movs	r6, #1
    a2ae:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a2b2:	4a6e      	ldr	r2, [pc, #440]	; (a46c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a2b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a2b6:	2808      	cmp	r0, #8
    a2b8:	d272      	bcs.n	a3a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a2ba:	e8df f000 	tbb	[pc, r0]
    a2be:	7704      	.short	0x7704
    a2c0:	44cfb19f 	.word	0x44cfb19f
    a2c4:	bbb6      	.short	0xbbb6
    a2c6:	f1b1 3fff 	cmp.w	r1, #4294967295
    a2ca:	d104      	bne.n	a2d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a2cc:	f001 fff4 	bl	c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a2d0:	f001 fa24 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a2d4:	62e0      	str	r0, [r4, #44]	; 0x2c
    a2d6:	8ae0      	ldrh	r0, [r4, #22]
    a2d8:	b110      	cbz	r0, a2e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a2da:	f002 f8f3 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a2de:	b180      	cbz	r0, a302 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a2e0:	f7ff fcf8 	bl	9cd4 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a2e4:	20ff      	movs	r0, #255	; 0xff
    a2e6:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a2ea:	6861      	ldr	r1, [r4, #4]
    a2ec:	f1b1 3fff 	cmp.w	r1, #4294967295
    a2f0:	d003      	beq.n	a2fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a2f2:	2005      	movs	r0, #5
    a2f4:	f001 fbd2 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a2f8:	b140      	cbz	r0, a30c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a2fa:	7e60      	ldrb	r0, [r4, #25]
    a2fc:	2801      	cmp	r0, #1
    a2fe:	d110      	bne.n	a322 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a300:	e009      	b.n	a316 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a302:	f640 0169 	movw	r1, #2153	; 0x869
    a306:	2070      	movs	r0, #112	; 0x70
    a308:	f002 f954 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a30c:	f640 016e 	movw	r1, #2158	; 0x86e
    a310:	2070      	movs	r0, #112	; 0x70
    a312:	f002 f94f 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a316:	68e0      	ldr	r0, [r4, #12]
    a318:	1e40      	subs	r0, r0, #1
    a31a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a31e:	f001 fad7 	bl	b8d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a322:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a326:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a32a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a32e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a332:	6840      	ldr	r0, [r0, #4]
    a334:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a338:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a33c:	b001      	add	sp, #4
    a33e:	2101      	movs	r1, #1
    a340:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a344:	4710      	bx	r2
    a346:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a34a:	b158      	cbz	r0, a364 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a34c:	f1b1 3fff 	cmp.w	r1, #4294967295
    a350:	d104      	bne.n	a35c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a352:	f001 ffb1 	bl	c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a356:	f001 f9e1 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a35a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a35c:	2000      	movs	r0, #0
    a35e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a364:	f7ff fcb6 	bl	9cd4 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a368:	f04f 30ff 	mov.w	r0, #4294967295
    a36c:	6060      	str	r0, [r4, #4]
    a36e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a372:	f88d 0000 	strb.w	r0, [sp]
    a376:	f89d 0000 	ldrb.w	r0, [sp]
    a37a:	b190      	cbz	r0, a3a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a37c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a380:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a384:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a388:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a38c:	6840      	ldr	r0, [r0, #4]
    a38e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a392:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a396:	b001      	add	sp, #4
    a398:	2106      	movs	r1, #6
    a39a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a39e:	4710      	bx	r2
    a3a0:	e05c      	b.n	a45c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a3a2:	f640 0185 	movw	r1, #2181	; 0x885
    a3a6:	2070      	movs	r0, #112	; 0x70
    a3a8:	f002 f904 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3ac:	f7ff fc92 	bl	9cd4 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a3b0:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a3b4:	f002 f886 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a3b8:	b120      	cbz	r0, a3c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a3ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a3bc:	f1b0 3fff 	cmp.w	r0, #4294967295
    a3c0:	d005      	beq.n	a3ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a3c2:	e009      	b.n	a3d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a3c4:	f640 0193 	movw	r1, #2195	; 0x893
    a3c8:	2070      	movs	r0, #112	; 0x70
    a3ca:	f002 f8f3 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3ce:	f001 ff73 	bl	c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a3d2:	f001 f9a3 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a3d6:	62e0      	str	r0, [r4, #44]	; 0x2c
    a3d8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a3dc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a3e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a3e4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a3e8:	6840      	ldr	r0, [r0, #4]
    a3ea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a3ee:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a3f2:	b001      	add	sp, #4
    a3f4:	2100      	movs	r1, #0
    a3f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a3fa:	4710      	bx	r2
    a3fc:	f001 fd44 	bl	be88 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a400:	8ae0      	ldrh	r0, [r4, #22]
    a402:	b110      	cbz	r0, a40a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a404:	f002 f85e 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a408:	b128      	cbz	r0, a416 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a40a:	f001 fd51 	bl	beb0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a40e:	2800      	cmp	r0, #0
    a410:	bf18      	it	ne
    a412:	7766      	strbne	r6, [r4, #29]
    a414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a416:	f640 019d 	movw	r1, #2205	; 0x89d
    a41a:	2070      	movs	r0, #112	; 0x70
    a41c:	f002 f8ca 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a420:	4813      	ldr	r0, [pc, #76]	; (a470 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a422:	6006      	str	r6, [r0, #0]
    a424:	6890      	ldr	r0, [r2, #8]
    a426:	6006      	str	r6, [r0, #0]
    a428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a42a:	7810      	ldrb	r0, [r2, #0]
    a42c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a430:	f002 b994 	b.w	c75c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a434:	f7ff fc4e 	bl	9cd4 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a438:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a43c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a440:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a444:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a448:	6840      	ldr	r0, [r0, #4]
    a44a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a44e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a452:	b001      	add	sp, #4
    a454:	2105      	movs	r1, #5
    a456:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a45a:	4710      	bx	r2
    a45c:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a460:	2070      	movs	r0, #112	; 0x70
    a462:	f002 f8a7 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a466:	0000      	.short	0x0000
    a468:	20000bdc 	.word	0x20000bdc
    a46c:	20000190 	.word	0x20000190
    a470:	40000508 	.word	0x40000508

0000a474 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a474:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a478:	4682      	mov	sl, r0
    a47a:	48ef      	ldr	r0, [pc, #956]	; (a838 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a47c:	b095      	sub	sp, #84	; 0x54
    a47e:	6800      	ldr	r0, [r0, #0]
    a480:	4dee      	ldr	r5, [pc, #952]	; (a83c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a482:	05c0      	lsls	r0, r0, #23
    a484:	0dc0      	lsrs	r0, r0, #23
    a486:	d00e      	beq.n	a4a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a488:	3810      	subs	r0, #16
    a48a:	b240      	sxtb	r0, r0
    a48c:	2800      	cmp	r0, #0
    a48e:	bfb8      	it	lt
    a490:	f000 000f 	andlt.w	r0, r0, #15
    a494:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a498:	bfac      	ite	ge
    a49a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a49e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a4a2:	0940      	lsrs	r0, r0, #5
    a4a4:	d00d      	beq.n	a4c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a4a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4a8:	f04f 0b00 	mov.w	fp, #0
    a4ac:	7800      	ldrb	r0, [r0, #0]
    a4ae:	2800      	cmp	r0, #0
    a4b0:	bf18      	it	ne
    a4b2:	2801      	cmpne	r0, #1
    a4b4:	d018      	beq.n	a4e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a4b6:	f240 713b 	movw	r1, #1851	; 0x73b
    a4ba:	f04f 0070 	mov.w	r0, #112	; 0x70
    a4be:	f002 f879 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a4c2:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a4c6:	f04f 0b01 	mov.w	fp, #1
    a4ca:	2820      	cmp	r0, #32
    a4cc:	d007      	beq.n	a4de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a4ce:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4d0:	7800      	ldrb	r0, [r0, #0]
    a4d2:	b148      	cbz	r0, a4e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a4d4:	f240 7137 	movw	r1, #1847	; 0x737
    a4d8:	2070      	movs	r0, #112	; 0x70
    a4da:	f002 f86b 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a4de:	f240 7134 	movw	r1, #1844	; 0x734
    a4e2:	2070      	movs	r0, #112	; 0x70
    a4e4:	f002 f866 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a4e8:	4cd5      	ldr	r4, [pc, #852]	; (a840 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a4ea:	b124      	cbz	r4, a4f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a4ec:	2100      	movs	r1, #0
    a4ee:	f240 703e 	movw	r0, #1854	; 0x73e
    a4f2:	f3af 8000 	nop.w
    a4f6:	2000      	movs	r0, #0
    a4f8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a4fc:	49d1      	ldr	r1, [pc, #836]	; (a844 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a4fe:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a502:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a506:	f04f 0901 	mov.w	r9, #1
    a50a:	9000      	str	r0, [sp, #0]
    a50c:	b124      	cbz	r4, a518 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a50e:	2100      	movs	r1, #0
    a510:	f240 7049 	movw	r0, #1865	; 0x749
    a514:	f3af 8000 	nop.w
    a518:	f1b9 0f00 	cmp.w	r9, #0
    a51c:	d00a      	beq.n	a534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a51e:	bf00      	nop
    a520:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a524:	f04f 0800 	mov.w	r8, #0
    a528:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a52c:	f1bb 0f00 	cmp.w	fp, #0
    a530:	d007      	beq.n	a542 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a532:	e038      	b.n	a5a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a534:	48c4      	ldr	r0, [pc, #784]	; (a848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a536:	2800      	cmp	r0, #0
    a538:	bf18      	it	ne
    a53a:	f3af 8000 	nopne.w
    a53e:	b662      	cpsie	i
    a540:	e7ee      	b.n	a520 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a542:	4637      	mov	r7, r6
    a544:	2001      	movs	r0, #1
    a546:	ea20 0607 	bic.w	r6, r0, r7
    a54a:	48c0      	ldr	r0, [pc, #768]	; (a84c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a54c:	2240      	movs	r2, #64	; 0x40
    a54e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a552:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a556:	f005 ffa8 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a55a:	b124      	cbz	r4, a566 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a55c:	2100      	movs	r1, #0
    a55e:	f240 505e 	movw	r0, #1374	; 0x55e
    a562:	f3af 8000 	nop.w
    a566:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a56a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a56e:	4429      	add	r1, r5
    a570:	4428      	add	r0, r5
    a572:	8c0a      	ldrh	r2, [r1, #32]
    a574:	8402      	strh	r2, [r0, #32]
    a576:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a57a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a57e:	b124      	cbz	r4, a58a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a580:	2100      	movs	r1, #0
    a582:	f240 5062 	movw	r0, #1378	; 0x562
    a586:	f3af 8000 	nop.w
    a58a:	b124      	cbz	r4, a596 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a58c:	2100      	movs	r1, #0
    a58e:	f240 7053 	movw	r0, #1875	; 0x753
    a592:	f3af 8000 	nop.w
    a596:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a59a:	f88d 0008 	strb.w	r0, [sp, #8]
    a59e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a5a2:	2800      	cmp	r0, #0
    a5a4:	d1b2      	bne.n	a50c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a5a6:	b124      	cbz	r4, a5b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a5a8:	2100      	movs	r1, #0
    a5aa:	f240 705d 	movw	r0, #1885	; 0x75d
    a5ae:	f3af 8000 	nop.w
    a5b2:	a802      	add	r0, sp, #8
    a5b4:	f001 f8b8 	bl	b728 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a5bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a5c0:	4633      	mov	r3, r6
    a5c2:	aa09      	add	r2, sp, #36	; 0x24
    a5c4:	a80e      	add	r0, sp, #56	; 0x38
    a5c6:	9916      	ldr	r1, [sp, #88]	; 0x58
    a5c8:	f7ff fa22 	bl	9a10 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a5cc:	b124      	cbz	r4, a5d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a5ce:	2100      	movs	r1, #0
    a5d0:	f240 7064 	movw	r0, #1892	; 0x764
    a5d4:	f3af 8000 	nop.w
    a5d8:	4a9c      	ldr	r2, [pc, #624]	; (a84c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a5da:	990e      	ldr	r1, [sp, #56]	; 0x38
    a5dc:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a5e0:	a809      	add	r0, sp, #36	; 0x24
    a5e2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a5e6:	2a01      	cmp	r2, #1
    a5e8:	bf18      	it	ne
    a5ea:	2a02      	cmpne	r2, #2
    a5ec:	d138      	bne.n	a660 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a5ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5f2:	eba2 0201 	sub.w	r2, r2, r1
    a5f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a5fa:	eba3 0101 	sub.w	r1, r3, r1
    a5fe:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a602:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a606:	2a02      	cmp	r2, #2
    a608:	d364      	bcc.n	a6d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a60a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a60e:	bf98      	it	ls
    a610:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a614:	d85e      	bhi.n	a6d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a616:	f04f 0801 	mov.w	r8, #1
    a61a:	ab14      	add	r3, sp, #80	; 0x50
    a61c:	aa13      	add	r2, sp, #76	; 0x4c
    a61e:	4631      	mov	r1, r6
    a620:	f7fe feb6 	bl	9390 <MPSL_IRQ_RADIO_Handler+0x428>
    a624:	2800      	cmp	r0, #0
    a626:	d05d      	beq.n	a6e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a628:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a62c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a630:	4633      	mov	r3, r6
    a632:	428a      	cmp	r2, r1
    a634:	d05a      	beq.n	a6ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a636:	2005      	movs	r0, #5
    a638:	f7fe fcb6 	bl	8fa8 <MPSL_IRQ_RADIO_Handler+0x40>
    a63c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a640:	7048      	strb	r0, [r1, #1]
    a642:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a646:	2820      	cmp	r0, #32
    a648:	bf1c      	itt	ne
    a64a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a64e:	f880 a001 	strbne.w	sl, [r0, #1]
    a652:	d057      	beq.n	a704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a654:	4632      	mov	r2, r6
    a656:	4651      	mov	r1, sl
    a658:	f05f 0003 	movs.w	r0, #3
    a65c:	f7ff fbec 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    a660:	b124      	cbz	r4, a66c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a662:	2100      	movs	r1, #0
    a664:	f240 7069 	movw	r0, #1897	; 0x769
    a668:	f3af 8000 	nop.w
    a66c:	4878      	ldr	r0, [pc, #480]	; (a850 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a66e:	2800      	cmp	r0, #0
    a670:	bf18      	it	ne
    a672:	f3af 8000 	nopne.w
    a676:	f3ef 8910 	mrs	r9, PRIMASK
    a67a:	b672      	cpsid	i
    a67c:	b124      	cbz	r4, a688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a67e:	2100      	movs	r1, #0
    a680:	f240 706f 	movw	r0, #1903	; 0x76f
    a684:	f3af 8000 	nop.w
    a688:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a68c:	f88d 0008 	strb.w	r0, [sp, #8]
    a690:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a694:	2800      	cmp	r0, #0
    a696:	f47f af39 	bne.w	a50c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a69a:	b124      	cbz	r4, a6a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a69c:	2100      	movs	r1, #0
    a69e:	f240 7077 	movw	r0, #1911	; 0x777
    a6a2:	f3af 8000 	nop.w
    a6a6:	af09      	add	r7, sp, #36	; 0x24
    a6a8:	9800      	ldr	r0, [sp, #0]
    a6aa:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a6ae:	f100 0708 	add.w	r7, r0, #8
    a6b2:	f1b8 0f00 	cmp.w	r8, #0
    a6b6:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a6ba:	990d      	ldr	r1, [sp, #52]	; 0x34
    a6bc:	6181      	str	r1, [r0, #24]
    a6be:	d051      	beq.n	a764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a6c0:	b124      	cbz	r4, a6cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a6c2:	2100      	movs	r1, #0
    a6c4:	f240 7084 	movw	r0, #1924	; 0x784
    a6c8:	f3af 8000 	nop.w
    a6cc:	f1bb 0f00 	cmp.w	fp, #0
    a6d0:	d139      	bne.n	a746 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a6d2:	e01f      	b.n	a714 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a6d4:	4632      	mov	r2, r6
    a6d6:	4651      	mov	r1, sl
    a6d8:	2004      	movs	r0, #4
    a6da:	f7ff fbad 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    a6de:	f04f 0801 	mov.w	r8, #1
    a6e2:	e7bd      	b.n	a660 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a6e4:	4632      	mov	r2, r6
    a6e6:	4651      	mov	r1, sl
    a6e8:	2004      	movs	r0, #4
    a6ea:	e7b7      	b.n	a65c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a6ec:	2920      	cmp	r1, #32
    a6ee:	bf19      	ittee	ne
    a6f0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a6f4:	7840      	ldrbne	r0, [r0, #1]
    a6f6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a6fa:	4428      	addeq	r0, r5
    a6fc:	bf08      	it	eq
    a6fe:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a702:	e79b      	b.n	a63c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a704:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a708:	4429      	add	r1, r5
    a70a:	f881 a020 	strb.w	sl, [r1, #32]
    a70e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a712:	e79f      	b.n	a654 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a714:	9811      	ldr	r0, [sp, #68]	; 0x44
    a716:	f010 0fff 	tst.w	r0, #255	; 0xff
    a71a:	d014      	beq.n	a746 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a71c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a720:	2820      	cmp	r0, #32
    a722:	d110      	bne.n	a746 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a724:	b124      	cbz	r4, a730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a726:	2100      	movs	r1, #0
    a728:	f240 7089 	movw	r0, #1929	; 0x789
    a72c:	f3af 8000 	nop.w
    a730:	4631      	mov	r1, r6
    a732:	2002      	movs	r0, #2
    a734:	f7ff fbb2 	bl	9e9c <MPSL_IRQ_RADIO_Handler+0xf34>
    a738:	9010      	str	r0, [sp, #64]	; 0x40
    a73a:	b920      	cbnz	r0, a746 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a73c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a73e:	7800      	ldrb	r0, [r0, #0]
    a740:	b1e8      	cbz	r0, a77e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a742:	2801      	cmp	r0, #1
    a744:	d02a      	beq.n	a79c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a746:	b124      	cbz	r4, a752 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a748:	2100      	movs	r1, #0
    a74a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a74e:	f3af 8000 	nop.w
    a752:	20ff      	movs	r0, #255	; 0xff
    a754:	f1bb 0f00 	cmp.w	fp, #0
    a758:	bf18      	it	ne
    a75a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a75e:	d026      	beq.n	a7ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a760:	f04f 0801 	mov.w	r8, #1
    a764:	b124      	cbz	r4, a770 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a766:	2100      	movs	r1, #0
    a768:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a76c:	f3af 8000 	nop.w
    a770:	9810      	ldr	r0, [sp, #64]	; 0x40
    a772:	4e38      	ldr	r6, [pc, #224]	; (a854 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    a774:	2802      	cmp	r0, #2
    a776:	d023      	beq.n	a7c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    a778:	2801      	cmp	r0, #1
    a77a:	d029      	beq.n	a7d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a77c:	e02d      	b.n	a7da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a77e:	b124      	cbz	r4, a78a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    a780:	2100      	movs	r1, #0
    a782:	f240 7091 	movw	r0, #1937	; 0x791
    a786:	f3af 8000 	nop.w
    a78a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a78e:	4651      	mov	r1, sl
    a790:	2004      	movs	r0, #4
    a792:	f7ff fb51 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    a796:	f04f 0801 	mov.w	r8, #1
    a79a:	e7e3      	b.n	a764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a79c:	2c00      	cmp	r4, #0
    a79e:	f43f aeb5 	beq.w	a50c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a7a2:	2100      	movs	r1, #0
    a7a4:	f240 709c 	movw	r0, #1948	; 0x79c
    a7a8:	f3af 8000 	nop.w
    a7ac:	e6ae      	b.n	a50c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a7ae:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a7b2:	2101      	movs	r1, #1
    a7b4:	4391      	bics	r1, r2
    a7b6:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a7ba:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a7be:	e7cf      	b.n	a760 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    a7c0:	68a8      	ldr	r0, [r5, #8]
    a7c2:	990e      	ldr	r1, [sp, #56]	; 0x38
    a7c4:	1a40      	subs	r0, r0, r1
    a7c6:	f005 fced 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a7ca:	6871      	ldr	r1, [r6, #4]
    a7cc:	b921      	cbnz	r1, a7d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a7ce:	e004      	b.n	a7da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a7d0:	6871      	ldr	r1, [r6, #4]
    a7d2:	f04f 30ff 	mov.w	r0, #4294967295
    a7d6:	b101      	cbz	r1, a7da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a7d8:	4788      	blx	r1
    a7da:	f1b9 0f00 	cmp.w	r9, #0
    a7de:	d024      	beq.n	a82a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    a7e0:	b124      	cbz	r4, a7ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a7e2:	2100      	movs	r1, #0
    a7e4:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a7e8:	f3af 8000 	nop.w
    a7ec:	f1b8 0f00 	cmp.w	r8, #0
    a7f0:	d011      	beq.n	a816 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a7f2:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a7f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a7fa:	4428      	add	r0, r5
    a7fc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a800:	2820      	cmp	r0, #32
    a802:	d008      	beq.n	a816 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a804:	b124      	cbz	r4, a810 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    a806:	2100      	movs	r1, #0
    a808:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a80c:	f3af 8000 	nop.w
    a810:	7870      	ldrb	r0, [r6, #1]
    a812:	f001 ffa3 	bl	c75c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a816:	b124      	cbz	r4, a822 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a818:	2100      	movs	r1, #0
    a81a:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a81e:	f3af 8000 	nop.w
    a822:	b017      	add	sp, #92	; 0x5c
    a824:	4640      	mov	r0, r8
    a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a82a:	4807      	ldr	r0, [pc, #28]	; (a848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a82c:	2800      	cmp	r0, #0
    a82e:	bf18      	it	ne
    a830:	f3af 8000 	nopne.w
    a834:	b662      	cpsie	i
    a836:	e7d3      	b.n	a7e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    a838:	e000ed04 	.word	0xe000ed04
    a83c:	20000fdc 	.word	0x20000fdc
    a840:	00000000 	.word	0x00000000
    a844:	20000bdc 	.word	0x20000bdc
    a848:	00000000 	.word	0x00000000
    a84c:	20000f5c 	.word	0x20000f5c
    a850:	00000000 	.word	0x00000000
    a854:	20000190 	.word	0x20000190

0000a858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a85c:	4606      	mov	r6, r0
    a85e:	7800      	ldrb	r0, [r0, #0]
    a860:	b08d      	sub	sp, #52	; 0x34
    a862:	b118      	cbz	r0, a86c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a864:	b00d      	add	sp, #52	; 0x34
    a866:	2000      	movs	r0, #0
    a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a86c:	488c      	ldr	r0, [pc, #560]	; (aaa0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a86e:	6800      	ldr	r0, [r0, #0]
    a870:	05c0      	lsls	r0, r0, #23
    a872:	0dc0      	lsrs	r0, r0, #23
    a874:	d00e      	beq.n	a894 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a876:	3810      	subs	r0, #16
    a878:	b240      	sxtb	r0, r0
    a87a:	2800      	cmp	r0, #0
    a87c:	bfb8      	it	lt
    a87e:	f000 000f 	andlt.w	r0, r0, #15
    a882:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a886:	bfac      	ite	ge
    a888:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a88c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a890:	0940      	lsrs	r0, r0, #5
    a892:	d0e7      	beq.n	a864 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a894:	4d83      	ldr	r5, [pc, #524]	; (aaa4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a896:	4c84      	ldr	r4, [pc, #528]	; (aaa8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a898:	f04f 0b01 	mov.w	fp, #1
    a89c:	2700      	movs	r7, #0
    a89e:	b125      	cbz	r5, a8aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a8a0:	2100      	movs	r1, #0
    a8a2:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a8a6:	f3af 8000 	nop.w
    a8aa:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a8ae:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a8b2:	f04f 0900 	mov.w	r9, #0
    a8b6:	b125      	cbz	r5, a8c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a8b8:	2100      	movs	r1, #0
    a8ba:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a8be:	f3af 8000 	nop.w
    a8c2:	487a      	ldr	r0, [pc, #488]	; (aaac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a8c4:	ea2b 080a 	bic.w	r8, fp, sl
    a8c8:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a8cc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a8d0:	2240      	movs	r2, #64	; 0x40
    a8d2:	f005 fdea 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a8d6:	b125      	cbz	r5, a8e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a8d8:	2100      	movs	r1, #0
    a8da:	f240 505e 	movw	r0, #1374	; 0x55e
    a8de:	f3af 8000 	nop.w
    a8e2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a8e6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a8ea:	4421      	add	r1, r4
    a8ec:	4420      	add	r0, r4
    a8ee:	8c0a      	ldrh	r2, [r1, #32]
    a8f0:	8402      	strh	r2, [r0, #32]
    a8f2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a8f6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a8fa:	b125      	cbz	r5, a906 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a8fc:	2100      	movs	r1, #0
    a8fe:	f240 5062 	movw	r0, #1378	; 0x562
    a902:	f3af 8000 	nop.w
    a906:	b125      	cbz	r5, a912 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a908:	2100      	movs	r1, #0
    a90a:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a90e:	f3af 8000 	nop.w
    a912:	a808      	add	r0, sp, #32
    a914:	f000 ff08 	bl	b728 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a918:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a91c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a920:	4643      	mov	r3, r8
    a922:	466a      	mov	r2, sp
    a924:	4631      	mov	r1, r6
    a926:	a80a      	add	r0, sp, #40	; 0x28
    a928:	f7ff f872 	bl	9a10 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a92c:	b125      	cbz	r5, a938 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a92e:	2100      	movs	r1, #0
    a930:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a934:	f3af 8000 	nop.w
    a938:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a93c:	2820      	cmp	r0, #32
    a93e:	d01a      	beq.n	a976 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a940:	68e0      	ldr	r0, [r4, #12]
    a942:	9900      	ldr	r1, [sp, #0]
    a944:	1a09      	subs	r1, r1, r0
    a946:	0209      	lsls	r1, r1, #8
    a948:	17ca      	asrs	r2, r1, #31
    a94a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a94e:	1209      	asrs	r1, r1, #8
    a950:	d511      	bpl.n	a976 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a952:	9900      	ldr	r1, [sp, #0]
    a954:	4281      	cmp	r1, r0
    a956:	d902      	bls.n	a95e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a958:	9902      	ldr	r1, [sp, #8]
    a95a:	1c49      	adds	r1, r1, #1
    a95c:	9102      	str	r1, [sp, #8]
    a95e:	e9dd 2100 	ldrd	r2, r1, [sp]
    a962:	1a89      	subs	r1, r1, r2
    a964:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a968:	4408      	add	r0, r1
    a96a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a96e:	e9cd 2000 	strd	r2, r0, [sp]
    a972:	f04f 0901 	mov.w	r9, #1
    a976:	b125      	cbz	r5, a982 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a978:	2100      	movs	r1, #0
    a97a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a97e:	f3af 8000 	nop.w
    a982:	9900      	ldr	r1, [sp, #0]
    a984:	980a      	ldr	r0, [sp, #40]	; 0x28
    a986:	9a01      	ldr	r2, [sp, #4]
    a988:	1a09      	subs	r1, r1, r0
    a98a:	1a10      	subs	r0, r2, r0
    a98c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a990:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a994:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a998:	bf98      	it	ls
    a99a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a99e:	d809      	bhi.n	a9b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a9a0:	4643      	mov	r3, r8
    a9a2:	4669      	mov	r1, sp
    a9a4:	4842      	ldr	r0, [pc, #264]	; (aab0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a9a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a9a8:	f7fe fb3a 	bl	9020 <MPSL_IRQ_RADIO_Handler+0xb8>
    a9ac:	ea59 0000 	orrs.w	r0, r9, r0
    a9b0:	d129      	bne.n	aa06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a9b2:	e042      	b.n	aa3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a9b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a9b6:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a9ba:	9002      	str	r0, [sp, #8]
    a9bc:	aa09      	add	r2, sp, #36	; 0x24
    a9be:	a907      	add	r1, sp, #28
    a9c0:	4650      	mov	r0, sl
    a9c2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a9c6:	f000 fd3f 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a9ca:	f001 fa7b 	bl	bec4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a9ce:	f000 fd1f 	bl	b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a9d2:	4681      	mov	r9, r0
    a9d4:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a9d8:	2820      	cmp	r0, #32
    a9da:	d03b      	beq.n	aa54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a9dc:	68e0      	ldr	r0, [r4, #12]
    a9de:	1d40      	adds	r0, r0, #5
    a9e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a9e4:	9900      	ldr	r1, [sp, #0]
    a9e6:	4281      	cmp	r1, r0
    a9e8:	d902      	bls.n	a9f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a9ea:	9902      	ldr	r1, [sp, #8]
    a9ec:	1c49      	adds	r1, r1, #1
    a9ee:	9102      	str	r1, [sp, #8]
    a9f0:	e9dd 2100 	ldrd	r2, r1, [sp]
    a9f4:	1a89      	subs	r1, r1, r2
    a9f6:	9000      	str	r0, [sp, #0]
    a9f8:	4408      	add	r0, r1
    a9fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a9fe:	9001      	str	r0, [sp, #4]
    aa00:	201f      	movs	r0, #31
    aa02:	f88d 000c 	strb.w	r0, [sp, #12]
    aa06:	9800      	ldr	r0, [sp, #0]
    aa08:	f005 fbcc 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa0c:	1c41      	adds	r1, r0, #1
    aa0e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    aa12:	f89d 200c 	ldrb.w	r2, [sp, #12]
    aa16:	4410      	add	r0, r2
    aa18:	4408      	add	r0, r1
    aa1a:	e9c6 0704 	strd	r0, r7, [r6, #16]
    aa1e:	b125      	cbz	r5, aa2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    aa20:	2100      	movs	r1, #0
    aa22:	f240 601a 	movw	r0, #1562	; 0x61a
    aa26:	f3af 8000 	nop.w
    aa2a:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    aa2e:	4a21      	ldr	r2, [pc, #132]	; (aab4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    aa30:	9b02      	ldr	r3, [sp, #8]
    aa32:	fbe3 1002 	umlal	r1, r0, r3, r2
    aa36:	e9c6 1004 	strd	r1, r0, [r6, #16]
    aa3a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    aa3e:	f88d 0014 	strb.w	r0, [sp, #20]
    aa42:	f89d 0014 	ldrb.w	r0, [sp, #20]
    aa46:	2800      	cmp	r0, #0
    aa48:	f47f af29 	bne.w	a89e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    aa4c:	b00d      	add	sp, #52	; 0x34
    aa4e:	2001      	movs	r0, #1
    aa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa54:	f108 0809 	add.w	r8, r8, #9
    aa58:	f1ba 0f00 	cmp.w	sl, #0
    aa5c:	d016      	beq.n	aa8c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    aa5e:	f001 fd31 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aa62:	b998      	cbnz	r0, aa8c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    aa64:	f001 fc06 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    aa68:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    aa6c:	bf08      	it	eq
    aa6e:	200d      	moveq	r0, #13
    aa70:	d00b      	beq.n	aa8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    aa72:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aa76:	3856      	subs	r0, #86	; 0x56
    aa78:	bf08      	it	eq
    aa7a:	201c      	moveq	r0, #28
    aa7c:	d005      	beq.n	aa8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    aa7e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    aa82:	389f      	subs	r0, #159	; 0x9f
    aa84:	bf14      	ite	ne
    aa86:	4638      	movne	r0, r7
    aa88:	2032      	moveq	r0, #50	; 0x32
    aa8a:	4480      	add	r8, r0
    aa8c:	9807      	ldr	r0, [sp, #28]
    aa8e:	4581      	cmp	r9, r0
    aa90:	bf84      	itt	hi
    aa92:	eba9 0000 	subhi.w	r0, r9, r0
    aa96:	4480      	addhi	r8, r0
    aa98:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    aa9c:	e7a2      	b.n	a9e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    aa9e:	0000      	.short	0x0000
    aaa0:	e000ed04 	.word	0xe000ed04
    aaa4:	00000000 	.word	0x00000000
    aaa8:	20000fdc 	.word	0x20000fdc
    aaac:	20000f5c 	.word	0x20000f5c
    aab0:	0f424000 	.word	0x0f424000
    aab4:	1e848000 	.word	0x1e848000

0000aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    aab8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aabc:	4d92      	ldr	r5, [pc, #584]	; (ad08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    aabe:	b08c      	sub	sp, #48	; 0x30
    aac0:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aac4:	2000      	movs	r0, #0
    aac6:	9008      	str	r0, [sp, #32]
    aac8:	9006      	str	r0, [sp, #24]
    aaca:	2001      	movs	r0, #1
    aacc:	4c8f      	ldr	r4, [pc, #572]	; (ad0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    aace:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    aad2:	f04f 0800 	mov.w	r8, #0
    aad6:	4607      	mov	r7, r0
    aad8:	9007      	str	r0, [sp, #28]
    aada:	b124      	cbz	r4, aae6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    aadc:	2100      	movs	r1, #0
    aade:	f240 70e4 	movw	r0, #2020	; 0x7e4
    aae2:	f3af 8000 	nop.w
    aae6:	9807      	ldr	r0, [sp, #28]
    aae8:	2800      	cmp	r0, #0
    aaea:	d03c      	beq.n	ab66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    aaec:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    aaf0:	b124      	cbz	r4, aafc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    aaf2:	2100      	movs	r1, #0
    aaf4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    aaf8:	f3af 8000 	nop.w
    aafc:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    ab00:	2240      	movs	r2, #64	; 0x40
    ab02:	ea27 060a 	bic.w	r6, r7, sl
    ab06:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    ab0a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    ab0e:	4683      	mov	fp, r0
    ab10:	f005 fccb 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ab14:	b124      	cbz	r4, ab20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    ab16:	2100      	movs	r1, #0
    ab18:	f240 505e 	movw	r0, #1374	; 0x55e
    ab1c:	f3af 8000 	nop.w
    ab20:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ab24:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    ab28:	4428      	add	r0, r5
    ab2a:	4429      	add	r1, r5
    ab2c:	9000      	str	r0, [sp, #0]
    ab2e:	8c0a      	ldrh	r2, [r1, #32]
    ab30:	8402      	strh	r2, [r0, #32]
    ab32:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    ab36:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    ab3a:	b124      	cbz	r4, ab46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    ab3c:	2100      	movs	r1, #0
    ab3e:	f240 5062 	movw	r0, #1378	; 0x562
    ab42:	f3af 8000 	nop.w
    ab46:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    ab4a:	f88d 0008 	strb.w	r0, [sp, #8]
    ab4e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ab52:	b178      	cbz	r0, ab74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    ab54:	2c00      	cmp	r4, #0
    ab56:	bf1c      	itt	ne
    ab58:	2100      	movne	r1, #0
    ab5a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    ab5e:	d0bc      	beq.n	aada <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ab60:	f3af 8000 	nop.w
    ab64:	e7b9      	b.n	aada <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ab66:	486a      	ldr	r0, [pc, #424]	; (ad10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    ab68:	2800      	cmp	r0, #0
    ab6a:	bf18      	it	ne
    ab6c:	f3af 8000 	nopne.w
    ab70:	b662      	cpsie	i
    ab72:	e7bb      	b.n	aaec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    ab74:	b124      	cbz	r4, ab80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    ab76:	2100      	movs	r1, #0
    ab78:	f240 70f3 	movw	r0, #2035	; 0x7f3
    ab7c:	f3af 8000 	nop.w
    ab80:	980c      	ldr	r0, [sp, #48]	; 0x30
    ab82:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    ab86:	2803      	cmp	r0, #3
    ab88:	d17e      	bne.n	ac88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    ab8a:	9a00      	ldr	r2, [sp, #0]
    ab8c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ab8e:	f892 0020 	ldrb.w	r0, [r2, #32]
    ab92:	4288      	cmp	r0, r1
    ab94:	bf14      	ite	ne
    ab96:	f04f 0a00 	movne.w	sl, #0
    ab9a:	f04f 0a01 	moveq.w	sl, #1
    ab9e:	f102 0c20 	add.w	ip, r2, #32
    aba2:	4683      	mov	fp, r0
    aba4:	2220      	movs	r2, #32
    aba6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    abaa:	e003      	b.n	abb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    abac:	4602      	mov	r2, r0
    abae:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    abb2:	7840      	ldrb	r0, [r0, #1]
    abb4:	4288      	cmp	r0, r1
    abb6:	d002      	beq.n	abbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    abb8:	2820      	cmp	r0, #32
    abba:	d00a      	beq.n	abd2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    abbc:	e7f6      	b.n	abac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    abbe:	2820      	cmp	r0, #32
    abc0:	d007      	beq.n	abd2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    abc2:	4583      	cmp	fp, r0
    abc4:	d107      	bne.n	abd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    abc6:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    abca:	7840      	ldrb	r0, [r0, #1]
    abcc:	f88c 0000 	strb.w	r0, [ip]
    abd0:	e007      	b.n	abe2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    abd2:	4640      	mov	r0, r8
    abd4:	e00c      	b.n	abf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    abd6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    abda:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    abde:	7840      	ldrb	r0, [r0, #1]
    abe0:	7048      	strb	r0, [r1, #1]
    abe2:	b124      	cbz	r4, abee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    abe4:	2100      	movs	r1, #0
    abe6:	f240 40c9 	movw	r0, #1225	; 0x4c9
    abea:	f3af 8000 	nop.w
    abee:	4638      	mov	r0, r7
    abf0:	46c3      	mov	fp, r8
    abf2:	ea10 0f0a 	tst.w	r0, sl
    abf6:	bf18      	it	ne
    abf8:	46bb      	movne	fp, r7
    abfa:	2800      	cmp	r0, #0
    abfc:	d04e      	beq.n	ac9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    abfe:	b124      	cbz	r4, ac0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    ac00:	2100      	movs	r1, #0
    ac02:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    ac06:	f3af 8000 	nop.w
    ac0a:	4632      	mov	r2, r6
    ac0c:	2001      	movs	r0, #1
    ac0e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ac10:	f7ff f912 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    ac14:	b124      	cbz	r4, ac20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    ac16:	2100      	movs	r1, #0
    ac18:	f640 0001 	movw	r0, #2049	; 0x801
    ac1c:	f3af 8000 	nop.w
    ac20:	483c      	ldr	r0, [pc, #240]	; (ad14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    ac22:	2800      	cmp	r0, #0
    ac24:	bf18      	it	ne
    ac26:	f3af 8000 	nopne.w
    ac2a:	f3ef 8010 	mrs	r0, PRIMASK
    ac2e:	b672      	cpsid	i
    ac30:	9007      	str	r0, [sp, #28]
    ac32:	b124      	cbz	r4, ac3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    ac34:	2100      	movs	r1, #0
    ac36:	f640 0006 	movw	r0, #2054	; 0x806
    ac3a:	f3af 8000 	nop.w
    ac3e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    ac42:	f88d 0008 	strb.w	r0, [sp, #8]
    ac46:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ac4a:	b138      	cbz	r0, ac5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    ac4c:	2c00      	cmp	r4, #0
    ac4e:	bf1c      	itt	ne
    ac50:	2100      	movne	r1, #0
    ac52:	f640 000a 	movwne	r0, #2058	; 0x80a
    ac56:	f43f af40 	beq.w	aada <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ac5a:	e781      	b.n	ab60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    ac5c:	f1bb 0f00 	cmp.w	fp, #0
    ac60:	d009      	beq.n	ac76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ac62:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    ac66:	2820      	cmp	r0, #32
    ac68:	d105      	bne.n	ac76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ac6a:	4631      	mov	r1, r6
    ac6c:	2002      	movs	r0, #2
    ac6e:	f7ff f915 	bl	9e9c <MPSL_IRQ_RADIO_Handler+0xf34>
    ac72:	9006      	str	r0, [sp, #24]
    ac74:	b1f8      	cbz	r0, acb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    ac76:	b124      	cbz	r4, ac82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    ac78:	2100      	movs	r1, #0
    ac7a:	f640 001e 	movw	r0, #2078	; 0x81e
    ac7e:	f3af 8000 	nop.w
    ac82:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ac86:	e000      	b.n	ac8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ac88:	e008      	b.n	ac9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ac8a:	ea27 0000 	bic.w	r0, r7, r0
    ac8e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    ac92:	20ff      	movs	r0, #255	; 0xff
    ac94:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    ac98:	2001      	movs	r0, #1
    ac9a:	9008      	str	r0, [sp, #32]
    ac9c:	b124      	cbz	r4, aca8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    ac9e:	2100      	movs	r1, #0
    aca0:	f640 0027 	movw	r0, #2087	; 0x827
    aca4:	f3af 8000 	nop.w
    aca8:	9806      	ldr	r0, [sp, #24]
    acaa:	4e1b      	ldr	r6, [pc, #108]	; (ad18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    acac:	2802      	cmp	r0, #2
    acae:	d009      	beq.n	acc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    acb0:	2801      	cmp	r0, #1
    acb2:	d010      	beq.n	acd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    acb4:	e014      	b.n	ace0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    acb6:	b19c      	cbz	r4, ace0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    acb8:	2100      	movs	r1, #0
    acba:	f640 0019 	movw	r0, #2073	; 0x819
    acbe:	f3af 8000 	nop.w
    acc2:	e7ec      	b.n	ac9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    acc4:	f000 fd2a 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    acc8:	68a9      	ldr	r1, [r5, #8]
    acca:	1a08      	subs	r0, r1, r0
    accc:	f005 fa6a 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    acd0:	6871      	ldr	r1, [r6, #4]
    acd2:	b921      	cbnz	r1, acde <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    acd4:	e004      	b.n	ace0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    acd6:	6871      	ldr	r1, [r6, #4]
    acd8:	f04f 30ff 	mov.w	r0, #4294967295
    acdc:	b101      	cbz	r1, ace0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    acde:	4788      	blx	r1
    ace0:	9807      	ldr	r0, [sp, #28]
    ace2:	b148      	cbz	r0, acf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    ace4:	b124      	cbz	r4, acf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    ace6:	2100      	movs	r1, #0
    ace8:	f640 003c 	movw	r0, #2108	; 0x83c
    acec:	f3af 8000 	nop.w
    acf0:	9808      	ldr	r0, [sp, #32]
    acf2:	b00d      	add	sp, #52	; 0x34
    acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acf8:	4805      	ldr	r0, [pc, #20]	; (ad10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    acfa:	2800      	cmp	r0, #0
    acfc:	bf18      	it	ne
    acfe:	f3af 8000 	nopne.w
    ad02:	b662      	cpsie	i
    ad04:	e7ee      	b.n	ace4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    ad06:	0000      	.short	0x0000
    ad08:	20000fdc 	.word	0x20000fdc
	...
    ad18:	20000190 	.word	0x20000190

0000ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ad1c:	b510      	push	{r4, lr}
    ad1e:	2820      	cmp	r0, #32
    ad20:	d211      	bcs.n	ad46 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ad22:	490e      	ldr	r1, [pc, #56]	; (ad5c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ad24:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ad28:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    ad2c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    ad30:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    ad34:	b13b      	cbz	r3, ad46 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ad36:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ad3a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    ad3e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ad42:	2a01      	cmp	r2, #1
    ad44:	d001      	beq.n	ad4a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ad46:	2000      	movs	r0, #0
    ad48:	bd10      	pop	{r4, pc}
    ad4a:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    ad4e:	4601      	mov	r1, r0
    ad50:	2000      	movs	r0, #0
    ad52:	f7ff f871 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    ad56:	2001      	movs	r0, #1
    ad58:	bd10      	pop	{r4, pc}
    ad5a:	0000      	.short	0x0000
    ad5c:	20000fdc 	.word	0x20000fdc

0000ad60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ad60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad64:	4e86      	ldr	r6, [pc, #536]	; (af80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ad66:	4680      	mov	r8, r0
    ad68:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ad6c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ad70:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ad74:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ad78:	2800      	cmp	r0, #0
    ad7a:	d071      	beq.n	ae60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ad7c:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    ad80:	4d80      	ldr	r5, [pc, #512]	; (af84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ad82:	b125      	cbz	r5, ad8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ad84:	2100      	movs	r1, #0
    ad86:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ad8a:	f3af 8000 	nop.w
    ad8e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ad92:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ad96:	2801      	cmp	r0, #1
    ad98:	d018      	beq.n	adcc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ad9a:	b2c0      	uxtb	r0, r0
    ad9c:	2804      	cmp	r0, #4
    ad9e:	bf1c      	itt	ne
    ada0:	2805      	cmpne	r0, #5
    ada2:	2806      	cmpne	r0, #6
    ada4:	d061      	beq.n	ae6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ada6:	b12d      	cbz	r5, adb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ada8:	f04f 0100 	mov.w	r1, #0
    adac:	f640 30c5 	movw	r0, #3013	; 0xbc5
    adb0:	f3af 8000 	nop.w
    adb4:	f005 fb2e 	bl	10414 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    adb8:	b125      	cbz	r5, adc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    adba:	2100      	movs	r1, #0
    adbc:	f640 30c9 	movw	r0, #3017	; 0xbc9
    adc0:	f3af 8000 	nop.w
    adc4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    adc8:	2801      	cmp	r0, #1
    adca:	d1e6      	bne.n	ad9a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    adcc:	2401      	movs	r4, #1
    adce:	b125      	cbz	r5, adda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    add0:	2100      	movs	r1, #0
    add2:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    add6:	f3af 8000 	nop.w
    adda:	2c00      	cmp	r4, #0
    addc:	d04b      	beq.n	ae76 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    adde:	2000      	movs	r0, #0
    ade0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ade4:	b125      	cbz	r5, adf0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ade6:	2100      	movs	r1, #0
    ade8:	f640 30d5 	movw	r0, #3029	; 0xbd5
    adec:	f3af 8000 	nop.w
    adf0:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    adf4:	2001      	movs	r0, #1
    adf6:	ea20 090b 	bic.w	r9, r0, fp
    adfa:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    adfe:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ae02:	2240      	movs	r2, #64	; 0x40
    ae04:	f005 fb51 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ae08:	b125      	cbz	r5, ae14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ae0a:	2100      	movs	r1, #0
    ae0c:	f240 505e 	movw	r0, #1374	; 0x55e
    ae10:	f3af 8000 	nop.w
    ae14:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    ae18:	eb00 0a06 	add.w	sl, r0, r6
    ae1c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    ae20:	4430      	add	r0, r6
    ae22:	8c01      	ldrh	r1, [r0, #32]
    ae24:	f8aa 1020 	strh.w	r1, [sl, #32]
    ae28:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    ae2c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    ae30:	b125      	cbz	r5, ae3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    ae32:	2100      	movs	r1, #0
    ae34:	f240 5062 	movw	r0, #1378	; 0x562
    ae38:	f3af 8000 	nop.w
    ae3c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    ae40:	f88d 0000 	strb.w	r0, [sp]
    ae44:	f89d 0000 	ldrb.w	r0, [sp]
    ae48:	b1e0      	cbz	r0, ae84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    ae4a:	2d00      	cmp	r5, #0
    ae4c:	bf1c      	itt	ne
    ae4e:	2100      	movne	r1, #0
    ae50:	f640 30db 	movwne	r0, #3035	; 0xbdb
    ae54:	d0bb      	beq.n	adce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ae56:	bf00      	nop
    ae58:	f3af 8000 	nop.w
    ae5c:	e7b7      	b.n	adce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ae5e:	e7ff      	b.n	ae60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ae60:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ae64:	2070      	movs	r0, #112	; 0x70
    ae66:	f001 fba5 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae6a:	464a      	mov	r2, r9
    ae6c:	4641      	mov	r1, r8
    ae6e:	2001      	movs	r0, #1
    ae70:	f7fe ffe2 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    ae74:	e7a0      	b.n	adb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ae76:	4844      	ldr	r0, [pc, #272]	; (af88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ae78:	2800      	cmp	r0, #0
    ae7a:	bf18      	it	ne
    ae7c:	f3af 8000 	nopne.w
    ae80:	b662      	cpsie	i
    ae82:	e7ac      	b.n	adde <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ae84:	b125      	cbz	r5, ae90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ae86:	2100      	movs	r1, #0
    ae88:	f640 30df 	movw	r0, #3039	; 0xbdf
    ae8c:	f3af 8000 	nop.w
    ae90:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ae94:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ae98:	4640      	mov	r0, r8
    ae9a:	461c      	mov	r4, r3
    ae9c:	f04f 0b20 	mov.w	fp, #32
    aea0:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    aea4:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    aea8:	e004      	b.n	aeb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    aeaa:	46a3      	mov	fp, r4
    aeac:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    aeb0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    aeb4:	4284      	cmp	r4, r0
    aeb6:	d002      	beq.n	aebe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    aeb8:	2c20      	cmp	r4, #32
    aeba:	d02b      	beq.n	af14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    aebc:	e7f5      	b.n	aeaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    aebe:	2c20      	cmp	r4, #32
    aec0:	d028      	beq.n	af14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    aec2:	42a3      	cmp	r3, r4
    aec4:	d104      	bne.n	aed0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    aec6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    aeca:	7840      	ldrb	r0, [r0, #1]
    aecc:	7008      	strb	r0, [r1, #0]
    aece:	e005      	b.n	aedc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    aed0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    aed4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    aed8:	7840      	ldrb	r0, [r0, #1]
    aeda:	7048      	strb	r0, [r1, #1]
    aedc:	f1ba 0f00 	cmp.w	sl, #0
    aee0:	d011      	beq.n	af06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    aee2:	b125      	cbz	r5, aeee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    aee4:	2100      	movs	r1, #0
    aee6:	f240 40c1 	movw	r0, #1217	; 0x4c1
    aeea:	f3af 8000 	nop.w
    aeee:	f89a 0000 	ldrb.w	r0, [sl]
    aef2:	42a0      	cmp	r0, r4
    aef4:	d107      	bne.n	af06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    aef6:	b125      	cbz	r5, af02 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    aef8:	2100      	movs	r1, #0
    aefa:	f240 40c4 	movw	r0, #1220	; 0x4c4
    aefe:	f3af 8000 	nop.w
    af02:	f88a b000 	strb.w	fp, [sl]
    af06:	b15d      	cbz	r5, af20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    af08:	2100      	movs	r1, #0
    af0a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    af0e:	f3af 8000 	nop.w
    af12:	e000      	b.n	af16 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    af14:	b125      	cbz	r5, af20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    af16:	2100      	movs	r1, #0
    af18:	f640 30e3 	movw	r0, #3043	; 0xbe3
    af1c:	f3af 8000 	nop.w
    af20:	481a      	ldr	r0, [pc, #104]	; (af8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    af22:	2800      	cmp	r0, #0
    af24:	bf18      	it	ne
    af26:	f3af 8000 	nopne.w
    af2a:	f3ef 8410 	mrs	r4, PRIMASK
    af2e:	b672      	cpsid	i
    af30:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    af34:	f88d 0000 	strb.w	r0, [sp]
    af38:	f89d 0000 	ldrb.w	r0, [sp]
    af3c:	b138      	cbz	r0, af4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    af3e:	2d00      	cmp	r5, #0
    af40:	bf1c      	itt	ne
    af42:	2100      	movne	r1, #0
    af44:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    af48:	f43f af41 	beq.w	adce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    af4c:	e784      	b.n	ae58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    af4e:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    af52:	20ff      	movs	r0, #255	; 0xff
    af54:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    af58:	b154      	cbz	r4, af70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    af5a:	2d00      	cmp	r5, #0
    af5c:	bf08      	it	eq
    af5e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af62:	2100      	movs	r1, #0
    af64:	f640 30f6 	movw	r0, #3062	; 0xbf6
    af68:	f3af 8000 	nop.w
    af6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af70:	4805      	ldr	r0, [pc, #20]	; (af88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    af72:	2800      	cmp	r0, #0
    af74:	bf18      	it	ne
    af76:	f3af 8000 	nopne.w
    af7a:	b662      	cpsie	i
    af7c:	e7ed      	b.n	af5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    af7e:	0000      	.short	0x0000
    af80:	20000fdc 	.word	0x20000fdc
	...

0000af90 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    af90:	b570      	push	{r4, r5, r6, lr}
    af92:	460d      	mov	r5, r1
    af94:	4606      	mov	r6, r0
    af96:	f001 fa83 	bl	c4a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    af9a:	480f      	ldr	r0, [pc, #60]	; (afd8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    af9c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    afa0:	2400      	movs	r4, #0
    afa2:	3880      	subs	r0, #128	; 0x80
    afa4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    afa8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    afac:	b129      	cbz	r1, afba <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    afae:	1c61      	adds	r1, r4, #1
    afb0:	b2cc      	uxtb	r4, r1
    afb2:	2c20      	cmp	r4, #32
    afb4:	d3f8      	bcc.n	afa8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    afb6:	2020      	movs	r0, #32
    afb8:	bd70      	pop	{r4, r5, r6, pc}
    afba:	4808      	ldr	r0, [pc, #32]	; (afdc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    afbc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    afc0:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    afc4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    afc8:	4621      	mov	r1, r4
    afca:	6045      	str	r5, [r0, #4]
    afcc:	2001      	movs	r0, #1
    afce:	f7fe ff33 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    afd2:	4620      	mov	r0, r4
    afd4:	bd70      	pop	{r4, r5, r6, pc}
    afd6:	0000      	.short	0x0000
    afd8:	20000fdc 	.word	0x20000fdc
    afdc:	20000bdc 	.word	0x20000bdc

0000afe0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afe4:	b083      	sub	sp, #12
    afe6:	f000 fb99 	bl	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    afea:	4605      	mov	r5, r0
    afec:	f000 fe7c 	bl	bce8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    aff0:	4c84      	ldr	r4, [pc, #528]	; (b204 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    aff2:	6860      	ldr	r0, [r4, #4]
    aff4:	f1b0 3fff 	cmp.w	r0, #4294967295
    aff8:	bf1c      	itt	ne
    affa:	f04f 30ff 	movne.w	r0, #4294967295
    affe:	6060      	strne	r0, [r4, #4]
    b000:	7fa0      	ldrb	r0, [r4, #30]
    b002:	f8df 9204 	ldr.w	r9, [pc, #516]	; b208 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    b006:	b990      	cbnz	r0, b02e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    b008:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    b00c:	1a40      	subs	r0, r0, r1
    b00e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b012:	f44f 710c 	mov.w	r1, #560	; 0x230
    b016:	f001 fa2f 	bl	c478 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    b01a:	68e1      	ldr	r1, [r4, #12]
    b01c:	4408      	add	r0, r1
    b01e:	1a28      	subs	r0, r5, r0
    b020:	0200      	lsls	r0, r0, #8
    b022:	17c1      	asrs	r1, r0, #31
    b024:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    b028:	1200      	asrs	r0, r0, #8
    b02a:	0fc0      	lsrs	r0, r0, #31
    b02c:	d012      	beq.n	b054 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    b02e:	7e60      	ldrb	r0, [r4, #25]
    b030:	b320      	cbz	r0, b07c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    b032:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b036:	f88d 0000 	strb.w	r0, [sp]
    b03a:	f89d 0000 	ldrb.w	r0, [sp]
    b03e:	b1e8      	cbz	r0, b07c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    b040:	f000 fcae 	bl	b9a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b044:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    b048:	b1f0      	cbz	r0, b088 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    b04a:	f240 31f5 	movw	r1, #1013	; 0x3f5
    b04e:	2070      	movs	r0, #112	; 0x70
    b050:	f001 fab0 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b054:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b058:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    b05c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b060:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    b064:	6840      	ldr	r0, [r0, #4]
    b066:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    b06a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    b06e:	2108      	movs	r1, #8
    b070:	4790      	blx	r2
    b072:	f240 31dd 	movw	r1, #989	; 0x3dd
    b076:	2070      	movs	r0, #112	; 0x70
    b078:	f001 fa9c 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b07c:	1ce8      	adds	r0, r5, #3
    b07e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b082:	f000 fb71 	bl	b768 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b086:	e7dd      	b.n	b044 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    b088:	2001      	movs	r0, #1
    b08a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b08e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b092:	2820      	cmp	r0, #32
    b094:	d021      	beq.n	b0da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    b096:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    b09a:	2020      	movs	r0, #32
    b09c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    b0a0:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    b0a4:	2000      	movs	r0, #0
    b0a6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b0aa:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b0ae:	6020      	str	r0, [r4, #0]
    b0b0:	f000 ff0e 	bl	bed0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b0b4:	7720      	strb	r0, [r4, #28]
    b0b6:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    b0ba:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    b0be:	1907      	adds	r7, r0, r4
    b0c0:	f897 0020 	ldrb.w	r0, [r7, #32]
    b0c4:	2820      	cmp	r0, #32
    b0c6:	d058      	beq.n	b17a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b0c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b0cc:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    b0d0:	f899 001a 	ldrb.w	r0, [r9, #26]
    b0d4:	2801      	cmp	r0, #1
    b0d6:	d005      	beq.n	b0e4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    b0d8:	e04f      	b.n	b17a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b0da:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b0de:	2070      	movs	r0, #112	; 0x70
    b0e0:	f001 fa68 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0e4:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    b0e8:	aa01      	add	r2, sp, #4
    b0ea:	4669      	mov	r1, sp
    b0ec:	4658      	mov	r0, fp
    b0ee:	f000 f9ab 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b0f2:	f000 fee7 	bl	bec4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    b0f6:	f000 f98b 	bl	b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b0fa:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b0fe:	2820      	cmp	r0, #32
    b100:	d004      	beq.n	b10c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    b102:	68e0      	ldr	r0, [r4, #12]
    b104:	1d40      	adds	r0, r0, #5
    b106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b10a:	e01d      	b.n	b148 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    b10c:	f105 0a09 	add.w	sl, r5, #9
    b110:	f1bb 0f00 	cmp.w	fp, #0
    b114:	d016      	beq.n	b144 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b116:	f001 f9d5 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b11a:	b998      	cbnz	r0, b144 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b11c:	f001 f8aa 	bl	c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    b120:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    b124:	bf08      	it	eq
    b126:	200d      	moveq	r0, #13
    b128:	d00b      	beq.n	b142 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b12a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    b12e:	3856      	subs	r0, #86	; 0x56
    b130:	bf08      	it	eq
    b132:	201c      	moveq	r0, #28
    b134:	d005      	beq.n	b142 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b136:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    b13a:	389f      	subs	r0, #159	; 0x9f
    b13c:	bf14      	ite	ne
    b13e:	2000      	movne	r0, #0
    b140:	2032      	moveq	r0, #50	; 0x32
    b142:	4482      	add	sl, r0
    b144:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    b148:	f8d9 2008 	ldr.w	r2, [r9, #8]
    b14c:	1a81      	subs	r1, r0, r2
    b14e:	0209      	lsls	r1, r1, #8
    b150:	17cb      	asrs	r3, r1, #31
    b152:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    b156:	1209      	asrs	r1, r1, #8
    b158:	2900      	cmp	r1, #0
    b15a:	dc0e      	bgt.n	b17a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b15c:	f109 0308 	add.w	r3, r9, #8
    b160:	4282      	cmp	r2, r0
    b162:	d202      	bcs.n	b16a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    b164:	6899      	ldr	r1, [r3, #8]
    b166:	1e49      	subs	r1, r1, #1
    b168:	6099      	str	r1, [r3, #8]
    b16a:	e9d3 2100 	ldrd	r2, r1, [r3]
    b16e:	1a89      	subs	r1, r1, r2
    b170:	6018      	str	r0, [r3, #0]
    b172:	4408      	add	r0, r1
    b174:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b178:	6058      	str	r0, [r3, #4]
    b17a:	4631      	mov	r1, r6
    b17c:	2001      	movs	r0, #1
    b17e:	f7fe fe8d 	bl	9e9c <MPSL_IRQ_RADIO_Handler+0xf34>
    b182:	ea5f 0900 	movs.w	r9, r0
    b186:	d0f8      	beq.n	b17a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b188:	4820      	ldr	r0, [pc, #128]	; (b20c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    b18a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    b18e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b192:	2802      	cmp	r0, #2
    b194:	d104      	bne.n	b1a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    b196:	4632      	mov	r2, r6
    b198:	4641      	mov	r1, r8
    b19a:	2006      	movs	r0, #6
    b19c:	f7fe fe4c 	bl	9e38 <MPSL_IRQ_RADIO_Handler+0xed0>
    b1a0:	20ff      	movs	r0, #255	; 0xff
    b1a2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b1a6:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    b1aa:	4e19      	ldr	r6, [pc, #100]	; (b210 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    b1ac:	2820      	cmp	r0, #32
    b1ae:	bf1c      	itt	ne
    b1b0:	7870      	ldrbne	r0, [r6, #1]
    b1b2:	f001 fad3 	blne	c75c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b1b6:	7f20      	ldrb	r0, [r4, #28]
    b1b8:	b120      	cbz	r0, b1c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    b1ba:	f000 fe65 	bl	be88 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b1be:	2000      	movs	r0, #0
    b1c0:	7720      	strb	r0, [r4, #28]
    b1c2:	7760      	strb	r0, [r4, #29]
    b1c4:	f1b9 0f02 	cmp.w	r9, #2
    b1c8:	d011      	beq.n	b1ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    b1ca:	f1b9 0f01 	cmp.w	r9, #1
    b1ce:	bf1c      	itt	ne
    b1d0:	b003      	addne	sp, #12
    b1d2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1d6:	f04f 30ff 	mov.w	r0, #4294967295
    b1da:	6871      	ldr	r1, [r6, #4]
    b1dc:	2900      	cmp	r1, #0
    b1de:	bf04      	itt	eq
    b1e0:	b003      	addeq	sp, #12
    b1e2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1e6:	b003      	add	sp, #12
    b1e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1ec:	4708      	bx	r1
    b1ee:	68a0      	ldr	r0, [r4, #8]
    b1f0:	1b40      	subs	r0, r0, r5
    b1f2:	f004 ffd7 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1f6:	6871      	ldr	r1, [r6, #4]
    b1f8:	2900      	cmp	r1, #0
    b1fa:	d1f4      	bne.n	b1e6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    b1fc:	b003      	add	sp, #12
    b1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b202:	0000      	.short	0x0000
    b204:	20000fdc 	.word	0x20000fdc
    b208:	20000bdc 	.word	0x20000bdc
    b20c:	20000f5c 	.word	0x20000f5c
    b210:	20000190 	.word	0x20000190

0000b214 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b214:	b570      	push	{r4, r5, r6, lr}
    b216:	4c42      	ldr	r4, [pc, #264]	; (b320 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b218:	4605      	mov	r5, r0
    b21a:	b082      	sub	sp, #8
    b21c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b220:	2820      	cmp	r0, #32
    b222:	d008      	beq.n	b236 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b224:	6860      	ldr	r0, [r4, #4]
    b226:	f1b0 3fff 	cmp.w	r0, #4294967295
    b22a:	d009      	beq.n	b240 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b22c:	f640 21e4 	movw	r1, #2788	; 0xae4
    b230:	2070      	movs	r0, #112	; 0x70
    b232:	f001 f9bf 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b236:	f640 21e3 	movw	r1, #2787	; 0xae3
    b23a:	2070      	movs	r0, #112	; 0x70
    b23c:	f001 f9ba 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b240:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b244:	4937      	ldr	r1, [pc, #220]	; (b324 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b246:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b24a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    b24e:	68b0      	ldr	r0, [r6, #8]
    b250:	f004 ffa8 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b254:	4602      	mov	r2, r0
    b256:	8af0      	ldrh	r0, [r6, #22]
    b258:	7d31      	ldrb	r1, [r6, #20]
    b25a:	4b33      	ldr	r3, [pc, #204]	; (b328 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b25c:	4408      	add	r0, r1
    b25e:	1c40      	adds	r0, r0, #1
    b260:	1811      	adds	r1, r2, r0
    b262:	429a      	cmp	r2, r3
    b264:	d817      	bhi.n	b296 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b266:	4a31      	ldr	r2, [pc, #196]	; (b32c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b268:	4290      	cmp	r0, r2
    b26a:	dc1b      	bgt.n	b2a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b26c:	f1c2 0c00 	rsb	ip, r2, #0
    b270:	4560      	cmp	r0, ip
    b272:	db1e      	blt.n	b2b2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b274:	0056      	lsls	r6, r2, #1
    b276:	428e      	cmp	r6, r1
    b278:	bfdc      	itt	le
    b27a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b27e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b282:	dd05      	ble.n	b290 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b284:	2900      	cmp	r1, #0
    b286:	bfbc      	itt	lt
    b288:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b28c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b290:	1948      	adds	r0, r1, r5
    b292:	4299      	cmp	r1, r3
    b294:	d904      	bls.n	b2a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b296:	f240 519e 	movw	r1, #1438	; 0x59e
    b29a:	2070      	movs	r0, #112	; 0x70
    b29c:	f001 f98a 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2a0:	4295      	cmp	r5, r2
    b2a2:	dd04      	ble.n	b2ae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b2a4:	f240 519f 	movw	r1, #1439	; 0x59f
    b2a8:	2070      	movs	r0, #112	; 0x70
    b2aa:	f001 f983 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2ae:	4565      	cmp	r5, ip
    b2b0:	da04      	bge.n	b2bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b2b2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b2b6:	2070      	movs	r0, #112	; 0x70
    b2b8:	f001 f97c 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2bc:	4286      	cmp	r6, r0
    b2be:	bfdc      	itt	le
    b2c0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b2c4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b2c8:	dd05      	ble.n	b2d6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b2ca:	2800      	cmp	r0, #0
    b2cc:	bfbc      	itt	lt
    b2ce:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b2d2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b2d6:	aa01      	add	r2, sp, #4
    b2d8:	4669      	mov	r1, sp
    b2da:	f000 f8b5 	bl	b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b2de:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b2e2:	280f      	cmp	r0, #15
    b2e4:	bf8c      	ite	hi
    b2e6:	2001      	movhi	r0, #1
    b2e8:	2000      	movls	r0, #0
    b2ea:	9900      	ldr	r1, [sp, #0]
    b2ec:	4408      	add	r0, r1
    b2ee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b2f2:	6061      	str	r1, [r4, #4]
    b2f4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b2f8:	f88d 0000 	strb.w	r0, [sp]
    b2fc:	f89d 0000 	ldrb.w	r0, [sp]
    b300:	2800      	cmp	r0, #0
    b302:	bf04      	itt	eq
    b304:	b002      	addeq	sp, #8
    b306:	bd70      	popeq	{r4, r5, r6, pc}
    b308:	2005      	movs	r0, #5
    b30a:	f000 fbc7 	bl	ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b30e:	2800      	cmp	r0, #0
    b310:	bf1c      	itt	ne
    b312:	b002      	addne	sp, #8
    b314:	bd70      	popne	{r4, r5, r6, pc}
    b316:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b31a:	2070      	movs	r0, #112	; 0x70
    b31c:	f001 f94a 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b320:	20000fdc 	.word	0x20000fdc
    b324:	20000bdc 	.word	0x20000bdc
    b328:	1e847fff 	.word	0x1e847fff
    b32c:	0f424000 	.word	0x0f424000

0000b330 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b330:	b570      	push	{r4, r5, r6, lr}
    b332:	4c1c      	ldr	r4, [pc, #112]	; (b3a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b334:	2120      	movs	r1, #32
    b336:	f884 1020 	strb.w	r1, [r4, #32]
    b33a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b33e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b342:	2000      	movs	r0, #0
    b344:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b348:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b34c:	1e42      	subs	r2, r0, #1
    b34e:	e9c4 0200 	strd	r0, r2, [r4]
    b352:	77a0      	strb	r0, [r4, #30]
    b354:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b358:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b35c:	7720      	strb	r0, [r4, #28]
    b35e:	7760      	strb	r0, [r4, #29]
    b360:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b364:	62e2      	str	r2, [r4, #44]	; 0x2c
    b366:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b36a:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b36e:	2210      	movs	r2, #16
    b370:	7088      	strb	r0, [r1, #2]
    b372:	f801 0f04 	strb.w	r0, [r1, #4]!
    b376:	1e52      	subs	r2, r2, #1
    b378:	d1fa      	bne.n	b370 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b37a:	f000 fdb3 	bl	bee4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b37e:	4d0a      	ldr	r5, [pc, #40]	; (b3a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b380:	2601      	movs	r6, #1
    b382:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b386:	20ff      	movs	r0, #255	; 0xff
    b388:	7028      	strb	r0, [r5, #0]
    b38a:	4808      	ldr	r0, [pc, #32]	; (b3ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b38c:	f001 f9c8 	bl	c720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b390:	7068      	strb	r0, [r5, #1]
    b392:	f001 fa33 	bl	c7fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b396:	60a8      	str	r0, [r5, #8]
    b398:	f000 fd2e 	bl	bdf8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b39c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b3a0:	bd70      	pop	{r4, r5, r6, pc}
    b3a2:	0000      	.short	0x0000
    b3a4:	20000fdc 	.word	0x20000fdc
    b3a8:	20000190 	.word	0x20000190
    b3ac:	00009d61 	.word	0x00009d61

0000b3b0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b3b0:	b570      	push	{r4, r5, r6, lr}
    b3b2:	4605      	mov	r5, r0
    b3b4:	2001      	movs	r0, #1
    b3b6:	fa00 f405 	lsl.w	r4, r0, r5
    b3ba:	460e      	mov	r6, r1
    b3bc:	2a00      	cmp	r2, #0
    b3be:	bf08      	it	eq
    b3c0:	4808      	ldreq	r0, [pc, #32]	; (b3e4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b3c2:	d00c      	beq.n	b3de <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b3c4:	2000      	movs	r0, #0
    b3c6:	f000 fcfd 	bl	bdc4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b3ca:	00e9      	lsls	r1, r5, #3
    b3cc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b3d0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b3d4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b3d8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b3dc:	4802      	ldr	r0, [pc, #8]	; (b3e8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b3de:	6004      	str	r4, [r0, #0]
    b3e0:	bd70      	pop	{r4, r5, r6, pc}
    b3e2:	0000      	.short	0x0000
    b3e4:	4001f508 	.word	0x4001f508
    b3e8:	4001f504 	.word	0x4001f504

0000b3ec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b3ec:	b500      	push	{lr}
    b3ee:	b083      	sub	sp, #12
    b3f0:	4668      	mov	r0, sp
    b3f2:	f000 f999 	bl	b728 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b3f6:	9800      	ldr	r0, [sp, #0]
    b3f8:	f004 fed4 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b3fc:	9a01      	ldr	r2, [sp, #4]
    b3fe:	4b03      	ldr	r3, [pc, #12]	; (b40c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b400:	2100      	movs	r1, #0
    b402:	fbe2 0103 	umlal	r0, r1, r2, r3
    b406:	b003      	add	sp, #12
    b408:	bd00      	pop	{pc}
    b40a:	0000      	.short	0x0000
    b40c:	1e848000 	.word	0x1e848000

0000b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b410:	0b41      	lsrs	r1, r0, #13
    b412:	f248 6237 	movw	r2, #34359	; 0x8637
    b416:	4351      	muls	r1, r2
    b418:	0c0a      	lsrs	r2, r1, #16
    b41a:	4b09      	ldr	r3, [pc, #36]	; (b440 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b41c:	0251      	lsls	r1, r2, #9
    b41e:	fb02 0203 	mla	r2, r2, r3, r0
    b422:	4808      	ldr	r0, [pc, #32]	; (b444 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b424:	4350      	muls	r0, r2
    b426:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b42a:	306e      	adds	r0, #110	; 0x6e
    b42c:	0d40      	lsrs	r0, r0, #21
    b42e:	425b      	negs	r3, r3
    b430:	fb10 f303 	smulbb	r3, r0, r3
    b434:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b438:	bf88      	it	hi
    b43a:	1c49      	addhi	r1, r1, #1
    b43c:	4408      	add	r0, r1
    b43e:	4770      	bx	lr
    b440:	ffffc2f7 	.word	0xffffc2f7
    b444:	00010c6f 	.word	0x00010c6f

0000b448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b448:	0b43      	lsrs	r3, r0, #13
    b44a:	f248 6c37 	movw	ip, #34359	; 0x8637
    b44e:	fb03 f30c 	mul.w	r3, r3, ip
    b452:	b430      	push	{r4, r5}
    b454:	0c1b      	lsrs	r3, r3, #16
    b456:	f8df c044 	ldr.w	ip, [pc, #68]	; b49c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b45a:	025c      	lsls	r4, r3, #9
    b45c:	fb03 030c 	mla	r3, r3, ip, r0
    b460:	480f      	ldr	r0, [pc, #60]	; (b4a0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b462:	4358      	muls	r0, r3
    b464:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b468:	eb04 000c 	add.w	r0, r4, ip
    b46c:	f643 5409 	movw	r4, #15625	; 0x3d09
    b470:	fb1c f404 	smulbb	r4, ip, r4
    b474:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b478:	f643 5508 	movw	r5, #15624	; 0x3d08
    b47c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b480:	442c      	add	r4, r5
    b482:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b486:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b48a:	bf84      	itt	hi
    b48c:	f04f 0c00 	movhi.w	ip, #0
    b490:	1c40      	addhi	r0, r0, #1
    b492:	6008      	str	r0, [r1, #0]
    b494:	f882 c000 	strb.w	ip, [r2]
    b498:	bc30      	pop	{r4, r5}
    b49a:	4770      	bx	lr
    b49c:	ffffc2f7 	.word	0xffffc2f7
    b4a0:	00010c6f 	.word	0x00010c6f

0000b4a4 <MPSL_IRQ_RTC0_Handler>:
    b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4a8:	4d3b      	ldr	r5, [pc, #236]	; (b598 <MPSL_IRQ_RTC0_Handler+0xf4>)
    b4aa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b4ae:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b59c <MPSL_IRQ_RTC0_Handler+0xf8>
    b4b2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b4b6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b4ba:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b4be:	f04f 0400 	mov.w	r4, #0
    b4c2:	d019      	beq.n	b4f8 <MPSL_IRQ_RTC0_Handler+0x54>
    b4c4:	4836      	ldr	r0, [pc, #216]	; (b5a0 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b4c6:	6800      	ldr	r0, [r0, #0]
    b4c8:	b1b0      	cbz	r0, b4f8 <MPSL_IRQ_RTC0_Handler+0x54>
    b4ca:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b4ce:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b4d2:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b4d6:	f8d8 1000 	ldr.w	r1, [r8]
    b4da:	1a40      	subs	r0, r0, r1
    b4dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b4e0:	2802      	cmp	r0, #2
    b4e2:	d302      	bcc.n	b4ea <MPSL_IRQ_RTC0_Handler+0x46>
    b4e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b4e8:	d906      	bls.n	b4f8 <MPSL_IRQ_RTC0_Handler+0x54>
    b4ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b4ee:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b4f2:	2004      	movs	r0, #4
    b4f4:	f7fe fed8 	bl	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4f8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b4fc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b500:	d01a      	beq.n	b538 <MPSL_IRQ_RTC0_Handler+0x94>
    b502:	4828      	ldr	r0, [pc, #160]	; (b5a4 <MPSL_IRQ_RTC0_Handler+0x100>)
    b504:	6800      	ldr	r0, [r0, #0]
    b506:	b1b8      	cbz	r0, b538 <MPSL_IRQ_RTC0_Handler+0x94>
    b508:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b50c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b510:	4825      	ldr	r0, [pc, #148]	; (b5a8 <MPSL_IRQ_RTC0_Handler+0x104>)
    b512:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b516:	f8d8 1000 	ldr.w	r1, [r8]
    b51a:	1a40      	subs	r0, r0, r1
    b51c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b520:	2802      	cmp	r0, #2
    b522:	d302      	bcc.n	b52a <MPSL_IRQ_RTC0_Handler+0x86>
    b524:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b528:	d906      	bls.n	b538 <MPSL_IRQ_RTC0_Handler+0x94>
    b52a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b52e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b532:	2005      	movs	r0, #5
    b534:	f7fe feb8 	bl	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b538:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b53c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b540:	d01a      	beq.n	b578 <MPSL_IRQ_RTC0_Handler+0xd4>
    b542:	481a      	ldr	r0, [pc, #104]	; (b5ac <MPSL_IRQ_RTC0_Handler+0x108>)
    b544:	6800      	ldr	r0, [r0, #0]
    b546:	b1b8      	cbz	r0, b578 <MPSL_IRQ_RTC0_Handler+0xd4>
    b548:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b54c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b550:	4817      	ldr	r0, [pc, #92]	; (b5b0 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b552:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b556:	f8d8 1000 	ldr.w	r1, [r8]
    b55a:	1a40      	subs	r0, r0, r1
    b55c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b560:	2802      	cmp	r0, #2
    b562:	d302      	bcc.n	b56a <MPSL_IRQ_RTC0_Handler+0xc6>
    b564:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b568:	d906      	bls.n	b578 <MPSL_IRQ_RTC0_Handler+0xd4>
    b56a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b56e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b572:	2006      	movs	r0, #6
    b574:	f7fe fe98 	bl	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b578:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b57c:	2800      	cmp	r0, #0
    b57e:	bf08      	it	eq
    b580:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b584:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b588:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b58c:	4809      	ldr	r0, [pc, #36]	; (b5b4 <MPSL_IRQ_RTC0_Handler+0x110>)
    b58e:	68c1      	ldr	r1, [r0, #12]
    b590:	1c49      	adds	r1, r1, #1
    b592:	60c1      	str	r1, [r0, #12]
    b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b598:	4000b000 	.word	0x4000b000
    b59c:	4000b504 	.word	0x4000b504
    b5a0:	4000b140 	.word	0x4000b140
    b5a4:	4000b144 	.word	0x4000b144
    b5a8:	4000b004 	.word	0x4000b004
    b5ac:	4000b148 	.word	0x4000b148
    b5b0:	4000b008 	.word	0x4000b008
    b5b4:	2000019c 	.word	0x2000019c

0000b5b8 <MPSL_IRQ_TIMER0_Handler>:
    b5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5bc:	4d38      	ldr	r5, [pc, #224]	; (b6a0 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b5be:	7828      	ldrb	r0, [r5, #0]
    b5c0:	2804      	cmp	r0, #4
    b5c2:	d068      	beq.n	b696 <MPSL_IRQ_TIMER0_Handler+0xde>
    b5c4:	1ca8      	adds	r0, r5, #2
    b5c6:	2201      	movs	r2, #1
    b5c8:	7801      	ldrb	r1, [r0, #0]
    b5ca:	b159      	cbz	r1, b5e4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b5cc:	2901      	cmp	r1, #1
    b5ce:	bf08      	it	eq
    b5d0:	706a      	strbeq	r2, [r5, #1]
    b5d2:	d002      	beq.n	b5da <MPSL_IRQ_TIMER0_Handler+0x22>
    b5d4:	7869      	ldrb	r1, [r5, #1]
    b5d6:	2900      	cmp	r1, #0
    b5d8:	d058      	beq.n	b68c <MPSL_IRQ_TIMER0_Handler+0xd4>
    b5da:	2102      	movs	r1, #2
    b5dc:	7001      	strb	r1, [r0, #0]
    b5de:	7840      	ldrb	r0, [r0, #1]
    b5e0:	f000 fb12 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b5e4:	4c2f      	ldr	r4, [pc, #188]	; (b6a4 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b5e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b5ea:	f04f 0800 	mov.w	r8, #0
    b5ee:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b5f2:	f44f 7780 	mov.w	r7, #256	; 0x100
    b5f6:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b5fa:	d00a      	beq.n	b612 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b5fc:	482a      	ldr	r0, [pc, #168]	; (b6a8 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b5fe:	6800      	ldr	r0, [r0, #0]
    b600:	b138      	cbz	r0, b612 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b602:	2003      	movs	r0, #3
    b604:	f000 fb00 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b608:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b60c:	2003      	movs	r0, #3
    b60e:	f7fe fe4b 	bl	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b612:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b616:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b61a:	d00a      	beq.n	b632 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b61c:	4823      	ldr	r0, [pc, #140]	; (b6ac <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b61e:	6800      	ldr	r0, [r0, #0]
    b620:	b138      	cbz	r0, b632 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b622:	2002      	movs	r0, #2
    b624:	f000 faf0 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b628:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b62c:	2002      	movs	r0, #2
    b62e:	f7fe fe3b 	bl	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b632:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b636:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b63a:	d00a      	beq.n	b652 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b63c:	481c      	ldr	r0, [pc, #112]	; (b6b0 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b63e:	6800      	ldr	r0, [r0, #0]
    b640:	b138      	cbz	r0, b652 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b642:	2001      	movs	r0, #1
    b644:	f000 fae0 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b648:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b64c:	2001      	movs	r0, #1
    b64e:	f7fe fe2b 	bl	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b652:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b656:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b65a:	bf08      	it	eq
    b65c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b660:	4814      	ldr	r0, [pc, #80]	; (b6b4 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b662:	6800      	ldr	r0, [r0, #0]
    b664:	2800      	cmp	r0, #0
    b666:	bf08      	it	eq
    b668:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b66c:	2000      	movs	r0, #0
    b66e:	f000 facb 	bl	bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b672:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b676:	2004      	movs	r0, #4
    b678:	7028      	strb	r0, [r5, #0]
    b67a:	f8c5 8004 	str.w	r8, [r5, #4]
    b67e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b686:	2000      	movs	r0, #0
    b688:	f7fe be0e 	b.w	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b68c:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b690:	206c      	movs	r0, #108	; 0x6c
    b692:	f000 ff8f 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b69a:	2007      	movs	r0, #7
    b69c:	f7fe be04 	b.w	a2a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b6a0:	2000019c 	.word	0x2000019c
    b6a4:	40008000 	.word	0x40008000
    b6a8:	4000814c 	.word	0x4000814c
    b6ac:	40008148 	.word	0x40008148
    b6b0:	40008144 	.word	0x40008144
    b6b4:	40008140 	.word	0x40008140
    b6b8:	2201      	movs	r2, #1
    b6ba:	0211      	lsls	r1, r2, #8
    b6bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b6c0:	2000      	movs	r0, #0
    b6c2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b6c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b6ca:	f3bf 8f4f 	dsb	sy
    b6ce:	f3bf 8f6f 	isb	sy
    b6d2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b6d6:	490e      	ldr	r1, [pc, #56]	; (b710 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b6d8:	f841 2f04 	str.w	r2, [r1, #4]!
    b6dc:	1e43      	subs	r3, r0, #1
    b6de:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b6e2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b6e6:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b6ea:	4b0a      	ldr	r3, [pc, #40]	; (b714 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b6ec:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b6f0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b6f4:	1d1b      	adds	r3, r3, #4
    b6f6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b6fa:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b6fe:	1d1b      	adds	r3, r3, #4
    b700:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b704:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b708:	60ca      	str	r2, [r1, #12]
    b70a:	4903      	ldr	r1, [pc, #12]	; (b718 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b70c:	7048      	strb	r0, [r1, #1]
    b70e:	4770      	bx	lr
    b710:	40008000 	.word	0x40008000
    b714:	40008004 	.word	0x40008004
    b718:	2000019c 	.word	0x2000019c

0000b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b71c:	4801      	ldr	r0, [pc, #4]	; (b724 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b71e:	6800      	ldr	r0, [r0, #0]
    b720:	4770      	bx	lr
    b722:	0000      	.short	0x0000
    b724:	4000b504 	.word	0x4000b504

0000b728 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b728:	b430      	push	{r4, r5}
    b72a:	f3ef 8c10 	mrs	ip, PRIMASK
    b72e:	b672      	cpsid	i
    b730:	2500      	movs	r5, #0
    b732:	4b0b      	ldr	r3, [pc, #44]	; (b760 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b734:	4a0b      	ldr	r2, [pc, #44]	; (b764 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b736:	bf00      	nop
    b738:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b73c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b740:	b12c      	cbz	r4, b74e <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b742:	68d1      	ldr	r1, [r2, #12]
    b744:	1c49      	adds	r1, r1, #1
    b746:	60d1      	str	r1, [r2, #12]
    b748:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b74c:	e7f4      	b.n	b738 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b74e:	68d2      	ldr	r2, [r2, #12]
    b750:	f1bc 0f00 	cmp.w	ip, #0
    b754:	d100      	bne.n	b758 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b756:	b662      	cpsie	i
    b758:	e9c0 1200 	strd	r1, r2, [r0]
    b75c:	bc30      	pop	{r4, r5}
    b75e:	4770      	bx	lr
    b760:	4000b000 	.word	0x4000b000
    b764:	2000019c 	.word	0x2000019c

0000b768 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b76c:	f8df 8134 	ldr.w	r8, [pc, #308]	; b8a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b770:	4605      	mov	r5, r0
    b772:	f1a8 0602 	sub.w	r6, r8, #2
    b776:	f898 3000 	ldrb.w	r3, [r8]
    b77a:	68b0      	ldr	r0, [r6, #8]
    b77c:	2b01      	cmp	r3, #1
    b77e:	bf04      	itt	eq
    b780:	42a8      	cmpeq	r0, r5
    b782:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b786:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b78a:	4a47      	ldr	r2, [pc, #284]	; (b8a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b78c:	6011      	str	r1, [r2, #0]
    b78e:	4948      	ldr	r1, [pc, #288]	; (b8b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b790:	4a46      	ldr	r2, [pc, #280]	; (b8ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b792:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b796:	f101 0c04 	add.w	ip, r1, #4
    b79a:	f04f 0400 	mov.w	r4, #0
    b79e:	2b00      	cmp	r3, #0
    b7a0:	d055      	beq.n	b84e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b7a2:	4a44      	ldr	r2, [pc, #272]	; (b8b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b7a4:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b7a8:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b7ac:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b7b0:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b7b4:	2701      	movs	r7, #1
    b7b6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b7ba:	2a00      	cmp	r2, #0
    b7bc:	bf01      	itttt	eq
    b7be:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b7c2:	2a00      	cmpeq	r2, #0
    b7c4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b7c8:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b7cc:	f04f 0a10 	mov.w	sl, #16
    b7d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b7d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b7d8:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b7dc:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b7e0:	4a35      	ldr	r2, [pc, #212]	; (b8b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b7e2:	f8d2 c000 	ldr.w	ip, [r2]
    b7e6:	eba5 0c0c 	sub.w	ip, r5, ip
    b7ea:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b7ee:	f1bc 0f02 	cmp.w	ip, #2
    b7f2:	d337      	bcc.n	b864 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b7f4:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b7f8:	d834      	bhi.n	b864 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b7fa:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b7fe:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b802:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b806:	b12b      	cbz	r3, b814 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b808:	6811      	ldr	r1, [r2, #0]
    b80a:	1a41      	subs	r1, r0, r1
    b80c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b810:	2902      	cmp	r1, #2
    b812:	d3f9      	bcc.n	b808 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b814:	6077      	str	r7, [r6, #4]
    b816:	7034      	strb	r4, [r6, #0]
    b818:	f7ff ff4e 	bl	b6b8 <MPSL_IRQ_TIMER0_Handler+0x100>
    b81c:	4827      	ldr	r0, [pc, #156]	; (b8bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b81e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b822:	f364 0101 	bfi	r1, r4, #0, #2
    b826:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b82a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b82e:	2102      	movs	r1, #2
    b830:	f361 0201 	bfi	r2, r1, #0, #2
    b834:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b838:	fa9a f1aa 	rbit	r1, sl
    b83c:	fab1 f181 	clz	r1, r1
    b840:	2909      	cmp	r1, #9
    b842:	d917      	bls.n	b874 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b844:	f240 3155 	movw	r1, #853	; 0x355
    b848:	a01d      	add	r0, pc, #116	; (adr r0, b8c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b84a:	f000 fe87 	bl	c55c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b84e:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b852:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b856:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b85a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b85e:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b862:	e7a5      	b.n	b7b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b864:	2000      	movs	r0, #0
    b866:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b86a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b86e:	206c      	movs	r0, #108	; 0x6c
    b870:	f000 fea0 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b874:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b878:	60c7      	str	r7, [r0, #12]
    b87a:	6871      	ldr	r1, [r6, #4]
    b87c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b880:	f44f 7080 	mov.w	r0, #256	; 0x100
    b884:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b888:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b88c:	490f      	ldr	r1, [pc, #60]	; (b8cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b88e:	05c0      	lsls	r0, r0, #23
    b890:	6008      	str	r0, [r1, #0]
    b892:	2004      	movs	r0, #4
    b894:	60b5      	str	r5, [r6, #8]
    b896:	f888 0001 	strb.w	r0, [r8, #1]
    b89a:	f888 7000 	strb.w	r7, [r8]
    b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8a2:	0000      	.short	0x0000
    b8a4:	2000019e 	.word	0x2000019e
    b8a8:	4001f508 	.word	0x4001f508
    b8ac:	fffbfffd 	.word	0xfffbfffd
    b8b0:	4000b000 	.word	0x4000b000
    b8b4:	fffafffd 	.word	0xfffafffd
    b8b8:	4000b504 	.word	0x4000b504
    b8bc:	40008000 	.word	0x40008000
    b8c0:	5f66726e 	.word	0x5f66726e
    b8c4:	656d6974 	.word	0x656d6974
    b8c8:	00682e72 	.word	0x00682e72
    b8cc:	4001f504 	.word	0x4001f504

0000b8d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b8d0:	b570      	push	{r4, r5, r6, lr}
    b8d2:	4c2a      	ldr	r4, [pc, #168]	; (b97c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b8d4:	68a1      	ldr	r1, [r4, #8]
    b8d6:	4281      	cmp	r1, r0
    b8d8:	bf14      	ite	ne
    b8da:	2201      	movne	r2, #1
    b8dc:	2200      	moveq	r2, #0
    b8de:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b980 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b8e2:	f89c 5000 	ldrb.w	r5, [ip]
    b8e6:	2d02      	cmp	r5, #2
    b8e8:	d002      	beq.n	b8f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b8ea:	2a00      	cmp	r2, #0
    b8ec:	d034      	beq.n	b958 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b8ee:	e002      	b.n	b8f6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b8f0:	2a00      	cmp	r2, #0
    b8f2:	bf08      	it	eq
    b8f4:	bd70      	popeq	{r4, r5, r6, pc}
    b8f6:	7862      	ldrb	r2, [r4, #1]
    b8f8:	b39a      	cbz	r2, b962 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b8fa:	4b22      	ldr	r3, [pc, #136]	; (b984 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b8fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b900:	601a      	str	r2, [r3, #0]
    b902:	4b21      	ldr	r3, [pc, #132]	; (b988 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b904:	1392      	asrs	r2, r2, #14
    b906:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b90a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b90e:	2200      	movs	r2, #0
    b910:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b914:	4a1d      	ldr	r2, [pc, #116]	; (b98c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b916:	6816      	ldr	r6, [r2, #0]
    b918:	1b86      	subs	r6, r0, r6
    b91a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b91e:	2e02      	cmp	r6, #2
    b920:	d324      	bcc.n	b96c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b922:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b926:	d821      	bhi.n	b96c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b928:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b92c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b930:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b934:	b12d      	cbz	r5, b942 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b936:	6813      	ldr	r3, [r2, #0]
    b938:	1acb      	subs	r3, r1, r3
    b93a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b93e:	2b02      	cmp	r3, #2
    b940:	d3f9      	bcc.n	b936 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b942:	4b13      	ldr	r3, [pc, #76]	; (b990 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b944:	2102      	movs	r1, #2
    b946:	074a      	lsls	r2, r1, #29
    b948:	601a      	str	r2, [r3, #0]
    b94a:	60a0      	str	r0, [r4, #8]
    b94c:	2004      	movs	r0, #4
    b94e:	f88c 0001 	strb.w	r0, [ip, #1]
    b952:	f88c 1000 	strb.w	r1, [ip]
    b956:	bd70      	pop	{r4, r5, r6, pc}
    b958:	f240 21aa 	movw	r1, #682	; 0x2aa
    b95c:	206c      	movs	r0, #108	; 0x6c
    b95e:	f000 fe29 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b962:	f240 21ae 	movw	r1, #686	; 0x2ae
    b966:	206c      	movs	r0, #108	; 0x6c
    b968:	f000 fe24 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b96c:	2000      	movs	r0, #0
    b96e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b972:	f240 21ba 	movw	r1, #698	; 0x2ba
    b976:	206c      	movs	r0, #108	; 0x6c
    b978:	f000 fe1c 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b97c:	2000019c 	.word	0x2000019c
    b980:	2000019e 	.word	0x2000019e
    b984:	4001f508 	.word	0x4001f508
    b988:	4000b000 	.word	0x4000b000
    b98c:	4000b504 	.word	0x4000b504
    b990:	4001f504 	.word	0x4001f504

0000b994 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b994:	4801      	ldr	r0, [pc, #4]	; (b99c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b996:	6880      	ldr	r0, [r0, #8]
    b998:	4770      	bx	lr
    b99a:	0000      	.short	0x0000
    b99c:	2000019c 	.word	0x2000019c

0000b9a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9a4:	4836      	ldr	r0, [pc, #216]	; (ba80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b9a6:	4a35      	ldr	r2, [pc, #212]	; (ba7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b9a8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b9ac:	f8df c0d4 	ldr.w	ip, [pc, #212]	; ba84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b9b0:	1d03      	adds	r3, r0, #4
    b9b2:	2100      	movs	r1, #0
    b9b4:	f89c 4000 	ldrb.w	r4, [ip]
    b9b8:	b184      	cbz	r4, b9dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b9ba:	4a33      	ldr	r2, [pc, #204]	; (ba88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b9bc:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b9c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b9c4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b9c8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b9cc:	2301      	movs	r3, #1
    b9ce:	2a00      	cmp	r2, #0
    b9d0:	bf04      	itt	eq
    b9d2:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b9d6:	2800      	cmpeq	r0, #0
    b9d8:	d111      	bne.n	b9fe <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b9da:	e00a      	b.n	b9f2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b9dc:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b9e0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b9e4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b9e8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b9ec:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b9f0:	e7ea      	b.n	b9c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b9f2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b9f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b9fa:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b9fe:	2c02      	cmp	r4, #2
    ba00:	d004      	beq.n	ba0c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    ba02:	f240 21c6 	movw	r1, #710	; 0x2c6
    ba06:	206c      	movs	r0, #108	; 0x6c
    ba08:	f000 fdd4 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba0c:	4e1f      	ldr	r6, [pc, #124]	; (ba8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    ba0e:	6830      	ldr	r0, [r6, #0]
    ba10:	4c1f      	ldr	r4, [pc, #124]	; (ba90 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    ba12:	1cc0      	adds	r0, r0, #3
    ba14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba18:	68a2      	ldr	r2, [r4, #8]
    ba1a:	4d1e      	ldr	r5, [pc, #120]	; (ba94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    ba1c:	4290      	cmp	r0, r2
    ba1e:	d00b      	beq.n	ba38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    ba20:	6837      	ldr	r7, [r6, #0]
    ba22:	1bd7      	subs	r7, r2, r7
    ba24:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    ba28:	2f04      	cmp	r7, #4
    ba2a:	d305      	bcc.n	ba38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    ba2c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    ba30:	d802      	bhi.n	ba38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    ba32:	f7ff fe99 	bl	b768 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ba36:	e01b      	b.n	ba70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    ba38:	6830      	ldr	r0, [r6, #0]
    ba3a:	1a10      	subs	r0, r2, r0
    ba3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba40:	2802      	cmp	r0, #2
    ba42:	d313      	bcc.n	ba6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    ba44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ba48:	d810      	bhi.n	ba6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    ba4a:	4a13      	ldr	r2, [pc, #76]	; (ba98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    ba4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ba50:	6010      	str	r0, [r2, #0]
    ba52:	6063      	str	r3, [r4, #4]
    ba54:	7021      	strb	r1, [r4, #0]
    ba56:	606b      	str	r3, [r5, #4]
    ba58:	60eb      	str	r3, [r5, #12]
    ba5a:	0040      	lsls	r0, r0, #1
    ba5c:	1f11      	subs	r1, r2, #4
    ba5e:	6008      	str	r0, [r1, #0]
    ba60:	2004      	movs	r0, #4
    ba62:	f88c 0001 	strb.w	r0, [ip, #1]
    ba66:	f88c 3000 	strb.w	r3, [ip]
    ba6a:	e001      	b.n	ba70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    ba6c:	6063      	str	r3, [r4, #4]
    ba6e:	7021      	strb	r1, [r4, #0]
    ba70:	6860      	ldr	r0, [r4, #4]
    ba72:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ba76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba7a:	0000      	.short	0x0000
    ba7c:	fffbfffd 	.word	0xfffbfffd
    ba80:	4000b000 	.word	0x4000b000
    ba84:	2000019e 	.word	0x2000019e
    ba88:	fffafffd 	.word	0xfffafffd
    ba8c:	4000b504 	.word	0x4000b504
    ba90:	2000019c 	.word	0x2000019c
    ba94:	40008000 	.word	0x40008000
    ba98:	4001f508 	.word	0x4001f508

0000ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    ba9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baa0:	4a54      	ldr	r2, [pc, #336]	; (bbf4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    baa2:	2500      	movs	r5, #0
    baa4:	2401      	movs	r4, #1
    baa6:	f892 c000 	ldrb.w	ip, [r2]
    baaa:	7853      	ldrb	r3, [r2, #1]
    baac:	f44f 76a0 	mov.w	r6, #320	; 0x140
    bab0:	2807      	cmp	r0, #7
    bab2:	d27d      	bcs.n	bbb0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    bab4:	e8df f000 	tbb	[pc, r0]
    bab8:	04040404 	.word	0x04040404
    babc:	00585858 	.word	0x00585858
    bac0:	4a4d      	ldr	r2, [pc, #308]	; (bbf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    bac2:	6897      	ldr	r7, [r2, #8]
    bac4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    bac8:	bf04      	itt	eq
    baca:	7852      	ldrbeq	r2, [r2, #1]
    bacc:	2a00      	cmpeq	r2, #0
    bace:	d003      	beq.n	bad8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    bad0:	f1bc 0f02 	cmp.w	ip, #2
    bad4:	d005      	beq.n	bae2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    bad6:	e026      	b.n	bb26 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    bad8:	f240 3156 	movw	r1, #854	; 0x356
    badc:	206c      	movs	r0, #108	; 0x6c
    bade:	f000 fd69 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bae2:	1f1a      	subs	r2, r3, #4
    bae4:	b2d2      	uxtb	r2, r2
    bae6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    baea:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    baee:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    baf2:	2200      	movs	r2, #0
    baf4:	f1bc 0f01 	cmp.w	ip, #1
    baf8:	d003      	beq.n	bb02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    bafa:	f1bc 0f02 	cmp.w	ip, #2
    bafe:	d008      	beq.n	bb12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    bb00:	e00e      	b.n	bb20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    bb02:	2b04      	cmp	r3, #4
    bb04:	bf24      	itt	cs
    bb06:	6837      	ldrcs	r7, [r6, #0]
    bb08:	2f00      	cmpcs	r7, #0
    bb0a:	bf08      	it	eq
    bb0c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    bb10:	e006      	b.n	bb20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    bb12:	2b04      	cmp	r3, #4
    bb14:	bf24      	itt	cs
    bb16:	6837      	ldrcs	r7, [r6, #0]
    bb18:	2f00      	cmpcs	r7, #0
    bb1a:	bf08      	it	eq
    bb1c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    bb20:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    bb24:	d1e5      	bne.n	baf2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    bb26:	f8df c0d4 	ldr.w	ip, [pc, #212]	; bbfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    bb2a:	f100 0210 	add.w	r2, r0, #16
    bb2e:	fa04 f202 	lsl.w	r2, r4, r2
    bb32:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    bb36:	f04f 0340 	mov.w	r3, #64	; 0x40
    bb3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bb3e:	b2db      	uxtb	r3, r3
    bb40:	4463      	add	r3, ip
    bb42:	601c      	str	r4, [r3, #0]
    bb44:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    bb48:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    bb4c:	eba1 0303 	sub.w	r3, r1, r3
    bb50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb54:	2b03      	cmp	r3, #3
    bb56:	bf26      	itte	cs
    bb58:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    bb5c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    bb60:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    bb64:	d237      	bcs.n	bbd6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    bb66:	e03c      	b.n	bbe2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    bb68:	f1bc 0f00 	cmp.w	ip, #0
    bb6c:	d006      	beq.n	bb7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    bb6e:	4283      	cmp	r3, r0
    bb70:	d104      	bne.n	bb7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    bb72:	f240 3176 	movw	r1, #886	; 0x376
    bb76:	206c      	movs	r0, #108	; 0x6c
    bb78:	f000 fd1c 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb7c:	1f02      	subs	r2, r0, #4
    bb7e:	b2d3      	uxtb	r3, r2
    bb80:	2b03      	cmp	r3, #3
    bb82:	d304      	bcc.n	bb8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    bb84:	f240 11d1 	movw	r1, #465	; 0x1d1
    bb88:	206c      	movs	r0, #108	; 0x6c
    bb8a:	f000 fd13 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb8e:	f8df c070 	ldr.w	ip, [pc, #112]	; bc00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    bb92:	f103 0210 	add.w	r2, r3, #16
    bb96:	fa04 f202 	lsl.w	r2, r4, r2
    bb9a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    bb9e:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    bba2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    bba6:	f84c 5003 	str.w	r5, [ip, r3]
    bbaa:	4b16      	ldr	r3, [pc, #88]	; (bc04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    bbac:	681b      	ldr	r3, [r3, #0]
    bbae:	e000      	b.n	bbb2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    bbb0:	e01a      	b.n	bbe8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    bbb2:	1f00      	subs	r0, r0, #4
    bbb4:	1acb      	subs	r3, r1, r3
    bbb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bbba:	b2c0      	uxtb	r0, r0
    bbbc:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    bbc0:	2b02      	cmp	r3, #2
    bbc2:	d30b      	bcc.n	bbdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    bbc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bbc8:	d808      	bhi.n	bbdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    bbca:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bbce:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    bbd2:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    bbd6:	2001      	movs	r0, #1
    bbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbdc:	2100      	movs	r1, #0
    bbde:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bbe2:	2000      	movs	r0, #0
    bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbe8:	f240 317a 	movw	r1, #890	; 0x37a
    bbec:	206c      	movs	r0, #108	; 0x6c
    bbee:	f000 fce1 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bbf2:	0000      	.short	0x0000
    bbf4:	2000019e 	.word	0x2000019e
    bbf8:	2000019c 	.word	0x2000019c
    bbfc:	40008000 	.word	0x40008000
    bc00:	4000b000 	.word	0x4000b000
    bc04:	4000b504 	.word	0x4000b504

0000bc08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bc0c:	2601      	movs	r6, #1
    bc0e:	2700      	movs	r7, #0
    bc10:	f44f 78a0 	mov.w	r8, #320	; 0x140
    bc14:	2807      	cmp	r0, #7
    bc16:	d251      	bcs.n	bcbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    bc18:	e8df f000 	tbb	[pc, r0]
    bc1c:	04040404 	.word	0x04040404
    bc20:	00191919 	.word	0x00191919
    bc24:	f100 0110 	add.w	r1, r0, #16
    bc28:	fa06 f201 	lsl.w	r2, r6, r1
    bc2c:	4926      	ldr	r1, [pc, #152]	; (bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bc2e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bc32:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bc36:	2200      	movs	r2, #0
    bc38:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bc3c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    bc40:	508f      	str	r7, [r1, r2]
    bc42:	4922      	ldr	r1, [pc, #136]	; (bccc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bc44:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bc48:	9000      	str	r0, [sp, #0]
    bc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bc4e:	4d20      	ldr	r5, [pc, #128]	; (bcd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bc50:	1f01      	subs	r1, r0, #4
    bc52:	b2cc      	uxtb	r4, r1
    bc54:	7829      	ldrb	r1, [r5, #0]
    bc56:	b179      	cbz	r1, bc78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bc58:	786a      	ldrb	r2, [r5, #1]
    bc5a:	4282      	cmp	r2, r0
    bc5c:	d10c      	bne.n	bc78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bc5e:	4a1d      	ldr	r2, [pc, #116]	; (bcd4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bc60:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bc64:	6010      	str	r0, [r2, #0]
    bc66:	2901      	cmp	r1, #1
    bc68:	bf08      	it	eq
    bc6a:	f7ff fd25 	bleq	b6b8 <MPSL_IRQ_TIMER0_Handler+0x100>
    bc6e:	702f      	strb	r7, [r5, #0]
    bc70:	4919      	ldr	r1, [pc, #100]	; (bcd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    bc72:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    bc76:	6088      	str	r0, [r1, #8]
    bc78:	4918      	ldr	r1, [pc, #96]	; (bcdc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    bc7a:	f104 0010 	add.w	r0, r4, #16
    bc7e:	fa06 f000 	lsl.w	r0, r6, r0
    bc82:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bc86:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bc8a:	00a0      	lsls	r0, r4, #2
    bc8c:	4408      	add	r0, r1
    bc8e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bc92:	4a13      	ldr	r2, [pc, #76]	; (bce0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    bc94:	6812      	ldr	r2, [r2, #0]
    bc96:	1a80      	subs	r0, r0, r2
    bc98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bc9c:	2802      	cmp	r0, #2
    bc9e:	d307      	bcc.n	bcb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    bca0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    bca4:	2000      	movs	r0, #0
    bca6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bcaa:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    bcae:	500f      	str	r7, [r1, r0]
    bcb0:	480c      	ldr	r0, [pc, #48]	; (bce4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    bcb2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bcb6:	9000      	str	r0, [sp, #0]
    bcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bcbc:	f240 31fe 	movw	r1, #1022	; 0x3fe
    bcc0:	206c      	movs	r0, #108	; 0x6c
    bcc2:	f000 fc77 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bcc6:	0000      	.short	0x0000
    bcc8:	40008000 	.word	0x40008000
    bccc:	40008140 	.word	0x40008140
    bcd0:	2000019e 	.word	0x2000019e
    bcd4:	4001f508 	.word	0x4001f508
    bcd8:	2000019c 	.word	0x2000019c
    bcdc:	4000b000 	.word	0x4000b000
    bce0:	4000b504 	.word	0x4000b504
    bce4:	4000b140 	.word	0x4000b140

0000bce8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bce8:	4825      	ldr	r0, [pc, #148]	; (bd80 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    bcea:	4a24      	ldr	r2, [pc, #144]	; (bd7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    bcec:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bcf0:	4924      	ldr	r1, [pc, #144]	; (bd84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    bcf2:	1d03      	adds	r3, r0, #4
    bcf4:	f891 c000 	ldrb.w	ip, [r1]
    bcf8:	2100      	movs	r1, #0
    bcfa:	f1bc 0f00 	cmp.w	ip, #0
    bcfe:	d010      	beq.n	bd22 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bd00:	4a21      	ldr	r2, [pc, #132]	; (bd88 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    bd02:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bd06:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bd0a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bd0e:	bf00      	nop
    bd10:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bd14:	2a00      	cmp	r2, #0
    bd16:	bf04      	itt	eq
    bd18:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bd1c:	2800      	cmpeq	r0, #0
    bd1e:	d111      	bne.n	bd44 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bd20:	e00a      	b.n	bd38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bd22:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bd26:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bd2a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bd2e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bd32:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bd36:	e7eb      	b.n	bd10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    bd38:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bd3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bd40:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bd44:	4811      	ldr	r0, [pc, #68]	; (bd8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    bd46:	f04f 32ff 	mov.w	r2, #4294967295
    bd4a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bd4e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bd52:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bd56:	f100 0204 	add.w	r2, r0, #4
    bd5a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bd5e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bd62:	f102 0204 	add.w	r2, r2, #4
    bd66:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bd6a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bd6e:	f102 0204 	add.w	r2, r2, #4
    bd72:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bd76:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bd7a:	4770      	bx	lr
    bd7c:	fffbfffd 	.word	0xfffbfffd
    bd80:	4000b000 	.word	0x4000b000
    bd84:	2000019e 	.word	0x2000019e
    bd88:	fffafffd 	.word	0xfffafffd
    bd8c:	40008000 	.word	0x40008000

0000bd90 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bd90:	b510      	push	{r4, lr}
    bd92:	2807      	cmp	r0, #7
    bd94:	d20d      	bcs.n	bdb2 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bd96:	e8df f000 	tbb	[pc, r0]
    bd9a:	0404      	.short	0x0404
    bd9c:	06060404 	.word	0x06060404
    bda0:	0006      	.short	0x0006
    bda2:	4906      	ldr	r1, [pc, #24]	; (bdbc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bda4:	e002      	b.n	bdac <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bda6:	1f00      	subs	r0, r0, #4
    bda8:	4905      	ldr	r1, [pc, #20]	; (bdc0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bdaa:	b2c0      	uxtb	r0, r0
    bdac:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bdb0:	bd10      	pop	{r4, pc}
    bdb2:	f240 319e 	movw	r1, #926	; 0x39e
    bdb6:	206c      	movs	r0, #108	; 0x6c
    bdb8:	f000 fbfc 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bdbc:	40008140 	.word	0x40008140
    bdc0:	4000b140 	.word	0x4000b140

0000bdc4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    bdc4:	b510      	push	{r4, lr}
    bdc6:	2807      	cmp	r0, #7
    bdc8:	d20d      	bcs.n	bde6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    bdca:	e8df f000 	tbb	[pc, r0]
    bdce:	0404      	.short	0x0404
    bdd0:	06060404 	.word	0x06060404
    bdd4:	0006      	.short	0x0006
    bdd6:	4906      	ldr	r1, [pc, #24]	; (bdf0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    bdd8:	e002      	b.n	bde0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    bdda:	1f00      	subs	r0, r0, #4
    bddc:	4905      	ldr	r1, [pc, #20]	; (bdf4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    bdde:	b2c0      	uxtb	r0, r0
    bde0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bde4:	bd10      	pop	{r4, pc}
    bde6:	f240 319e 	movw	r1, #926	; 0x39e
    bdea:	206c      	movs	r0, #108	; 0x6c
    bdec:	f000 fbe2 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bdf0:	40008140 	.word	0x40008140
    bdf4:	4000b140 	.word	0x4000b140

0000bdf8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bdf8:	b570      	push	{r4, r5, r6, lr}
    bdfa:	481f      	ldr	r0, [pc, #124]	; (be78 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bdfc:	2400      	movs	r4, #0
    bdfe:	2104      	movs	r1, #4
    be00:	7004      	strb	r4, [r0, #0]
    be02:	1e80      	subs	r0, r0, #2
    be04:	7001      	strb	r1, [r0, #0]
    be06:	0589      	lsls	r1, r1, #22
    be08:	60c4      	str	r4, [r0, #12]
    be0a:	6081      	str	r1, [r0, #8]
    be0c:	f7ff fc54 	bl	b6b8 <MPSL_IRQ_TIMER0_Handler+0x100>
    be10:	2501      	movs	r5, #1
    be12:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    be16:	02eb      	lsls	r3, r5, #11
    be18:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    be1c:	f3bf 8f4f 	dsb	sy
    be20:	f3bf 8f6f 	isb	sy
    be24:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    be28:	4814      	ldr	r0, [pc, #80]	; (be7c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    be2a:	6045      	str	r5, [r0, #4]
    be2c:	6085      	str	r5, [r0, #8]
    be2e:	4914      	ldr	r1, [pc, #80]	; (be80 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    be30:	680a      	ldr	r2, [r1, #0]
    be32:	2a00      	cmp	r2, #0
    be34:	d1fc      	bne.n	be30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    be36:	1e51      	subs	r1, r2, #1
    be38:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    be3c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    be40:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    be44:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    be48:	490e      	ldr	r1, [pc, #56]	; (be84 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    be4a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    be4e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    be52:	1d09      	adds	r1, r1, #4
    be54:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    be58:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    be5c:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    be60:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    be64:	6005      	str	r5, [r0, #0]
    be66:	f44f 7182 	mov.w	r1, #260	; 0x104
    be6a:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    be6e:	2102      	movs	r1, #2
    be70:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    be74:	bd70      	pop	{r4, r5, r6, pc}
    be76:	0000      	.short	0x0000
    be78:	2000019e 	.word	0x2000019e
    be7c:	4000b000 	.word	0x4000b000
    be80:	4000b504 	.word	0x4000b504
    be84:	4000b004 	.word	0x4000b004

0000be88 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    be88:	4808      	ldr	r0, [pc, #32]	; (beac <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    be8a:	f990 0000 	ldrsb.w	r0, [r0]
    be8e:	2800      	cmp	r0, #0
    be90:	bfb8      	it	lt
    be92:	4770      	bxlt	lr
    be94:	f000 011f 	and.w	r1, r0, #31
    be98:	2201      	movs	r2, #1
    be9a:	fa02 f101 	lsl.w	r1, r2, r1
    be9e:	0940      	lsrs	r0, r0, #5
    bea0:	0080      	lsls	r0, r0, #2
    bea2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bea6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    beaa:	4770      	bx	lr
    beac:	2000022c 	.word	0x2000022c

0000beb0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    beb0:	4803      	ldr	r0, [pc, #12]	; (bec0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    beb2:	7800      	ldrb	r0, [r0, #0]
    beb4:	2803      	cmp	r0, #3
    beb6:	bf0c      	ite	eq
    beb8:	2001      	moveq	r0, #1
    beba:	2000      	movne	r0, #0
    bebc:	4770      	bx	lr
    bebe:	0000      	.short	0x0000
    bec0:	200001fc 	.word	0x200001fc

0000bec4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bec4:	4801      	ldr	r0, [pc, #4]	; (becc <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bec6:	8840      	ldrh	r0, [r0, #2]
    bec8:	4770      	bx	lr
    beca:	0000      	.short	0x0000
    becc:	200001fc 	.word	0x200001fc

0000bed0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bed0:	4803      	ldr	r0, [pc, #12]	; (bee0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bed2:	7800      	ldrb	r0, [r0, #0]
    bed4:	2802      	cmp	r0, #2
    bed6:	bf16      	itet	ne
    bed8:	2803      	cmpne	r0, #3
    beda:	2001      	moveq	r0, #1
    bedc:	2000      	movne	r0, #0
    bede:	4770      	bx	lr
    bee0:	200001fc 	.word	0x200001fc

0000bee4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bee4:	4802      	ldr	r0, [pc, #8]	; (bef0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bee6:	2100      	movs	r1, #0
    bee8:	7001      	strb	r1, [r0, #0]
    beea:	8041      	strh	r1, [r0, #2]
    beec:	4770      	bx	lr
    beee:	0000      	.short	0x0000
    bef0:	200001fc 	.word	0x200001fc

0000bef4 <MPSL_IRQ_CLOCK_Handler>:
    bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bef8:	4c16      	ldr	r4, [pc, #88]	; (bf54 <MPSL_IRQ_CLOCK_Handler+0x60>)
    befa:	7a60      	ldrb	r0, [r4, #9]
    befc:	2800      	cmp	r0, #0
    befe:	d027      	beq.n	bf50 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bf00:	f44f 7180 	mov.w	r1, #256	; 0x100
    bf04:	058d      	lsls	r5, r1, #22
    bf06:	4628      	mov	r0, r5
    bf08:	f004 f979 	bl	101fe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
    bf0c:	4680      	mov	r8, r0
    bf0e:	f44f 7182 	mov.w	r1, #260	; 0x104
    bf12:	4628      	mov	r0, r5
    bf14:	f004 f973 	bl	101fe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
    bf18:	2600      	movs	r6, #0
    bf1a:	4607      	mov	r7, r0
    bf1c:	f1b8 0f00 	cmp.w	r8, #0
    bf20:	d009      	beq.n	bf36 <MPSL_IRQ_CLOCK_Handler+0x42>
    bf22:	2001      	movs	r0, #1
    bf24:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bf28:	7920      	ldrb	r0, [r4, #4]
    bf2a:	b120      	cbz	r0, bf36 <MPSL_IRQ_CLOCK_Handler+0x42>
    bf2c:	7126      	strb	r6, [r4, #4]
    bf2e:	69e0      	ldr	r0, [r4, #28]
    bf30:	b108      	cbz	r0, bf36 <MPSL_IRQ_CLOCK_Handler+0x42>
    bf32:	4780      	blx	r0
    bf34:	61e6      	str	r6, [r4, #28]
    bf36:	b137      	cbz	r7, bf46 <MPSL_IRQ_CLOCK_Handler+0x52>
    bf38:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bf3c:	2002      	movs	r0, #2
    bf3e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bf42:	f000 fa57 	bl	c3f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bf46:	4640      	mov	r0, r8
    bf48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf4c:	f000 b858 	b.w	c000 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf54:	200001ac 	.word	0x200001ac
    bf58:	b510      	push	{r4, lr}
    bf5a:	f004 f9fa 	bl	10352 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bf5e:	b930      	cbnz	r0, bf6e <MPSL_IRQ_CLOCK_Handler+0x7a>
    bf60:	f004 fa18 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf64:	b918      	cbnz	r0, bf6e <MPSL_IRQ_CLOCK_Handler+0x7a>
    bf66:	f004 fa4b 	bl	10400 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bf6a:	2800      	cmp	r0, #0
    bf6c:	d002      	beq.n	bf74 <MPSL_IRQ_CLOCK_Handler+0x80>
    bf6e:	4902      	ldr	r1, [pc, #8]	; (bf78 <MPSL_IRQ_CLOCK_Handler+0x84>)
    bf70:	2002      	movs	r0, #2
    bf72:	6008      	str	r0, [r1, #0]
    bf74:	bd10      	pop	{r4, pc}
    bf76:	0000      	.short	0x0000
    bf78:	40000c34 	.word	0x40000c34
    bf7c:	b570      	push	{r4, r5, r6, lr}
    bf7e:	f000 f99b 	bl	c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bf82:	f000 fa9f 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bf86:	4c09      	ldr	r4, [pc, #36]	; (bfac <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bf88:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf8c:	b130      	cbz	r0, bf9c <MPSL_IRQ_CLOCK_Handler+0xa8>
    bf8e:	f7ff ffe3 	bl	bf58 <MPSL_IRQ_CLOCK_Handler+0x64>
    bf92:	2001      	movs	r0, #1
    bf94:	6128      	str	r0, [r5, #16]
    bf96:	2004      	movs	r0, #4
    bf98:	72a0      	strb	r0, [r4, #10]
    bf9a:	e004      	b.n	bfa6 <MPSL_IRQ_CLOCK_Handler+0xb2>
    bf9c:	2003      	movs	r0, #3
    bf9e:	72a0      	strb	r0, [r4, #10]
    bfa0:	2001      	movs	r0, #1
    bfa2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bfa6:	2000      	movs	r0, #0
    bfa8:	71e0      	strb	r0, [r4, #7]
    bfaa:	bd70      	pop	{r4, r5, r6, pc}
    bfac:	200001ac 	.word	0x200001ac
    bfb0:	b570      	push	{r4, r5, r6, lr}
    bfb2:	4c12      	ldr	r4, [pc, #72]	; (bffc <MPSL_IRQ_CLOCK_Handler+0x108>)
    bfb4:	79a0      	ldrb	r0, [r4, #6]
    bfb6:	b1e0      	cbz	r0, bff2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bfb8:	79e1      	ldrb	r1, [r4, #7]
    bfba:	1e40      	subs	r0, r0, #1
    bfbc:	4281      	cmp	r1, r0
    bfbe:	da18      	bge.n	bff2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bfc0:	f000 fa80 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bfc4:	4605      	mov	r5, r0
    bfc6:	f000 fb69 	bl	c69c <mpsl_temperature_get>
    bfca:	79a1      	ldrb	r1, [r4, #6]
    bfcc:	2901      	cmp	r1, #1
    bfce:	d902      	bls.n	bfd6 <MPSL_IRQ_CLOCK_Handler+0xe2>
    bfd0:	79e1      	ldrb	r1, [r4, #7]
    bfd2:	1c49      	adds	r1, r1, #1
    bfd4:	71e1      	strb	r1, [r4, #7]
    bfd6:	b10d      	cbz	r5, bfdc <MPSL_IRQ_CLOCK_Handler+0xe8>
    bfd8:	6961      	ldr	r1, [r4, #20]
    bfda:	e000      	b.n	bfde <MPSL_IRQ_CLOCK_Handler+0xea>
    bfdc:	6921      	ldr	r1, [r4, #16]
    bfde:	1a41      	subs	r1, r0, r1
    bfe0:	2902      	cmp	r1, #2
    bfe2:	da02      	bge.n	bfea <MPSL_IRQ_CLOCK_Handler+0xf6>
    bfe4:	f111 0f02 	cmn.w	r1, #2
    bfe8:	dc07      	bgt.n	bffa <MPSL_IRQ_CLOCK_Handler+0x106>
    bfea:	b10d      	cbz	r5, bff0 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bfec:	6160      	str	r0, [r4, #20]
    bfee:	e000      	b.n	bff2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bff0:	6120      	str	r0, [r4, #16]
    bff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bff6:	f7ff bfc1 	b.w	bf7c <MPSL_IRQ_CLOCK_Handler+0x88>
    bffa:	bd70      	pop	{r4, r5, r6, pc}
    bffc:	200001ac 	.word	0x200001ac
    c000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c004:	4606      	mov	r6, r0
    c006:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c00a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c00e:	4628      	mov	r0, r5
    c010:	f004 f8f5 	bl	101fe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
    c014:	4680      	mov	r8, r0
    c016:	f44f 7188 	mov.w	r1, #272	; 0x110
    c01a:	4628      	mov	r0, r5
    c01c:	f004 f8ef 	bl	101fe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
    c020:	4c27      	ldr	r4, [pc, #156]	; (c0c0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c022:	4682      	mov	sl, r0
    c024:	7827      	ldrb	r7, [r4, #0]
    c026:	f104 0008 	add.w	r0, r4, #8
    c02a:	f004 f95c 	bl	102e6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c02e:	b110      	cbz	r0, c036 <MPSL_IRQ_CLOCK_Handler+0x142>
    c030:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    c034:	e016      	b.n	c064 <MPSL_IRQ_CLOCK_Handler+0x170>
    c036:	f04f 0901 	mov.w	r9, #1
    c03a:	b146      	cbz	r6, c04e <MPSL_IRQ_CLOCK_Handler+0x15a>
    c03c:	7aa0      	ldrb	r0, [r4, #10]
    c03e:	2803      	cmp	r0, #3
    c040:	d105      	bne.n	c04e <MPSL_IRQ_CLOCK_Handler+0x15a>
    c042:	2004      	movs	r0, #4
    c044:	72a0      	strb	r0, [r4, #10]
    c046:	f7ff ff87 	bl	bf58 <MPSL_IRQ_CLOCK_Handler+0x64>
    c04a:	f8c5 9010 	str.w	r9, [r5, #16]
    c04e:	2600      	movs	r6, #0
    c050:	f1b8 0f00 	cmp.w	r8, #0
    c054:	d018      	beq.n	c088 <MPSL_IRQ_CLOCK_Handler+0x194>
    c056:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    c05a:	7aa0      	ldrb	r0, [r4, #10]
    c05c:	2804      	cmp	r0, #4
    c05e:	d004      	beq.n	c06a <MPSL_IRQ_CLOCK_Handler+0x176>
    c060:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c064:	206d      	movs	r0, #109	; 0x6d
    c066:	f000 faa5 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c06a:	f004 f972 	bl	10352 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c06e:	b928      	cbnz	r0, c07c <MPSL_IRQ_CLOCK_Handler+0x188>
    c070:	f004 f990 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c074:	b910      	cbnz	r0, c07c <MPSL_IRQ_CLOCK_Handler+0x188>
    c076:	f004 f9c3 	bl	10400 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c07a:	b108      	cbz	r0, c080 <MPSL_IRQ_CLOCK_Handler+0x18c>
    c07c:	4811      	ldr	r0, [pc, #68]	; (c0c4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    c07e:	6006      	str	r6, [r0, #0]
    c080:	2002      	movs	r0, #2
    c082:	72a0      	strb	r0, [r4, #10]
    c084:	f000 f8fc 	bl	c280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c088:	f1ba 0f00 	cmp.w	sl, #0
    c08c:	d008      	beq.n	c0a0 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    c08e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c092:	7aa0      	ldrb	r0, [r4, #10]
    c094:	2802      	cmp	r0, #2
    c096:	d101      	bne.n	c09c <MPSL_IRQ_CLOCK_Handler+0x1a8>
    c098:	f7ff ff8a 	bl	bfb0 <MPSL_IRQ_CLOCK_Handler+0xbc>
    c09c:	f8c5 9014 	str.w	r9, [r5, #20]
    c0a0:	b13f      	cbz	r7, c0b2 <MPSL_IRQ_CLOCK_Handler+0x1be>
    c0a2:	7026      	strb	r6, [r4, #0]
    c0a4:	7aa0      	ldrb	r0, [r4, #10]
    c0a6:	2802      	cmp	r0, #2
    c0a8:	d101      	bne.n	c0ae <MPSL_IRQ_CLOCK_Handler+0x1ba>
    c0aa:	f7ff ff67 	bl	bf7c <MPSL_IRQ_CLOCK_Handler+0x88>
    c0ae:	f000 f8e7 	bl	c280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c0b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0b6:	4802      	ldr	r0, [pc, #8]	; (c0c0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c0b8:	3008      	adds	r0, #8
    c0ba:	f004 b92b 	b.w	10314 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c0be:	0000      	.short	0x0000
    c0c0:	200001ac 	.word	0x200001ac
    c0c4:	40000c34 	.word	0x40000c34
    c0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0cc:	4c49      	ldr	r4, [pc, #292]	; (c1f4 <MPSL_IRQ_CLOCK_Handler+0x300>)
    c0ce:	2700      	movs	r7, #0
    c0d0:	4606      	mov	r6, r0
    c0d2:	61a7      	str	r7, [r4, #24]
    c0d4:	7842      	ldrb	r2, [r0, #1]
    c0d6:	7881      	ldrb	r1, [r0, #2]
    c0d8:	7800      	ldrb	r0, [r0, #0]
    c0da:	72e0      	strb	r0, [r4, #11]
    c0dc:	7162      	strb	r2, [r4, #5]
    c0de:	71a1      	strb	r1, [r4, #6]
    c0e0:	71e7      	strb	r7, [r4, #7]
    c0e2:	f04f 0801 	mov.w	r8, #1
    c0e6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c0ea:	2805      	cmp	r0, #5
    c0ec:	d225      	bcs.n	c13a <MPSL_IRQ_CLOCK_Handler+0x246>
    c0ee:	e8df f000 	tbb	[pc, r0]
    c0f2:	0310      	.short	0x0310
    c0f4:	00222006 	.word	0x00222006
    c0f8:	f8c4 8018 	str.w	r8, [r4, #24]
    c0fc:	e009      	b.n	c112 <MPSL_IRQ_CLOCK_Handler+0x21e>
    c0fe:	f000 f8db 	bl	c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c102:	2101      	movs	r1, #1
    c104:	4628      	mov	r0, r5
    c106:	f004 f87f 	bl	10208 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4a>
    c10a:	2800      	cmp	r0, #0
    c10c:	d0f9      	beq.n	c102 <MPSL_IRQ_CLOCK_Handler+0x20e>
    c10e:	2002      	movs	r0, #2
    c110:	61a0      	str	r0, [r4, #24]
    c112:	f004 f8a5 	bl	10260 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c116:	b1c0      	cbz	r0, c14a <MPSL_IRQ_CLOCK_Handler+0x256>
    c118:	f000 f9ee 	bl	c4f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c11c:	7e21      	ldrb	r1, [r4, #24]
    c11e:	f001 0103 	and.w	r1, r1, #3
    c122:	4288      	cmp	r0, r1
    c124:	d111      	bne.n	c14a <MPSL_IRQ_CLOCK_Handler+0x256>
    c126:	79b0      	ldrb	r0, [r6, #6]
    c128:	b160      	cbz	r0, c144 <MPSL_IRQ_CLOCK_Handler+0x250>
    c12a:	2002      	movs	r0, #2
    c12c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c130:	e044      	b.n	c1bc <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c132:	4831      	ldr	r0, [pc, #196]	; (c1f8 <MPSL_IRQ_CLOCK_Handler+0x304>)
    c134:	e7ec      	b.n	c110 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c136:	4831      	ldr	r0, [pc, #196]	; (c1fc <MPSL_IRQ_CLOCK_Handler+0x308>)
    c138:	e7ea      	b.n	c110 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c13a:	f240 313d 	movw	r1, #829	; 0x33d
    c13e:	206d      	movs	r0, #109	; 0x6d
    c140:	f000 fa38 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c144:	f000 f9ac 	bl	c4a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c148:	e038      	b.n	c1bc <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c14a:	f8c5 800c 	str.w	r8, [r5, #12]
    c14e:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c152:	69a0      	ldr	r0, [r4, #24]
    c154:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c158:	f004 f8e7 	bl	1032a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c15c:	b940      	cbnz	r0, c170 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c15e:	f004 f8ee 	bl	1033e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c162:	b928      	cbnz	r0, c170 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c164:	f004 f902 	bl	1036c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c168:	b910      	cbnz	r0, c170 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c16a:	f004 f913 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c16e:	b138      	cbz	r0, c180 <MPSL_IRQ_CLOCK_Handler+0x28c>
    c170:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c174:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c178:	4921      	ldr	r1, [pc, #132]	; (c200 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c17a:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c17e:	6008      	str	r0, [r1, #0]
    c180:	f004 f8d3 	bl	1032a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c184:	b940      	cbnz	r0, c198 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c186:	f004 f8da 	bl	1033e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c18a:	b928      	cbnz	r0, c198 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c18c:	f004 f8ee 	bl	1036c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c190:	b910      	cbnz	r0, c198 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c192:	f004 f8ff 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c196:	b118      	cbz	r0, c1a0 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c198:	4919      	ldr	r1, [pc, #100]	; (c200 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c19a:	3110      	adds	r1, #16
    c19c:	f8c1 8000 	str.w	r8, [r1]
    c1a0:	f8c5 8008 	str.w	r8, [r5, #8]
    c1a4:	2002      	movs	r0, #2
    c1a6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c1aa:	79b0      	ldrb	r0, [r6, #6]
    c1ac:	b930      	cbnz	r0, c1bc <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c1ae:	f000 f829 	bl	c204 <MPSL_IRQ_CLOCK_Handler+0x310>
    c1b2:	2002      	movs	r0, #2
    c1b4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c1b8:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c1bc:	79a0      	ldrb	r0, [r4, #6]
    c1be:	b170      	cbz	r0, c1de <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c1c0:	7830      	ldrb	r0, [r6, #0]
    c1c2:	b960      	cbnz	r0, c1de <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c1c4:	f000 f97e 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c1c8:	4606      	mov	r6, r0
    c1ca:	f000 fa67 	bl	c69c <mpsl_temperature_get>
    c1ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c1d2:	b116      	cbz	r6, c1da <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c1d4:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c1d8:	e001      	b.n	c1de <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c1da:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c1de:	2101      	movs	r1, #1
    c1e0:	4628      	mov	r0, r5
    c1e2:	f004 f811 	bl	10208 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4a>
    c1e6:	b108      	cbz	r0, c1ec <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c1e8:	f000 f966 	bl	c4b8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c1ec:	72a7      	strb	r7, [r4, #10]
    c1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1f2:	0000      	.short	0x0000
    c1f4:	200001ac 	.word	0x200001ac
    c1f8:	00020001 	.word	0x00020001
    c1fc:	00030001 	.word	0x00030001
    c200:	4000053c 	.word	0x4000053c
    c204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c208:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c20c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c210:	f010 0f02 	tst.w	r0, #2
    c214:	d011      	beq.n	c23a <MPSL_IRQ_CLOCK_Handler+0x346>
    c216:	4c16      	ldr	r4, [pc, #88]	; (c270 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c218:	6820      	ldr	r0, [r4, #0]
    c21a:	43c0      	mvns	r0, r0
    c21c:	f340 1600 	sbfx	r6, r0, #4, #1
    c220:	6820      	ldr	r0, [r4, #0]
    c222:	f040 0010 	orr.w	r0, r0, #16
    c226:	6020      	str	r0, [r4, #0]
    c228:	f44f 7782 	mov.w	r7, #260	; 0x104
    c22c:	4639      	mov	r1, r7
    c22e:	4628      	mov	r0, r5
    c230:	1c76      	adds	r6, r6, #1
    c232:	f003 ffe4 	bl	101fe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
    c236:	b128      	cbz	r0, c244 <MPSL_IRQ_CLOCK_Handler+0x350>
    c238:	e00a      	b.n	c250 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c23a:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c23e:	206d      	movs	r0, #109	; 0x6d
    c240:	f000 f9b8 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c244:	f004 f8e8 	bl	10418 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c248:	e002      	b.n	c250 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c24a:	bf00      	nop
    c24c:	f004 f8e2 	bl	10414 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c250:	4639      	mov	r1, r7
    c252:	4628      	mov	r0, r5
    c254:	f003 ffd3 	bl	101fe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
    c258:	2800      	cmp	r0, #0
    c25a:	d0f7      	beq.n	c24c <MPSL_IRQ_CLOCK_Handler+0x358>
    c25c:	f000 f920 	bl	c4a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c260:	2e00      	cmp	r6, #0
    c262:	d103      	bne.n	c26c <MPSL_IRQ_CLOCK_Handler+0x378>
    c264:	6820      	ldr	r0, [r4, #0]
    c266:	f020 0010 	bic.w	r0, r0, #16
    c26a:	6020      	str	r0, [r4, #0]
    c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c270:	e000ed10 	.word	0xe000ed10

0000c274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c274:	4801      	ldr	r0, [pc, #4]	; (c27c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c276:	89c0      	ldrh	r0, [r0, #14]
    c278:	4770      	bx	lr
    c27a:	0000      	.short	0x0000
    c27c:	200001ac 	.word	0x200001ac

0000c280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c280:	b510      	push	{r4, lr}
    c282:	f3ef 8410 	mrs	r4, PRIMASK
    c286:	b672      	cpsid	i
    c288:	480a      	ldr	r0, [pc, #40]	; (c2b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c28a:	7841      	ldrb	r1, [r0, #1]
    c28c:	b129      	cbz	r1, c29a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c28e:	7841      	ldrb	r1, [r0, #1]
    c290:	1e49      	subs	r1, r1, #1
    c292:	7041      	strb	r1, [r0, #1]
    c294:	7841      	ldrb	r1, [r0, #1]
    c296:	b129      	cbz	r1, c2a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c298:	e008      	b.n	c2ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c29a:	f240 1119 	movw	r1, #281	; 0x119
    c29e:	206d      	movs	r0, #109	; 0x6d
    c2a0:	f000 f988 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2a4:	7880      	ldrb	r0, [r0, #2]
    c2a6:	b908      	cbnz	r0, c2ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c2a8:	f000 f91a 	bl	c4e0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c2ac:	2c00      	cmp	r4, #0
    c2ae:	d100      	bne.n	c2b2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c2b0:	b662      	cpsie	i
    c2b2:	bd10      	pop	{r4, pc}
    c2b4:	200001ac 	.word	0x200001ac

0000c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c2b8:	b510      	push	{r4, lr}
    c2ba:	f3ef 8410 	mrs	r4, PRIMASK
    c2be:	b672      	cpsid	i
    c2c0:	4806      	ldr	r0, [pc, #24]	; (c2dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c2c2:	7841      	ldrb	r1, [r0, #1]
    c2c4:	1c49      	adds	r1, r1, #1
    c2c6:	7041      	strb	r1, [r0, #1]
    c2c8:	7840      	ldrb	r0, [r0, #1]
    c2ca:	2801      	cmp	r0, #1
    c2cc:	d101      	bne.n	c2d2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c2ce:	f003 ffb2 	bl	10236 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c2d2:	2c00      	cmp	r4, #0
    c2d4:	d100      	bne.n	c2d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c2d6:	b662      	cpsie	i
    c2d8:	bd10      	pop	{r4, pc}
    c2da:	0000      	.short	0x0000
    c2dc:	200001ac 	.word	0x200001ac

0000c2e0 <mpsl_clock_hfclk_release>:
    c2e0:	4805      	ldr	r0, [pc, #20]	; (c2f8 <mpsl_clock_hfclk_release+0x18>)
    c2e2:	b510      	push	{r4, lr}
    c2e4:	78c1      	ldrb	r1, [r0, #3]
    c2e6:	b121      	cbz	r1, c2f2 <mpsl_clock_hfclk_release+0x12>
    c2e8:	2100      	movs	r1, #0
    c2ea:	7101      	strb	r1, [r0, #4]
    c2ec:	70c1      	strb	r1, [r0, #3]
    c2ee:	f7ff ffc7 	bl	c280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c2f2:	2000      	movs	r0, #0
    c2f4:	bd10      	pop	{r4, pc}
    c2f6:	0000      	.short	0x0000
    c2f8:	200001ac 	.word	0x200001ac

0000c2fc <mpsl_clock_hfclk_request>:
    c2fc:	b570      	push	{r4, r5, r6, lr}
    c2fe:	4c0c      	ldr	r4, [pc, #48]	; (c330 <mpsl_clock_hfclk_request+0x34>)
    c300:	78e1      	ldrb	r1, [r4, #3]
    c302:	b961      	cbnz	r1, c31e <mpsl_clock_hfclk_request+0x22>
    c304:	2501      	movs	r5, #1
    c306:	70e5      	strb	r5, [r4, #3]
    c308:	61e0      	str	r0, [r4, #28]
    c30a:	f7ff ffd5 	bl	c2b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c30e:	f000 f8d9 	bl	c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c312:	b130      	cbz	r0, c322 <mpsl_clock_hfclk_request+0x26>
    c314:	69e0      	ldr	r0, [r4, #28]
    c316:	b110      	cbz	r0, c31e <mpsl_clock_hfclk_request+0x22>
    c318:	4780      	blx	r0
    c31a:	2000      	movs	r0, #0
    c31c:	61e0      	str	r0, [r4, #28]
    c31e:	2000      	movs	r0, #0
    c320:	bd70      	pop	{r4, r5, r6, pc}
    c322:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c326:	7125      	strb	r5, [r4, #4]
    c328:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c32c:	e7f7      	b.n	c31e <mpsl_clock_hfclk_request+0x22>
    c32e:	0000      	.short	0x0000
    c330:	200001ac 	.word	0x200001ac

0000c334 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c338:	0005      	movs	r5, r0
    c33a:	f06f 0015 	mvn.w	r0, #21
    c33e:	d03f      	beq.n	c3c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c340:	7829      	ldrb	r1, [r5, #0]
    c342:	2904      	cmp	r1, #4
    c344:	d83c      	bhi.n	c3c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c346:	2900      	cmp	r1, #0
    c348:	7869      	ldrb	r1, [r5, #1]
    c34a:	d03b      	beq.n	c3c4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c34c:	2900      	cmp	r1, #0
    c34e:	d137      	bne.n	c3c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c350:	78a9      	ldrb	r1, [r5, #2]
    c352:	2900      	cmp	r1, #0
    c354:	d134      	bne.n	c3c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c356:	2000      	movs	r0, #0
    c358:	f003 ff40 	bl	101dc <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1e>
    c35c:	2000      	movs	r0, #0
    c35e:	f003 ff30 	bl	101c2 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    c362:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c366:	f04f 31ff 	mov.w	r1, #4294967295
    c36a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c36e:	2600      	movs	r6, #0
    c370:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c374:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c378:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c37c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c380:	4c14      	ldr	r4, [pc, #80]	; (c3d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c382:	7066      	strb	r6, [r4, #1]
    c384:	88a8      	ldrh	r0, [r5, #4]
    c386:	81a0      	strh	r0, [r4, #12]
    c388:	f003 ff4c 	bl	10224 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c38c:	2701      	movs	r7, #1
    c38e:	b108      	cbz	r0, c394 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c390:	70e7      	strb	r7, [r4, #3]
    c392:	7067      	strb	r7, [r4, #1]
    c394:	2101      	movs	r1, #1
    c396:	4640      	mov	r0, r8
    c398:	f003 ff36 	bl	10208 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4a>
    c39c:	b108      	cbz	r0, c3a2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c39e:	f000 f88b 	bl	c4b8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c3a2:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c3a6:	81e0      	strh	r0, [r4, #14]
    c3a8:	4628      	mov	r0, r5
    c3aa:	f7ff fe8d 	bl	c0c8 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c3ae:	7267      	strb	r7, [r4, #9]
    c3b0:	2000      	movs	r0, #0
    c3b2:	f003 ff06 	bl	101c2 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    c3b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c3ba:	4630      	mov	r0, r6
    c3bc:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3c4:	2900      	cmp	r1, #0
    c3c6:	d0fb      	beq.n	c3c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3c8:	2920      	cmp	r1, #32
    c3ca:	d8f9      	bhi.n	c3c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3cc:	78a9      	ldrb	r1, [r5, #2]
    c3ce:	2921      	cmp	r1, #33	; 0x21
    c3d0:	d9c1      	bls.n	c356 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c3d2:	e7f5      	b.n	c3c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3d4:	200001ac 	.word	0x200001ac

0000c3d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c3d8:	4801      	ldr	r0, [pc, #4]	; (c3e0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c3da:	8980      	ldrh	r0, [r0, #12]
    c3dc:	4770      	bx	lr
    c3de:	0000      	.short	0x0000
    c3e0:	200001ac 	.word	0x200001ac

0000c3e4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c3e4:	4802      	ldr	r0, [pc, #8]	; (c3f0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c3e6:	7a80      	ldrb	r0, [r0, #10]
    c3e8:	2800      	cmp	r0, #0
    c3ea:	d000      	beq.n	c3ee <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c3ec:	2001      	movs	r0, #1
    c3ee:	4770      	bx	lr
    c3f0:	200001ac 	.word	0x200001ac

0000c3f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3f6:	4d1f      	ldr	r5, [pc, #124]	; (c474 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c3f8:	7ae8      	ldrb	r0, [r5, #11]
    c3fa:	2800      	cmp	r0, #0
    c3fc:	d10f      	bne.n	c41e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c3fe:	7e28      	ldrb	r0, [r5, #24]
    c400:	f000 0003 	and.w	r0, r0, #3
    c404:	f003 ff1c 	bl	10240 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c408:	2800      	cmp	r0, #0
    c40a:	d008      	beq.n	c41e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c40c:	f3ef 8110 	mrs	r1, PRIMASK
    c410:	b672      	cpsid	i
    c412:	f7ff ffe7 	bl	c3e4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c416:	b118      	cbz	r0, c420 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c418:	2900      	cmp	r1, #0
    c41a:	d100      	bne.n	c41e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c41c:	b662      	cpsie	i
    c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c420:	2601      	movs	r6, #1
    c422:	72ae      	strb	r6, [r5, #10]
    c424:	b901      	cbnz	r1, c428 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c426:	b662      	cpsie	i
    c428:	2018      	movs	r0, #24
    c42a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c42e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c432:	61a6      	str	r6, [r4, #24]
    c434:	f44f 7020 	mov.w	r0, #640	; 0x280
    c438:	f8ad 0000 	strh.w	r0, [sp]
    c43c:	f8bd 0000 	ldrh.w	r0, [sp]
    c440:	1e41      	subs	r1, r0, #1
    c442:	f8ad 1000 	strh.w	r1, [sp]
    c446:	d2f9      	bcs.n	c43c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c448:	2700      	movs	r7, #0
    c44a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c44e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c452:	4808      	ldr	r0, [pc, #32]	; (c474 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c454:	3008      	adds	r0, #8
    c456:	f003 ff59 	bl	1030c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c45a:	702f      	strb	r7, [r5, #0]
    c45c:	f7ff fd8e 	bl	bf7c <MPSL_IRQ_CLOCK_Handler+0x88>
    c460:	6166      	str	r6, [r4, #20]
    c462:	7968      	ldrb	r0, [r5, #5]
    c464:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c468:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c46c:	2018      	movs	r0, #24
    c46e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c474:	200001ac 	.word	0x200001ac

0000c478 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c478:	4602      	mov	r2, r0
    c47a:	b510      	push	{r4, lr}
    c47c:	2000      	movs	r0, #0
    c47e:	2900      	cmp	r1, #0
    c480:	d00a      	beq.n	c498 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c482:	2a00      	cmp	r2, #0
    c484:	d008      	beq.n	c498 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c486:	fba2 0101 	umull	r0, r1, r2, r1
    c48a:	1e40      	subs	r0, r0, #1
    c48c:	4a03      	ldr	r2, [pc, #12]	; (c49c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c48e:	f141 31ff 	adc.w	r1, r1, #4294967295
    c492:	f003 ffc3 	bl	1041c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c496:	1c40      	adds	r0, r0, #1
    c498:	bd10      	pop	{r4, pc}
    c49a:	0000      	.short	0x0000
    c49c:	000f4240 	.word	0x000f4240

0000c4a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c4a0:	b510      	push	{r4, lr}
    c4a2:	4c04      	ldr	r4, [pc, #16]	; (c4b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c4a4:	7e20      	ldrb	r0, [r4, #24]
    c4a6:	f000 0003 	and.w	r0, r0, #3
    c4aa:	f003 fec9 	bl	10240 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c4ae:	2800      	cmp	r0, #0
    c4b0:	d0f8      	beq.n	c4a4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c4b2:	bd10      	pop	{r4, pc}
    c4b4:	200001ac 	.word	0x200001ac

0000c4b8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c4b8:	4901      	ldr	r1, [pc, #4]	; (c4c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c4ba:	2001      	movs	r0, #1
    c4bc:	7008      	strb	r0, [r1, #0]
    c4be:	4770      	bx	lr
    c4c0:	2000022d 	.word	0x2000022d

0000c4c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c4c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c4c8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c4cc:	b918      	cbnz	r0, c4d6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c4ce:	4803      	ldr	r0, [pc, #12]	; (c4dc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c4d0:	7800      	ldrb	r0, [r0, #0]
    c4d2:	2800      	cmp	r0, #0
    c4d4:	d000      	beq.n	c4d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c4d6:	2001      	movs	r0, #1
    c4d8:	4770      	bx	lr
    c4da:	0000      	.short	0x0000
    c4dc:	2000022d 	.word	0x2000022d

0000c4e0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c4e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c4e4:	2101      	movs	r1, #1
    c4e6:	6041      	str	r1, [r0, #4]
    c4e8:	2100      	movs	r1, #0
    c4ea:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c4ee:	4801      	ldr	r0, [pc, #4]	; (c4f4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c4f0:	7001      	strb	r1, [r0, #0]
    c4f2:	4770      	bx	lr
    c4f4:	2000022d 	.word	0x2000022d

0000c4f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c4f8:	4802      	ldr	r0, [pc, #8]	; (c504 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c4fa:	6800      	ldr	r0, [r0, #0]
    c4fc:	f000 0003 	and.w	r0, r0, #3
    c500:	4770      	bx	lr
    c502:	0000      	.short	0x0000
    c504:	4000041c 	.word	0x4000041c
    c508:	b510      	push	{r4, lr}
    c50a:	b131      	cbz	r1, c51a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c50c:	2901      	cmp	r1, #1
    c50e:	d007      	beq.n	c520 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c510:	f240 3102 	movw	r1, #770	; 0x302
    c514:	a005      	add	r0, pc, #20	; (adr r0, c52c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c516:	f000 f821 	bl	c55c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c51a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c51e:	e001      	b.n	c524 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c520:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c524:	f000 0001 	and.w	r0, r0, #1
    c528:	bd10      	pop	{r4, pc}
    c52a:	0000      	.short	0x0000
    c52c:	5f66726e 	.word	0x5f66726e
    c530:	636f6c63 	.word	0x636f6c63
    c534:	00682e6b 	.word	0x00682e6b
    c538:	f3bf 8f4f 	dsb	sy
    c53c:	4805      	ldr	r0, [pc, #20]	; (c554 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c53e:	6801      	ldr	r1, [r0, #0]
    c540:	4a05      	ldr	r2, [pc, #20]	; (c558 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c542:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c546:	4311      	orrs	r1, r2
    c548:	6001      	str	r1, [r0, #0]
    c54a:	f3bf 8f4f 	dsb	sy
    c54e:	bf00      	nop
    c550:	e7fd      	b.n	c54e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c552:	0000      	.short	0x0000
    c554:	e000ed0c 	.word	0xe000ed0c
    c558:	05fa0004 	.word	0x05fa0004

0000c55c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c55c:	b672      	cpsid	i
    c55e:	4a03      	ldr	r2, [pc, #12]	; (c56c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c560:	6852      	ldr	r2, [r2, #4]
    c562:	b102      	cbz	r2, c566 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c564:	4790      	blx	r2
    c566:	f7ff ffe7 	bl	c538 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c56a:	0000      	.short	0x0000
    c56c:	200001cc 	.word	0x200001cc
    c570:	4806      	ldr	r0, [pc, #24]	; (c58c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c572:	b510      	push	{r4, lr}
    c574:	2100      	movs	r1, #0
    c576:	6001      	str	r1, [r0, #0]
    c578:	2101      	movs	r1, #1
    c57a:	6001      	str	r1, [r0, #0]
    c57c:	4608      	mov	r0, r1
    c57e:	f003 fe86 	bl	1028e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c586:	2001      	movs	r0, #1
    c588:	f003 be74 	b.w	10274 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c58c:	40001ffc 	.word	0x40001ffc
    c590:	4807      	ldr	r0, [pc, #28]	; (c5b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c592:	b510      	push	{r4, lr}
    c594:	2101      	movs	r1, #1
    c596:	6041      	str	r1, [r0, #4]
    c598:	1e89      	subs	r1, r1, #2
    c59a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c59e:	200c      	movs	r0, #12
    c5a0:	f003 fe75 	bl	1028e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c5a8:	200c      	movs	r0, #12
    c5aa:	f003 be63 	b.w	10274 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c5ae:	0000      	.short	0x0000
    c5b0:	4000c000 	.word	0x4000c000

0000c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c5b4:	b50e      	push	{r1, r2, r3, lr}
    c5b6:	b672      	cpsid	i
    c5b8:	4a0f      	ldr	r2, [pc, #60]	; (c5f8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c5ba:	6855      	ldr	r5, [r2, #4]
    c5bc:	b1d5      	cbz	r5, c5f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c5be:	2200      	movs	r2, #0
    c5c0:	4603      	mov	r3, r0
    c5c2:	466e      	mov	r6, sp
    c5c4:	240a      	movs	r4, #10
    c5c6:	e003      	b.n	c5d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c5c8:	fbb0 f0f4 	udiv	r0, r0, r4
    c5cc:	1c52      	adds	r2, r2, #1
    c5ce:	b2d2      	uxtb	r2, r2
    c5d0:	2800      	cmp	r0, #0
    c5d2:	d1f9      	bne.n	c5c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c5d4:	54b0      	strb	r0, [r6, r2]
    c5d6:	e009      	b.n	c5ec <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c5d8:	fbb3 f0f4 	udiv	r0, r3, r4
    c5dc:	fb04 3010 	mls	r0, r4, r0, r3
    c5e0:	fbb3 f3f4 	udiv	r3, r3, r4
    c5e4:	1e52      	subs	r2, r2, #1
    c5e6:	b2d2      	uxtb	r2, r2
    c5e8:	3030      	adds	r0, #48	; 0x30
    c5ea:	54b0      	strb	r0, [r6, r2]
    c5ec:	2a00      	cmp	r2, #0
    c5ee:	d1f3      	bne.n	c5d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c5f0:	4630      	mov	r0, r6
    c5f2:	47a8      	blx	r5
    c5f4:	f7ff ffa0 	bl	c538 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c5f8:	200001cc 	.word	0x200001cc

0000c5fc <mpsl_init>:
    c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c600:	4c18      	ldr	r4, [pc, #96]	; (c664 <mpsl_init+0x68>)
    c602:	4606      	mov	r6, r0
    c604:	4617      	mov	r7, r2
    c606:	7860      	ldrb	r0, [r4, #1]
    c608:	460d      	mov	r5, r1
    c60a:	b118      	cbz	r0, c614 <mpsl_init+0x18>
    c60c:	f04f 30ff 	mov.w	r0, #4294967295
    c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c614:	f7fc fc02 	bl	8e1c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c618:	b906      	cbnz	r6, c61c <mpsl_init+0x20>
    c61a:	4e13      	ldr	r6, [pc, #76]	; (c668 <mpsl_init+0x6c>)
    c61c:	6067      	str	r7, [r4, #4]
    c61e:	7025      	strb	r5, [r4, #0]
    c620:	f7ff ffa6 	bl	c570 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c624:	f7ff ffb4 	bl	c590 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c628:	4630      	mov	r0, r6
    c62a:	f7ff fe83 	bl	c334 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c62e:	0006      	movs	r6, r0
    c630:	d1ee      	bne.n	c610 <mpsl_init+0x14>
    c632:	f7fe fe7d 	bl	b330 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c636:	f7ff fedd 	bl	c3f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c63a:	f003 fd8d 	bl	10158 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c63e:	4628      	mov	r0, r5
    c640:	f003 fe18 	bl	10274 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c644:	2001      	movs	r0, #1
    c646:	2d00      	cmp	r5, #0
    c648:	db09      	blt.n	c65e <mpsl_init+0x62>
    c64a:	f005 011f 	and.w	r1, r5, #31
    c64e:	fa00 f101 	lsl.w	r1, r0, r1
    c652:	096a      	lsrs	r2, r5, #5
    c654:	0092      	lsls	r2, r2, #2
    c656:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c65a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c65e:	7060      	strb	r0, [r4, #1]
    c660:	4630      	mov	r0, r6
    c662:	e7d5      	b.n	c610 <mpsl_init+0x14>
    c664:	200001cc 	.word	0x200001cc
    c668:	000102b0 	.word	0x000102b0

0000c66c <mpsl_is_initialized>:
    c66c:	4801      	ldr	r0, [pc, #4]	; (c674 <mpsl_is_initialized+0x8>)
    c66e:	7840      	ldrb	r0, [r0, #1]
    c670:	4770      	bx	lr
    c672:	0000      	.short	0x0000
    c674:	200001cc 	.word	0x200001cc

0000c678 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c678:	4807      	ldr	r0, [pc, #28]	; (c698 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c67a:	f990 0000 	ldrsb.w	r0, [r0]
    c67e:	2800      	cmp	r0, #0
    c680:	db09      	blt.n	c696 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c682:	f000 021f 	and.w	r2, r0, #31
    c686:	2101      	movs	r1, #1
    c688:	4091      	lsls	r1, r2
    c68a:	0940      	lsrs	r0, r0, #5
    c68c:	0080      	lsls	r0, r0, #2
    c68e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c692:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c696:	4770      	bx	lr
    c698:	200001cc 	.word	0x200001cc

0000c69c <mpsl_temperature_get>:
    c69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6a0:	2601      	movs	r6, #1
    c6a2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c6a6:	0331      	lsls	r1, r6, #12
    c6a8:	f04f 0800 	mov.w	r8, #0
    c6ac:	4640      	mov	r0, r8
    c6ae:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c6b2:	f3bf 8f4f 	dsb	sy
    c6b6:	f3bf 8f6f 	isb	sy
    c6ba:	4c16      	ldr	r4, [pc, #88]	; (c714 <mpsl_temperature_get+0x78>)
    c6bc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c6c0:	200c      	movs	r0, #12
    c6c2:	f003 fe03 	bl	102cc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c6c6:	4d14      	ldr	r5, [pc, #80]	; (c718 <mpsl_temperature_get+0x7c>)
    c6c8:	6828      	ldr	r0, [r5, #0]
    c6ca:	43c0      	mvns	r0, r0
    c6cc:	f340 1700 	sbfx	r7, r0, #4, #1
    c6d0:	6828      	ldr	r0, [r5, #0]
    c6d2:	f040 0010 	orr.w	r0, r0, #16
    c6d6:	6028      	str	r0, [r5, #0]
    c6d8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c6dc:	6026      	str	r6, [r4, #0]
    c6de:	1c7f      	adds	r7, r7, #1
    c6e0:	e002      	b.n	c6e8 <mpsl_temperature_get+0x4c>
    c6e2:	bf00      	nop
    c6e4:	f003 fe96 	bl	10414 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c6e8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c6ec:	2800      	cmp	r0, #0
    c6ee:	d0f9      	beq.n	c6e4 <mpsl_temperature_get+0x48>
    c6f0:	b91f      	cbnz	r7, c6fa <mpsl_temperature_get+0x5e>
    c6f2:	6828      	ldr	r0, [r5, #0]
    c6f4:	f020 0010 	bic.w	r0, r0, #16
    c6f8:	6028      	str	r0, [r5, #0]
    c6fa:	4808      	ldr	r0, [pc, #32]	; (c71c <mpsl_temperature_get+0x80>)
    c6fc:	6805      	ldr	r5, [r0, #0]
    c6fe:	6066      	str	r6, [r4, #4]
    c700:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c704:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c708:	200c      	movs	r0, #12
    c70a:	f003 fddf 	bl	102cc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c70e:	4628      	mov	r0, r5
    c710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c714:	4000c000 	.word	0x4000c000
    c718:	e000ed10 	.word	0xe000ed10
    c71c:	4000c508 	.word	0x4000c508

0000c720 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c720:	b510      	push	{r4, lr}
    c722:	4602      	mov	r2, r0
    c724:	2005      	movs	r0, #5
    c726:	490c      	ldr	r1, [pc, #48]	; (c758 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c728:	e004      	b.n	c734 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c72a:	bf00      	nop
    c72c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c730:	791b      	ldrb	r3, [r3, #4]
    c732:	b133      	cbz	r3, c742 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c734:	1e40      	subs	r0, r0, #1
    c736:	b2c0      	uxtb	r0, r0
    c738:	d2f8      	bcs.n	c72c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c73a:	2148      	movs	r1, #72	; 0x48
    c73c:	2069      	movs	r0, #105	; 0x69
    c73e:	f7ff ff39 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c742:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c746:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c74a:	2200      	movs	r2, #0
    c74c:	714a      	strb	r2, [r1, #5]
    c74e:	718a      	strb	r2, [r1, #6]
    c750:	2201      	movs	r2, #1
    c752:	710a      	strb	r2, [r1, #4]
    c754:	bd10      	pop	{r4, pc}
    c756:	0000      	.short	0x0000
    c758:	20001014 	.word	0x20001014

0000c75c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c75c:	b510      	push	{r4, lr}
    c75e:	2805      	cmp	r0, #5
    c760:	d301      	bcc.n	c766 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c762:	2158      	movs	r1, #88	; 0x58
    c764:	e006      	b.n	c774 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c766:	490a      	ldr	r1, [pc, #40]	; (c790 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c768:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c76c:	7901      	ldrb	r1, [r0, #4]
    c76e:	2901      	cmp	r1, #1
    c770:	d003      	beq.n	c77a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c772:	2159      	movs	r1, #89	; 0x59
    c774:	2069      	movs	r0, #105	; 0x69
    c776:	f7ff ff1d 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c77a:	7941      	ldrb	r1, [r0, #5]
    c77c:	7982      	ldrb	r2, [r0, #6]
    c77e:	1c49      	adds	r1, r1, #1
    c780:	b2c9      	uxtb	r1, r1
    c782:	428a      	cmp	r2, r1
    c784:	d000      	beq.n	c788 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c786:	7141      	strb	r1, [r0, #5]
    c788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c78c:	f7ff bf74 	b.w	c678 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c790:	20001014 	.word	0x20001014

0000c794 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c794:	b510      	push	{r4, lr}
    c796:	2805      	cmp	r0, #5
    c798:	d303      	bcc.n	c7a2 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c79a:	214f      	movs	r1, #79	; 0x4f
    c79c:	2069      	movs	r0, #105	; 0x69
    c79e:	f7ff ff09 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c7a2:	4a03      	ldr	r2, [pc, #12]	; (c7b0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c7a4:	2100      	movs	r1, #0
    c7a6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c7aa:	7101      	strb	r1, [r0, #4]
    c7ac:	bd10      	pop	{r4, pc}
    c7ae:	0000      	.short	0x0000
    c7b0:	20001014 	.word	0x20001014

0000c7b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c7b4:	b570      	push	{r4, r5, r6, lr}
    c7b6:	2505      	movs	r5, #5
    c7b8:	4e0e      	ldr	r6, [pc, #56]	; (c7f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c7ba:	4c0f      	ldr	r4, [pc, #60]	; (c7f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c7bc:	e016      	b.n	c7ec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c7be:	7821      	ldrb	r1, [r4, #0]
    c7c0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c7c4:	7902      	ldrb	r2, [r0, #4]
    c7c6:	2a01      	cmp	r2, #1
    c7c8:	d108      	bne.n	c7dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c7ca:	7942      	ldrb	r2, [r0, #5]
    c7cc:	7983      	ldrb	r3, [r0, #6]
    c7ce:	429a      	cmp	r2, r3
    c7d0:	d004      	beq.n	c7dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c7d2:	7942      	ldrb	r2, [r0, #5]
    c7d4:	7182      	strb	r2, [r0, #6]
    c7d6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c7da:	4780      	blx	r0
    c7dc:	7820      	ldrb	r0, [r4, #0]
    c7de:	1c40      	adds	r0, r0, #1
    c7e0:	b2c0      	uxtb	r0, r0
    c7e2:	7020      	strb	r0, [r4, #0]
    c7e4:	2805      	cmp	r0, #5
    c7e6:	d301      	bcc.n	c7ec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c7e8:	2000      	movs	r0, #0
    c7ea:	7020      	strb	r0, [r4, #0]
    c7ec:	1e6d      	subs	r5, r5, #1
    c7ee:	b2ed      	uxtb	r5, r5
    c7f0:	d2e5      	bcs.n	c7be <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c7f2:	bd70      	pop	{r4, r5, r6, pc}
    c7f4:	20001014 	.word	0x20001014
    c7f8:	2000022e 	.word	0x2000022e

0000c7fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c7fc:	b500      	push	{lr}
    c7fe:	f003 fd94 	bl	1032a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c802:	b940      	cbnz	r0, c816 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c804:	f003 fd9b 	bl	1033e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c808:	b928      	cbnz	r0, c816 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c80a:	f003 fdaf 	bl	1036c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c80e:	b910      	cbnz	r0, c816 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c810:	f003 fdc0 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c814:	b108      	cbz	r0, c81a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c816:	4802      	ldr	r0, [pc, #8]	; (c820 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c818:	bd00      	pop	{pc}
    c81a:	4802      	ldr	r0, [pc, #8]	; (c824 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c81c:	bd00      	pop	{pc}
    c81e:	0000      	.short	0x0000
    c820:	4000050c 	.word	0x4000050c
    c824:	4001e700 	.word	0x4001e700
    c828:	b510      	push	{r4, lr}
    c82a:	f003 fdb3 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c82e:	b330      	cbz	r0, c87e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c830:	f3ef 8010 	mrs	r0, PRIMASK
    c834:	b1c8      	cbz	r0, c86a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c836:	2100      	movs	r1, #0
    c838:	b672      	cpsid	i
    c83a:	4812      	ldr	r0, [pc, #72]	; (c884 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c83c:	6802      	ldr	r2, [r0, #0]
    c83e:	6803      	ldr	r3, [r0, #0]
    c840:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c844:	f043 0310 	orr.w	r3, r3, #16
    c848:	6003      	str	r3, [r0, #0]
    c84a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c84e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c852:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c856:	431c      	orrs	r4, r3
    c858:	d000      	beq.n	c85c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c85a:	bf40      	sev
    c85c:	bf20      	wfe
    c85e:	bf00      	nop
    c860:	bf00      	nop
    c862:	bf00      	nop
    c864:	bf00      	nop
    c866:	b112      	cbz	r2, c86e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c868:	e005      	b.n	c876 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c86a:	2101      	movs	r1, #1
    c86c:	e7e4      	b.n	c838 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c86e:	6802      	ldr	r2, [r0, #0]
    c870:	f022 0210 	bic.w	r2, r2, #16
    c874:	6002      	str	r2, [r0, #0]
    c876:	2900      	cmp	r1, #0
    c878:	d000      	beq.n	c87c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c87a:	b662      	cpsie	i
    c87c:	bd10      	pop	{r4, pc}
    c87e:	bf20      	wfe
    c880:	bd10      	pop	{r4, pc}
    c882:	0000      	.short	0x0000
    c884:	e000ed10 	.word	0xe000ed10

0000c888 <mpsl_cx_granted_ops_get>:
    c888:	4901      	ldr	r1, [pc, #4]	; (c890 <mpsl_cx_granted_ops_get+0x8>)
    c88a:	6809      	ldr	r1, [r1, #0]
    c88c:	6889      	ldr	r1, [r1, #8]
    c88e:	4708      	bx	r1
    c890:	200001d4 	.word	0x200001d4

0000c894 <mpsl_cx_register_callback>:
    c894:	4901      	ldr	r1, [pc, #4]	; (c89c <mpsl_cx_register_callback+0x8>)
    c896:	6809      	ldr	r1, [r1, #0]
    c898:	6909      	ldr	r1, [r1, #16]
    c89a:	4708      	bx	r1
    c89c:	200001d4 	.word	0x200001d4

0000c8a0 <mpsl_cx_release>:
    c8a0:	4801      	ldr	r0, [pc, #4]	; (c8a8 <mpsl_cx_release+0x8>)
    c8a2:	6800      	ldr	r0, [r0, #0]
    c8a4:	6840      	ldr	r0, [r0, #4]
    c8a6:	4700      	bx	r0
    c8a8:	200001d4 	.word	0x200001d4

0000c8ac <mpsl_cx_request>:
    c8ac:	4901      	ldr	r1, [pc, #4]	; (c8b4 <mpsl_cx_request+0x8>)
    c8ae:	6809      	ldr	r1, [r1, #0]
    c8b0:	6809      	ldr	r1, [r1, #0]
    c8b2:	4708      	bx	r1
    c8b4:	200001d4 	.word	0x200001d4

0000c8b8 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI>:
    c8b8:	00010673 0001066b 0001065f 0001066f     s...k..._...o...
    c8c8:	00010667 4c0eb570 28007860 7820d117     g...p..L`x.(.. x
    c8d8:	28012500 2002d106 69207020 6920b110     .%.(...  p i.. i
    c8e8:	61254780 28037820 7025d109 28006920     .G%a x.(..%p i.(
    c8f8:	6860d005 47806940 47806920 bd706125     ..`h@i.G i.G%ap.
    c908:	200001d8                                ... 

0000c90c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    c90c:	b510      	push	{r4, lr}
    c90e:	4c08      	ldr	r4, [pc, #32]	; (c930 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    c910:	7820      	ldrb	r0, [r4, #0]
    c912:	2802      	cmp	r0, #2
    c914:	d002      	beq.n	c91c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    c916:	7820      	ldrb	r0, [r4, #0]
    c918:	2803      	cmp	r0, #3
    c91a:	d102      	bne.n	c922 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    c91c:	6860      	ldr	r0, [r4, #4]
    c91e:	6880      	ldr	r0, [r0, #8]
    c920:	4780      	blx	r0
    c922:	2000      	movs	r0, #0
    c924:	70a0      	strb	r0, [r4, #2]
    c926:	7060      	strb	r0, [r4, #1]
    c928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c92c:	f7ff bfce 	b.w	c8cc <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    c930:	200001d8 	.word	0x200001d8

0000c934 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>:
    c934:	4802      	ldr	r0, [pc, #8]	; (c940 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xc>)
    c936:	7800      	ldrb	r0, [r0, #0]
    c938:	2800      	cmp	r0, #0
    c93a:	d000      	beq.n	c93e <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xa>
    c93c:	2001      	movs	r0, #1
    c93e:	4770      	bx	lr
    c940:	200001d8 	.word	0x200001d8

0000c944 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    c944:	b538      	push	{r3, r4, r5, lr}
    c946:	4604      	mov	r4, r0
    c948:	2805      	cmp	r0, #5
    c94a:	d304      	bcc.n	c956 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    c94c:	f240 113d 	movw	r1, #317	; 0x13d
    c950:	2068      	movs	r0, #104	; 0x68
    c952:	f7ff fe2f 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c956:	f7ff ffb9 	bl	c8cc <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    c95a:	4d10      	ldr	r5, [pc, #64]	; (c99c <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x58>)
    c95c:	2001      	movs	r0, #1
    c95e:	7068      	strb	r0, [r5, #1]
    c960:	7828      	ldrb	r0, [r5, #0]
    c962:	2802      	cmp	r0, #2
    c964:	d116      	bne.n	c994 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>
    c966:	6868      	ldr	r0, [r5, #4]
    c968:	68c1      	ldr	r1, [r0, #12]
    c96a:	4620      	mov	r0, r4
    c96c:	4788      	blx	r1
    c96e:	490c      	ldr	r1, [pc, #48]	; (c9a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x5c>)
    c970:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    c974:	7852      	ldrb	r2, [r2, #1]
    c976:	4282      	cmp	r2, r0
    c978:	d30d      	bcc.n	c996 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    c97a:	78a8      	ldrb	r0, [r5, #2]
    c97c:	2801      	cmp	r0, #1
    c97e:	d00a      	beq.n	c996 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    c980:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    c984:	f88d 0000 	strb.w	r0, [sp]
    c988:	f88d 4001 	strb.w	r4, [sp, #1]
    c98c:	6868      	ldr	r0, [r5, #4]
    c98e:	6801      	ldr	r1, [r0, #0]
    c990:	4668      	mov	r0, sp
    c992:	4788      	blx	r1
    c994:	bd38      	pop	{r3, r4, r5, pc}
    c996:	2001      	movs	r0, #1
    c998:	e7f4      	b.n	c984 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x40>
    c99a:	0000      	.short	0x0000
    c99c:	200001d8 	.word	0x200001d8
    c9a0:	2000159f 	.word	0x2000159f

0000c9a4 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    c9a4:	4905      	ldr	r1, [pc, #20]	; (c9bc <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    c9a6:	780a      	ldrb	r2, [r1, #0]
    c9a8:	2a02      	cmp	r2, #2
    c9aa:	d004      	beq.n	c9b6 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    c9ac:	780a      	ldrb	r2, [r1, #0]
    c9ae:	2a03      	cmp	r2, #3
    c9b0:	d001      	beq.n	c9b6 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    c9b2:	2000      	movs	r0, #0
    c9b4:	4770      	bx	lr
    c9b6:	6849      	ldr	r1, [r1, #4]
    c9b8:	6909      	ldr	r1, [r1, #16]
    c9ba:	4708      	bx	r1
    c9bc:	200001d8 	.word	0x200001d8

0000c9c0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    c9c0:	b510      	push	{r4, lr}
    c9c2:	b158      	cbz	r0, c9dc <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    c9c4:	4908      	ldr	r1, [pc, #32]	; (c9e8 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    c9c6:	780a      	ldrb	r2, [r1, #0]
    c9c8:	2a02      	cmp	r2, #2
    c9ca:	d002      	beq.n	c9d2 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    c9cc:	780a      	ldrb	r2, [r1, #0]
    c9ce:	2a03      	cmp	r2, #3
    c9d0:	d109      	bne.n	c9e6 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    c9d2:	6849      	ldr	r1, [r1, #4]
    c9d4:	6849      	ldr	r1, [r1, #4]
    c9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9da:	4708      	bx	r1
    c9dc:	f240 1153 	movw	r1, #339	; 0x153
    c9e0:	2068      	movs	r0, #104	; 0x68
    c9e2:	f7ff fde7 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c9e6:	bd10      	pop	{r4, pc}
    c9e8:	200001d8 	.word	0x200001d8

0000c9ec <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c9ec:	4901      	ldr	r1, [pc, #4]	; (c9f4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c9ee:	2001      	movs	r0, #1
    c9f0:	7088      	strb	r0, [r1, #2]
    c9f2:	4770      	bx	lr
    c9f4:	200001d8 	.word	0x200001d8

0000c9f8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    c9f8:	4805      	ldr	r0, [pc, #20]	; (ca10 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    c9fa:	7801      	ldrb	r1, [r0, #0]
    c9fc:	2902      	cmp	r1, #2
    c9fe:	d004      	beq.n	ca0a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    ca00:	7801      	ldrb	r1, [r0, #0]
    ca02:	2903      	cmp	r1, #3
    ca04:	d001      	beq.n	ca0a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    ca06:	2000      	movs	r0, #0
    ca08:	4770      	bx	lr
    ca0a:	6840      	ldr	r0, [r0, #4]
    ca0c:	6980      	ldr	r0, [r0, #24]
    ca0e:	4700      	bx	r0
    ca10:	200001d8 	.word	0x200001d8

0000ca14 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    ca14:	00010697 000106cf 000106b9 000106a7     ................
    ca24:	000106b3 000106a1 00010695 00010693     ................
    ca34:	000106cb 000106bf 000106ad 0001069b     ................
    ca44:	0001068d 00010685 00010689 0001067f     ................

0000ca54 <mpsl_fem_disable>:
    ca54:	4801      	ldr	r0, [pc, #4]	; (ca5c <mpsl_fem_disable+0x8>)
    ca56:	6800      	ldr	r0, [r0, #0]
    ca58:	6800      	ldr	r0, [r0, #0]
    ca5a:	4700      	bx	r0
    ca5c:	200001ec 	.word	0x200001ec

0000ca60 <mpsl_fem_lna_configuration_clear>:
    ca60:	4801      	ldr	r0, [pc, #4]	; (ca68 <mpsl_fem_lna_configuration_clear+0x8>)
    ca62:	6800      	ldr	r0, [r0, #0]
    ca64:	6940      	ldr	r0, [r0, #20]
    ca66:	4700      	bx	r0
    ca68:	200001ec 	.word	0x200001ec

0000ca6c <mpsl_fem_lna_configuration_set>:
    ca6c:	4a01      	ldr	r2, [pc, #4]	; (ca74 <mpsl_fem_lna_configuration_set+0x8>)
    ca6e:	6812      	ldr	r2, [r2, #0]
    ca70:	68d2      	ldr	r2, [r2, #12]
    ca72:	4710      	bx	r2
    ca74:	200001ec 	.word	0x200001ec

0000ca78 <mpsl_fem_lna_is_configured>:
    ca78:	4901      	ldr	r1, [pc, #4]	; (ca80 <mpsl_fem_lna_is_configured+0x8>)
    ca7a:	6809      	ldr	r1, [r1, #0]
    ca7c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    ca7e:	4708      	bx	r1
    ca80:	200001ec 	.word	0x200001ec

0000ca84 <mpsl_fem_pa_configuration_clear>:
    ca84:	4801      	ldr	r0, [pc, #4]	; (ca8c <mpsl_fem_pa_configuration_clear+0x8>)
    ca86:	6800      	ldr	r0, [r0, #0]
    ca88:	6900      	ldr	r0, [r0, #16]
    ca8a:	4700      	bx	r0
    ca8c:	200001ec 	.word	0x200001ec

0000ca90 <mpsl_fem_pa_configuration_set>:
    ca90:	4a01      	ldr	r2, [pc, #4]	; (ca98 <mpsl_fem_pa_configuration_set+0x8>)
    ca92:	6812      	ldr	r2, [r2, #0]
    ca94:	6892      	ldr	r2, [r2, #8]
    ca96:	4710      	bx	r2
    ca98:	200001ec 	.word	0x200001ec

0000ca9c <mpsl_fem_pa_gain_set>:
    ca9c:	4901      	ldr	r1, [pc, #4]	; (caa4 <mpsl_fem_pa_gain_set+0x8>)
    ca9e:	6809      	ldr	r1, [r1, #0]
    caa0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    caa2:	4708      	bx	r1
    caa4:	200001ec 	.word	0x200001ec

0000caa8 <mpsl_fem_pa_is_configured>:
    caa8:	4901      	ldr	r1, [pc, #4]	; (cab0 <mpsl_fem_pa_is_configured+0x8>)
    caaa:	6809      	ldr	r1, [r1, #0]
    caac:	6a89      	ldr	r1, [r1, #40]	; 0x28
    caae:	4708      	bx	r1
    cab0:	200001ec 	.word	0x200001ec

0000cab4 <mpsl_fem_tx_power_split>:
    cab4:	b430      	push	{r4, r5}
    cab6:	4c03      	ldr	r4, [pc, #12]	; (cac4 <mpsl_fem_tx_power_split+0x10>)
    cab8:	6824      	ldr	r4, [r4, #0]
    caba:	6864      	ldr	r4, [r4, #4]
    cabc:	46a4      	mov	ip, r4
    cabe:	bc30      	pop	{r4, r5}
    cac0:	4760      	bx	ip
    cac2:	0000      	.short	0x0000
    cac4:	200001ec 	.word	0x200001ec

0000cac8 <mpsl_fem_device_config_254_apply_get>:
    cac8:	4801      	ldr	r0, [pc, #4]	; (cad0 <mpsl_fem_device_config_254_apply_get+0x8>)
    caca:	7800      	ldrb	r0, [r0, #0]
    cacc:	4770      	bx	lr
    cace:	0000      	.short	0x0000
    cad0:	2000022f 	.word	0x2000022f

0000cad4 <__udivmoddi4>:
    cad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cad8:	4686      	mov	lr, r0
    cada:	468c      	mov	ip, r1
    cadc:	4608      	mov	r0, r1
    cade:	9e08      	ldr	r6, [sp, #32]
    cae0:	4615      	mov	r5, r2
    cae2:	4674      	mov	r4, lr
    cae4:	4619      	mov	r1, r3
    cae6:	2b00      	cmp	r3, #0
    cae8:	f040 80c2 	bne.w	cc70 <__udivmoddi4+0x19c>
    caec:	4285      	cmp	r5, r0
    caee:	fab2 f282 	clz	r2, r2
    caf2:	d945      	bls.n	cb80 <__udivmoddi4+0xac>
    caf4:	b14a      	cbz	r2, cb0a <__udivmoddi4+0x36>
    caf6:	f1c2 0320 	rsb	r3, r2, #32
    cafa:	fa00 fc02 	lsl.w	ip, r0, r2
    cafe:	fa2e f303 	lsr.w	r3, lr, r3
    cb02:	4095      	lsls	r5, r2
    cb04:	ea43 0c0c 	orr.w	ip, r3, ip
    cb08:	4094      	lsls	r4, r2
    cb0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cb0e:	b2a8      	uxth	r0, r5
    cb10:	fbbc f8fe 	udiv	r8, ip, lr
    cb14:	0c23      	lsrs	r3, r4, #16
    cb16:	fb0e cc18 	mls	ip, lr, r8, ip
    cb1a:	fb08 f900 	mul.w	r9, r8, r0
    cb1e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    cb22:	4599      	cmp	r9, r3
    cb24:	d928      	bls.n	cb78 <__udivmoddi4+0xa4>
    cb26:	18eb      	adds	r3, r5, r3
    cb28:	f108 37ff 	add.w	r7, r8, #4294967295
    cb2c:	d204      	bcs.n	cb38 <__udivmoddi4+0x64>
    cb2e:	4599      	cmp	r9, r3
    cb30:	d902      	bls.n	cb38 <__udivmoddi4+0x64>
    cb32:	f1a8 0702 	sub.w	r7, r8, #2
    cb36:	442b      	add	r3, r5
    cb38:	eba3 0309 	sub.w	r3, r3, r9
    cb3c:	b2a4      	uxth	r4, r4
    cb3e:	fbb3 fcfe 	udiv	ip, r3, lr
    cb42:	fb0e 331c 	mls	r3, lr, ip, r3
    cb46:	fb0c f000 	mul.w	r0, ip, r0
    cb4a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cb4e:	42a0      	cmp	r0, r4
    cb50:	d914      	bls.n	cb7c <__udivmoddi4+0xa8>
    cb52:	192c      	adds	r4, r5, r4
    cb54:	f10c 33ff 	add.w	r3, ip, #4294967295
    cb58:	d204      	bcs.n	cb64 <__udivmoddi4+0x90>
    cb5a:	42a0      	cmp	r0, r4
    cb5c:	d902      	bls.n	cb64 <__udivmoddi4+0x90>
    cb5e:	f1ac 0302 	sub.w	r3, ip, #2
    cb62:	442c      	add	r4, r5
    cb64:	1a24      	subs	r4, r4, r0
    cb66:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    cb6a:	b11e      	cbz	r6, cb74 <__udivmoddi4+0xa0>
    cb6c:	40d4      	lsrs	r4, r2
    cb6e:	2300      	movs	r3, #0
    cb70:	6034      	str	r4, [r6, #0]
    cb72:	6073      	str	r3, [r6, #4]
    cb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb78:	4647      	mov	r7, r8
    cb7a:	e7dd      	b.n	cb38 <__udivmoddi4+0x64>
    cb7c:	4663      	mov	r3, ip
    cb7e:	e7f1      	b.n	cb64 <__udivmoddi4+0x90>
    cb80:	bb92      	cbnz	r2, cbe8 <__udivmoddi4+0x114>
    cb82:	1b43      	subs	r3, r0, r5
    cb84:	2101      	movs	r1, #1
    cb86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cb8a:	b2af      	uxth	r7, r5
    cb8c:	fbb3 fcfe 	udiv	ip, r3, lr
    cb90:	0c20      	lsrs	r0, r4, #16
    cb92:	fb0e 331c 	mls	r3, lr, ip, r3
    cb96:	fb0c f807 	mul.w	r8, ip, r7
    cb9a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    cb9e:	4598      	cmp	r8, r3
    cba0:	d962      	bls.n	cc68 <__udivmoddi4+0x194>
    cba2:	18eb      	adds	r3, r5, r3
    cba4:	f10c 30ff 	add.w	r0, ip, #4294967295
    cba8:	d204      	bcs.n	cbb4 <__udivmoddi4+0xe0>
    cbaa:	4598      	cmp	r8, r3
    cbac:	d902      	bls.n	cbb4 <__udivmoddi4+0xe0>
    cbae:	f1ac 0002 	sub.w	r0, ip, #2
    cbb2:	442b      	add	r3, r5
    cbb4:	eba3 0308 	sub.w	r3, r3, r8
    cbb8:	b2a4      	uxth	r4, r4
    cbba:	fbb3 fcfe 	udiv	ip, r3, lr
    cbbe:	fb0e 331c 	mls	r3, lr, ip, r3
    cbc2:	fb0c f707 	mul.w	r7, ip, r7
    cbc6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cbca:	42a7      	cmp	r7, r4
    cbcc:	d94e      	bls.n	cc6c <__udivmoddi4+0x198>
    cbce:	192c      	adds	r4, r5, r4
    cbd0:	f10c 33ff 	add.w	r3, ip, #4294967295
    cbd4:	d204      	bcs.n	cbe0 <__udivmoddi4+0x10c>
    cbd6:	42a7      	cmp	r7, r4
    cbd8:	d902      	bls.n	cbe0 <__udivmoddi4+0x10c>
    cbda:	f1ac 0302 	sub.w	r3, ip, #2
    cbde:	442c      	add	r4, r5
    cbe0:	1be4      	subs	r4, r4, r7
    cbe2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cbe6:	e7c0      	b.n	cb6a <__udivmoddi4+0x96>
    cbe8:	f1c2 0320 	rsb	r3, r2, #32
    cbec:	fa20 f103 	lsr.w	r1, r0, r3
    cbf0:	4095      	lsls	r5, r2
    cbf2:	4090      	lsls	r0, r2
    cbf4:	fa2e f303 	lsr.w	r3, lr, r3
    cbf8:	4303      	orrs	r3, r0
    cbfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cbfe:	b2af      	uxth	r7, r5
    cc00:	fbb1 fcfe 	udiv	ip, r1, lr
    cc04:	fb0e 101c 	mls	r0, lr, ip, r1
    cc08:	0c19      	lsrs	r1, r3, #16
    cc0a:	fb0c f807 	mul.w	r8, ip, r7
    cc0e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cc12:	4588      	cmp	r8, r1
    cc14:	fa04 f402 	lsl.w	r4, r4, r2
    cc18:	d922      	bls.n	cc60 <__udivmoddi4+0x18c>
    cc1a:	1869      	adds	r1, r5, r1
    cc1c:	f10c 30ff 	add.w	r0, ip, #4294967295
    cc20:	d204      	bcs.n	cc2c <__udivmoddi4+0x158>
    cc22:	4588      	cmp	r8, r1
    cc24:	d902      	bls.n	cc2c <__udivmoddi4+0x158>
    cc26:	f1ac 0002 	sub.w	r0, ip, #2
    cc2a:	4429      	add	r1, r5
    cc2c:	eba1 0108 	sub.w	r1, r1, r8
    cc30:	b29b      	uxth	r3, r3
    cc32:	fbb1 fcfe 	udiv	ip, r1, lr
    cc36:	fb0e 111c 	mls	r1, lr, ip, r1
    cc3a:	fb0c f707 	mul.w	r7, ip, r7
    cc3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cc42:	429f      	cmp	r7, r3
    cc44:	d90e      	bls.n	cc64 <__udivmoddi4+0x190>
    cc46:	18eb      	adds	r3, r5, r3
    cc48:	f10c 31ff 	add.w	r1, ip, #4294967295
    cc4c:	d204      	bcs.n	cc58 <__udivmoddi4+0x184>
    cc4e:	429f      	cmp	r7, r3
    cc50:	d902      	bls.n	cc58 <__udivmoddi4+0x184>
    cc52:	f1ac 0102 	sub.w	r1, ip, #2
    cc56:	442b      	add	r3, r5
    cc58:	1bdb      	subs	r3, r3, r7
    cc5a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cc5e:	e792      	b.n	cb86 <__udivmoddi4+0xb2>
    cc60:	4660      	mov	r0, ip
    cc62:	e7e3      	b.n	cc2c <__udivmoddi4+0x158>
    cc64:	4661      	mov	r1, ip
    cc66:	e7f7      	b.n	cc58 <__udivmoddi4+0x184>
    cc68:	4660      	mov	r0, ip
    cc6a:	e7a3      	b.n	cbb4 <__udivmoddi4+0xe0>
    cc6c:	4663      	mov	r3, ip
    cc6e:	e7b7      	b.n	cbe0 <__udivmoddi4+0x10c>
    cc70:	4283      	cmp	r3, r0
    cc72:	d906      	bls.n	cc82 <__udivmoddi4+0x1ae>
    cc74:	b916      	cbnz	r6, cc7c <__udivmoddi4+0x1a8>
    cc76:	2100      	movs	r1, #0
    cc78:	4608      	mov	r0, r1
    cc7a:	e77b      	b.n	cb74 <__udivmoddi4+0xa0>
    cc7c:	e9c6 e000 	strd	lr, r0, [r6]
    cc80:	e7f9      	b.n	cc76 <__udivmoddi4+0x1a2>
    cc82:	fab3 f783 	clz	r7, r3
    cc86:	b98f      	cbnz	r7, ccac <__udivmoddi4+0x1d8>
    cc88:	4283      	cmp	r3, r0
    cc8a:	d301      	bcc.n	cc90 <__udivmoddi4+0x1bc>
    cc8c:	4572      	cmp	r2, lr
    cc8e:	d808      	bhi.n	cca2 <__udivmoddi4+0x1ce>
    cc90:	ebbe 0402 	subs.w	r4, lr, r2
    cc94:	eb60 0303 	sbc.w	r3, r0, r3
    cc98:	2001      	movs	r0, #1
    cc9a:	469c      	mov	ip, r3
    cc9c:	b91e      	cbnz	r6, cca6 <__udivmoddi4+0x1d2>
    cc9e:	2100      	movs	r1, #0
    cca0:	e768      	b.n	cb74 <__udivmoddi4+0xa0>
    cca2:	4638      	mov	r0, r7
    cca4:	e7fa      	b.n	cc9c <__udivmoddi4+0x1c8>
    cca6:	e9c6 4c00 	strd	r4, ip, [r6]
    ccaa:	e7f8      	b.n	cc9e <__udivmoddi4+0x1ca>
    ccac:	f1c7 0c20 	rsb	ip, r7, #32
    ccb0:	40bb      	lsls	r3, r7
    ccb2:	fa22 f40c 	lsr.w	r4, r2, ip
    ccb6:	431c      	orrs	r4, r3
    ccb8:	fa2e f10c 	lsr.w	r1, lr, ip
    ccbc:	fa20 f30c 	lsr.w	r3, r0, ip
    ccc0:	40b8      	lsls	r0, r7
    ccc2:	4301      	orrs	r1, r0
    ccc4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    ccc8:	fa0e f507 	lsl.w	r5, lr, r7
    cccc:	fbb3 f8f9 	udiv	r8, r3, r9
    ccd0:	fa1f fe84 	uxth.w	lr, r4
    ccd4:	fb09 3018 	mls	r0, r9, r8, r3
    ccd8:	0c0b      	lsrs	r3, r1, #16
    ccda:	fb08 fa0e 	mul.w	sl, r8, lr
    ccde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cce2:	459a      	cmp	sl, r3
    cce4:	fa02 f207 	lsl.w	r2, r2, r7
    cce8:	d940      	bls.n	cd6c <__udivmoddi4+0x298>
    ccea:	18e3      	adds	r3, r4, r3
    ccec:	f108 30ff 	add.w	r0, r8, #4294967295
    ccf0:	d204      	bcs.n	ccfc <__udivmoddi4+0x228>
    ccf2:	459a      	cmp	sl, r3
    ccf4:	d902      	bls.n	ccfc <__udivmoddi4+0x228>
    ccf6:	f1a8 0002 	sub.w	r0, r8, #2
    ccfa:	4423      	add	r3, r4
    ccfc:	eba3 030a 	sub.w	r3, r3, sl
    cd00:	b289      	uxth	r1, r1
    cd02:	fbb3 f8f9 	udiv	r8, r3, r9
    cd06:	fb09 3318 	mls	r3, r9, r8, r3
    cd0a:	fb08 fe0e 	mul.w	lr, r8, lr
    cd0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cd12:	458e      	cmp	lr, r1
    cd14:	d92c      	bls.n	cd70 <__udivmoddi4+0x29c>
    cd16:	1861      	adds	r1, r4, r1
    cd18:	f108 33ff 	add.w	r3, r8, #4294967295
    cd1c:	d204      	bcs.n	cd28 <__udivmoddi4+0x254>
    cd1e:	458e      	cmp	lr, r1
    cd20:	d902      	bls.n	cd28 <__udivmoddi4+0x254>
    cd22:	f1a8 0302 	sub.w	r3, r8, #2
    cd26:	4421      	add	r1, r4
    cd28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cd2c:	fba0 9802 	umull	r9, r8, r0, r2
    cd30:	eba1 010e 	sub.w	r1, r1, lr
    cd34:	4541      	cmp	r1, r8
    cd36:	46ce      	mov	lr, r9
    cd38:	4643      	mov	r3, r8
    cd3a:	d302      	bcc.n	cd42 <__udivmoddi4+0x26e>
    cd3c:	d106      	bne.n	cd4c <__udivmoddi4+0x278>
    cd3e:	454d      	cmp	r5, r9
    cd40:	d204      	bcs.n	cd4c <__udivmoddi4+0x278>
    cd42:	ebb9 0e02 	subs.w	lr, r9, r2
    cd46:	eb68 0304 	sbc.w	r3, r8, r4
    cd4a:	3801      	subs	r0, #1
    cd4c:	2e00      	cmp	r6, #0
    cd4e:	d0a6      	beq.n	cc9e <__udivmoddi4+0x1ca>
    cd50:	ebb5 020e 	subs.w	r2, r5, lr
    cd54:	eb61 0103 	sbc.w	r1, r1, r3
    cd58:	fa01 fc0c 	lsl.w	ip, r1, ip
    cd5c:	fa22 f307 	lsr.w	r3, r2, r7
    cd60:	ea4c 0303 	orr.w	r3, ip, r3
    cd64:	40f9      	lsrs	r1, r7
    cd66:	e9c6 3100 	strd	r3, r1, [r6]
    cd6a:	e798      	b.n	cc9e <__udivmoddi4+0x1ca>
    cd6c:	4640      	mov	r0, r8
    cd6e:	e7c5      	b.n	ccfc <__udivmoddi4+0x228>
    cd70:	4643      	mov	r3, r8
    cd72:	e7d9      	b.n	cd28 <__udivmoddi4+0x254>

0000cd74 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cd74:	b510      	push	{r4, lr}
    cd76:	460c      	mov	r4, r1
    cd78:	7909      	ldrb	r1, [r1, #4]
    cd7a:	7001      	strb	r1, [r0, #0]
    cd7c:	7841      	ldrb	r1, [r0, #1]
    cd7e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cd82:	7041      	strb	r1, [r0, #1]
    cd84:	88a2      	ldrh	r2, [r4, #4]
    cd86:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cd8a:	4311      	orrs	r1, r2
    cd8c:	7041      	strb	r1, [r0, #1]
    cd8e:	79a2      	ldrb	r2, [r4, #6]
    cd90:	7082      	strb	r2, [r0, #2]
    cd92:	88e2      	ldrh	r2, [r4, #6]
    cd94:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    cd98:	0a12      	lsrs	r2, r2, #8
    cd9a:	70c2      	strb	r2, [r0, #3]
    cd9c:	7041      	strb	r1, [r0, #1]
    cd9e:	7a22      	ldrb	r2, [r4, #8]
    cda0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cda4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    cda8:	7041      	strb	r1, [r0, #1]
    cdaa:	7a62      	ldrb	r2, [r4, #9]
    cdac:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cdb0:	7041      	strb	r1, [r0, #1]
    cdb2:	6821      	ldr	r1, [r4, #0]
    cdb4:	1d02      	adds	r2, r0, #4
    cdb6:	4291      	cmp	r1, r2
    cdb8:	d006      	beq.n	cdc8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cdba:	88e2      	ldrh	r2, [r4, #6]
    cdbc:	2afb      	cmp	r2, #251	; 0xfb
    cdbe:	d300      	bcc.n	cdc2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cdc0:	22fb      	movs	r2, #251	; 0xfb
    cdc2:	1d00      	adds	r0, r0, #4
    cdc4:	f003 fb71 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cdc8:	79a0      	ldrb	r0, [r4, #6]
    cdca:	1d00      	adds	r0, r0, #4
    cdcc:	b2c0      	uxtb	r0, r0
    cdce:	bd10      	pop	{r4, pc}

0000cdd0 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cdd0:	b430      	push	{r4, r5}
    cdd2:	790a      	ldrb	r2, [r1, #4]
    cdd4:	7002      	strb	r2, [r0, #0]
    cdd6:	7842      	ldrb	r2, [r0, #1]
    cdd8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cddc:	7042      	strb	r2, [r0, #1]
    cdde:	888b      	ldrh	r3, [r1, #4]
    cde0:	f3c3 2303 	ubfx	r3, r3, #8, #4
    cde4:	431a      	orrs	r2, r3
    cde6:	7042      	strb	r2, [r0, #1]
    cde8:	798b      	ldrb	r3, [r1, #6]
    cdea:	7083      	strb	r3, [r0, #2]
    cdec:	78c3      	ldrb	r3, [r0, #3]
    cdee:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cdf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cdf6:	70c3      	strb	r3, [r0, #3]
    cdf8:	88cc      	ldrh	r4, [r1, #6]
    cdfa:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cdfe:	4323      	orrs	r3, r4
    ce00:	70c3      	strb	r3, [r0, #3]
    ce02:	7042      	strb	r2, [r0, #1]
    ce04:	7a0c      	ldrb	r4, [r1, #8]
    ce06:	f004 0403 	and.w	r4, r4, #3
    ce0a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ce0e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ce12:	7042      	strb	r2, [r0, #1]
    ce14:	7a4c      	ldrb	r4, [r1, #9]
    ce16:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ce1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ce1e:	7042      	strb	r2, [r0, #1]
    ce20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ce24:	70c2      	strb	r2, [r0, #3]
    ce26:	680b      	ldr	r3, [r1, #0]
    ce28:	1d02      	adds	r2, r0, #4
    ce2a:	4293      	cmp	r3, r2
    ce2c:	d005      	beq.n	ce3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ce2e:	88ca      	ldrh	r2, [r1, #6]
    ce30:	bc30      	pop	{r4, r5}
    ce32:	4619      	mov	r1, r3
    ce34:	1d00      	adds	r0, r0, #4
    ce36:	f003 bb38 	b.w	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce3a:	bc30      	pop	{r4, r5}
    ce3c:	4770      	bx	lr

0000ce3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ce3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce42:	4604      	mov	r4, r0
    ce44:	460d      	mov	r5, r1
    ce46:	f891 c000 	ldrb.w	ip, [r1]
    ce4a:	2000      	movs	r0, #0
    ce4c:	263e      	movs	r6, #62	; 0x3e
    ce4e:	1ca2      	adds	r2, r4, #2
    ce50:	1ce1      	adds	r1, r4, #3
    ce52:	27ff      	movs	r7, #255	; 0xff
    ce54:	f04f 0b10 	mov.w	fp, #16
    ce58:	f04f 0e0c 	mov.w	lr, #12
    ce5c:	f104 030d 	add.w	r3, r4, #13
    ce60:	f04f 0912 	mov.w	r9, #18
    ce64:	f04f 0a11 	mov.w	sl, #17
    ce68:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
    ce6c:	d278      	bcs.n	cf60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x122>
    ce6e:	e8df f00c 	tbb	[pc, ip]
    ce72:	1877      	.short	0x1877
    ce74:	f3383330 	.word	0xf3383330
    ce78:	aa9c9377 	.word	0xaa9c9377
    ce7c:	f0f7f4c4 	.word	0xf0f7f4c4
    ce80:	77edeeef 	.word	0x77edeeef
    ce84:	78775a77 	.word	0x78775a77
    ce88:	e9eaebec 	.word	0xe9eaebec
    ce8c:	e777e877 	.word	0xe777e877
    ce90:	77e4e5e6 	.word	0x77e4e5e6
    ce94:	e0e1e2e3 	.word	0xe0e1e2e3
    ce98:	dcdddedf 	.word	0xdcdddedf
    ce9c:	77d9dadb 	.word	0x77d9dadb
    cea0:	00d8      	.short	0x00d8
    cea2:	f884 e000 	strb.w	lr, [r4]
    cea6:	7928      	ldrb	r0, [r5, #4]
    cea8:	70a0      	strb	r0, [r4, #2]
    ceaa:	7968      	ldrb	r0, [r5, #5]
    ceac:	70e0      	strb	r0, [r4, #3]
    ceae:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ceb2:	0a00      	lsrs	r0, r0, #8
    ceb4:	7120      	strb	r0, [r4, #4]
    ceb6:	79e8      	ldrb	r0, [r5, #7]
    ceb8:	7160      	strb	r0, [r4, #5]
    ceba:	7a28      	ldrb	r0, [r5, #8]
    cebc:	71a0      	strb	r0, [r4, #6]
    cebe:	8928      	ldrh	r0, [r5, #8]
    cec0:	0a00      	lsrs	r0, r0, #8
    cec2:	71e0      	strb	r0, [r4, #7]
    cec4:	7aa8      	ldrb	r0, [r5, #10]
    cec6:	7220      	strb	r0, [r4, #8]
    cec8:	8968      	ldrh	r0, [r5, #10]
    ceca:	0a00      	lsrs	r0, r0, #8
    cecc:	7260      	strb	r0, [r4, #9]
    cece:	2008      	movs	r0, #8
    ced0:	e1eb      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    ced2:	f884 b000 	strb.w	fp, [r4]
    ced6:	e001      	b.n	cedc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x9e>
    ced8:	201a      	movs	r0, #26
    ceda:	7020      	strb	r0, [r4, #0]
    cedc:	7928      	ldrb	r0, [r5, #4]
    cede:	70a0      	strb	r0, [r4, #2]
    cee0:	e138      	b.n	d154 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    cee2:	7026      	strb	r6, [r4, #0]
    cee4:	2002      	movs	r0, #2
    cee6:	70a0      	strb	r0, [r4, #2]
    cee8:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    ceec:	70e0      	strb	r0, [r4, #3]
    ceee:	7aa8      	ldrb	r0, [r5, #10]
    cef0:	7120      	strb	r0, [r4, #4]
    cef2:	7868      	ldrb	r0, [r5, #1]
    cef4:	7160      	strb	r0, [r4, #5]
    cef6:	f8d5 0002 	ldr.w	r0, [r5, #2]
    cefa:	f8c4 0006 	str.w	r0, [r4, #6]
    cefe:	88e8      	ldrh	r0, [r5, #6]
    cf00:	8160      	strh	r0, [r4, #10]
    cf02:	7a28      	ldrb	r0, [r5, #8]
    cf04:	7320      	strb	r0, [r4, #12]
    cf06:	7a2e      	ldrb	r6, [r5, #8]
    cf08:	2e1f      	cmp	r6, #31
    cf0a:	d300      	bcc.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xd0>
    cf0c:	261f      	movs	r6, #31
    cf0e:	4618      	mov	r0, r3
    cf10:	4632      	mov	r2, r6
    cf12:	f105 010b 	add.w	r1, r5, #11
    cf16:	f003 fac8 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf1a:	360d      	adds	r6, #13
    cf1c:	7a69      	ldrb	r1, [r5, #9]
    cf1e:	55a1      	strb	r1, [r4, r6]
    cf20:	1e76      	subs	r6, r6, #1
    cf22:	b2f0      	uxtb	r0, r6
    cf24:	e1bf      	b.n	d2a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
    cf26:	7026      	strb	r6, [r4, #0]
    cf28:	200b      	movs	r0, #11
    cf2a:	70a0      	strb	r0, [r4, #2]
    cf2c:	7928      	ldrb	r0, [r5, #4]
    cf2e:	70e0      	strb	r0, [r4, #3]
    cf30:	7968      	ldrb	r0, [r5, #5]
    cf32:	7120      	strb	r0, [r4, #4]
    cf34:	79a8      	ldrb	r0, [r5, #6]
    cf36:	7160      	strb	r0, [r4, #5]
    cf38:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cf3c:	f8c4 0006 	str.w	r0, [r4, #6]
    cf40:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    cf44:	8160      	strh	r0, [r4, #10]
    cf46:	7b68      	ldrb	r0, [r5, #13]
    cf48:	7320      	strb	r0, [r4, #12]
    cf4a:	f8d5 000e 	ldr.w	r0, [r5, #14]
    cf4e:	f8c4 000d 	str.w	r0, [r4, #13]
    cf52:	8a68      	ldrh	r0, [r5, #18]
    cf54:	f8a4 0011 	strh.w	r0, [r4, #17]
    cf58:	7d28      	ldrb	r0, [r5, #20]
    cf5a:	74e0      	strb	r0, [r4, #19]
    cf5c:	4648      	mov	r0, r9
    cf5e:	e1a4      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    cf60:	e1a6      	b.n	d2b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x472>
    cf62:	2029      	movs	r0, #41	; 0x29
    cf64:	f7f3 fcda 	bl	91c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cf68:	b148      	cbz	r0, cf7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x140>
    cf6a:	7026      	strb	r6, [r4, #0]
    cf6c:	2029      	movs	r0, #41	; 0x29
    cf6e:	70a0      	strb	r0, [r4, #2]
    cf70:	2221      	movs	r2, #33	; 0x21
    cf72:	1d29      	adds	r1, r5, #4
    cf74:	1ce0      	adds	r0, r4, #3
    cf76:	f003 fa98 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf7a:	2022      	movs	r0, #34	; 0x22
    cf7c:	e195      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    cf7e:	200a      	movs	r0, #10
    cf80:	f7f3 fccc 	bl	91c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cf84:	2800      	cmp	r0, #0
    cf86:	4629      	mov	r1, r5
    cf88:	4620      	mov	r0, r4
    cf8a:	d002      	beq.n	cf92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x154>
    cf8c:	f000 fa96 	bl	d4bc <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cf90:	e189      	b.n	d2a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
    cf92:	f000 fa6a 	bl	d46a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cf96:	e186      	b.n	d2a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
    cf98:	7026      	strb	r6, [r4, #0]
    cf9a:	2014      	movs	r0, #20
    cf9c:	70a0      	strb	r0, [r4, #2]
    cf9e:	7928      	ldrb	r0, [r5, #4]
    cfa0:	70e0      	strb	r0, [r4, #3]
    cfa2:	88a8      	ldrh	r0, [r5, #4]
    cfa4:	0a00      	lsrs	r0, r0, #8
    cfa6:	7120      	strb	r0, [r4, #4]
    cfa8:	e155      	b.n	d256 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x418>
    cfaa:	203e      	movs	r0, #62	; 0x3e
    cfac:	7020      	strb	r0, [r4, #0]
    cfae:	2004      	movs	r0, #4
    cfb0:	7010      	strb	r0, [r2, #0]
    cfb2:	6868      	ldr	r0, [r5, #4]
    cfb4:	6008      	str	r0, [r1, #0]
    cfb6:	68a8      	ldr	r0, [r5, #8]
    cfb8:	6048      	str	r0, [r1, #4]
    cfba:	89a8      	ldrh	r0, [r5, #12]
    cfbc:	8108      	strh	r0, [r1, #8]
    cfbe:	7ba8      	ldrb	r0, [r5, #14]
    cfc0:	7288      	strb	r0, [r1, #10]
    cfc2:	200c      	movs	r0, #12
    cfc4:	e171      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    cfc6:	7026      	strb	r6, [r4, #0]
    cfc8:	2003      	movs	r0, #3
    cfca:	70a0      	strb	r0, [r4, #2]
    cfcc:	7928      	ldrb	r0, [r5, #4]
    cfce:	70e0      	strb	r0, [r4, #3]
    cfd0:	79a8      	ldrb	r0, [r5, #6]
    cfd2:	7120      	strb	r0, [r4, #4]
    cfd4:	88e8      	ldrh	r0, [r5, #6]
    cfd6:	0a00      	lsrs	r0, r0, #8
    cfd8:	7160      	strb	r0, [r4, #5]
    cfda:	7a28      	ldrb	r0, [r5, #8]
    cfdc:	71a0      	strb	r0, [r4, #6]
    cfde:	8928      	ldrh	r0, [r5, #8]
    cfe0:	0a00      	lsrs	r0, r0, #8
    cfe2:	71e0      	strb	r0, [r4, #7]
    cfe4:	7aa8      	ldrb	r0, [r5, #10]
    cfe6:	7220      	strb	r0, [r4, #8]
    cfe8:	8968      	ldrh	r0, [r5, #10]
    cfea:	0a00      	lsrs	r0, r0, #8
    cfec:	7260      	strb	r0, [r4, #9]
    cfee:	7b28      	ldrb	r0, [r5, #12]
    cff0:	72a0      	strb	r0, [r4, #10]
    cff2:	89a8      	ldrh	r0, [r5, #12]
    cff4:	0a00      	lsrs	r0, r0, #8
    cff6:	72e0      	strb	r0, [r4, #11]
    cff8:	e210      	b.n	d41c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5de>
    cffa:	7026      	strb	r6, [r4, #0]
    cffc:	2005      	movs	r0, #5
    cffe:	70a0      	strb	r0, [r4, #2]
    d000:	7928      	ldrb	r0, [r5, #4]
    d002:	70e0      	strb	r0, [r4, #3]
    d004:	88a8      	ldrh	r0, [r5, #4]
    d006:	0a00      	lsrs	r0, r0, #8
    d008:	7120      	strb	r0, [r4, #4]
    d00a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d00e:	f8c4 0005 	str.w	r0, [r4, #5]
    d012:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d016:	f8c4 0009 	str.w	r0, [r4, #9]
    d01a:	89e8      	ldrh	r0, [r5, #14]
    d01c:	f8a4 000d 	strh.w	r0, [r4, #13]
    d020:	e221      	b.n	d466 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x628>
    d022:	e20b      	b.n	d43c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5fe>
    d024:	e1de      	b.n	d3e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5a6>
    d026:	e1bf      	b.n	d3a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x56a>
    d028:	e1ea      	b.n	d400 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5c2>
    d02a:	e1f9      	b.n	d420 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5e2>
    d02c:	e1b1      	b.n	d392 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x554>
    d02e:	e1a9      	b.n	d384 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x546>
    d030:	e196      	b.n	d360 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x522>
    d032:	e13f      	b.n	d2b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x476>
    d034:	e111      	b.n	d25a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41c>
    d036:	e108      	b.n	d24a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x40c>
    d038:	e0fa      	b.n	d230 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f2>
    d03a:	e0e2      	b.n	d202 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c4>
    d03c:	e0de      	b.n	d1fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3be>
    d03e:	e0d5      	b.n	d1ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
    d040:	e0ab      	b.n	d19a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35c>
    d042:	e099      	b.n	d178 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
    d044:	e083      	b.n	d14e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    d046:	e087      	b.n	d158 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x31a>
    d048:	e02e      	b.n	d0a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    d04a:	e02a      	b.n	d0a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    d04c:	e03f      	b.n	d0ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d04e:	e039      	b.n	d0c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    d050:	e01d      	b.n	d08e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    d052:	e011      	b.n	d078 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    d054:	e004      	b.n	d060 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x222>
    d056:	e000      	b.n	d05a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21c>
    d058:	e042      	b.n	d0e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    d05a:	f884 a000 	strb.w	sl, [r4]
    d05e:	e038      	b.n	d0d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x294>
    d060:	2005      	movs	r0, #5
    d062:	7020      	strb	r0, [r4, #0]
    d064:	7928      	ldrb	r0, [r5, #4]
    d066:	70a0      	strb	r0, [r4, #2]
    d068:	7968      	ldrb	r0, [r5, #5]
    d06a:	70e0      	strb	r0, [r4, #3]
    d06c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d070:	0a00      	lsrs	r0, r0, #8
    d072:	7120      	strb	r0, [r4, #4]
    d074:	79e8      	ldrb	r0, [r5, #7]
    d076:	e194      	b.n	d3a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x564>
    d078:	2008      	movs	r0, #8
    d07a:	7020      	strb	r0, [r4, #0]
    d07c:	7928      	ldrb	r0, [r5, #4]
    d07e:	70a0      	strb	r0, [r4, #2]
    d080:	79a8      	ldrb	r0, [r5, #6]
    d082:	70e0      	strb	r0, [r4, #3]
    d084:	88e8      	ldrh	r0, [r5, #6]
    d086:	0a00      	lsrs	r0, r0, #8
    d088:	7120      	strb	r0, [r4, #4]
    d08a:	7a28      	ldrb	r0, [r5, #8]
    d08c:	e189      	b.n	d3a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x564>
    d08e:	2030      	movs	r0, #48	; 0x30
    d090:	7020      	strb	r0, [r4, #0]
    d092:	7928      	ldrb	r0, [r5, #4]
    d094:	70a0      	strb	r0, [r4, #2]
    d096:	79a8      	ldrb	r0, [r5, #6]
    d098:	70e0      	strb	r0, [r4, #3]
    d09a:	88e8      	ldrh	r0, [r5, #6]
    d09c:	0a00      	lsrs	r0, r0, #8
    d09e:	7120      	strb	r0, [r4, #4]
    d0a0:	e0aa      	b.n	d1f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ba>
    d0a2:	7026      	strb	r6, [r4, #0]
    d0a4:	2007      	movs	r0, #7
    d0a6:	e181      	b.n	d3ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x56e>
    d0a8:	7026      	strb	r6, [r4, #0]
    d0aa:	f884 e002 	strb.w	lr, [r4, #2]
    d0ae:	7928      	ldrb	r0, [r5, #4]
    d0b0:	70e0      	strb	r0, [r4, #3]
    d0b2:	79a8      	ldrb	r0, [r5, #6]
    d0b4:	7120      	strb	r0, [r4, #4]
    d0b6:	88e8      	ldrh	r0, [r5, #6]
    d0b8:	0a00      	lsrs	r0, r0, #8
    d0ba:	7160      	strb	r0, [r4, #5]
    d0bc:	7a28      	ldrb	r0, [r5, #8]
    d0be:	71a0      	strb	r0, [r4, #6]
    d0c0:	7a68      	ldrb	r0, [r5, #9]
    d0c2:	e056      	b.n	d172 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x334>
    d0c4:	1d29      	adds	r1, r5, #4
    d0c6:	4620      	mov	r0, r4
    d0c8:	f7f3 fbe8 	bl	89c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    d0cc:	e0eb      	b.n	d2a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
    d0ce:	2057      	movs	r0, #87	; 0x57
    d0d0:	7020      	strb	r0, [r4, #0]
    d0d2:	7928      	ldrb	r0, [r5, #4]
    d0d4:	70a0      	strb	r0, [r4, #2]
    d0d6:	88a8      	ldrh	r0, [r5, #4]
    d0d8:	0a00      	lsrs	r0, r0, #8
    d0da:	70e0      	strb	r0, [r4, #3]
    d0dc:	2002      	movs	r0, #2
    d0de:	e0e4      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d0e0:	7026      	strb	r6, [r4, #0]
    d0e2:	220d      	movs	r2, #13
    d0e4:	70a2      	strb	r2, [r4, #2]
    d0e6:	792a      	ldrb	r2, [r5, #4]
    d0e8:	70e2      	strb	r2, [r4, #3]
    d0ea:	89ea      	ldrh	r2, [r5, #14]
    d0ec:	80a2      	strh	r2, [r4, #4]
    d0ee:	796a      	ldrb	r2, [r5, #5]
    d0f0:	71a2      	strb	r2, [r4, #6]
    d0f2:	f8d5 2006 	ldr.w	r2, [r5, #6]
    d0f6:	f8c4 2007 	str.w	r2, [r4, #7]
    d0fa:	896a      	ldrh	r2, [r5, #10]
    d0fc:	f8a4 200b 	strh.w	r2, [r4, #11]
    d100:	7c2a      	ldrb	r2, [r5, #16]
    d102:	4620      	mov	r0, r4
    d104:	7362      	strb	r2, [r4, #13]
    d106:	1d29      	adds	r1, r5, #4
    d108:	7c6a      	ldrb	r2, [r5, #17]
    d10a:	7382      	strb	r2, [r0, #14]
    d10c:	7b8a      	ldrb	r2, [r1, #14]
    d10e:	73c2      	strb	r2, [r0, #15]
    d110:	7e8a      	ldrb	r2, [r1, #26]
    d112:	7402      	strb	r2, [r0, #16]
    d114:	7a4a      	ldrb	r2, [r1, #9]
    d116:	7442      	strb	r2, [r0, #17]
    d118:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d11c:	f8ad 2000 	strh.w	r2, [sp]
    d120:	8242      	strh	r2, [r0, #18]
    d122:	7cca      	ldrb	r2, [r1, #19]
    d124:	7502      	strb	r2, [r0, #20]
    d126:	694a      	ldr	r2, [r1, #20]
    d128:	f8c0 2015 	str.w	r2, [r0, #21]
    d12c:	8b0a      	ldrh	r2, [r1, #24]
    d12e:	f8a0 2019 	strh.w	r2, [r0, #25]
    d132:	7a0a      	ldrb	r2, [r1, #8]
    d134:	76c2      	strb	r2, [r0, #27]
    d136:	7a0d      	ldrb	r5, [r1, #8]
    d138:	2de5      	cmp	r5, #229	; 0xe5
    d13a:	d300      	bcc.n	d13e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x300>
    d13c:	25e5      	movs	r5, #229	; 0xe5
    d13e:	462a      	mov	r2, r5
    d140:	301c      	adds	r0, #28
    d142:	311c      	adds	r1, #28
    d144:	f003 f9b1 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d148:	351a      	adds	r5, #26
    d14a:	b2e8      	uxtb	r0, r5
    d14c:	e0ab      	b.n	d2a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
    d14e:	7026      	strb	r6, [r4, #0]
    d150:	f884 a002 	strb.w	sl, [r4, #2]
    d154:	2001      	movs	r0, #1
    d156:	e0a8      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d158:	7026      	strb	r6, [r4, #0]
    d15a:	f884 9002 	strb.w	r9, [r4, #2]
    d15e:	7928      	ldrb	r0, [r5, #4]
    d160:	70e0      	strb	r0, [r4, #3]
    d162:	7968      	ldrb	r0, [r5, #5]
    d164:	7120      	strb	r0, [r4, #4]
    d166:	79a8      	ldrb	r0, [r5, #6]
    d168:	7160      	strb	r0, [r4, #5]
    d16a:	88e8      	ldrh	r0, [r5, #6]
    d16c:	0a00      	lsrs	r0, r0, #8
    d16e:	71a0      	strb	r0, [r4, #6]
    d170:	7a28      	ldrb	r0, [r5, #8]
    d172:	71e0      	strb	r0, [r4, #7]
    d174:	2006      	movs	r0, #6
    d176:	e098      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d178:	7026      	strb	r6, [r4, #0]
    d17a:	2024      	movs	r0, #36	; 0x24
    d17c:	f7f3 fbce 	bl	91c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d180:	b108      	cbz	r0, d186 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x348>
    d182:	2024      	movs	r0, #36	; 0x24
    d184:	e05e      	b.n	d244 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x406>
    d186:	200e      	movs	r0, #14
    d188:	70a0      	strb	r0, [r4, #2]
    d18a:	260f      	movs	r6, #15
    d18c:	4632      	mov	r2, r6
    d18e:	1d29      	adds	r1, r5, #4
    d190:	1ce0      	adds	r0, r4, #3
    d192:	f003 f98a 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d196:	1c70      	adds	r0, r6, #1
    d198:	e085      	b.n	d2a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
    d19a:	7026      	strb	r6, [r4, #0]
    d19c:	2025      	movs	r0, #37	; 0x25
    d19e:	f7f3 fbbd 	bl	91c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d1a2:	b140      	cbz	r0, d1b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x378>
    d1a4:	2025      	movs	r0, #37	; 0x25
    d1a6:	70a0      	strb	r0, [r4, #2]
    d1a8:	260a      	movs	r6, #10
    d1aa:	4632      	mov	r2, r6
    d1ac:	1d29      	adds	r1, r5, #4
    d1ae:	1ce0      	adds	r0, r4, #3
    d1b0:	f003 f97b 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1b4:	e00f      	b.n	d1d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x398>
    d1b6:	200f      	movs	r0, #15
    d1b8:	70a0      	strb	r0, [r4, #2]
    d1ba:	88a9      	ldrh	r1, [r5, #4]
    d1bc:	f8a4 1003 	strh.w	r1, [r4, #3]
    d1c0:	79a9      	ldrb	r1, [r5, #6]
    d1c2:	7161      	strb	r1, [r4, #5]
    d1c4:	79e9      	ldrb	r1, [r5, #7]
    d1c6:	71a1      	strb	r1, [r4, #6]
    d1c8:	7a29      	ldrb	r1, [r5, #8]
    d1ca:	71e1      	strb	r1, [r4, #7]
    d1cc:	7b29      	ldrb	r1, [r5, #12]
    d1ce:	7221      	strb	r1, [r4, #8]
    d1d0:	7b69      	ldrb	r1, [r5, #13]
    d1d2:	7261      	strb	r1, [r4, #9]
    d1d4:	2607      	movs	r6, #7
    d1d6:	19a0      	adds	r0, r4, r6
    d1d8:	7b6a      	ldrb	r2, [r5, #13]
    d1da:	f105 010e 	add.w	r1, r5, #14
    d1de:	1cc0      	adds	r0, r0, #3
    d1e0:	f003 f963 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1e4:	7b68      	ldrb	r0, [r5, #13]
    d1e6:	1c76      	adds	r6, r6, #1
    d1e8:	4430      	add	r0, r6
    d1ea:	e05c      	b.n	d2a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
    d1ec:	7026      	strb	r6, [r4, #0]
    d1ee:	f884 b002 	strb.w	fp, [r4, #2]
    d1f2:	88a8      	ldrh	r0, [r5, #4]
    d1f4:	f8a4 0003 	strh.w	r0, [r4, #3]
    d1f8:	2003      	movs	r0, #3
    d1fa:	e056      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d1fc:	7026      	strb	r6, [r4, #0]
    d1fe:	2020      	movs	r0, #32
    d200:	e0f2      	b.n	d3e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5aa>
    d202:	7026      	strb	r6, [r4, #0]
    d204:	2021      	movs	r0, #33	; 0x21
    d206:	70a0      	strb	r0, [r4, #2]
    d208:	7928      	ldrb	r0, [r5, #4]
    d20a:	70e0      	strb	r0, [r4, #3]
    d20c:	7968      	ldrb	r0, [r5, #5]
    d20e:	7120      	strb	r0, [r4, #4]
    d210:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d214:	0a00      	lsrs	r0, r0, #8
    d216:	7160      	strb	r0, [r4, #5]
    d218:	79e8      	ldrb	r0, [r5, #7]
    d21a:	71a0      	strb	r0, [r4, #6]
    d21c:	7a28      	ldrb	r0, [r5, #8]
    d21e:	71e0      	strb	r0, [r4, #7]
    d220:	7a68      	ldrb	r0, [r5, #9]
    d222:	7220      	strb	r0, [r4, #8]
    d224:	7aa8      	ldrb	r0, [r5, #10]
    d226:	7260      	strb	r0, [r4, #9]
    d228:	7ae8      	ldrb	r0, [r5, #11]
    d22a:	72a0      	strb	r0, [r4, #10]
    d22c:	2009      	movs	r0, #9
    d22e:	e03c      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d230:	7026      	strb	r6, [r4, #0]
    d232:	2026      	movs	r0, #38	; 0x26
    d234:	f7f3 fb72 	bl	91c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d238:	b118      	cbz	r0, d242 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    d23a:	2026      	movs	r0, #38	; 0x26
    d23c:	70a0      	strb	r0, [r4, #2]
    d23e:	2617      	movs	r6, #23
    d240:	e7a4      	b.n	d18c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x34e>
    d242:	2018      	movs	r0, #24
    d244:	70a0      	strb	r0, [r4, #2]
    d246:	2613      	movs	r6, #19
    d248:	e7a0      	b.n	d18c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x34e>
    d24a:	7026      	strb	r6, [r4, #0]
    d24c:	2027      	movs	r0, #39	; 0x27
    d24e:	70a0      	strb	r0, [r4, #2]
    d250:	88a8      	ldrh	r0, [r5, #4]
    d252:	f8a4 0003 	strh.w	r0, [r4, #3]
    d256:	79a8      	ldrb	r0, [r5, #6]
    d258:	e0a3      	b.n	d3a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x564>
    d25a:	7026      	strb	r6, [r4, #0]
    d25c:	2028      	movs	r0, #40	; 0x28
    d25e:	70a0      	strb	r0, [r4, #2]
    d260:	1ce7      	adds	r7, r4, #3
    d262:	6868      	ldr	r0, [r5, #4]
    d264:	2600      	movs	r6, #0
    d266:	f8c4 0003 	str.w	r0, [r4, #3]
    d26a:	46b0      	mov	r8, r6
    d26c:	f105 0908 	add.w	r9, r5, #8
    d270:	e014      	b.n	d29c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x45e>
    d272:	19b8      	adds	r0, r7, r6
    d274:	4649      	mov	r1, r9
    d276:	1d05      	adds	r5, r0, #4
    d278:	f851 0b04 	ldr.w	r0, [r1], #4
    d27c:	6028      	str	r0, [r5, #0]
    d27e:	f831 0b02 	ldrh.w	r0, [r1], #2
    d282:	80a8      	strh	r0, [r5, #4]
    d284:	796a      	ldrb	r2, [r5, #5]
    d286:	1da8      	adds	r0, r5, #6
    d288:	f003 f90f 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d28c:	7968      	ldrb	r0, [r5, #5]
    d28e:	1db6      	adds	r6, r6, #6
    d290:	4430      	add	r0, r6
    d292:	b286      	uxth	r6, r0
    d294:	f108 0001 	add.w	r0, r8, #1
    d298:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d29c:	78f9      	ldrb	r1, [r7, #3]
    d29e:	4541      	cmp	r1, r8
    d2a0:	d8e7      	bhi.n	d272 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x434>
    d2a2:	1d76      	adds	r6, r6, #5
    d2a4:	b2b0      	uxth	r0, r6
    d2a6:	2800      	cmp	r0, #0
    d2a8:	d002      	beq.n	d2b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x472>
    d2aa:	7060      	strb	r0, [r4, #1]
    d2ac:	1c80      	adds	r0, r0, #2
    d2ae:	b280      	uxth	r0, r0
    d2b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2b4:	7026      	strb	r6, [r4, #0]
    d2b6:	2019      	movs	r0, #25
    d2b8:	70a0      	strb	r0, [r4, #2]
    d2ba:	7928      	ldrb	r0, [r5, #4]
    d2bc:	70e0      	strb	r0, [r4, #3]
    d2be:	7968      	ldrb	r0, [r5, #5]
    d2c0:	7120      	strb	r0, [r4, #4]
    d2c2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d2c6:	0a00      	lsrs	r0, r0, #8
    d2c8:	7160      	strb	r0, [r4, #5]
    d2ca:	88e8      	ldrh	r0, [r5, #6]
    d2cc:	0a00      	lsrs	r0, r0, #8
    d2ce:	71a0      	strb	r0, [r4, #6]
    d2d0:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d2d4:	0c00      	lsrs	r0, r0, #16
    d2d6:	71e0      	strb	r0, [r4, #7]
    d2d8:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d2dc:	0e00      	lsrs	r0, r0, #24
    d2de:	7220      	strb	r0, [r4, #8]
    d2e0:	f8b5 0009 	ldrh.w	r0, [r5, #9]
    d2e4:	0a00      	lsrs	r0, r0, #8
    d2e6:	7260      	strb	r0, [r4, #9]
    d2e8:	f8d5 0009 	ldr.w	r0, [r5, #9]
    d2ec:	0c00      	lsrs	r0, r0, #16
    d2ee:	72a0      	strb	r0, [r4, #10]
    d2f0:	f8d5 0009 	ldr.w	r0, [r5, #9]
    d2f4:	0e00      	lsrs	r0, r0, #24
    d2f6:	72e0      	strb	r0, [r4, #11]
    d2f8:	89a8      	ldrh	r0, [r5, #12]
    d2fa:	0a00      	lsrs	r0, r0, #8
    d2fc:	7320      	strb	r0, [r4, #12]
    d2fe:	68e8      	ldr	r0, [r5, #12]
    d300:	0c00      	lsrs	r0, r0, #16
    d302:	7360      	strb	r0, [r4, #13]
    d304:	68e8      	ldr	r0, [r5, #12]
    d306:	0e00      	lsrs	r0, r0, #24
    d308:	73a0      	strb	r0, [r4, #14]
    d30a:	f8b5 000f 	ldrh.w	r0, [r5, #15]
    d30e:	0a00      	lsrs	r0, r0, #8
    d310:	73e0      	strb	r0, [r4, #15]
    d312:	f8d5 000f 	ldr.w	r0, [r5, #15]
    d316:	0c00      	lsrs	r0, r0, #16
    d318:	7420      	strb	r0, [r4, #16]
    d31a:	f8d5 000f 	ldr.w	r0, [r5, #15]
    d31e:	0e00      	lsrs	r0, r0, #24
    d320:	7460      	strb	r0, [r4, #17]
    d322:	7ce8      	ldrb	r0, [r5, #19]
    d324:	74a0      	strb	r0, [r4, #18]
    d326:	7d28      	ldrb	r0, [r5, #20]
    d328:	74e0      	strb	r0, [r4, #19]
    d32a:	7d68      	ldrb	r0, [r5, #21]
    d32c:	7520      	strb	r0, [r4, #20]
    d32e:	7da8      	ldrb	r0, [r5, #22]
    d330:	7560      	strb	r0, [r4, #21]
    d332:	7de8      	ldrb	r0, [r5, #23]
    d334:	75a0      	strb	r0, [r4, #22]
    d336:	7e28      	ldrb	r0, [r5, #24]
    d338:	75e0      	strb	r0, [r4, #23]
    d33a:	7e68      	ldrb	r0, [r5, #25]
    d33c:	7620      	strb	r0, [r4, #24]
    d33e:	7ea8      	ldrb	r0, [r5, #26]
    d340:	7660      	strb	r0, [r4, #25]
    d342:	8b68      	ldrh	r0, [r5, #26]
    d344:	0a00      	lsrs	r0, r0, #8
    d346:	76a0      	strb	r0, [r4, #26]
    d348:	7f28      	ldrb	r0, [r5, #28]
    d34a:	76e0      	strb	r0, [r4, #27]
    d34c:	8ba8      	ldrh	r0, [r5, #28]
    d34e:	0a00      	lsrs	r0, r0, #8
    d350:	7720      	strb	r0, [r4, #28]
    d352:	7fa8      	ldrb	r0, [r5, #30]
    d354:	7760      	strb	r0, [r4, #29]
    d356:	8be8      	ldrh	r0, [r5, #30]
    d358:	0a00      	lsrs	r0, r0, #8
    d35a:	77a0      	strb	r0, [r4, #30]
    d35c:	201d      	movs	r0, #29
    d35e:	e7a4      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d360:	7026      	strb	r6, [r4, #0]
    d362:	201a      	movs	r0, #26
    d364:	70a0      	strb	r0, [r4, #2]
    d366:	7928      	ldrb	r0, [r5, #4]
    d368:	70e0      	strb	r0, [r4, #3]
    d36a:	88a8      	ldrh	r0, [r5, #4]
    d36c:	0a00      	lsrs	r0, r0, #8
    d36e:	7120      	strb	r0, [r4, #4]
    d370:	79a8      	ldrb	r0, [r5, #6]
    d372:	7160      	strb	r0, [r4, #5]
    d374:	88e8      	ldrh	r0, [r5, #6]
    d376:	0a00      	lsrs	r0, r0, #8
    d378:	71a0      	strb	r0, [r4, #6]
    d37a:	7a28      	ldrb	r0, [r5, #8]
    d37c:	71e0      	strb	r0, [r4, #7]
    d37e:	7a68      	ldrb	r0, [r5, #9]
    d380:	7220      	strb	r0, [r4, #8]
    d382:	e059      	b.n	d438 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5fa>
    d384:	203e      	movs	r0, #62	; 0x3e
    d386:	7020      	strb	r0, [r4, #0]
    d388:	201f      	movs	r0, #31
    d38a:	7010      	strb	r0, [r2, #0]
    d38c:	6868      	ldr	r0, [r5, #4]
    d38e:	6008      	str	r0, [r1, #0]
    d390:	e034      	b.n	d3fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5be>
    d392:	7027      	strb	r7, [r4, #0]
    d394:	20a1      	movs	r0, #161	; 0xa1
    d396:	70a0      	strb	r0, [r4, #2]
    d398:	7928      	ldrb	r0, [r5, #4]
    d39a:	70e0      	strb	r0, [r4, #3]
    d39c:	7968      	ldrb	r0, [r5, #5]
    d39e:	7120      	strb	r0, [r4, #4]
    d3a0:	2000      	movs	r0, #0
    d3a2:	7160      	strb	r0, [r4, #5]
    d3a4:	2004      	movs	r0, #4
    d3a6:	e780      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d3a8:	7027      	strb	r7, [r4, #0]
    d3aa:	20a2      	movs	r0, #162	; 0xa2
    d3ac:	70a0      	strb	r0, [r4, #2]
    d3ae:	7928      	ldrb	r0, [r5, #4]
    d3b0:	70e0      	strb	r0, [r4, #3]
    d3b2:	88a8      	ldrh	r0, [r5, #4]
    d3b4:	0a00      	lsrs	r0, r0, #8
    d3b6:	7120      	strb	r0, [r4, #4]
    d3b8:	79a8      	ldrb	r0, [r5, #6]
    d3ba:	7160      	strb	r0, [r4, #5]
    d3bc:	88e8      	ldrh	r0, [r5, #6]
    d3be:	0a00      	lsrs	r0, r0, #8
    d3c0:	71a0      	strb	r0, [r4, #6]
    d3c2:	7a28      	ldrb	r0, [r5, #8]
    d3c4:	71e0      	strb	r0, [r4, #7]
    d3c6:	8928      	ldrh	r0, [r5, #8]
    d3c8:	0a00      	lsrs	r0, r0, #8
    d3ca:	7220      	strb	r0, [r4, #8]
    d3cc:	7aa8      	ldrb	r0, [r5, #10]
    d3ce:	7260      	strb	r0, [r4, #9]
    d3d0:	8968      	ldrh	r0, [r5, #10]
    d3d2:	0a00      	lsrs	r0, r0, #8
    d3d4:	72a0      	strb	r0, [r4, #10]
    d3d6:	7b28      	ldrb	r0, [r5, #12]
    d3d8:	72e0      	strb	r0, [r4, #11]
    d3da:	89a8      	ldrh	r0, [r5, #12]
    d3dc:	0a00      	lsrs	r0, r0, #8
    d3de:	7320      	strb	r0, [r4, #12]
    d3e0:	200b      	movs	r0, #11
    d3e2:	e762      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d3e4:	7027      	strb	r7, [r4, #0]
    d3e6:	20a3      	movs	r0, #163	; 0xa3
    d3e8:	70a0      	strb	r0, [r4, #2]
    d3ea:	7928      	ldrb	r0, [r5, #4]
    d3ec:	70e0      	strb	r0, [r4, #3]
    d3ee:	88a8      	ldrh	r0, [r5, #4]
    d3f0:	0a00      	lsrs	r0, r0, #8
    d3f2:	7120      	strb	r0, [r4, #4]
    d3f4:	79a8      	ldrb	r0, [r5, #6]
    d3f6:	7160      	strb	r0, [r4, #5]
    d3f8:	79e8      	ldrb	r0, [r5, #7]
    d3fa:	71a0      	strb	r0, [r4, #6]
    d3fc:	2005      	movs	r0, #5
    d3fe:	e754      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d400:	7026      	strb	r6, [r4, #0]
    d402:	2013      	movs	r0, #19
    d404:	70a0      	strb	r0, [r4, #2]
    d406:	7928      	ldrb	r0, [r5, #4]
    d408:	70e0      	strb	r0, [r4, #3]
    d40a:	7968      	ldrb	r0, [r5, #5]
    d40c:	7120      	strb	r0, [r4, #4]
    d40e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d412:	f8c4 0005 	str.w	r0, [r4, #5]
    d416:	8968      	ldrh	r0, [r5, #10]
    d418:	f8a4 0009 	strh.w	r0, [r4, #9]
    d41c:	200a      	movs	r0, #10
    d41e:	e744      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d420:	7027      	strb	r7, [r4, #0]
    d422:	20a4      	movs	r0, #164	; 0xa4
    d424:	70a0      	strb	r0, [r4, #2]
    d426:	7928      	ldrb	r0, [r5, #4]
    d428:	70e0      	strb	r0, [r4, #3]
    d42a:	88a8      	ldrh	r0, [r5, #4]
    d42c:	0a00      	lsrs	r0, r0, #8
    d42e:	7120      	strb	r0, [r4, #4]
    d430:	79a8      	ldrb	r0, [r5, #6]
    d432:	7160      	strb	r0, [r4, #5]
    d434:	79e8      	ldrb	r0, [r5, #7]
    d436:	71a0      	strb	r0, [r4, #6]
    d438:	2007      	movs	r0, #7
    d43a:	e736      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
    d43c:	7027      	strb	r7, [r4, #0]
    d43e:	2080      	movs	r0, #128	; 0x80
    d440:	70a0      	strb	r0, [r4, #2]
    d442:	88a9      	ldrh	r1, [r5, #4]
    d444:	f8a4 1003 	strh.w	r1, [r4, #3]
    d448:	88e9      	ldrh	r1, [r5, #6]
    d44a:	f8a4 1005 	strh.w	r1, [r4, #5]
    d44e:	7a29      	ldrb	r1, [r5, #8]
    d450:	71e1      	strb	r1, [r4, #7]
    d452:	8969      	ldrh	r1, [r5, #10]
    d454:	8121      	strh	r1, [r4, #8]
    d456:	89a9      	ldrh	r1, [r5, #12]
    d458:	8161      	strh	r1, [r4, #10]
    d45a:	89e9      	ldrh	r1, [r5, #14]
    d45c:	81a1      	strh	r1, [r4, #12]
    d45e:	7c29      	ldrb	r1, [r5, #16]
    d460:	f001 0101 	and.w	r1, r1, #1
    d464:	73a1      	strb	r1, [r4, #14]
    d466:	200d      	movs	r0, #13
    d468:	e71f      	b.n	d2aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>

0000d46a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d46a:	223e      	movs	r2, #62	; 0x3e
    d46c:	7002      	strb	r2, [r0, #0]
    d46e:	2201      	movs	r2, #1
    d470:	7082      	strb	r2, [r0, #2]
    d472:	790a      	ldrb	r2, [r1, #4]
    d474:	70c2      	strb	r2, [r0, #3]
    d476:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d47a:	7102      	strb	r2, [r0, #4]
    d47c:	880a      	ldrh	r2, [r1, #0]
    d47e:	0a12      	lsrs	r2, r2, #8
    d480:	7142      	strb	r2, [r0, #5]
    d482:	788a      	ldrb	r2, [r1, #2]
    d484:	7182      	strb	r2, [r0, #6]
    d486:	78ca      	ldrb	r2, [r1, #3]
    d488:	71c2      	strb	r2, [r0, #7]
    d48a:	684a      	ldr	r2, [r1, #4]
    d48c:	6082      	str	r2, [r0, #8]
    d48e:	890a      	ldrh	r2, [r1, #8]
    d490:	8182      	strh	r2, [r0, #12]
    d492:	7d8a      	ldrb	r2, [r1, #22]
    d494:	7382      	strb	r2, [r0, #14]
    d496:	8aca      	ldrh	r2, [r1, #22]
    d498:	0a12      	lsrs	r2, r2, #8
    d49a:	73c2      	strb	r2, [r0, #15]
    d49c:	7e0a      	ldrb	r2, [r1, #24]
    d49e:	7402      	strb	r2, [r0, #16]
    d4a0:	8b0a      	ldrh	r2, [r1, #24]
    d4a2:	0a12      	lsrs	r2, r2, #8
    d4a4:	7442      	strb	r2, [r0, #17]
    d4a6:	7e8a      	ldrb	r2, [r1, #26]
    d4a8:	7482      	strb	r2, [r0, #18]
    d4aa:	8b4a      	ldrh	r2, [r1, #26]
    d4ac:	0a12      	lsrs	r2, r2, #8
    d4ae:	74c2      	strb	r2, [r0, #19]
    d4b0:	7f09      	ldrb	r1, [r1, #28]
    d4b2:	7501      	strb	r1, [r0, #20]
    d4b4:	2113      	movs	r1, #19
    d4b6:	7041      	strb	r1, [r0, #1]
    d4b8:	4608      	mov	r0, r1
    d4ba:	4770      	bx	lr
    d4bc:	223e      	movs	r2, #62	; 0x3e
    d4be:	7002      	strb	r2, [r0, #0]
    d4c0:	220a      	movs	r2, #10
    d4c2:	7082      	strb	r2, [r0, #2]
    d4c4:	790a      	ldrb	r2, [r1, #4]
    d4c6:	70c2      	strb	r2, [r0, #3]
    d4c8:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d4cc:	7102      	strb	r2, [r0, #4]
    d4ce:	880a      	ldrh	r2, [r1, #0]
    d4d0:	0a12      	lsrs	r2, r2, #8
    d4d2:	7142      	strb	r2, [r0, #5]
    d4d4:	788a      	ldrb	r2, [r1, #2]
    d4d6:	7182      	strb	r2, [r0, #6]
    d4d8:	78ca      	ldrb	r2, [r1, #3]
    d4da:	71c2      	strb	r2, [r0, #7]
    d4dc:	684a      	ldr	r2, [r1, #4]
    d4de:	6082      	str	r2, [r0, #8]
    d4e0:	890a      	ldrh	r2, [r1, #8]
    d4e2:	8182      	strh	r2, [r0, #12]
    d4e4:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d4e8:	f8c0 200e 	str.w	r2, [r0, #14]
    d4ec:	89ca      	ldrh	r2, [r1, #14]
    d4ee:	8242      	strh	r2, [r0, #18]
    d4f0:	690a      	ldr	r2, [r1, #16]
    d4f2:	6142      	str	r2, [r0, #20]
    d4f4:	8a8a      	ldrh	r2, [r1, #20]
    d4f6:	8302      	strh	r2, [r0, #24]
    d4f8:	7d8a      	ldrb	r2, [r1, #22]
    d4fa:	7682      	strb	r2, [r0, #26]
    d4fc:	8aca      	ldrh	r2, [r1, #22]
    d4fe:	0a12      	lsrs	r2, r2, #8
    d500:	76c2      	strb	r2, [r0, #27]
    d502:	7e0a      	ldrb	r2, [r1, #24]
    d504:	7702      	strb	r2, [r0, #28]
    d506:	8b0a      	ldrh	r2, [r1, #24]
    d508:	0a12      	lsrs	r2, r2, #8
    d50a:	7742      	strb	r2, [r0, #29]
    d50c:	7e8a      	ldrb	r2, [r1, #26]
    d50e:	7782      	strb	r2, [r0, #30]
    d510:	8b4a      	ldrh	r2, [r1, #26]
    d512:	0a12      	lsrs	r2, r2, #8
    d514:	77c2      	strb	r2, [r0, #31]
    d516:	7f09      	ldrb	r1, [r1, #28]
    d518:	f880 1020 	strb.w	r1, [r0, #32]
    d51c:	211f      	movs	r1, #31
    d51e:	7041      	strb	r1, [r0, #1]
    d520:	4608      	mov	r0, r1
    d522:	4770      	bx	lr
    d524:	094a      	lsrs	r2, r1, #5
    d526:	f001 011f 	and.w	r1, r1, #31
    d52a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d52e:	40c8      	lsrs	r0, r1
    d530:	f000 0001 	and.w	r0, r0, #1
    d534:	4770      	bx	lr

0000d536 <sdc_hci_get>:
    d536:	b510      	push	{r4, lr}
    d538:	460c      	mov	r4, r1
    d53a:	b130      	cbz	r0, d54a <sdc_hci_get+0x14>
    d53c:	b12c      	cbz	r4, d54a <sdc_hci_get+0x14>
    d53e:	f7f3 f93b 	bl	7b8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d542:	b128      	cbz	r0, d550 <sdc_hci_get+0x1a>
    d544:	7020      	strb	r0, [r4, #0]
    d546:	2000      	movs	r0, #0
    d548:	bd10      	pop	{r4, pc}
    d54a:	f06f 0015 	mvn.w	r0, #21
    d54e:	bd10      	pop	{r4, pc}
    d550:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d554:	bd10      	pop	{r4, pc}

0000d556 <sdc_hci_cmd_cb_set_event_mask>:
    d556:	b510      	push	{r4, lr}
    d558:	f7f3 f9fa 	bl	950 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d55c:	2000      	movs	r0, #0
    d55e:	bd10      	pop	{r4, pc}

0000d560 <sdc_hci_cmd_vs_conn_event_extend>:
    d560:	b508      	push	{r3, lr}
    d562:	7800      	ldrb	r0, [r0, #0]
    d564:	f88d 0000 	strb.w	r0, [sp]
    d568:	4668      	mov	r0, sp
    d56a:	f002 f90a 	bl	f782 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d56e:	bd08      	pop	{r3, pc}

0000d570 <sdc_hci_cmd_vs_conn_update>:
    d570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d572:	2100      	movs	r1, #0
    d574:	9100      	str	r1, [sp, #0]
    d576:	9101      	str	r1, [sp, #4]
    d578:	9102      	str	r1, [sp, #8]
    d57a:	9103      	str	r1, [sp, #12]
    d57c:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d580:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d584:	4291      	cmp	r1, r2
    d586:	d304      	bcc.n	d592 <sdc_hci_cmd_vs_conn_update+0x22>
    d588:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d58c:	fbb1 f1f2 	udiv	r1, r1, r2
    d590:	e005      	b.n	d59e <sdc_hci_cmd_vs_conn_update+0x2e>
    d592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d596:	fbb1 f1f2 	udiv	r1, r1, r2
    d59a:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d59e:	8802      	ldrh	r2, [r0, #0]
    d5a0:	b289      	uxth	r1, r1
    d5a2:	f8ad 2000 	strh.w	r2, [sp]
    d5a6:	f8ad 1002 	strh.w	r1, [sp, #2]
    d5aa:	f8ad 1004 	strh.w	r1, [sp, #4]
    d5ae:	88c1      	ldrh	r1, [r0, #6]
    d5b0:	f8ad 1006 	strh.w	r1, [sp, #6]
    d5b4:	8900      	ldrh	r0, [r0, #8]
    d5b6:	f8ad 0008 	strh.w	r0, [sp, #8]
    d5ba:	4668      	mov	r0, sp
    d5bc:	f001 fea7 	bl	f30e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d5c0:	b004      	add	sp, #16
    d5c2:	bd10      	pop	{r4, pc}

0000d5c4 <sdc_hci_cmd_vs_event_length_set>:
    d5c4:	f7f9 ba7e 	b.w	6ac4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d5c8 <sdc_hci_cmd_vs_llpm_mode_set>:
    d5c8:	b508      	push	{r3, lr}
    d5ca:	7800      	ldrb	r0, [r0, #0]
    d5cc:	f88d 0000 	strb.w	r0, [sp]
    d5d0:	4668      	mov	r0, sp
    d5d2:	f7f9 fa83 	bl	6adc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    d5d6:	bd08      	pop	{r3, pc}

0000d5d8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d5d8:	7800      	ldrb	r0, [r0, #0]
    d5da:	b100      	cbz	r0, d5de <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d5dc:	2001      	movs	r0, #1
    d5de:	f002 b8a5 	b.w	f72c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d5e2 <sdc_hci_cmd_vs_set_adv_randomness>:
    d5e2:	f002 b8a8 	b.w	f736 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d5e6 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d5e6:	b510      	push	{r4, lr}
    d5e8:	4604      	mov	r4, r0
    d5ea:	f7ff f857 	bl	c69c <mpsl_temperature_get>
    d5ee:	17c1      	asrs	r1, r0, #31
    d5f0:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d5f4:	1080      	asrs	r0, r0, #2
    d5f6:	287f      	cmp	r0, #127	; 0x7f
    d5f8:	dd01      	ble.n	d5fe <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d5fa:	207f      	movs	r0, #127	; 0x7f
    d5fc:	e004      	b.n	d608 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d5fe:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d602:	4288      	cmp	r0, r1
    d604:	da00      	bge.n	d608 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d606:	4608      	mov	r0, r1
    d608:	7020      	strb	r0, [r4, #0]
    d60a:	2000      	movs	r0, #0
    d60c:	bd10      	pop	{r4, pc}

0000d60e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d60e:	b570      	push	{r4, r5, r6, lr}
    d610:	4605      	mov	r5, r0
    d612:	2210      	movs	r2, #16
    d614:	2100      	movs	r1, #0
    d616:	f002 ffc2 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d61a:	2210      	movs	r2, #16
    d61c:	2100      	movs	r1, #0
    d61e:	f105 0010 	add.w	r0, r5, #16
    d622:	f002 ffbc 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d626:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d62a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d62e:	1c40      	adds	r0, r0, #1
    d630:	d10b      	bne.n	d64a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d632:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d636:	1c40      	adds	r0, r0, #1
    d638:	d107      	bne.n	d64a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d63a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d63e:	1c40      	adds	r0, r0, #1
    d640:	d103      	bne.n	d64a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d642:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d646:	1c40      	adds	r0, r0, #1
    d648:	d00b      	beq.n	d662 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d64a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d64e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d652:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d656:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d65a:	612a      	str	r2, [r5, #16]
    d65c:	6168      	str	r0, [r5, #20]
    d65e:	61a9      	str	r1, [r5, #24]
    d660:	61eb      	str	r3, [r5, #28]
    d662:	2000      	movs	r0, #0
    d664:	f7f3 ff14 	bl	1490 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d668:	b918      	cbnz	r0, d672 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d66a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d66e:	07c0      	lsls	r0, r0, #31
    d670:	d118      	bne.n	d6a4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d672:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d676:	1c40      	adds	r0, r0, #1
    d678:	d10b      	bne.n	d692 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d67a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d67e:	1c40      	adds	r0, r0, #1
    d680:	d107      	bne.n	d692 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d682:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d686:	1c40      	adds	r0, r0, #1
    d688:	d103      	bne.n	d692 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d68a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d68e:	1c40      	adds	r0, r0, #1
    d690:	d008      	beq.n	d6a4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d692:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d696:	6861      	ldr	r1, [r4, #4]
    d698:	68a2      	ldr	r2, [r4, #8]
    d69a:	68e3      	ldr	r3, [r4, #12]
    d69c:	6028      	str	r0, [r5, #0]
    d69e:	6069      	str	r1, [r5, #4]
    d6a0:	60aa      	str	r2, [r5, #8]
    d6a2:	60eb      	str	r3, [r5, #12]
    d6a4:	2000      	movs	r0, #0
    d6a6:	bd70      	pop	{r4, r5, r6, pc}

0000d6a8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d6a8:	b538      	push	{r3, r4, r5, lr}
    d6aa:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d6ae:	4604      	mov	r4, r0
    d6b0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d6b4:	1c40      	adds	r0, r0, #1
    d6b6:	d105      	bne.n	d6c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d6b8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d6bc:	43c0      	mvns	r0, r0
    d6be:	0400      	lsls	r0, r0, #16
    d6c0:	0c00      	lsrs	r0, r0, #16
    d6c2:	d03e      	beq.n	d742 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d6c4:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d6c8:	07c0      	lsls	r0, r0, #31
    d6ca:	d03a      	beq.n	d742 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d6cc:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d6d0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d6d4:	f8ad 1000 	strh.w	r1, [sp]
    d6d8:	f8c4 0001 	str.w	r0, [r4, #1]
    d6dc:	f8bd 0000 	ldrh.w	r0, [sp]
    d6e0:	f8a4 0005 	strh.w	r0, [r4, #5]
    d6e4:	79a0      	ldrb	r0, [r4, #6]
    d6e6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d6ea:	71a0      	strb	r0, [r4, #6]
    d6ec:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d6f0:	1c40      	adds	r0, r0, #1
    d6f2:	d00f      	beq.n	d714 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6f4:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d6f8:	1c40      	adds	r0, r0, #1
    d6fa:	d00b      	beq.n	d714 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6fc:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d700:	1c40      	adds	r0, r0, #1
    d702:	d007      	beq.n	d714 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d704:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d708:	1c40      	adds	r0, r0, #1
    d70a:	d003      	beq.n	d714 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d70c:	2000      	movs	r0, #0
    d70e:	f7f3 febf 	bl	1490 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d712:	b140      	cbz	r0, d726 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d714:	2210      	movs	r2, #16
    d716:	2100      	movs	r1, #0
    d718:	1de0      	adds	r0, r4, #7
    d71a:	f002 ff40 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d71e:	2001      	movs	r0, #1
    d720:	7020      	strb	r0, [r4, #0]
    d722:	2000      	movs	r0, #0
    d724:	bd38      	pop	{r3, r4, r5, pc}
    d726:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d72a:	6869      	ldr	r1, [r5, #4]
    d72c:	68a8      	ldr	r0, [r5, #8]
    d72e:	68eb      	ldr	r3, [r5, #12]
    d730:	f8c4 2007 	str.w	r2, [r4, #7]
    d734:	f8c4 100b 	str.w	r1, [r4, #11]
    d738:	f8c4 000f 	str.w	r0, [r4, #15]
    d73c:	f8c4 3013 	str.w	r3, [r4, #19]
    d740:	e7ed      	b.n	d71e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d742:	2000      	movs	r0, #0
    d744:	e7ec      	b.n	d720 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d746 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d746:	f002 b80b 	b.w	f760 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d74a <sdc_hci_cmd_ip_read_bd_addr>:
    d74a:	f002 b976 	b.w	fa3a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d74e <sdc_hci_cmd_ip_read_local_version_information>:
    d74e:	f7f9 b9f7 	b.w	6b40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d752 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d752:	f001 bdb5 	b.w	f2c0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d756 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d756:	f001 bdd0 	b.w	f2fa <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d75a <sdc_hci_cmd_le_encrypt>:
    d75a:	f001 be29 	b.w	f3b0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d75e <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d75e:	8802      	ldrh	r2, [r0, #0]
    d760:	800a      	strh	r2, [r1, #0]
    d762:	f001 be2e 	b.w	f3c2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d766 <sdc_hci_cmd_le_rand>:
    d766:	f001 be45 	b.w	f3f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d76a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d76a:	f001 be49 	b.w	f400 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d76e <sdc_hci_cmd_le_read_buffer_size>:
    d76e:	f7f9 b915 	b.w	699c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d772 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d772:	f001 be60 	b.w	f436 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d776 <sdc_hci_cmd_le_read_transmit_power>:
    d776:	f001 be4e 	b.w	f416 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d77a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d77a:	f001 be60 	b.w	f43e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d77e <sdc_hci_cmd_le_set_adv_data>:
    d77e:	f001 be7a 	b.w	f476 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d782 <sdc_hci_cmd_le_set_adv_enable>:
    d782:	f001 be8d 	b.w	f4a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d786 <sdc_hci_cmd_le_set_adv_params>:
    d786:	f001 bebe 	b.w	f506 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d78a <sdc_hci_cmd_le_set_data_related_address_changes>:
    d78a:	f001 bf51 	b.w	f630 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d78e <sdc_hci_cmd_le_set_event_mask>:
    d78e:	b510      	push	{r4, lr}
    d790:	f7f3 f8cc 	bl	92c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d794:	2000      	movs	r0, #0
    d796:	bd10      	pop	{r4, pc}

0000d798 <sdc_hci_cmd_le_set_random_address>:
    d798:	f001 bf62 	b.w	f660 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d79c <sdc_hci_cmd_le_set_scan_enable>:
    d79c:	f001 bf6e 	b.w	f67c <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d7a0 <sdc_hci_cmd_le_set_scan_params>:
    d7a0:	f001 bf82 	b.w	f6a8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d7a4 <sdc_hci_cmd_le_set_scan_response_data>:
    d7a4:	f001 bfad 	b.w	f702 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    d7a8:	1d49      	adds	r1, r1, #5
    d7aa:	4408      	add	r0, r1
    d7ac:	4350      	muls	r0, r2
    d7ae:	b280      	uxth	r0, r0
    d7b0:	4770      	bx	lr
    d7b2:	b570      	push	{r4, r5, r6, lr}
    d7b4:	880b      	ldrh	r3, [r1, #0]
    d7b6:	7cc4      	ldrb	r4, [r0, #19]
    d7b8:	f100 0618 	add.w	r6, r0, #24
    d7bc:	f3c3 050e 	ubfx	r5, r3, #0, #15
    d7c0:	8802      	ldrh	r2, [r0, #0]
    d7c2:	442e      	add	r6, r5
    d7c4:	1d64      	adds	r4, r4, #5
    d7c6:	8836      	ldrh	r6, [r6, #0]
    d7c8:	4422      	add	r2, r4
    d7ca:	b292      	uxth	r2, r2
    d7cc:	4426      	add	r6, r4
    d7ce:	1e54      	subs	r4, r2, #1
    d7d0:	4434      	add	r4, r6
    d7d2:	fb94 f4f2 	sdiv	r4, r4, r2
    d7d6:	fb02 5204 	mla	r2, r2, r4, r5
    d7da:	8840      	ldrh	r0, [r0, #2]
    d7dc:	b292      	uxth	r2, r2
    d7de:	4290      	cmp	r0, r2
    d7e0:	d903      	bls.n	d7ea <sdc_hci_cmd_le_set_scan_response_data+0x46>
    d7e2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d7e6:	4310      	orrs	r0, r2
    d7e8:	e002      	b.n	d7f0 <sdc_hci_cmd_le_set_scan_response_data+0x4c>
    d7ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d7ee:	4398      	bics	r0, r3
    d7f0:	8008      	strh	r0, [r1, #0]
    d7f2:	bd70      	pop	{r4, r5, r6, pc}
    d7f4:	4288      	cmp	r0, r1
    d7f6:	d101      	bne.n	d7fc <sdc_hci_cmd_le_set_scan_response_data+0x58>
    d7f8:	2001      	movs	r0, #1
    d7fa:	4770      	bx	lr
    d7fc:	2000      	movs	r0, #0
    d7fe:	4770      	bx	lr
    d800:	0442      	lsls	r2, r0, #17
    d802:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d806:	d107      	bne.n	d818 <sdc_hci_cmd_le_set_scan_response_data+0x74>
    d808:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d80c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d810:	4288      	cmp	r0, r1
    d812:	d001      	beq.n	d818 <sdc_hci_cmd_le_set_scan_response_data+0x74>
    d814:	2001      	movs	r0, #1
    d816:	4770      	bx	lr
    d818:	2000      	movs	r0, #0
    d81a:	4770      	bx	lr

0000d81c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d820:	4604      	mov	r4, r0
    d822:	f100 0318 	add.w	r3, r0, #24
    d826:	88c0      	ldrh	r0, [r0, #6]
    d828:	460f      	mov	r7, r1
    d82a:	f3c0 060e 	ubfx	r6, r0, #0, #15
    d82e:	8a20      	ldrh	r0, [r4, #16]
    d830:	1999      	adds	r1, r3, r6
    d832:	b108      	cbz	r0, d838 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d834:	42b8      	cmp	r0, r7
    d836:	d202      	bcs.n	d83e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d838:	2000      	movs	r0, #0
    d83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d83e:	89a0      	ldrh	r0, [r4, #12]
    d840:	2500      	movs	r5, #0
    d842:	b140      	cbz	r0, d856 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d844:	f8b1 c000 	ldrh.w	ip, [r1]
    d848:	4560      	cmp	r0, ip
    d84a:	d006      	beq.n	d85a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d84c:	f44f 7101 	mov.w	r1, #516	; 0x204
    d850:	2014      	movs	r0, #20
    d852:	f7f2 fed7 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d856:	800d      	strh	r5, [r1, #0]
    d858:	e00e      	b.n	d878 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d85a:	f894 c013 	ldrb.w	ip, [r4, #19]
    d85e:	4418      	add	r0, r3
    d860:	f10c 0c05 	add.w	ip, ip, #5
    d864:	44b4      	add	ip, r6
    d866:	4460      	add	r0, ip
    d868:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d86c:	f820 cc03 	strh.w	ip, [r0, #-3]
    d870:	f894 c016 	ldrb.w	ip, [r4, #22]
    d874:	f800 cc01 	strb.w	ip, [r0, #-1]
    d878:	89a0      	ldrh	r0, [r4, #12]
    d87a:	4438      	add	r0, r7
    d87c:	81a0      	strh	r0, [r4, #12]
    d87e:	8808      	ldrh	r0, [r1, #0]
    d880:	4438      	add	r0, r7
    d882:	8008      	strh	r0, [r1, #0]
    d884:	b12a      	cbz	r2, d892 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d886:	1da1      	adds	r1, r4, #6
    d888:	4620      	mov	r0, r4
    d88a:	f7ff ff92 	bl	d7b2 <sdc_hci_cmd_le_set_scan_response_data+0xe>
    d88e:	81a5      	strh	r5, [r4, #12]
    d890:	e00a      	b.n	d8a8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d892:	7ce0      	ldrb	r0, [r4, #19]
    d894:	89a1      	ldrh	r1, [r4, #12]
    d896:	1d40      	adds	r0, r0, #5
    d898:	4430      	add	r0, r6
    d89a:	4419      	add	r1, r3
    d89c:	4408      	add	r0, r1
    d89e:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d8a2:	82a1      	strh	r1, [r4, #20]
    d8a4:	7880      	ldrb	r0, [r0, #2]
    d8a6:	75a0      	strb	r0, [r4, #22]
    d8a8:	8225      	strh	r5, [r4, #16]
    d8aa:	2001      	movs	r0, #1
    d8ac:	e7c5      	b.n	d83a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d8ae:	1c80      	adds	r0, r0, #2
    d8b0:	4770      	bx	lr

0000d8b2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d8b2:	b510      	push	{r4, lr}
    d8b4:	88c2      	ldrh	r2, [r0, #6]
    d8b6:	8903      	ldrh	r3, [r0, #8]
    d8b8:	f3c2 040e 	ubfx	r4, r2, #0, #15
    d8bc:	f3c3 010e 	ubfx	r1, r3, #0, #15
    d8c0:	1b09      	subs	r1, r1, r4
    d8c2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d8c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d8ca:	429a      	cmp	r2, r3
    d8cc:	d101      	bne.n	d8d2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d8ce:	8842      	ldrh	r2, [r0, #2]
    d8d0:	4411      	add	r1, r2
    d8d2:	8802      	ldrh	r2, [r0, #0]
    d8d4:	7cc0      	ldrb	r0, [r0, #19]
    d8d6:	1d40      	adds	r0, r0, #5
    d8d8:	4410      	add	r0, r2
    d8da:	b280      	uxth	r0, r0
    d8dc:	fb91 f0f0 	sdiv	r0, r1, r0
    d8e0:	b280      	uxth	r0, r0
    d8e2:	bd10      	pop	{r4, pc}

0000d8e4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d8e4:	b510      	push	{r4, lr}
    d8e6:	4604      	mov	r4, r0
    d8e8:	88c1      	ldrh	r1, [r0, #6]
    d8ea:	8880      	ldrh	r0, [r0, #4]
    d8ec:	f7ff ff82 	bl	d7f4 <sdc_hci_cmd_le_set_scan_response_data+0x50>
    d8f0:	b918      	cbnz	r0, d8fa <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x16>
    d8f2:	8960      	ldrh	r0, [r4, #10]
    d8f4:	b908      	cbnz	r0, d8fa <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x16>
    d8f6:	89e0      	ldrh	r0, [r4, #14]
    d8f8:	b108      	cbz	r0, d8fe <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1a>
    d8fa:	2000      	movs	r0, #0
    d8fc:	bd10      	pop	{r4, pc}
    d8fe:	1d21      	adds	r1, r4, #4
    d900:	4620      	mov	r0, r4
    d902:	f7ff ff56 	bl	d7b2 <sdc_hci_cmd_le_set_scan_response_data+0xe>
    d906:	2000      	movs	r0, #0
    d908:	81e0      	strh	r0, [r4, #14]
    d90a:	2001      	movs	r0, #1
    d90c:	bd10      	pop	{r4, pc}

0000d90e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d90e:	b570      	push	{r4, r5, r6, lr}
    d910:	4604      	mov	r4, r0
    d912:	f100 0218 	add.w	r2, r0, #24
    d916:	88c1      	ldrh	r1, [r0, #6]
    d918:	8880      	ldrh	r0, [r0, #4]
    d91a:	f3c0 030e 	ubfx	r3, r0, #0, #15
    d91e:	18d5      	adds	r5, r2, r3
    d920:	f7ff ff68 	bl	d7f4 <sdc_hci_cmd_le_set_scan_response_data+0x50>
    d924:	b908      	cbnz	r0, d92a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d926:	8960      	ldrh	r0, [r4, #10]
    d928:	b108      	cbz	r0, d92e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x20>
    d92a:	2000      	movs	r0, #0
    d92c:	bd70      	pop	{r4, r5, r6, pc}
    d92e:	4628      	mov	r0, r5
    d930:	bd70      	pop	{r4, r5, r6, pc}

0000d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d932:	8803      	ldrh	r3, [r0, #0]
    d934:	2b45      	cmp	r3, #69	; 0x45
    d936:	d200      	bcs.n	d93a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d938:	2345      	movs	r3, #69	; 0x45
    d93a:	8013      	strh	r3, [r2, #0]
    d93c:	88c2      	ldrh	r2, [r0, #6]
    d93e:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d942:	f100 0218 	add.w	r2, r0, #24
    d946:	441a      	add	r2, r3
    d948:	600a      	str	r2, [r1, #0]
    d94a:	8980      	ldrh	r0, [r0, #12]
    d94c:	4770      	bx	lr

0000d94e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d94e:	7cc0      	ldrb	r0, [r0, #19]
    d950:	1d40      	adds	r0, r0, #5
    d952:	4408      	add	r0, r1
    d954:	1ec0      	subs	r0, r0, #3
    d956:	6010      	str	r0, [r2, #0]
    d958:	8808      	ldrh	r0, [r1, #0]
    d95a:	4770      	bx	lr

0000d95c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d960:	4615      	mov	r5, r2
    d962:	f8dd 8018 	ldr.w	r8, [sp, #24]
    d966:	460f      	mov	r7, r1
    d968:	4604      	mov	r4, r0
    d96a:	461e      	mov	r6, r3
    d96c:	4642      	mov	r2, r8
    d96e:	4619      	mov	r1, r3
    d970:	4628      	mov	r0, r5
    d972:	f000 f83c 	bl	d9ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d976:	4287      	cmp	r7, r0
    d978:	d201      	bcs.n	d97e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x22>
    d97a:	219e      	movs	r1, #158	; 0x9e
    d97c:	e013      	b.n	d9a6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4a>
    d97e:	07a0      	lsls	r0, r4, #30
    d980:	d001      	beq.n	d986 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x2a>
    d982:	219f      	movs	r1, #159	; 0x9f
    d984:	e00f      	b.n	d9a6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4a>
    d986:	2218      	movs	r2, #24
    d988:	2100      	movs	r1, #0
    d98a:	4620      	mov	r0, r4
    d98c:	f002 fe07 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d990:	74e6      	strb	r6, [r4, #19]
    d992:	4642      	mov	r2, r8
    d994:	4631      	mov	r1, r6
    d996:	4628      	mov	r0, r5
    d998:	f7ff ff06 	bl	d7a8 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    d99c:	8060      	strh	r0, [r4, #2]
    d99e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d9a2:	d903      	bls.n	d9ac <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x50>
    d9a4:	21a4      	movs	r1, #164	; 0xa4
    d9a6:	2014      	movs	r0, #20
    d9a8:	f7f2 fe2c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9ac:	8025      	strh	r5, [r4, #0]
    d9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d9b2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d9b2:	b570      	push	{r4, r5, r6, lr}
    d9b4:	460e      	mov	r6, r1
    d9b6:	4604      	mov	r4, r0
    d9b8:	f100 0118 	add.w	r1, r0, #24
    d9bc:	8900      	ldrh	r0, [r0, #8]
    d9be:	88a2      	ldrh	r2, [r4, #4]
    d9c0:	f3c0 030e 	ubfx	r3, r0, #0, #15
    d9c4:	18cd      	adds	r5, r1, r3
    d9c6:	4611      	mov	r1, r2
    d9c8:	f7ff ff14 	bl	d7f4 <sdc_hci_cmd_le_set_scan_response_data+0x50>
    d9cc:	b108      	cbz	r0, d9d2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>
    d9ce:	2000      	movs	r0, #0
    d9d0:	bd70      	pop	{r4, r5, r6, pc}
    d9d2:	b126      	cbz	r6, d9de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2c>
    d9d4:	7ce2      	ldrb	r2, [r4, #19]
    d9d6:	1ca9      	adds	r1, r5, #2
    d9d8:	4630      	mov	r0, r6
    d9da:	f002 fd66 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9de:	882d      	ldrh	r5, [r5, #0]
    d9e0:	f104 0108 	add.w	r1, r4, #8
    d9e4:	4620      	mov	r0, r4
    d9e6:	f7ff fee4 	bl	d7b2 <sdc_hci_cmd_le_set_scan_response_data+0xe>
    d9ea:	4628      	mov	r0, r5
    d9ec:	bd70      	pop	{r4, r5, r6, pc}

0000d9ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d9ee:	b510      	push	{r4, lr}
    d9f0:	4604      	mov	r4, r0
    d9f2:	f7ff fed9 	bl	d7a8 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    d9f6:	2100      	movs	r1, #0
    d9f8:	2c45      	cmp	r4, #69	; 0x45
    d9fa:	d202      	bcs.n	da02 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d9fc:	f1c4 0145 	rsb	r1, r4, #69	; 0x45
    da00:	b289      	uxth	r1, r1
    da02:	3018      	adds	r0, #24
    da04:	4408      	add	r0, r1
    da06:	b280      	uxth	r0, r0
    da08:	bd10      	pop	{r4, pc}

0000da0a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    da0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da0e:	4688      	mov	r8, r1
    da10:	88c1      	ldrh	r1, [r0, #6]
    da12:	4604      	mov	r4, r0
    da14:	8900      	ldrh	r0, [r0, #8]
    da16:	f3c1 050e 	ubfx	r5, r1, #0, #15
    da1a:	f104 0618 	add.w	r6, r4, #24
    da1e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    da22:	eb06 0905 	add.w	r9, r6, r5
    da26:	f7ff feeb 	bl	d800 <sdc_hci_cmd_le_set_scan_response_data+0x5c>
    da2a:	2200      	movs	r2, #0
    da2c:	b998      	cbnz	r0, da56 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    da2e:	8820      	ldrh	r0, [r4, #0]
    da30:	2845      	cmp	r0, #69	; 0x45
    da32:	d200      	bcs.n	da36 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    da34:	2045      	movs	r0, #69	; 0x45
    da36:	42af      	cmp	r7, r5
    da38:	d906      	bls.n	da48 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    da3a:	7ce1      	ldrb	r1, [r4, #19]
    da3c:	1b7b      	subs	r3, r7, r5
    da3e:	1d49      	adds	r1, r1, #5
    da40:	1a59      	subs	r1, r3, r1
    da42:	4281      	cmp	r1, r0
    da44:	da00      	bge.n	da48 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    da46:	4608      	mov	r0, r1
    da48:	89a1      	ldrh	r1, [r4, #12]
    da4a:	b111      	cbz	r1, da52 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    da4c:	f8b9 3000 	ldrh.w	r3, [r9]
    da50:	1ac0      	subs	r0, r0, r3
    da52:	4540      	cmp	r0, r8
    da54:	da03      	bge.n	da5e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    da56:	8222      	strh	r2, [r4, #16]
    da58:	2000      	movs	r0, #0
    da5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da5e:	7ce0      	ldrb	r0, [r4, #19]
    da60:	4431      	add	r1, r6
    da62:	1d40      	adds	r0, r0, #5
    da64:	4428      	add	r0, r5
    da66:	4408      	add	r0, r1
    da68:	f8a4 8010 	strh.w	r8, [r4, #16]
    da6c:	1ec0      	subs	r0, r0, #3
    da6e:	e7f4      	b.n	da5a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000da70 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    da70:	b570      	push	{r4, r5, r6, lr}
    da72:	2300      	movs	r3, #0
    da74:	f1a1 0208 	sub.w	r2, r1, #8
    da78:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    da7c:	42a2      	cmp	r2, r4
    da7e:	d304      	bcc.n	da8a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    da80:	f240 11cd 	movw	r1, #461	; 0x1cd
    da84:	2015      	movs	r0, #21
    da86:	f7f2 fdbd 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da8a:	6802      	ldr	r2, [r0, #0]
    da8c:	b90a      	cbnz	r2, da92 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    da8e:	e01e      	b.n	dace <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    da90:	4610      	mov	r0, r2
    da92:	6802      	ldr	r2, [r0, #0]
    da94:	8893      	ldrh	r3, [r2, #4]
    da96:	428b      	cmp	r3, r1
    da98:	d002      	beq.n	daa0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    da9a:	6813      	ldr	r3, [r2, #0]
    da9c:	2b00      	cmp	r3, #0
    da9e:	d1f7      	bne.n	da90 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    daa0:	8894      	ldrh	r4, [r2, #4]
    daa2:	4613      	mov	r3, r2
    daa4:	428c      	cmp	r4, r1
    daa6:	d101      	bne.n	daac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    daa8:	6811      	ldr	r1, [r2, #0]
    daaa:	e00d      	b.n	dac8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    daac:	f101 0508 	add.w	r5, r1, #8
    dab0:	b2ad      	uxth	r5, r5
    dab2:	42ac      	cmp	r4, r5
    dab4:	d30a      	bcc.n	dacc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    dab6:	1a64      	subs	r4, r4, r1
    dab8:	4411      	add	r1, r2
    daba:	2200      	movs	r2, #0
    dabc:	600a      	str	r2, [r1, #0]
    dabe:	808c      	strh	r4, [r1, #4]
    dac0:	6802      	ldr	r2, [r0, #0]
    dac2:	6812      	ldr	r2, [r2, #0]
    dac4:	6002      	str	r2, [r0, #0]
    dac6:	600a      	str	r2, [r1, #0]
    dac8:	6001      	str	r1, [r0, #0]
    daca:	e000      	b.n	dace <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dacc:	2300      	movs	r3, #0
    dace:	4618      	mov	r0, r3
    dad0:	bd70      	pop	{r4, r5, r6, pc}

0000dad2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dad2:	b510      	push	{r4, lr}
    dad4:	000c      	movs	r4, r1
    dad6:	d004      	beq.n	dae2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    dad8:	2c08      	cmp	r4, #8
    dada:	d207      	bcs.n	daec <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dadc:	f240 1195 	movw	r1, #405	; 0x195
    dae0:	e00a      	b.n	daf8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    dae2:	b108      	cbz	r0, dae8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    dae4:	2100      	movs	r1, #0
    dae6:	6001      	str	r1, [r0, #0]
    dae8:	2000      	movs	r0, #0
    daea:	bd10      	pop	{r4, pc}
    daec:	b158      	cbz	r0, db06 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    daee:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    daf2:	d304      	bcc.n	dafe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    daf4:	f240 11a7 	movw	r1, #423	; 0x1a7
    daf8:	2015      	movs	r0, #21
    dafa:	f7f2 fd83 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dafe:	b2a1      	uxth	r1, r4
    db00:	6800      	ldr	r0, [r0, #0]
    db02:	f000 f814 	bl	db2e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    db06:	1d20      	adds	r0, r4, #4
    db08:	bd10      	pop	{r4, pc}

0000db0a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    db0a:	2100      	movs	r1, #0
    db0c:	6802      	ldr	r2, [r0, #0]
    db0e:	e003      	b.n	db18 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    db10:	8893      	ldrh	r3, [r2, #4]
    db12:	6812      	ldr	r2, [r2, #0]
    db14:	4419      	add	r1, r3
    db16:	b289      	uxth	r1, r1
    db18:	2a00      	cmp	r2, #0
    db1a:	d1f9      	bne.n	db10 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    db1c:	f000 b807 	b.w	db2e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000db20 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    db20:	2300      	movs	r3, #0
    db22:	600b      	str	r3, [r1, #0]
    db24:	808a      	strh	r2, [r1, #4]
    db26:	6802      	ldr	r2, [r0, #0]
    db28:	600a      	str	r2, [r1, #0]
    db2a:	6001      	str	r1, [r0, #0]
    db2c:	4770      	bx	lr
    db2e:	2300      	movs	r3, #0
    db30:	6043      	str	r3, [r0, #4]
    db32:	1d02      	adds	r2, r0, #4
    db34:	8101      	strh	r1, [r0, #8]
    db36:	6002      	str	r2, [r0, #0]
    db38:	4770      	bx	lr

0000db3a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    db3a:	b51c      	push	{r2, r3, r4, lr}
    db3c:	4604      	mov	r4, r0
    db3e:	2000      	movs	r0, #0
    db40:	9001      	str	r0, [sp, #4]
    db42:	9000      	str	r0, [sp, #0]
    db44:	f88d 4006 	strb.w	r4, [sp, #6]
    db48:	e00a      	b.n	db60 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    db4a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    db4e:	4621      	mov	r1, r4
    db50:	f7f3 f85c 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    db54:	b120      	cbz	r0, db60 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    db56:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    db5a:	2017      	movs	r0, #23
    db5c:	f7f2 fd52 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db60:	4668      	mov	r0, sp
    db62:	f7f2 ffc5 	bl	af0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    db66:	2800      	cmp	r0, #0
    db68:	d0ef      	beq.n	db4a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    db6a:	bd1c      	pop	{r2, r3, r4, pc}

0000db6c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    db6c:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    db70:	3aff      	subs	r2, #255	; 0xff
    db72:	d001      	beq.n	db78 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    db74:	2909      	cmp	r1, #9
    db76:	d301      	bcc.n	db7c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    db78:	2000      	movs	r0, #0
    db7a:	4770      	bx	lr
    db7c:	f7f3 b878 	b.w	c70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    db80:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    db84:	3aff      	subs	r2, #255	; 0xff
    db86:	d001      	beq.n	db8c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    db88:	2909      	cmp	r1, #9
    db8a:	d301      	bcc.n	db90 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    db8c:	2000      	movs	r0, #0
    db8e:	4770      	bx	lr
    db90:	f7f3 b896 	b.w	cc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    db94:	b510      	push	{r4, lr}
    db96:	4604      	mov	r4, r0
    db98:	f7f3 f8de 	bl	d58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    db9c:	42a0      	cmp	r0, r4
    db9e:	d901      	bls.n	dba4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    dba0:	2001      	movs	r0, #1
    dba2:	bd10      	pop	{r4, pc}
    dba4:	2000      	movs	r0, #0
    dba6:	bd10      	pop	{r4, pc}

0000dba8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    dba8:	b570      	push	{r4, r5, r6, lr}
    dbaa:	460e      	mov	r6, r1
    dbac:	461d      	mov	r5, r3
    dbae:	4611      	mov	r1, r2
    dbb0:	f000 f813 	bl	dbda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    dbb4:	4604      	mov	r4, r0
    dbb6:	4629      	mov	r1, r5
    dbb8:	4630      	mov	r0, r6
    dbba:	f000 f804 	bl	dbc6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    dbbe:	4420      	add	r0, r4
    dbc0:	1d00      	adds	r0, r0, #4
    dbc2:	b280      	uxth	r0, r0
    dbc4:	bd70      	pop	{r4, r5, r6, pc}
    dbc6:	b510      	push	{r4, lr}
    dbc8:	460a      	mov	r2, r1
    dbca:	2109      	movs	r1, #9
    dbcc:	f7ff ff0f 	bl	d9ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dbd0:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dbd4:	1cc0      	adds	r0, r0, #3
    dbd6:	4008      	ands	r0, r1
    dbd8:	bd10      	pop	{r4, pc}
    dbda:	b510      	push	{r4, lr}
    dbdc:	460a      	mov	r2, r1
    dbde:	210a      	movs	r1, #10
    dbe0:	f7ff ff05 	bl	d9ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dbe4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dbe8:	1cc0      	adds	r0, r0, #3
    dbea:	4008      	ands	r0, r1
    dbec:	bd10      	pop	{r4, pc}

0000dbee <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ>:
    dbee:	b570      	push	{r4, r5, r6, lr}
    dbf0:	1cd2      	adds	r2, r2, #3
    dbf2:	f022 0203 	bic.w	r2, r2, #3
    dbf6:	320c      	adds	r2, #12
    dbf8:	0783      	lsls	r3, r0, #30
    dbfa:	d003      	beq.n	dc04 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x16>
    dbfc:	215c      	movs	r1, #92	; 0x5c
    dbfe:	2022      	movs	r0, #34	; 0x22
    dc00:	f7f2 fd00 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc04:	b108      	cbz	r0, dc0a <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x1c>
    dc06:	1d03      	adds	r3, r0, #4
    dc08:	6003      	str	r3, [r0, #0]
    dc0a:	4605      	mov	r5, r0
    dc0c:	4613      	mov	r3, r2
    dc0e:	1d00      	adds	r0, r0, #4
    dc10:	1d12      	adds	r2, r2, #4
    dc12:	e004      	b.n	dc1e <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x30>
    dc14:	b115      	cbz	r5, dc1c <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x2e>
    dc16:	18c4      	adds	r4, r0, r3
    dc18:	6004      	str	r4, [r0, #0]
    dc1a:	4620      	mov	r0, r4
    dc1c:	441a      	add	r2, r3
    dc1e:	1e49      	subs	r1, r1, #1
    dc20:	0409      	lsls	r1, r1, #16
    dc22:	0c09      	lsrs	r1, r1, #16
    dc24:	d1f6      	bne.n	dc14 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x26>
    dc26:	b105      	cbz	r5, dc2a <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x3c>
    dc28:	6001      	str	r1, [r0, #0]
    dc2a:	4610      	mov	r0, r2
    dc2c:	bd70      	pop	{r4, r5, r6, pc}
    dc2e:	b510      	push	{r4, lr}
    dc30:	4604      	mov	r4, r0
    dc32:	4608      	mov	r0, r1
    dc34:	f000 f815 	bl	dc62 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
    dc38:	1821      	adds	r1, r4, r0
    dc3a:	7d0a      	ldrb	r2, [r1, #20]
    dc3c:	2a02      	cmp	r2, #2
    dc3e:	d008      	beq.n	dc52 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x64>
    dc40:	7d49      	ldrb	r1, [r1, #21]
    dc42:	2902      	cmp	r1, #2
    dc44:	d009      	beq.n	dc5a <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x6c>
    dc46:	2a03      	cmp	r2, #3
    dc48:	d003      	beq.n	dc52 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x64>
    dc4a:	2903      	cmp	r1, #3
    dc4c:	d005      	beq.n	dc5a <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x6c>
    dc4e:	2000      	movs	r0, #0
    dc50:	bd10      	pop	{r4, pc}
    dc52:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    dc56:	8b00      	ldrh	r0, [r0, #24]
    dc58:	bd10      	pop	{r4, pc}
    dc5a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    dc5e:	8b40      	ldrh	r0, [r0, #26]
    dc60:	bd10      	pop	{r4, pc}
    dc62:	b108      	cbz	r0, dc68 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x7a>
    dc64:	2000      	movs	r0, #0
    dc66:	4770      	bx	lr
    dc68:	2002      	movs	r0, #2
    dc6a:	4770      	bx	lr
    dc6c:	b510      	push	{r4, lr}
    dc6e:	4604      	mov	r4, r0
    dc70:	4608      	mov	r0, r1
    dc72:	f7ff fff6 	bl	dc62 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
    dc76:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    dc7a:	8b01      	ldrh	r1, [r0, #24]
    dc7c:	b911      	cbnz	r1, dc84 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x96>
    dc7e:	8b40      	ldrh	r0, [r0, #26]
    dc80:	2800      	cmp	r0, #0
    dc82:	d000      	beq.n	dc86 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x98>
    dc84:	2001      	movs	r0, #1
    dc86:	bd10      	pop	{r4, pc}
    dc88:	b538      	push	{r3, r4, r5, lr}
    dc8a:	4604      	mov	r4, r0
    dc8c:	7880      	ldrb	r0, [r0, #2]
    dc8e:	460d      	mov	r5, r1
    dc90:	f88d 0000 	strb.w	r0, [sp]
    dc94:	9800      	ldr	r0, [sp, #0]
    dc96:	9000      	str	r0, [sp, #0]
    dc98:	f89d 0000 	ldrb.w	r0, [sp]
    dc9c:	b948      	cbnz	r0, dcb2 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xc4>
    dc9e:	4610      	mov	r0, r2
    dca0:	f7ff ffdf 	bl	dc62 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
    dca4:	1821      	adds	r1, r4, r0
    dca6:	7d0a      	ldrb	r2, [r1, #20]
    dca8:	2a02      	cmp	r2, #2
    dcaa:	d004      	beq.n	dcb6 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xc8>
    dcac:	7d49      	ldrb	r1, [r1, #21]
    dcae:	2902      	cmp	r1, #2
    dcb0:	d005      	beq.n	dcbe <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xd0>
    dcb2:	2000      	movs	r0, #0
    dcb4:	bd38      	pop	{r3, r4, r5, pc}
    dcb6:	4602      	mov	r2, r0
    dcb8:	1c40      	adds	r0, r0, #1
    dcba:	b2c0      	uxtb	r0, r0
    dcbc:	e001      	b.n	dcc2 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xd4>
    dcbe:	1c41      	adds	r1, r0, #1
    dcc0:	b2ca      	uxtb	r2, r1
    dcc2:	b185      	cbz	r5, dce6 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xf8>
    dcc4:	1823      	adds	r3, r4, r0
    dcc6:	2100      	movs	r1, #0
    dcc8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    dccc:	7519      	strb	r1, [r3, #20]
    dcce:	8301      	strh	r1, [r0, #24]
    dcd0:	2003      	movs	r0, #3
    dcd2:	18a1      	adds	r1, r4, r2
    dcd4:	7508      	strb	r0, [r1, #20]
    dcd6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    dcda:	6840      	ldr	r0, [r0, #4]
    dcdc:	6028      	str	r0, [r5, #0]
    dcde:	eb04 0042 	add.w	r0, r4, r2, lsl #1
    dce2:	8b00      	ldrh	r0, [r0, #24]
    dce4:	80a8      	strh	r0, [r5, #4]
    dce6:	2001      	movs	r0, #1
    dce8:	bd38      	pop	{r3, r4, r5, pc}
    dcea:	b570      	push	{r4, r5, r6, lr}
    dcec:	4604      	mov	r4, r0
    dcee:	4615      	mov	r5, r2
    dcf0:	4608      	mov	r0, r1
    dcf2:	f7ff ffb6 	bl	dc62 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
    dcf6:	1821      	adds	r1, r4, r0
    dcf8:	7d0a      	ldrb	r2, [r1, #20]
    dcfa:	42aa      	cmp	r2, r5
    dcfc:	d103      	bne.n	dd06 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x118>
    dcfe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    dd02:	8b00      	ldrh	r0, [r0, #24]
    dd04:	bd70      	pop	{r4, r5, r6, pc}
    dd06:	7d49      	ldrb	r1, [r1, #21]
    dd08:	42a9      	cmp	r1, r5
    dd0a:	d103      	bne.n	dd14 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x126>
    dd0c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    dd10:	8b40      	ldrh	r0, [r0, #26]
    dd12:	bd70      	pop	{r4, r5, r6, pc}
    dd14:	2000      	movs	r0, #0
    dd16:	bd70      	pop	{r4, r5, r6, pc}
    dd18:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    dd1c:	d201      	bcs.n	dd22 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x134>
    dd1e:	0840      	lsrs	r0, r0, #1
    dd20:	4770      	bx	lr
    dd22:	20ff      	movs	r0, #255	; 0xff
    dd24:	4770      	bx	lr
    dd26:	b510      	push	{r4, lr}
    dd28:	4604      	mov	r4, r0
    dd2a:	f7ff fff5 	bl	dd18 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x12a>
    dd2e:	1a20      	subs	r0, r4, r0
    dd30:	f240 6172 	movw	r1, #1650	; 0x672
    dd34:	4288      	cmp	r0, r1
    dd36:	db00      	blt.n	dd3a <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x14c>
    dd38:	4608      	mov	r0, r1
    dd3a:	b280      	uxth	r0, r0
    dd3c:	bd10      	pop	{r4, pc}

0000dd3e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    dd3e:	2101      	movs	r1, #1
    dd40:	f7ff bf75 	b.w	dc2e <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x40>

0000dd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    dd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd48:	4606      	mov	r6, r0
    dd4a:	f342 0780 	sbfx	r7, r2, #2, #1
    dd4e:	7848      	ldrb	r0, [r1, #1]
    dd50:	460c      	mov	r4, r1
    dd52:	f022 0504 	bic.w	r5, r2, #4
    dd56:	1c7f      	adds	r7, r7, #1
    dd58:	b100      	cbz	r0, dd5c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    dd5a:	b995      	cbnz	r5, dd82 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
    dd5c:	4328      	orrs	r0, r5
    dd5e:	d010      	beq.n	dd82 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
    dd60:	2000      	movs	r0, #0
    dd62:	b120      	cbz	r0, dd6e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2a>
    dd64:	b17d      	cbz	r5, dd86 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x42>
    dd66:	2100      	movs	r1, #0
    dd68:	4620      	mov	r0, r4
    dd6a:	f7f3 f8f7 	bl	f5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    dd6e:	20ff      	movs	r0, #255	; 0xff
    dd70:	70a0      	strb	r0, [r4, #2]
    dd72:	4638      	mov	r0, r7
    dd74:	f7ff ff75 	bl	dc62 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
    dd78:	1821      	adds	r1, r4, r0
    dd7a:	7d09      	ldrb	r1, [r1, #20]
    dd7c:	2903      	cmp	r1, #3
    dd7e:	d004      	beq.n	dd8a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x46>
    dd80:	e007      	b.n	dd92 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
    dd82:	2001      	movs	r0, #1
    dd84:	e7ed      	b.n	dd62 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1e>
    dd86:	2101      	movs	r1, #1
    dd88:	e7ee      	b.n	dd68 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x24>
    dd8a:	2d02      	cmp	r5, #2
    dd8c:	d001      	beq.n	dd92 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
    dd8e:	1c40      	adds	r0, r0, #1
    dd90:	b2c0      	uxtb	r0, r0
    dd92:	1822      	adds	r2, r4, r0
    dd94:	2101      	movs	r1, #1
    dd96:	7511      	strb	r1, [r2, #20]
    dd98:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    dd9c:	2100      	movs	r1, #0
    dd9e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    dda2:	8311      	strh	r1, [r2, #24]
    dda4:	6842      	ldr	r2, [r0, #4]
    dda6:	70a1      	strb	r1, [r4, #2]
    dda8:	4633      	mov	r3, r6
    ddaa:	f361 030f 	bfi	r3, r1, #0, #16
    ddae:	c60c      	stmia	r6!, {r2, r3}
    ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ddb4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    ddb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddb8:	4604      	mov	r4, r0
    ddba:	461e      	mov	r6, r3
    ddbc:	4690      	mov	r8, r2
    ddbe:	4608      	mov	r0, r1
    ddc0:	f7ff ff4f 	bl	dc62 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
    ddc4:	21ff      	movs	r1, #255	; 0xff
    ddc6:	70a1      	strb	r1, [r4, #2]
    ddc8:	1821      	adds	r1, r4, r0
    ddca:	7d0a      	ldrb	r2, [r1, #20]
    ddcc:	2a01      	cmp	r2, #1
    ddce:	d004      	beq.n	ddda <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    ddd0:	7d49      	ldrb	r1, [r1, #21]
    ddd2:	2901      	cmp	r1, #1
    ddd4:	d10c      	bne.n	ddf0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3c>
    ddd6:	1c40      	adds	r0, r0, #1
    ddd8:	b2c0      	uxtb	r0, r0
    ddda:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    ddde:	2700      	movs	r7, #0
    dde0:	8b29      	ldrh	r1, [r5, #24]
    dde2:	8c2b      	ldrh	r3, [r5, #32]
    dde4:	198a      	adds	r2, r1, r6
    dde6:	429a      	cmp	r2, r3
    dde8:	d905      	bls.n	ddf6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x42>
    ddea:	4420      	add	r0, r4
    ddec:	832f      	strh	r7, [r5, #24]
    ddee:	7507      	strb	r7, [r0, #20]
    ddf0:	2000      	movs	r0, #0
    ddf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddf6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ddfa:	4632      	mov	r2, r6
    ddfc:	6840      	ldr	r0, [r0, #4]
    ddfe:	4408      	add	r0, r1
    de00:	4641      	mov	r1, r8
    de02:	f002 fb52 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de06:	8b28      	ldrh	r0, [r5, #24]
    de08:	4430      	add	r0, r6
    de0a:	8328      	strh	r0, [r5, #24]
    de0c:	70a7      	strb	r7, [r4, #2]
    de0e:	2001      	movs	r0, #1
    de10:	e7ef      	b.n	ddf2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>

0000de12 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    de12:	b510      	push	{r4, lr}
    de14:	2101      	movs	r1, #1
    de16:	f7ff ff29 	bl	dc6c <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x7e>
    de1a:	2800      	cmp	r0, #0
    de1c:	d000      	beq.n	de20 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    de1e:	2001      	movs	r0, #1
    de20:	bd10      	pop	{r4, pc}

0000de22 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    de22:	2201      	movs	r2, #1
    de24:	f7ff bf30 	b.w	dc88 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x9a>

0000de28 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    de28:	2200      	movs	r2, #0
    de2a:	f7ff bf2d 	b.w	dc88 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x9a>

0000de2e <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    de2e:	b510      	push	{r4, lr}
    de30:	2100      	movs	r1, #0
    de32:	f7ff ff1b 	bl	dc6c <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x7e>
    de36:	2800      	cmp	r0, #0
    de38:	d000      	beq.n	de3c <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    de3a:	2001      	movs	r0, #1
    de3c:	bd10      	pop	{r4, pc}

0000de3e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    de3e:	b570      	push	{r4, r5, r6, lr}
    de40:	4604      	mov	r4, r0
    de42:	4615      	mov	r5, r2
    de44:	4608      	mov	r0, r1
    de46:	f7ff ff0c 	bl	dc62 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
    de4a:	21ff      	movs	r1, #255	; 0xff
    de4c:	70a1      	strb	r1, [r4, #2]
    de4e:	1821      	adds	r1, r4, r0
    de50:	2202      	movs	r2, #2
    de52:	7d0b      	ldrb	r3, [r1, #20]
    de54:	2b01      	cmp	r3, #1
    de56:	d007      	beq.n	de68 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x2a>
    de58:	7d4b      	ldrb	r3, [r1, #21]
    de5a:	2b01      	cmp	r3, #1
    de5c:	d009      	beq.n	de72 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x34>
    de5e:	f44f 718b 	mov.w	r1, #278	; 0x116
    de62:	2009      	movs	r0, #9
    de64:	f7f2 fbce 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de68:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    de6c:	8305      	strh	r5, [r0, #24]
    de6e:	750a      	strb	r2, [r1, #20]
    de70:	e003      	b.n	de7a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3c>
    de72:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    de76:	8345      	strh	r5, [r0, #26]
    de78:	754a      	strb	r2, [r1, #21]
    de7a:	2000      	movs	r0, #0
    de7c:	70a0      	strb	r0, [r4, #2]
    de7e:	bd70      	pop	{r4, r5, r6, pc}

0000de80 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    de80:	2101      	movs	r1, #1
    de82:	7001      	strb	r1, [r0, #0]
    de84:	4770      	bx	lr

0000de86 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    de86:	2201      	movs	r2, #1
    de88:	4611      	mov	r1, r2
    de8a:	f7ff bf2e 	b.w	dcea <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xfc>

0000de8e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    de8e:	2201      	movs	r2, #1
    de90:	2100      	movs	r1, #0
    de92:	f7ff bf2a 	b.w	dcea <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xfc>

0000de96 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    de96:	2100      	movs	r1, #0
    de98:	f7ff bec9 	b.w	dc2e <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x40>
    de9c:	b538      	push	{r3, r4, r5, lr}
    de9e:	9c04      	ldr	r4, [sp, #16]
    dea0:	9400      	str	r4, [sp, #0]
    dea2:	f7ff fd5b 	bl	d95c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    dea6:	bd38      	pop	{r3, r4, r5, pc}
    dea8:	f7ff bda1 	b.w	d9ee <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    deac:	2800      	cmp	r0, #0
    deae:	db09      	blt.n	dec4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x2e>
    deb0:	f000 021f 	and.w	r2, r0, #31
    deb4:	2101      	movs	r1, #1
    deb6:	4091      	lsls	r1, r2
    deb8:	0940      	lsrs	r0, r0, #5
    deba:	0080      	lsls	r0, r0, #2
    debc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dec0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dec4:	4770      	bx	lr
    dec6:	2800      	cmp	r0, #0
    dec8:	db0d      	blt.n	dee6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x50>
    deca:	f000 021f 	and.w	r2, r0, #31
    dece:	2101      	movs	r1, #1
    ded0:	4091      	lsls	r1, r2
    ded2:	0940      	lsrs	r0, r0, #5
    ded4:	0080      	lsls	r0, r0, #2
    ded6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    deda:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    dede:	f3bf 8f4f 	dsb	sy
    dee2:	f3bf 8f6f 	isb	sy
    dee6:	4770      	bx	lr
    dee8:	b510      	push	{r4, lr}
    deea:	200e      	movs	r0, #14
    deec:	f7ff ffeb 	bl	dec6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x30>
    def0:	200e      	movs	r0, #14
    def2:	f7ff ffdb 	bl	deac <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x16>
    def6:	200f      	movs	r0, #15
    def8:	f7ff ffe5 	bl	dec6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x30>
    defc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df00:	200f      	movs	r0, #15
    df02:	f7ff bfd3 	b.w	deac <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x16>
    df06:	2800      	cmp	r0, #0
    df08:	db09      	blt.n	df1e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x88>
    df0a:	f000 021f 	and.w	r2, r0, #31
    df0e:	2101      	movs	r1, #1
    df10:	4091      	lsls	r1, r2
    df12:	0940      	lsrs	r0, r0, #5
    df14:	0080      	lsls	r0, r0, #2
    df16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    df1a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    df1e:	4770      	bx	lr
    df20:	5840      	ldr	r0, [r0, r1]
    df22:	2800      	cmp	r0, #0
    df24:	d000      	beq.n	df28 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x92>
    df26:	2001      	movs	r0, #1
    df28:	4770      	bx	lr

0000df2a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    df2a:	b510      	push	{r4, lr}
    df2c:	4604      	mov	r4, r0
    df2e:	4620      	mov	r0, r4
    df30:	f7f3 f994 	bl	125c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    df34:	2811      	cmp	r0, #17
    df36:	d0fa      	beq.n	df2e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    df38:	bd10      	pop	{r4, pc}

0000df3a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    df3a:	b510      	push	{r4, lr}
    df3c:	f7ff fff5 	bl	df2a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    df40:	2800      	cmp	r0, #0
    df42:	d003      	beq.n	df4c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    df44:	21a0      	movs	r1, #160	; 0xa0
    df46:	201d      	movs	r0, #29
    df48:	f7f2 fb5c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df4c:	bd10      	pop	{r4, pc}

0000df4e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    df4e:	4050      	eors	r0, r2
    df50:	780a      	ldrb	r2, [r1, #0]
    df52:	f893 c000 	ldrb.w	ip, [r3]
    df56:	ea82 020c 	eor.w	r2, r2, ip
    df5a:	4410      	add	r0, r2
    df5c:	784a      	ldrb	r2, [r1, #1]
    df5e:	f893 c001 	ldrb.w	ip, [r3, #1]
    df62:	ea82 020c 	eor.w	r2, r2, ip
    df66:	4410      	add	r0, r2
    df68:	788a      	ldrb	r2, [r1, #2]
    df6a:	f893 c002 	ldrb.w	ip, [r3, #2]
    df6e:	ea82 020c 	eor.w	r2, r2, ip
    df72:	4410      	add	r0, r2
    df74:	78ca      	ldrb	r2, [r1, #3]
    df76:	f893 c003 	ldrb.w	ip, [r3, #3]
    df7a:	ea82 020c 	eor.w	r2, r2, ip
    df7e:	4410      	add	r0, r2
    df80:	790a      	ldrb	r2, [r1, #4]
    df82:	f893 c004 	ldrb.w	ip, [r3, #4]
    df86:	7949      	ldrb	r1, [r1, #5]
    df88:	ea82 020c 	eor.w	r2, r2, ip
    df8c:	4410      	add	r0, r2
    df8e:	795a      	ldrb	r2, [r3, #5]
    df90:	4051      	eors	r1, r2
    df92:	42c1      	cmn	r1, r0
    df94:	bf0c      	ite	eq
    df96:	2001      	moveq	r0, #1
    df98:	2000      	movne	r0, #0
    df9a:	4770      	bx	lr

0000df9c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    df9c:	b510      	push	{r4, lr}
    df9e:	2900      	cmp	r1, #0
    dfa0:	4604      	mov	r4, r0
    dfa2:	f04f 0106 	mov.w	r1, #6
    dfa6:	d002      	beq.n	dfae <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dfa8:	f7f2 fb9e 	bl	6e8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dfac:	e001      	b.n	dfb2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dfae:	f7f2 fbb7 	bl	720 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dfb2:	7960      	ldrb	r0, [r4, #5]
    dfb4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dfb8:	7160      	strb	r0, [r4, #5]
    dfba:	bd10      	pop	{r4, pc}

0000dfbc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dfbc:	4770      	bx	lr

0000dfbe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dfbe:	b530      	push	{r4, r5, lr}
    dfc0:	460c      	mov	r4, r1
    dfc2:	4605      	mov	r5, r0
    dfc4:	b08d      	sub	sp, #52	; 0x34
    dfc6:	f04f 0103 	mov.w	r1, #3
    dfca:	f104 0003 	add.w	r0, r4, #3
    dfce:	b112      	cbz	r2, dfd6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dfd0:	f7f2 fb8a 	bl	6e8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dfd4:	e001      	b.n	dfda <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dfd6:	f7f2 fba3 	bl	720 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dfda:	7960      	ldrb	r0, [r4, #5]
    dfdc:	220d      	movs	r2, #13
    dfde:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dfe2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dfe6:	7160      	strb	r0, [r4, #5]
    dfe8:	2100      	movs	r1, #0
    dfea:	a804      	add	r0, sp, #16
    dfec:	f002 fad7 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dff0:	78e0      	ldrb	r0, [r4, #3]
    dff2:	f88d 001f 	strb.w	r0, [sp, #31]
    dff6:	7920      	ldrb	r0, [r4, #4]
    dff8:	f88d 001e 	strb.w	r0, [sp, #30]
    dffc:	7960      	ldrb	r0, [r4, #5]
    dffe:	f88d 001d 	strb.w	r0, [sp, #29]
    e002:	6828      	ldr	r0, [r5, #0]
    e004:	9000      	str	r0, [sp, #0]
    e006:	6868      	ldr	r0, [r5, #4]
    e008:	9001      	str	r0, [sp, #4]
    e00a:	68a8      	ldr	r0, [r5, #8]
    e00c:	9002      	str	r0, [sp, #8]
    e00e:	68e8      	ldr	r0, [r5, #12]
    e010:	9003      	str	r0, [sp, #12]
    e012:	4668      	mov	r0, sp
    e014:	f7ff ff91 	bl	df3a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e018:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e01c:	7020      	strb	r0, [r4, #0]
    e01e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e022:	7060      	strb	r0, [r4, #1]
    e024:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e028:	70a0      	strb	r0, [r4, #2]
    e02a:	b00d      	add	sp, #52	; 0x34
    e02c:	bd30      	pop	{r4, r5, pc}

0000e02e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e02e:	b530      	push	{r4, r5, lr}
    e030:	b08d      	sub	sp, #52	; 0x34
    e032:	460c      	mov	r4, r1
    e034:	4605      	mov	r5, r0
    e036:	220d      	movs	r2, #13
    e038:	2100      	movs	r1, #0
    e03a:	a804      	add	r0, sp, #16
    e03c:	f002 faaf 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e040:	78e0      	ldrb	r0, [r4, #3]
    e042:	f88d 001f 	strb.w	r0, [sp, #31]
    e046:	7920      	ldrb	r0, [r4, #4]
    e048:	f88d 001e 	strb.w	r0, [sp, #30]
    e04c:	7960      	ldrb	r0, [r4, #5]
    e04e:	f88d 001d 	strb.w	r0, [sp, #29]
    e052:	6828      	ldr	r0, [r5, #0]
    e054:	9000      	str	r0, [sp, #0]
    e056:	6868      	ldr	r0, [r5, #4]
    e058:	9001      	str	r0, [sp, #4]
    e05a:	68a8      	ldr	r0, [r5, #8]
    e05c:	9002      	str	r0, [sp, #8]
    e05e:	68e8      	ldr	r0, [r5, #12]
    e060:	9003      	str	r0, [sp, #12]
    e062:	4668      	mov	r0, sp
    e064:	f7ff ff69 	bl	df3a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e068:	7820      	ldrb	r0, [r4, #0]
    e06a:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e06e:	4288      	cmp	r0, r1
    e070:	d10c      	bne.n	e08c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
    e072:	7860      	ldrb	r0, [r4, #1]
    e074:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e078:	4288      	cmp	r0, r1
    e07a:	d107      	bne.n	e08c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
    e07c:	78a0      	ldrb	r0, [r4, #2]
    e07e:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    e082:	4288      	cmp	r0, r1
    e084:	bf02      	ittt	eq
    e086:	2001      	moveq	r0, #1
    e088:	b00d      	addeq	sp, #52	; 0x34
    e08a:	bd30      	popeq	{r4, r5, pc}
    e08c:	2000      	movs	r0, #0
    e08e:	b00d      	add	sp, #52	; 0x34
    e090:	bd30      	pop	{r4, r5, pc}

0000e092 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e092:	b510      	push	{r4, lr}
    e094:	f7f9 f9d6 	bl	7444 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e098:	2800      	cmp	r0, #0
    e09a:	bf04      	itt	eq
    e09c:	20ff      	moveq	r0, #255	; 0xff
    e09e:	bd10      	popeq	{r4, pc}
    e0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0a4:	f7f9 b9ae 	b.w	7404 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0000e0a8 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e0a8:	b510      	push	{r4, lr}
    e0aa:	f7f3 fc9d 	bl	19e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e0ae:	2810      	cmp	r0, #16
    e0b0:	bf04      	itt	eq
    e0b2:	2000      	moveq	r0, #0
    e0b4:	bd10      	popeq	{r4, pc}
    e0b6:	f7f3 fcdd 	bl	1a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
    e0ba:	2001      	movs	r0, #1
    e0bc:	bd10      	pop	{r4, pc}

0000e0be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e0be:	b570      	push	{r4, r5, r6, lr}
    e0c0:	460c      	mov	r4, r1
    e0c2:	4605      	mov	r5, r0
    e0c4:	2100      	movs	r1, #0
    e0c6:	f7ff fd5b 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e0ca:	6060      	str	r0, [r4, #4]
    e0cc:	b110      	cbz	r0, e0d4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e0ce:	2000      	movs	r0, #0
    e0d0:	7020      	strb	r0, [r4, #0]
    e0d2:	bd70      	pop	{r4, r5, r6, pc}
    e0d4:	2101      	movs	r1, #1
    e0d6:	4628      	mov	r0, r5
    e0d8:	f7ff fd52 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e0dc:	6060      	str	r0, [r4, #4]
    e0de:	2800      	cmp	r0, #0
    e0e0:	bf04      	itt	eq
    e0e2:	2002      	moveq	r0, #2
    e0e4:	bd70      	popeq	{r4, r5, r6, pc}
    e0e6:	2001      	movs	r0, #1
    e0e8:	7020      	strb	r0, [r4, #0]
    e0ea:	2000      	movs	r0, #0
    e0ec:	bd70      	pop	{r4, r5, r6, pc}

0000e0ee <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e0ee:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
    e0f2:	2906      	cmp	r1, #6
    e0f4:	bf9a      	itte	ls
    e0f6:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    e0fa:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
    e0fe:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    e102:	4348      	muls	r0, r1
    e104:	4770      	bx	lr

0000e106 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e106:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
    e10a:	f241 7270 	movw	r2, #6000	; 0x1770
    e10e:	4291      	cmp	r1, r2
    e110:	bf94      	ite	ls
    e112:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    e116:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    e11a:	fbb0 f0f1 	udiv	r0, r0, r1
    e11e:	bf98      	it	ls
    e120:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
    e124:	b280      	uxth	r0, r0
    e126:	4770      	bx	lr

0000e128 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e128:	6809      	ldr	r1, [r1, #0]
    e12a:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    e12e:	4770      	bx	lr

0000e130 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e134:	4607      	mov	r7, r0
    e136:	460e      	mov	r6, r1
    e138:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
    e13c:	f7fc fb8c 	bl	a858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e140:	b1a0      	cbz	r0, e16c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3c>
    e142:	b336      	cbz	r6, e192 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
    e144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e148:	1b02      	subs	r2, r0, r4
    e14a:	eb61 0305 	sbc.w	r3, r1, r5
    e14e:	2000      	movs	r0, #0
    e150:	4601      	mov	r1, r0
    e152:	1a80      	subs	r0, r0, r2
    e154:	eb71 0003 	sbcs.w	r0, r1, r3
    e158:	da1b      	bge.n	e192 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
    e15a:	1c50      	adds	r0, r2, #1
    e15c:	f173 0000 	sbcs.w	r0, r3, #0
    e160:	db09      	blt.n	e176 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x46>
    e162:	f240 211b 	movw	r1, #539	; 0x21b
    e166:	2029      	movs	r0, #41	; 0x29
    e168:	f7f2 fa4c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e16c:	f240 2111 	movw	r1, #529	; 0x211
    e170:	2029      	movs	r0, #41	; 0x29
    e172:	f7f2 fa47 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e176:	1990      	adds	r0, r2, r6
    e178:	1e40      	subs	r0, r0, #1
    e17a:	fbb0 f1f6 	udiv	r1, r0, r6
    e17e:	fb01 f006 	mul.w	r0, r1, r6
    e182:	1820      	adds	r0, r4, r0
    e184:	f145 0200 	adc.w	r2, r5, #0
    e188:	e9c7 0204 	strd	r0, r2, [r7, #16]
    e18c:	4608      	mov	r0, r1
    e18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e192:	2000      	movs	r0, #0
    e194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e198 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e198:	f641 524c 	movw	r2, #7500	; 0x1d4c
    e19c:	4291      	cmp	r1, r2
    e19e:	bf3e      	ittt	cc
    e1a0:	2164      	movcc	r1, #100	; 0x64
    e1a2:	fb10 f001 	smulbbcc	r0, r0, r1
    e1a6:	4770      	bxcc	lr
    e1a8:	f240 2171 	movw	r1, #625	; 0x271
    e1ac:	fb10 f001 	smulbb	r0, r0, r1
    e1b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e1b4:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e1b8:	4770      	bx	lr

0000e1ba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e1ba:	b570      	push	{r4, r5, r6, lr}
    e1bc:	4604      	mov	r4, r0
    e1be:	1c40      	adds	r0, r0, #1
    e1c0:	4288      	cmp	r0, r1
    e1c2:	bf18      	it	ne
    e1c4:	f001 ffac 	blne	10120 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    e1c8:	7960      	ldrb	r0, [r4, #5]
    e1ca:	f000 001f 	and.w	r0, r0, #31
    e1ce:	7160      	strb	r0, [r4, #5]
    e1d0:	2000      	movs	r0, #0
    e1d2:	72e0      	strb	r0, [r4, #11]
    e1d4:	4605      	mov	r5, r0
    e1d6:	1966      	adds	r6, r4, r5
    e1d8:	7870      	ldrb	r0, [r6, #1]
    e1da:	f000 fa57 	bl	e68c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e1de:	71b0      	strb	r0, [r6, #6]
    e1e0:	7ae1      	ldrb	r1, [r4, #11]
    e1e2:	4408      	add	r0, r1
    e1e4:	72e0      	strb	r0, [r4, #11]
    e1e6:	1c68      	adds	r0, r5, #1
    e1e8:	b2c5      	uxtb	r5, r0
    e1ea:	2d05      	cmp	r5, #5
    e1ec:	d3f3      	bcc.n	e1d6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1c>
    e1ee:	bd70      	pop	{r4, r5, r6, pc}

0000e1f0 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    e1f0:	b570      	push	{r4, r5, r6, lr}
    e1f2:	7802      	ldrb	r2, [r0, #0]
    e1f4:	7841      	ldrb	r1, [r0, #1]
    e1f6:	f002 020f 	and.w	r2, r2, #15
    e1fa:	2a08      	cmp	r2, #8
    e1fc:	d24a      	bcs.n	e294 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0xa4>
    e1fe:	e8df f002 	tbb	[pc, r2]
    e202:	0804      	.short	0x0804
    e204:	4949490b 	.word	0x4949490b
    e208:	140f      	.short	0x140f
    e20a:	1f88      	subs	r0, r1, #6
    e20c:	281f      	cmp	r0, #31
    e20e:	d90a      	bls.n	e226 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x36>
    e210:	e040      	b.n	e294 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0xa4>
    e212:	290c      	cmp	r1, #12
    e214:	d007      	beq.n	e226 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x36>
    e216:	e03d      	b.n	e294 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0xa4>
    e218:	1f88      	subs	r0, r1, #6
    e21a:	281f      	cmp	r0, #31
    e21c:	d903      	bls.n	e226 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x36>
    e21e:	e039      	b.n	e294 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0xa4>
    e220:	1f88      	subs	r0, r1, #6
    e222:	281f      	cmp	r0, #31
    e224:	d836      	bhi.n	e294 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0xa4>
    e226:	2001      	movs	r0, #1
    e228:	bd70      	pop	{r4, r5, r6, pc}
    e22a:	000a      	movs	r2, r1
    e22c:	d032      	beq.n	e294 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0xa4>
    e22e:	4604      	mov	r4, r0
    e230:	78c0      	ldrb	r0, [r0, #3]
    e232:	2600      	movs	r6, #0
    e234:	0982      	lsrs	r2, r0, #6
    e236:	2a03      	cmp	r2, #3
    e238:	d009      	beq.n	e24e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x5e>
    e23a:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    e23e:	1c68      	adds	r0, r5, #1
    e240:	4288      	cmp	r0, r1
    e242:	d804      	bhi.n	e24e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x5e>
    e244:	4620      	mov	r0, r4
    e246:	f000 f84a 	bl	e2de <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
    e24a:	42a8      	cmp	r0, r5
    e24c:	d901      	bls.n	e252 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x62>
    e24e:	4630      	mov	r0, r6
    e250:	bd70      	pop	{r4, r5, r6, pc}
    e252:	78e0      	ldrb	r0, [r4, #3]
    e254:	f04f 0501 	mov.w	r5, #1
    e258:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    e25c:	bf1e      	ittt	ne
    e25e:	f114 0004 	addsne.w	r0, r4, #4
    e262:	7800      	ldrbne	r0, [r0, #0]
    e264:	f010 0f10 	tstne.w	r0, #16
    e268:	d012      	beq.n	e290 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0xa0>
    e26a:	2104      	movs	r1, #4
    e26c:	4620      	mov	r0, r4
    e26e:	f000 f9a5 	bl	e5bc <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    e272:	2800      	cmp	r0, #0
    e274:	bf18      	it	ne
    e276:	eb14 0000 	addsne.w	r0, r4, r0
    e27a:	d0e8      	beq.n	e24e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x5e>
    e27c:	7801      	ldrb	r1, [r0, #0]
    e27e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e282:	2925      	cmp	r1, #37	; 0x25
    e284:	d2e3      	bcs.n	e24e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x5e>
    e286:	7880      	ldrb	r0, [r0, #2]
    e288:	2102      	movs	r1, #2
    e28a:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    e28e:	d3de      	bcc.n	e24e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x5e>
    e290:	4628      	mov	r0, r5
    e292:	bd70      	pop	{r4, r5, r6, pc}
    e294:	2000      	movs	r0, #0
    e296:	bd70      	pop	{r4, r5, r6, pc}

0000e298 <sym_F2YEG7LG2K4M2PP2ISXH2ZTMWJ6S3M4N73JXFJI>:
    e298:	78c1      	ldrb	r1, [r0, #3]
    e29a:	7840      	ldrb	r0, [r0, #1]
    e29c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e2a0:	1a40      	subs	r0, r0, r1
    e2a2:	1e40      	subs	r0, r0, #1
    e2a4:	b2c0      	uxtb	r0, r0
    e2a6:	4770      	bx	lr

0000e2a8 <sym_7LMKRMQ2L35LNXR46RI7Y3BVMVYAICJYJCWUSXA>:
    e2a8:	b570      	push	{r4, r5, r6, lr}
    e2aa:	78c4      	ldrb	r4, [r0, #3]
    e2ac:	468c      	mov	ip, r1
    e2ae:	f004 013f 	and.w	r1, r4, #63	; 0x3f
    e2b2:	7845      	ldrb	r5, [r0, #1]
    e2b4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    e2b8:	1b2c      	subs	r4, r5, r4
    e2ba:	1e64      	subs	r4, r4, #1
    e2bc:	1ae4      	subs	r4, r4, r3
    e2be:	b2e4      	uxtb	r4, r4
    e2c0:	4294      	cmp	r4, r2
    e2c2:	bf88      	it	hi
    e2c4:	4614      	movhi	r4, r2
    e2c6:	f1bc 0f00 	cmp.w	ip, #0
    e2ca:	d006      	beq.n	e2da <sym_7LMKRMQ2L35LNXR46RI7Y3BVMVYAICJYJCWUSXA+0x32>
    e2cc:	4419      	add	r1, r3
    e2ce:	4408      	add	r0, r1
    e2d0:	1d01      	adds	r1, r0, #4
    e2d2:	4622      	mov	r2, r4
    e2d4:	4660      	mov	r0, ip
    e2d6:	f002 f8e8 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e2da:	4620      	mov	r0, r4
    e2dc:	bd70      	pop	{r4, r5, r6, pc}

0000e2de <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>:
    e2de:	78c1      	ldrb	r1, [r0, #3]
    e2e0:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e2e4:	bf18      	it	ne
    e2e6:	2201      	movne	r2, #1
    e2e8:	7900      	ldrb	r0, [r0, #4]
    e2ea:	f010 0301 	ands.w	r3, r0, #1
    e2ee:	bf18      	it	ne
    e2f0:	2301      	movne	r3, #1
    e2f2:	ea03 0c02 	and.w	ip, r3, r2
    e2f6:	f011 0f3f 	tst.w	r1, #63	; 0x3f
    e2fa:	bf14      	ite	ne
    e2fc:	2301      	movne	r3, #1
    e2fe:	2300      	moveq	r3, #0
    e300:	f010 0202 	ands.w	r2, r0, #2
    e304:	bf18      	it	ne
    e306:	2201      	movne	r2, #1
    e308:	401a      	ands	r2, r3
    e30a:	4462      	add	r2, ip
    e30c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e310:	ea4f 0c42 	mov.w	ip, r2, lsl #1
    e314:	f011 0f3f 	tst.w	r1, #63	; 0x3f
    e318:	bf14      	ite	ne
    e31a:	2301      	movne	r3, #1
    e31c:	2300      	moveq	r3, #0
    e31e:	f010 0208 	ands.w	r2, r0, #8
    e322:	bf18      	it	ne
    e324:	2201      	movne	r2, #1
    e326:	401a      	ands	r2, r3
    e328:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    e32c:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e330:	bf18      	it	ne
    e332:	2201      	movne	r2, #1
    e334:	f010 0304 	ands.w	r3, r0, #4
    e338:	bf18      	it	ne
    e33a:	2301      	movne	r3, #1
    e33c:	401a      	ands	r2, r3
    e33e:	4494      	add	ip, r2
    e340:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e344:	bf18      	it	ne
    e346:	2201      	movne	r2, #1
    e348:	f010 0320 	ands.w	r3, r0, #32
    e34c:	bf18      	it	ne
    e34e:	2301      	movne	r3, #1
    e350:	401a      	ands	r2, r3
    e352:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    e356:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    e35a:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e35e:	bf18      	it	ne
    e360:	2201      	movne	r2, #1
    e362:	f010 0310 	ands.w	r3, r0, #16
    e366:	bf18      	it	ne
    e368:	2301      	movne	r3, #1
    e36a:	401a      	ands	r2, r3
    e36c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e370:	4462      	add	r2, ip
    e372:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
    e376:	bf18      	it	ne
    e378:	2101      	movne	r1, #1
    e37a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    e37e:	bf18      	it	ne
    e380:	2001      	movne	r0, #1
    e382:	4008      	ands	r0, r1
    e384:	4410      	add	r0, r2
    e386:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    e38a:	bf1c      	itt	ne
    e38c:	1c40      	addne	r0, r0, #1
    e38e:	b2c0      	uxtbne	r0, r0
    e390:	4770      	bx	lr

0000e392 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    e392:	7800      	ldrb	r0, [r0, #0]
    e394:	09c0      	lsrs	r0, r0, #7
    e396:	4770      	bx	lr

0000e398 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    e398:	7800      	ldrb	r0, [r0, #0]
    e39a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e39e:	4770      	bx	lr

0000e3a0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e3a0:	b530      	push	{r4, r5, lr}
    e3a2:	7802      	ldrb	r2, [r0, #0]
    e3a4:	b083      	sub	sp, #12
    e3a6:	f002 020f 	and.w	r2, r2, #15
    e3aa:	2a03      	cmp	r2, #3
    e3ac:	d054      	beq.n	e458 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb8>
    e3ae:	2a05      	cmp	r2, #5
    e3b0:	d14f      	bne.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e3b2:	460d      	mov	r5, r1
    e3b4:	4604      	mov	r4, r0
    e3b6:	f100 011f 	add.w	r1, r0, #31
    e3ba:	4668      	mov	r0, sp
    e3bc:	f001 feb0 	bl	10120 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    e3c0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e3c4:	f89d 2000 	ldrb.w	r2, [sp]
    e3c8:	f000 01e0 	and.w	r1, r0, #224	; 0xe0
    e3cc:	2000      	movs	r0, #0
    e3ce:	f88d 1004 	strb.w	r1, [sp, #4]
    e3d2:	2a00      	cmp	r2, #0
    e3d4:	bf04      	itt	eq
    e3d6:	f89d 2001 	ldrbeq.w	r2, [sp, #1]
    e3da:	2a00      	cmpeq	r2, #0
    e3dc:	d10a      	bne.n	e3f4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x54>
    e3de:	f89d 2002 	ldrb.w	r2, [sp, #2]
    e3e2:	2a00      	cmp	r2, #0
    e3e4:	bf01      	itttt	eq
    e3e6:	f89d 2003 	ldrbeq.w	r2, [sp, #3]
    e3ea:	2a00      	cmpeq	r2, #0
    e3ec:	2900      	cmpeq	r1, #0
    e3ee:	b003      	addeq	sp, #12
    e3f0:	bf08      	it	eq
    e3f2:	bd30      	popeq	{r4, r5, pc}
    e3f4:	f8b4 0019 	ldrh.w	r0, [r4, #25]
    e3f8:	f894 c001 	ldrb.w	ip, [r4, #1]
    e3fc:	f8b4 201b 	ldrh.w	r2, [r4, #27]
    e400:	f8b4 3017 	ldrh.w	r3, [r4, #23]
    e404:	7da1      	ldrb	r1, [r4, #22]
    e406:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
    e40a:	d122      	bne.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e40c:	2d00      	cmp	r5, #0
    e40e:	bf18      	it	ne
    e410:	f5b0 6f50 	cmpne.w	r0, #3328	; 0xd00
    e414:	d903      	bls.n	e41e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x7e>
    e416:	f640 5c07 	movw	ip, #3335	; 0xd07
    e41a:	4560      	cmp	r0, ip
    e41c:	d90c      	bls.n	e438 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x98>
    e41e:	f1a0 0c06 	sub.w	ip, r0, #6
    e422:	f640 457a 	movw	r5, #3194	; 0xc7a
    e426:	45ac      	cmp	ip, r5
    e428:	d813      	bhi.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e42a:	b191      	cbz	r1, e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e42c:	2908      	cmp	r1, #8
    e42e:	bf98      	it	ls
    e430:	4281      	cmpls	r1, r0
    e432:	d20e      	bcs.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e434:	4298      	cmp	r0, r3
    e436:	d30c      	bcc.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e438:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    e43c:	d209      	bcs.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e43e:	f8b4 001d 	ldrh.w	r0, [r4, #29]
    e442:	f640 4176 	movw	r1, #3190	; 0xc76
    e446:	380a      	subs	r0, #10
    e448:	4281      	cmp	r1, r0
    e44a:	d302      	bcc.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e44c:	b003      	add	sp, #12
    e44e:	2001      	movs	r0, #1
    e450:	bd30      	pop	{r4, r5, pc}
    e452:	b003      	add	sp, #12
    e454:	2000      	movs	r0, #0
    e456:	bd30      	pop	{r4, r5, pc}
    e458:	7840      	ldrb	r0, [r0, #1]
    e45a:	280c      	cmp	r0, #12
    e45c:	d1f9      	bne.n	e452 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
    e45e:	e7f5      	b.n	e44c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xac>

0000e460 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    e460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e464:	7801      	ldrb	r1, [r0, #0]
    e466:	2601      	movs	r6, #1
    e468:	f001 010f 	and.w	r1, r1, #15
    e46c:	2500      	movs	r5, #0
    e46e:	2904      	cmp	r1, #4
    e470:	d00c      	beq.n	e48c <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x2c>
    e472:	2907      	cmp	r1, #7
    e474:	d00f      	beq.n	e496 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x36>
    e476:	2908      	cmp	r1, #8
    e478:	bf1c      	itt	ne
    e47a:	2000      	movne	r0, #0
    e47c:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    e480:	7840      	ldrb	r0, [r0, #1]
    e482:	280e      	cmp	r0, #14
    e484:	d034      	beq.n	e4f0 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x90>
    e486:	4628      	mov	r0, r5
    e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e48c:	7840      	ldrb	r0, [r0, #1]
    e48e:	1f80      	subs	r0, r0, #6
    e490:	281f      	cmp	r0, #31
    e492:	d92d      	bls.n	e4f0 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x90>
    e494:	e7f7      	b.n	e486 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x26>
    e496:	4604      	mov	r4, r0
    e498:	7840      	ldrb	r0, [r0, #1]
    e49a:	78e1      	ldrb	r1, [r4, #3]
    e49c:	098a      	lsrs	r2, r1, #6
    e49e:	2a03      	cmp	r2, #3
    e4a0:	d0f1      	beq.n	e486 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x26>
    e4a2:	f001 073f 	and.w	r7, r1, #63	; 0x3f
    e4a6:	1c79      	adds	r1, r7, #1
    e4a8:	4281      	cmp	r1, r0
    e4aa:	d8ec      	bhi.n	e486 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x26>
    e4ac:	4620      	mov	r0, r4
    e4ae:	f7ff ff16 	bl	e2de <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
    e4b2:	42b8      	cmp	r0, r7
    e4b4:	d8e7      	bhi.n	e486 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x26>
    e4b6:	78e0      	ldrb	r0, [r4, #3]
    e4b8:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    e4bc:	bf1e      	ittt	ne
    e4be:	f114 0004 	addsne.w	r0, r4, #4
    e4c2:	7800      	ldrbne	r0, [r0, #0]
    e4c4:	f010 0f10 	tstne.w	r0, #16
    e4c8:	d012      	beq.n	e4f0 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x90>
    e4ca:	2104      	movs	r1, #4
    e4cc:	4620      	mov	r0, r4
    e4ce:	f000 f875 	bl	e5bc <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    e4d2:	2800      	cmp	r0, #0
    e4d4:	bf18      	it	ne
    e4d6:	eb14 0000 	addsne.w	r0, r4, r0
    e4da:	d0d4      	beq.n	e486 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x26>
    e4dc:	7801      	ldrb	r1, [r0, #0]
    e4de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e4e2:	2925      	cmp	r1, #37	; 0x25
    e4e4:	d2cf      	bcs.n	e486 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x26>
    e4e6:	7880      	ldrb	r0, [r0, #2]
    e4e8:	2102      	movs	r1, #2
    e4ea:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    e4ee:	d3ca      	bcc.n	e486 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x26>
    e4f0:	4630      	mov	r0, r6
    e4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4f6 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e4f6:	b570      	push	{r4, r5, r6, lr}
    e4f8:	4614      	mov	r4, r2
    e4fa:	4605      	mov	r5, r0
    e4fc:	2a1f      	cmp	r2, #31
    e4fe:	d903      	bls.n	e508 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e500:	21ee      	movs	r1, #238	; 0xee
    e502:	202a      	movs	r0, #42	; 0x2a
    e504:	f7f2 f87e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e508:	f105 0009 	add.w	r0, r5, #9
    e50c:	f001 ffcd 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e510:	1da0      	adds	r0, r4, #6
    e512:	7068      	strb	r0, [r5, #1]
    e514:	bd70      	pop	{r4, r5, r6, pc}

0000e516 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e516:	b510      	push	{r4, lr}
    e518:	7802      	ldrb	r2, [r0, #0]
    e51a:	f001 030f 	and.w	r3, r1, #15
    e51e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e522:	431a      	orrs	r2, r3
    e524:	7002      	strb	r2, [r0, #0]
    e526:	2909      	cmp	r1, #9
    e528:	d213      	bcs.n	e552 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x3c>
    e52a:	e8df f001 	tbb	[pc, r1]
    e52e:	0705      	.short	0x0705
    e530:	09050705 	.word	0x09050705
    e534:	000f0b05 	.word	0x000f0b05
    e538:	2106      	movs	r1, #6
    e53a:	e008      	b.n	e54e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
    e53c:	210c      	movs	r1, #12
    e53e:	e006      	b.n	e54e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
    e540:	2122      	movs	r1, #34	; 0x22
    e542:	e004      	b.n	e54e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
    e544:	2101      	movs	r1, #1
    e546:	2200      	movs	r2, #0
    e548:	70c2      	strb	r2, [r0, #3]
    e54a:	e000      	b.n	e54e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
    e54c:	210e      	movs	r1, #14
    e54e:	7041      	strb	r1, [r0, #1]
    e550:	bd10      	pop	{r4, pc}
    e552:	21a8      	movs	r1, #168	; 0xa8
    e554:	202a      	movs	r0, #42	; 0x2a
    e556:	f7f2 f855 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e55a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e55a:	680a      	ldr	r2, [r1, #0]
    e55c:	f8c0 2009 	str.w	r2, [r0, #9]
    e560:	8889      	ldrh	r1, [r1, #4]
    e562:	f8a0 100d 	strh.w	r1, [r0, #13]
    e566:	4770      	bx	lr

0000e568 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e568:	7802      	ldrb	r2, [r0, #0]
    e56a:	2380      	movs	r3, #128	; 0x80
    e56c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e570:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
    e574:	4311      	orrs	r1, r2
    e576:	7001      	strb	r1, [r0, #0]
    e578:	4770      	bx	lr

0000e57a <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e57a:	680a      	ldr	r2, [r1, #0]
    e57c:	f8c0 2003 	str.w	r2, [r0, #3]
    e580:	8889      	ldrh	r1, [r1, #4]
    e582:	f8a0 1007 	strh.w	r1, [r0, #7]
    e586:	4770      	bx	lr

0000e588 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e588:	7802      	ldrb	r2, [r0, #0]
    e58a:	2340      	movs	r3, #64	; 0x40
    e58c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e590:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e594:	4311      	orrs	r1, r2
    e596:	7001      	strb	r1, [r0, #0]
    e598:	4770      	bx	lr

0000e59a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e59a:	b570      	push	{r4, r5, r6, lr}
    e59c:	4614      	mov	r4, r2
    e59e:	4605      	mov	r5, r0
    e5a0:	2a1f      	cmp	r2, #31
    e5a2:	d904      	bls.n	e5ae <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e5a4:	f44f 7188 	mov.w	r1, #272	; 0x110
    e5a8:	202a      	movs	r0, #42	; 0x2a
    e5aa:	f7f2 f82b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5ae:	f105 0009 	add.w	r0, r5, #9
    e5b2:	f001 ff7a 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e5b6:	1da0      	adds	r0, r4, #6
    e5b8:	7068      	strb	r0, [r5, #1]
    e5ba:	bd70      	pop	{r4, r5, r6, pc}
    e5bc:	78c3      	ldrb	r3, [r0, #3]
    e5be:	4602      	mov	r2, r0
    e5c0:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    e5c4:	bf08      	it	eq
    e5c6:	4770      	bxeq	lr
    e5c8:	2005      	movs	r0, #5
    e5ca:	7912      	ldrb	r2, [r2, #4]
    e5cc:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
    e5d0:	f012 0301 	ands.w	r3, r2, #1
    e5d4:	bf18      	it	ne
    e5d6:	2301      	movne	r3, #1
    e5d8:	b123      	cbz	r3, e5e4 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x4a>
    e5da:	2900      	cmp	r1, #0
    e5dc:	bf14      	ite	ne
    e5de:	200b      	movne	r0, #11
    e5e0:	4770      	bxeq	lr
    e5e2:	e001      	b.n	e5e8 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x4e>
    e5e4:	2900      	cmp	r1, #0
    e5e6:	d04f      	beq.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e5e8:	f012 0302 	ands.w	r3, r2, #2
    e5ec:	bf18      	it	ne
    e5ee:	2301      	movne	r3, #1
    e5f0:	b123      	cbz	r3, e5fc <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x62>
    e5f2:	2901      	cmp	r1, #1
    e5f4:	bf14      	ite	ne
    e5f6:	1d80      	addne	r0, r0, #6
    e5f8:	4770      	bxeq	lr
    e5fa:	e001      	b.n	e600 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x66>
    e5fc:	2901      	cmp	r1, #1
    e5fe:	d043      	beq.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e600:	f012 0304 	ands.w	r3, r2, #4
    e604:	bf18      	it	ne
    e606:	2301      	movne	r3, #1
    e608:	b123      	cbz	r3, e614 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x7a>
    e60a:	2902      	cmp	r1, #2
    e60c:	bf14      	ite	ne
    e60e:	1c40      	addne	r0, r0, #1
    e610:	4770      	bxeq	lr
    e612:	e001      	b.n	e618 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x7e>
    e614:	2902      	cmp	r1, #2
    e616:	d037      	beq.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e618:	f012 0308 	ands.w	r3, r2, #8
    e61c:	bf18      	it	ne
    e61e:	2301      	movne	r3, #1
    e620:	b123      	cbz	r3, e62c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x92>
    e622:	2903      	cmp	r1, #3
    e624:	bf14      	ite	ne
    e626:	1c80      	addne	r0, r0, #2
    e628:	4770      	bxeq	lr
    e62a:	e001      	b.n	e630 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x96>
    e62c:	2903      	cmp	r1, #3
    e62e:	d02b      	beq.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e630:	f012 0310 	ands.w	r3, r2, #16
    e634:	bf18      	it	ne
    e636:	2301      	movne	r3, #1
    e638:	b123      	cbz	r3, e644 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xaa>
    e63a:	2904      	cmp	r1, #4
    e63c:	bf14      	ite	ne
    e63e:	1cc0      	addne	r0, r0, #3
    e640:	4770      	bxeq	lr
    e642:	e001      	b.n	e648 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xae>
    e644:	2904      	cmp	r1, #4
    e646:	d01f      	beq.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e648:	f012 0320 	ands.w	r3, r2, #32
    e64c:	bf18      	it	ne
    e64e:	2301      	movne	r3, #1
    e650:	b12b      	cbz	r3, e65e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xc4>
    e652:	2905      	cmp	r1, #5
    e654:	bf1a      	itte	ne
    e656:	3012      	addne	r0, #18
    e658:	b2c0      	uxtbne	r0, r0
    e65a:	4770      	bxeq	lr
    e65c:	e001      	b.n	e662 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xc8>
    e65e:	2905      	cmp	r1, #5
    e660:	d012      	beq.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e662:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e666:	bf18      	it	ne
    e668:	2201      	movne	r2, #1
    e66a:	b12a      	cbz	r2, e678 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xde>
    e66c:	2906      	cmp	r1, #6
    e66e:	bf1a      	itte	ne
    e670:	1c40      	addne	r0, r0, #1
    e672:	b2c0      	uxtbne	r0, r0
    e674:	4770      	bxeq	lr
    e676:	e001      	b.n	e67c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xe2>
    e678:	2906      	cmp	r1, #6
    e67a:	d005      	beq.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e67c:	2907      	cmp	r1, #7
    e67e:	d103      	bne.n	e688 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0xee>
    e680:	1f41      	subs	r1, r0, #5
    e682:	458c      	cmp	ip, r1
    e684:	bfc8      	it	gt
    e686:	4770      	bxgt	lr
    e688:	2000      	movs	r0, #0
    e68a:	4770      	bx	lr

0000e68c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e68c:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e690:	2255      	movs	r2, #85	; 0x55
    e692:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e696:	4408      	add	r0, r1
    e698:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e69c:	2233      	movs	r2, #51	; 0x33
    e69e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e6a2:	4408      	add	r0, r1
    e6a4:	f000 010f 	and.w	r1, r0, #15
    e6a8:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e6ac:	4770      	bx	lr

0000e6ae <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY>:
    e6ae:	2800      	cmp	r0, #0
    e6b0:	db03      	blt.n	e6ba <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0xc>
    e6b2:	4288      	cmp	r0, r1
    e6b4:	db04      	blt.n	e6c0 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x12>
    e6b6:	4608      	mov	r0, r1
    e6b8:	e002      	b.n	e6c0 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x12>
    e6ba:	4249      	negs	r1, r1
    e6bc:	4288      	cmp	r0, r1
    e6be:	dbfa      	blt.n	e6b6 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x8>
    e6c0:	b200      	sxth	r0, r0
    e6c2:	4770      	bx	lr

0000e6c4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e6c4:	b510      	push	{r4, lr}
    e6c6:	4604      	mov	r4, r0
    e6c8:	7c80      	ldrb	r0, [r0, #18]
    e6ca:	2802      	cmp	r0, #2
    e6cc:	bf18      	it	ne
    e6ce:	2803      	cmpne	r0, #3
    e6d0:	d109      	bne.n	e6e6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x22>
    e6d2:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    e6d6:	f104 0170 	add.w	r1, r4, #112	; 0x70
    e6da:	f7f3 f80b 	bl	16f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e6de:	2808      	cmp	r0, #8
    e6e0:	bf1c      	itt	ne
    e6e2:	2001      	movne	r0, #1
    e6e4:	bd10      	popne	{r4, pc}
    e6e6:	7ca0      	ldrb	r0, [r4, #18]
    e6e8:	2800      	cmp	r0, #0
    e6ea:	bf1e      	ittt	ne
    e6ec:	2802      	cmpne	r0, #2
    e6ee:	7e60      	ldrbne	r0, [r4, #25]
    e6f0:	bd10      	popne	{r4, pc}
    e6f2:	f04f 0000 	mov.w	r0, #0
    e6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6fa:	f7f2 bec9 	b.w	1490 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e6fe <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e6fe:	b508      	push	{r3, lr}
    e700:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
    e704:	f88d 1000 	strb.w	r1, [sp]
    e708:	f89d 1000 	ldrb.w	r1, [sp]
    e70c:	b991      	cbnz	r1, e734 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x36>
    e70e:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    e712:	f88d 1000 	strb.w	r1, [sp]
    e716:	f89d 1000 	ldrb.w	r1, [sp]
    e71a:	b959      	cbnz	r1, e734 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x36>
    e71c:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    e720:	f88d 0000 	strb.w	r0, [sp]
    e724:	f89d 0000 	ldrb.w	r0, [sp]
    e728:	b110      	cbz	r0, e730 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x32>
    e72a:	f7f8 fd4f 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    e72e:	b108      	cbz	r0, e734 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x36>
    e730:	2000      	movs	r0, #0
    e732:	bd08      	pop	{r3, pc}
    e734:	2001      	movs	r0, #1
    e736:	bd08      	pop	{r3, pc}

0000e738 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e738:	20ff      	movs	r0, #255	; 0xff
    e73a:	7008      	strb	r0, [r1, #0]
    e73c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    e73e:	f7ff bb9f 	b.w	de80 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e742 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e742:	b530      	push	{r4, r5, lr}
    e744:	460d      	mov	r5, r1
    e746:	b085      	sub	sp, #20
    e748:	4604      	mov	r4, r0
    e74a:	f44f 72b0 	mov.w	r2, #352	; 0x160
    e74e:	2100      	movs	r1, #0
    e750:	f001 ff25 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e754:	20ff      	movs	r0, #255	; 0xff
    e756:	7020      	strb	r0, [r4, #0]
    e758:	207f      	movs	r0, #127	; 0x7f
    e75a:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
    e75e:	2013      	movs	r0, #19
    e760:	8060      	strh	r0, [r4, #2]
    e762:	f242 7010 	movw	r0, #10000	; 0x2710
    e766:	84e0      	strh	r0, [r4, #38]	; 0x26
    e768:	f7f2 fc8c 	bl	1084 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e76c:	4601      	mov	r1, r0
    e76e:	64e0      	str	r0, [r4, #76]	; 0x4c
    e770:	2200      	movs	r2, #0
    e772:	a802      	add	r0, sp, #8
    e774:	f7ff fae6 	bl	dd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e778:	2200      	movs	r2, #0
    e77a:	2101      	movs	r1, #1
    e77c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e77e:	f7ff fb5e 	bl	de3e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e782:	2204      	movs	r2, #4
    e784:	a802      	add	r0, sp, #8
    e786:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e788:	f7ff fadc 	bl	dd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e78c:	2200      	movs	r2, #0
    e78e:	4611      	mov	r1, r2
    e790:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e792:	f7ff fb54 	bl	de3e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e796:	7425      	strb	r5, [r4, #16]
    e798:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e79c:	f000 f9d1 	bl	eb42 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    e7a0:	4668      	mov	r0, sp
    e7a2:	f7f3 fb31 	bl	1e08 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    e7a6:	b130      	cbz	r0, e7b6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ+0x74>
    e7a8:	4669      	mov	r1, sp
    e7aa:	f104 0036 	add.w	r0, r4, #54	; 0x36
    e7ae:	f7ff fd04 	bl	e1ba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    e7b2:	b005      	add	sp, #20
    e7b4:	bd30      	pop	{r4, r5, pc}
    e7b6:	f240 314a 	movw	r1, #842	; 0x34a
    e7ba:	202d      	movs	r0, #45	; 0x2d
    e7bc:	f7f1 ff22 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e7c0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e7c0:	8840      	ldrh	r0, [r0, #2]
    e7c2:	f3c0 1100 	ubfx	r1, r0, #4, #1
    e7c6:	b131      	cbz	r1, e7d6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x16>
    e7c8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e7cc:	2800      	cmp	r0, #0
    e7ce:	bf04      	itt	eq
    e7d0:	201f      	moveq	r0, #31
    e7d2:	4770      	bxeq	lr
    e7d4:	e002      	b.n	e7dc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1c>
    e7d6:	f3c0 0140 	ubfx	r1, r0, #1, #1
    e7da:	b109      	cbz	r1, e7e0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x20>
    e7dc:	2000      	movs	r0, #0
    e7de:	4770      	bx	lr
    e7e0:	f010 0f01 	tst.w	r0, #1
    e7e4:	bf1c      	itt	ne
    e7e6:	20ee      	movne	r0, #238	; 0xee
    e7e8:	4770      	bxne	lr
    e7ea:	f7f2 bc71 	b.w	10d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>

0000e7ee <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>:
    e7ee:	21ff      	movs	r1, #255	; 0xff
    e7f0:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    e7f4:	4770      	bx	lr

0000e7f6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e7f6:	f7f4 bfc9 	b.w	378c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x850>

0000e7fa <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e7fa:	6880      	ldr	r0, [r0, #8]
    e7fc:	4770      	bx	lr

0000e7fe <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e7fe:	b500      	push	{lr}
    e800:	8842      	ldrh	r2, [r0, #2]
    e802:	b085      	sub	sp, #20
    e804:	f3c2 1300 	ubfx	r3, r2, #4, #1
    e808:	468c      	mov	ip, r1
    e80a:	2b00      	cmp	r3, #0
    e80c:	bf07      	ittee	eq
    e80e:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
    e812:	2a00      	cmpeq	r2, #0
    e814:	2001      	movne	r0, #1
    e816:	b005      	addne	sp, #20
    e818:	bf18      	it	ne
    e81a:	bd00      	popne	{pc}
    e81c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    e820:	9100      	str	r1, [sp, #0]
    e822:	8841      	ldrh	r1, [r0, #2]
    e824:	f8ad 1004 	strh.w	r1, [sp, #4]
    e828:	6881      	ldr	r1, [r0, #8]
    e82a:	9102      	str	r1, [sp, #8]
    e82c:	7901      	ldrb	r1, [r0, #4]
    e82e:	f88d 100c 	strb.w	r1, [sp, #12]
    e832:	7940      	ldrb	r0, [r0, #5]
    e834:	f88d 000d 	strb.w	r0, [sp, #13]
    e838:	4669      	mov	r1, sp
    e83a:	4660      	mov	r0, ip
    e83c:	f7f5 f810 	bl	3860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x924>
    e840:	b005      	add	sp, #20
    e842:	bd00      	pop	{pc}

0000e844 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e844:	2200      	movs	r2, #0
    e846:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    e84a:	8843      	ldrh	r3, [r0, #2]
    e84c:	2b1d      	cmp	r3, #29
    e84e:	bf0c      	ite	eq
    e850:	7342      	strbeq	r2, [r0, #13]
    e852:	7341      	strbne	r1, [r0, #13]
    e854:	4770      	bx	lr

0000e856 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    e856:	b510      	push	{r4, lr}
    e858:	8841      	ldrh	r1, [r0, #2]
    e85a:	f3c1 1200 	ubfx	r2, r1, #4, #1
    e85e:	b92a      	cbnz	r2, e86c <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y+0x16>
    e860:	f3c1 0140 	ubfx	r1, r1, #1, #1
    e864:	2900      	cmp	r1, #0
    e866:	bf18      	it	ne
    e868:	2401      	movne	r4, #1
    e86a:	d100      	bne.n	e86e <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y+0x18>
    e86c:	2400      	movs	r4, #0
    e86e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    e870:	f7ff fadd 	bl	de2e <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    e874:	ea24 0000 	bic.w	r0, r4, r0
    e878:	f080 0001 	eor.w	r0, r0, #1
    e87c:	bd10      	pop	{r4, pc}

0000e87e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    e87e:	b510      	push	{r4, lr}
    e880:	8840      	ldrh	r0, [r0, #2]
    e882:	f3c0 1100 	ubfx	r1, r0, #4, #1
    e886:	b119      	cbz	r1, e890 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    e888:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e88c:	b148      	cbz	r0, e8a2 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
    e88e:	e00a      	b.n	e8a6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
    e890:	f3c0 0140 	ubfx	r1, r0, #1, #1
    e894:	b939      	cbnz	r1, e8a6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
    e896:	f010 0f01 	tst.w	r0, #1
    e89a:	d102      	bne.n	e8a2 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
    e89c:	f7f2 fc18 	bl	10d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    e8a0:	b108      	cbz	r0, e8a6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
    e8a2:	2001      	movs	r0, #1
    e8a4:	bd10      	pop	{r4, pc}
    e8a6:	2000      	movs	r0, #0
    e8a8:	bd10      	pop	{r4, pc}

0000e8aa <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e8aa:	7880      	ldrb	r0, [r0, #2]
    e8ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
    e8b0:	4770      	bx	lr

0000e8b2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e8b2:	7880      	ldrb	r0, [r0, #2]
    e8b4:	f000 0001 	and.w	r0, r0, #1
    e8b8:	4770      	bx	lr

0000e8ba <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    e8ba:	8840      	ldrh	r0, [r0, #2]
    e8bc:	2809      	cmp	r0, #9
    e8be:	bf0c      	ite	eq
    e8c0:	2001      	moveq	r0, #1
    e8c2:	2000      	movne	r0, #0
    e8c4:	4770      	bx	lr

0000e8c6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e8c6:	7880      	ldrb	r0, [r0, #2]
    e8c8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e8cc:	4770      	bx	lr

0000e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e8ce:	7880      	ldrb	r0, [r0, #2]
    e8d0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e8d4:	4770      	bx	lr

0000e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e8d6:	7880      	ldrb	r0, [r0, #2]
    e8d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e8dc:	4770      	bx	lr

0000e8de <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e8de:	f990 0010 	ldrsb.w	r0, [r0, #16]
    e8e2:	4770      	bx	lr

0000e8e4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e8e4:	7800      	ldrb	r0, [r0, #0]
    e8e6:	28ff      	cmp	r0, #255	; 0xff
    e8e8:	bf14      	ite	ne
    e8ea:	2001      	movne	r0, #1
    e8ec:	2000      	moveq	r0, #0
    e8ee:	4770      	bx	lr

0000e8f0 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e8f0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    e8f4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    e8f8:	4770      	bx	lr

0000e8fa <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e8fa:	680a      	ldr	r2, [r1, #0]
    e8fc:	f8c0 2013 	str.w	r2, [r0, #19]
    e900:	8889      	ldrh	r1, [r1, #4]
    e902:	f8a0 1017 	strh.w	r1, [r0, #23]
    e906:	2101      	movs	r1, #1
    e908:	7641      	strb	r1, [r0, #25]
    e90a:	4770      	bx	lr

0000e90c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e90c:	7b00      	ldrb	r0, [r0, #12]
    e90e:	4770      	bx	lr

0000e910 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e910:	7940      	ldrb	r0, [r0, #5]
    e912:	4770      	bx	lr

0000e914 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e914:	6201      	str	r1, [r0, #32]
    e916:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    e91a:	724a      	strb	r2, [r1, #9]
    e91c:	f8d0 2069 	ldr.w	r2, [r0, #105]	; 0x69
    e920:	f8c1 200a 	str.w	r2, [r1, #10]
    e924:	f8b0 006d 	ldrh.w	r0, [r0, #109]	; 0x6d
    e928:	81c8      	strh	r0, [r1, #14]
    e92a:	4770      	bx	lr

0000e92c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e92c:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    e930:	4770      	bx	lr

0000e932 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e932:	7c40      	ldrb	r0, [r0, #17]
    e934:	2800      	cmp	r0, #0
    e936:	bf18      	it	ne
    e938:	2001      	movne	r0, #1
    e93a:	4770      	bx	lr
    e93c:	2101      	movs	r1, #1
    e93e:	f7f4 b861 	b.w	2a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
    e942:	2101      	movs	r1, #1
    e944:	f7f4 b85e 	b.w	2a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
    e948:	b510      	push	{r4, lr}
    e94a:	2200      	movs	r2, #0
    e94c:	704a      	strb	r2, [r1, #1]
    e94e:	2218      	movs	r2, #24
    e950:	700a      	strb	r2, [r1, #0]
    e952:	f8d0 200a 	ldr.w	r2, [r0, #10]
    e956:	604a      	str	r2, [r1, #4]
    e958:	89c2      	ldrh	r2, [r0, #14]
    e95a:	810a      	strh	r2, [r1, #8]
    e95c:	790a      	ldrb	r2, [r1, #4]
    e95e:	38b0      	subs	r0, #176	; 0xb0
    e960:	2a00      	cmp	r2, #0
    e962:	bf08      	it	eq
    e964:	bd10      	popeq	{r4, pc}
    e966:	7880      	ldrb	r0, [r0, #2]
    e968:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e96c:	2800      	cmp	r0, #0
    e96e:	bf18      	it	ne
    e970:	bd10      	popne	{r4, pc}
    e972:	88cc      	ldrh	r4, [r1, #6]
    e974:	2101      	movs	r1, #1
    e976:	4620      	mov	r0, r4
    e978:	f7ff f902 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e97c:	2800      	cmp	r0, #0
    e97e:	bf08      	it	eq
    e980:	bd10      	popeq	{r4, pc}
    e982:	8800      	ldrh	r0, [r0, #0]
    e984:	f7f2 fd48 	bl	1418 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e988:	2101      	movs	r1, #1
    e98a:	4620      	mov	r0, r4
    e98c:	f7f2 f93e 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e990:	2800      	cmp	r0, #0
    e992:	bf08      	it	eq
    e994:	bd10      	popeq	{r4, pc}
    e996:	f240 218f 	movw	r1, #655	; 0x28f
    e99a:	202d      	movs	r0, #45	; 0x2d
    e99c:	f7f1 fe32 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a0:	b510      	push	{r4, lr}
    e9a2:	460c      	mov	r4, r1
    e9a4:	2100      	movs	r1, #0
    e9a6:	7061      	strb	r1, [r4, #1]
    e9a8:	2115      	movs	r1, #21
    e9aa:	7021      	strb	r1, [r4, #0]
    e9ac:	f100 0109 	add.w	r1, r0, #9
    e9b0:	2221      	movs	r2, #33	; 0x21
    e9b2:	1d20      	adds	r0, r4, #4
    e9b4:	f001 fd79 	bl	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e9b8:	2001      	movs	r0, #1
    e9ba:	71e0      	strb	r0, [r4, #7]
    e9bc:	7920      	ldrb	r0, [r4, #4]
    e9be:	2800      	cmp	r0, #0
    e9c0:	bf08      	it	eq
    e9c2:	bd10      	popeq	{r4, pc}
    e9c4:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    e9c8:	2101      	movs	r1, #1
    e9ca:	4620      	mov	r0, r4
    e9cc:	f7ff f8d8 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e9d0:	2800      	cmp	r0, #0
    e9d2:	bf08      	it	eq
    e9d4:	bd10      	popeq	{r4, pc}
    e9d6:	8800      	ldrh	r0, [r0, #0]
    e9d8:	f7f2 fd1e 	bl	1418 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e9dc:	2101      	movs	r1, #1
    e9de:	4620      	mov	r0, r4
    e9e0:	f7f2 f914 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e9e4:	2800      	cmp	r0, #0
    e9e6:	bf08      	it	eq
    e9e8:	bd10      	popeq	{r4, pc}
    e9ea:	f44f 7114 	mov.w	r1, #592	; 0x250
    e9ee:	202d      	movs	r0, #45	; 0x2d
    e9f0:	f7f1 fe08 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9f4:	460b      	mov	r3, r1
    e9f6:	2100      	movs	r1, #0
    e9f8:	7059      	strb	r1, [r3, #1]
    e9fa:	212f      	movs	r1, #47	; 0x2f
    e9fc:	7019      	strb	r1, [r3, #0]
    e9fe:	2222      	movs	r2, #34	; 0x22
    ea00:	f100 0109 	add.w	r1, r0, #9
    ea04:	1d18      	adds	r0, r3, #4
    ea06:	f001 bd50 	b.w	104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea0a:	2200      	movs	r2, #0
    ea0c:	704a      	strb	r2, [r1, #1]
    ea0e:	222a      	movs	r2, #42	; 0x2a
    ea10:	700a      	strb	r2, [r1, #0]
    ea12:	f8d0 2009 	ldr.w	r2, [r0, #9]
    ea16:	604a      	str	r2, [r1, #4]
    ea18:	f8d0 200d 	ldr.w	r2, [r0, #13]
    ea1c:	608a      	str	r2, [r1, #8]
    ea1e:	7c40      	ldrb	r0, [r0, #17]
    ea20:	7308      	strb	r0, [r1, #12]
    ea22:	4770      	bx	lr

0000ea24 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ea24:	b510      	push	{r4, lr}
    ea26:	7001      	strb	r1, [r0, #0]
    ea28:	7042      	strb	r2, [r0, #1]
    ea2a:	7880      	ldrb	r0, [r0, #2]
    ea2c:	f3c0 0380 	ubfx	r3, r0, #2, #1
    ea30:	f3c0 0c40 	ubfx	ip, r0, #1, #1
    ea34:	4463      	add	r3, ip
    ea36:	f000 0001 	and.w	r0, r0, #1
    ea3a:	4418      	add	r0, r3
    ea3c:	fb10 f001 	smulbb	r0, r0, r1
    ea40:	fb10 f002 	smulbb	r0, r0, r2
    ea44:	28ff      	cmp	r0, #255	; 0xff
    ea46:	bf38      	it	cc
    ea48:	bd10      	popcc	{r4, pc}
    ea4a:	215c      	movs	r1, #92	; 0x5c
    ea4c:	202e      	movs	r0, #46	; 0x2e
    ea4e:	f7f1 fdd9 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ea52 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ea52:	7881      	ldrb	r1, [r0, #2]
    ea54:	f3c1 0280 	ubfx	r2, r1, #2, #1
    ea58:	f3c1 0340 	ubfx	r3, r1, #1, #1
    ea5c:	441a      	add	r2, r3
    ea5e:	f001 0101 	and.w	r1, r1, #1
    ea62:	4411      	add	r1, r2
    ea64:	7842      	ldrb	r2, [r0, #1]
    ea66:	7800      	ldrb	r0, [r0, #0]
    ea68:	fb12 f000 	smulbb	r0, r2, r0
    ea6c:	4348      	muls	r0, r1
    ea6e:	b2c0      	uxtb	r0, r0
    ea70:	4770      	bx	lr

0000ea72 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ea72:	7882      	ldrb	r2, [r0, #2]
    ea74:	2100      	movs	r1, #0
    ea76:	f012 0f01 	tst.w	r2, #1
    ea7a:	d005      	beq.n	ea88 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
    ea7c:	78c3      	ldrb	r3, [r0, #3]
    ea7e:	f013 0f01 	tst.w	r3, #1
    ea82:	bf08      	it	eq
    ea84:	2101      	moveq	r1, #1
    ea86:	d010      	beq.n	eaaa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
    ea88:	f012 0f02 	tst.w	r2, #2
    ea8c:	d005      	beq.n	ea9a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
    ea8e:	78c3      	ldrb	r3, [r0, #3]
    ea90:	f013 0f02 	tst.w	r3, #2
    ea94:	bf08      	it	eq
    ea96:	2102      	moveq	r1, #2
    ea98:	d007      	beq.n	eaaa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
    ea9a:	f012 0f04 	tst.w	r2, #4
    ea9e:	d004      	beq.n	eaaa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
    eaa0:	78c3      	ldrb	r3, [r0, #3]
    eaa2:	f013 0f04 	tst.w	r3, #4
    eaa6:	bf08      	it	eq
    eaa8:	2104      	moveq	r1, #4
    eaaa:	7943      	ldrb	r3, [r0, #5]
    eaac:	1c5b      	adds	r3, r3, #1
    eaae:	b2db      	uxtb	r3, r3
    eab0:	7143      	strb	r3, [r0, #5]
    eab2:	f890 c001 	ldrb.w	ip, [r0, #1]
    eab6:	4563      	cmp	r3, ip
    eab8:	d10d      	bne.n	ead6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
    eaba:	2300      	movs	r3, #0
    eabc:	7143      	strb	r3, [r0, #5]
    eabe:	f890 c003 	ldrb.w	ip, [r0, #3]
    eac2:	ea4c 0c01 	orr.w	ip, ip, r1
    eac6:	f880 c003 	strb.w	ip, [r0, #3]
    eaca:	4594      	cmp	ip, r2
    eacc:	d103      	bne.n	ead6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
    eace:	70c3      	strb	r3, [r0, #3]
    ead0:	7902      	ldrb	r2, [r0, #4]
    ead2:	1c52      	adds	r2, r2, #1
    ead4:	7102      	strb	r2, [r0, #4]
    ead6:	2901      	cmp	r1, #1
    ead8:	bf04      	itt	eq
    eada:	2025      	moveq	r0, #37	; 0x25
    eadc:	4770      	bxeq	lr
    eade:	2902      	cmp	r1, #2
    eae0:	bf04      	itt	eq
    eae2:	2026      	moveq	r0, #38	; 0x26
    eae4:	4770      	bxeq	lr
    eae6:	2904      	cmp	r1, #4
    eae8:	bf04      	itt	eq
    eaea:	2027      	moveq	r0, #39	; 0x27
    eaec:	4770      	bxeq	lr
    eaee:	b510      	push	{r4, lr}
    eaf0:	2139      	movs	r1, #57	; 0x39
    eaf2:	202e      	movs	r0, #46	; 0x2e
    eaf4:	f7f1 fd86 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eaf8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    eaf8:	7081      	strb	r1, [r0, #2]
    eafa:	4770      	bx	lr

0000eafc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    eafc:	b410      	push	{r4}
    eafe:	7881      	ldrb	r1, [r0, #2]
    eb00:	f3c1 0280 	ubfx	r2, r1, #2, #1
    eb04:	f3c1 0340 	ubfx	r3, r1, #1, #1
    eb08:	441a      	add	r2, r3
    eb0a:	f001 0101 	and.w	r1, r1, #1
    eb0e:	7843      	ldrb	r3, [r0, #1]
    eb10:	4411      	add	r1, r2
    eb12:	fb13 f201 	smulbb	r2, r3, r1
    eb16:	78c1      	ldrb	r1, [r0, #3]
    eb18:	f3c1 0c80 	ubfx	ip, r1, #2, #1
    eb1c:	f3c1 0440 	ubfx	r4, r1, #1, #1
    eb20:	44a4      	add	ip, r4
    eb22:	f001 0101 	and.w	r1, r1, #1
    eb26:	4461      	add	r1, ip
    eb28:	f890 c005 	ldrb.w	ip, [r0, #5]
    eb2c:	fb11 c103 	smlabb	r1, r1, r3, ip
    eb30:	7803      	ldrb	r3, [r0, #0]
    eb32:	7900      	ldrb	r0, [r0, #4]
    eb34:	1a18      	subs	r0, r3, r0
    eb36:	fb10 f002 	smulbb	r0, r0, r2
    eb3a:	1a40      	subs	r0, r0, r1
    eb3c:	bc10      	pop	{r4}
    eb3e:	b2c0      	uxtb	r0, r0
    eb40:	4770      	bx	lr

0000eb42 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    eb42:	b510      	push	{r4, lr}
    eb44:	4604      	mov	r4, r0
    eb46:	f001 faf0 	bl	1012a <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    eb4a:	2001      	movs	r0, #1
    eb4c:	7060      	strb	r0, [r4, #1]
    eb4e:	7020      	strb	r0, [r4, #0]
    eb50:	bd10      	pop	{r4, pc}

0000eb52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    eb52:	2100      	movs	r1, #0
    eb54:	70c1      	strb	r1, [r0, #3]
    eb56:	7141      	strb	r1, [r0, #5]
    eb58:	7101      	strb	r1, [r0, #4]
    eb5a:	4770      	bx	lr

0000eb5c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    eb5c:	f240 315a 	movw	r1, #858	; 0x35a
    eb60:	4348      	muls	r0, r1
    eb62:	4770      	bx	lr

0000eb64 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    eb64:	f240 20ef 	movw	r0, #751	; 0x2ef
    eb68:	4770      	bx	lr
    eb6a:	020e      	.short	0x020e
    eb6c:	0630041c 	.word	0x0630041c
    eb70:	035a0c60 	.word	0x035a0c60
    eb74:	05c506b4 	.word	0x05c506b4
    eb78:	12250bf5 	.word	0x12250bf5
    eb7c:	03b101a3 	.word	0x03b101a3
    eb80:	02ef05bf 	.word	0x02ef05bf
    eb84:	09a30649 	.word	0x09a30649

0000eb88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    eb88:	b510      	push	{r4, lr}
    eb8a:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    eb8e:	2900      	cmp	r1, #0
    eb90:	bf1c      	itt	ne
    eb92:	2000      	movne	r0, #0
    eb94:	bd10      	popne	{r4, pc}
    eb96:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    eb9a:	2900      	cmp	r1, #0
    eb9c:	bf1c      	itt	ne
    eb9e:	e9d0 1247 	ldrdne	r1, r2, [r0, #284]	; 0x11c
    eba2:	428a      	cmpne	r2, r1
    eba4:	bf9c      	itt	ls
    eba6:	2001      	movls	r0, #1
    eba8:	bd10      	popls	{r4, pc}
    ebaa:	f7f3 fedb 	bl	2964 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ebae:	2000      	movs	r0, #0
    ebb0:	bd10      	pop	{r4, pc}

0000ebb2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ebb2:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebb4:	b083      	sub	sp, #12
    ebb6:	2500      	movs	r5, #0
    ebb8:	b131      	cbz	r1, ebc8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x16>
    ebba:	2901      	cmp	r1, #1
    ebbc:	d074      	beq.n	eca8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf6>
    ebbe:	f240 717a 	movw	r1, #1914	; 0x77a
    ebc2:	2030      	movs	r0, #48	; 0x30
    ebc4:	f7f1 fd1e 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebc8:	4604      	mov	r4, r0
    ebca:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
    ebcc:	2600      	movs	r6, #0
    ebce:	b130      	cbz	r0, ebde <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x2c>
    ebd0:	f7f3 fbc2 	bl	2358 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    ebd4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    ebd6:	fbb0 f2f1 	udiv	r2, r0, r1
    ebda:	fb01 0612 	mls	r6, r1, r2, r0
    ebde:	4620      	mov	r0, r4
    ebe0:	f7ff fe0b 	bl	e7fa <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ebe4:	e9d4 2150 	ldrd	r2, r1, [r4, #320]	; 0x140
    ebe8:	4430      	add	r0, r6
    ebea:	1880      	adds	r0, r0, r2
    ebec:	4169      	adcs	r1, r5
    ebee:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
    ebf2:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    ebf6:	2001      	movs	r0, #1
    ebf8:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    ebfc:	2002      	movs	r0, #2
    ebfe:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
    ec02:	4620      	mov	r0, r4
    ec04:	f7ff fe63 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ec08:	2800      	cmp	r0, #0
    ec0a:	bf08      	it	eq
    ec0c:	2661      	moveq	r6, #97	; 0x61
    ec0e:	d024      	beq.n	ec5a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xa8>
    ec10:	4620      	mov	r0, r4
    ec12:	f7ff fe4e 	bl	e8b2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ec16:	b930      	cbnz	r0, ec26 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x74>
    ec18:	4620      	mov	r0, r4
    ec1a:	f7ff fe5c 	bl	e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ec1e:	2800      	cmp	r0, #0
    ec20:	bf08      	it	eq
    ec22:	2650      	moveq	r6, #80	; 0x50
    ec24:	d000      	beq.n	ec28 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x76>
    ec26:	2655      	movs	r6, #85	; 0x55
    ec28:	4668      	mov	r0, sp
    ec2a:	f7fd ff3d 	bl	caa8 <mpsl_fem_pa_is_configured>
    ec2e:	f89d 0000 	ldrb.w	r0, [sp]
    ec32:	2800      	cmp	r0, #0
    ec34:	bf14      	ite	ne
    ec36:	2701      	movne	r7, #1
    ec38:	2700      	moveq	r7, #0
    ec3a:	a801      	add	r0, sp, #4
    ec3c:	f7fd ff1c 	bl	ca78 <mpsl_fem_lna_is_configured>
    ec40:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ec44:	2800      	cmp	r0, #0
    ec46:	bf18      	it	ne
    ec48:	2001      	movne	r0, #1
    ec4a:	4338      	orrs	r0, r7
    ec4c:	bf18      	it	ne
    ec4e:	360a      	addne	r6, #10
    ec50:	f7fd fe70 	bl	c934 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    ec54:	2800      	cmp	r0, #0
    ec56:	bf18      	it	ne
    ec58:	3618      	addne	r6, #24
    ec5a:	f8a4 6138 	strh.w	r6, [r4, #312]	; 0x138
    ec5e:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
    ec62:	bb00      	cbnz	r0, eca6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf4>
    ec64:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
    ec68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ec6c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    ec70:	4051      	eors	r1, r2
    ec72:	ea71 0000 	orns	r0, r1, r0
    ec76:	d018      	beq.n	ecaa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
    ec78:	4620      	mov	r0, r4
    ec7a:	4629      	mov	r1, r5
    ec7c:	f7f3 fc64 	bl	2548 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ec80:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    ec84:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    ec88:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    ec8c:	1880      	adds	r0, r0, r2
    ec8e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    ec92:	4169      	adcs	r1, r5
    ec94:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    ec98:	1a18      	subs	r0, r3, r0
    ec9a:	eb72 0001 	sbcs.w	r0, r2, r1
    ec9e:	d504      	bpl.n	ecaa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
    eca0:	4620      	mov	r0, r4
    eca2:	f7f3 fe5f 	bl	2964 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eca6:	e007      	b.n	ecb8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x106>
    eca8:	e014      	b.n	ecd4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x122>
    ecaa:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    ecae:	f504 7198 	add.w	r1, r4, #304	; 0x130
    ecb2:	f7fb fbdf 	bl	a474 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ecb6:	b140      	cbz	r0, ecca <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x118>
    ecb8:	f8a4 5148 	strh.w	r5, [r4, #328]	; 0x148
    ecbc:	f7f8 ff9a 	bl	7bf4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ecc0:	b003      	add	sp, #12
    ecc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ecc6:	f7fc b98b 	b.w	afe0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ecca:	f240 61d4 	movw	r1, #1748	; 0x6d4
    ecce:	2030      	movs	r0, #48	; 0x30
    ecd0:	f7f1 fc98 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecd4:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
    ecd8:	f7f8 ff8c 	bl	7bf4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ecdc:	b003      	add	sp, #12
    ecde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ece2:	f7fc b97d 	b.w	afe0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>

0000ece6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ece6:	b510      	push	{r4, lr}
    ece8:	4604      	mov	r4, r0
    ecea:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    ecee:	2800      	cmp	r0, #0
    ecf0:	bf08      	it	eq
    ecf2:	bd10      	popeq	{r4, pc}
    ecf4:	2001      	movs	r0, #1
    ecf6:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
    ecfa:	4601      	mov	r1, r0
    ecfc:	4620      	mov	r0, r4
    ecfe:	f7ff fe15 	bl	e92c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ed02:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    ed06:	b188      	cbz	r0, ed2c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x46>
    ed08:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    ed0c:	f7fb fed4 	bl	aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ed10:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    ed14:	f7fc f824 	bl	ad60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ed18:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    ed1c:	f7fb fffe 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed20:	2800      	cmp	r0, #0
    ed22:	bf1c      	itt	ne
    ed24:	2000      	movne	r0, #0
    ed26:	f884 0128 	strbne.w	r0, [r4, #296]	; 0x128
    ed2a:	d001      	beq.n	ed30 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x4a>
    ed2c:	2000      	movs	r0, #0
    ed2e:	bd10      	pop	{r4, pc}
    ed30:	f240 2105 	movw	r1, #517	; 0x205
    ed34:	2030      	movs	r0, #48	; 0x30
    ed36:	f7f1 fc65 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ed3a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ed3a:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    ed3e:	4770      	bx	lr

0000ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ed40:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    ed44:	4770      	bx	lr
    ed46:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed48:	b083      	sub	sp, #12
    ed4a:	0004      	movs	r4, r0
    ed4c:	d00a      	beq.n	ed64 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x24>
    ed4e:	2500      	movs	r5, #0
    ed50:	2909      	cmp	r1, #9
    ed52:	f080 80de 	bcs.w	ef12 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1d2>
    ed56:	e8df f001 	tbb	[pc, r1]
    ed5a:	1b09      	.short	0x1b09
    ed5c:	dc444949 	.word	0xdc444949
    ed60:	00d8bbd2 	.word	0x00d8bbd2
    ed64:	21cb      	movs	r1, #203	; 0xcb
    ed66:	2030      	movs	r0, #48	; 0x30
    ed68:	f7f1 fc4c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed6c:	4620      	mov	r0, r4
    ed6e:	f7f3 fdc9 	bl	2904 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ed72:	b120      	cbz	r0, ed7e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x3e>
    ed74:	f240 2175 	movw	r1, #629	; 0x275
    ed78:	2030      	movs	r0, #48	; 0x30
    ed7a:	f7f1 fc43 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed7e:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    ed82:	b003      	add	sp, #12
    ed84:	f2a0 101b 	subw	r0, r0, #283	; 0x11b
    ed88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ed8c:	f7fc ba42 	b.w	b214 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ed90:	4620      	mov	r0, r4
    ed92:	f7ff fd98 	bl	e8c6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ed96:	b9c0      	cbnz	r0, edca <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x8a>
    ed98:	4620      	mov	r0, r4
    ed9a:	2100      	movs	r1, #0
    ed9c:	f7f3 fbd4 	bl	2548 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    eda0:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    eda4:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    eda8:	42a8      	cmp	r0, r5
    edaa:	d20c      	bcs.n	edc6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x86>
    edac:	1a28      	subs	r0, r5, r0
    edae:	2103      	movs	r1, #3
    edb0:	f7fb f936 	bl	a020 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    edb4:	b138      	cbz	r0, edc6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x86>
    edb6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    edba:	b003      	add	sp, #12
    edbc:	4620      	mov	r0, r4
    edbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    edc2:	f7ff bd18 	b.w	e7f6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    edc6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    edca:	4620      	mov	r0, r4
    edcc:	f7f3 fdbc 	bl	2948 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    edd0:	2800      	cmp	r0, #0
    edd2:	bf04      	itt	eq
    edd4:	b003      	addeq	sp, #12
    edd6:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    edd8:	f240 21a9 	movw	r1, #681	; 0x2a9
    eddc:	2030      	movs	r0, #48	; 0x30
    edde:	f7f1 fc11 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede2:	b003      	add	sp, #12
    ede4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ede8:	f7f9 ba56 	b.w	8298 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    edec:	4620      	mov	r0, r4
    edee:	f7ff fd6e 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    edf2:	2800      	cmp	r0, #0
    edf4:	bf08      	it	eq
    edf6:	2661      	moveq	r6, #97	; 0x61
    edf8:	d024      	beq.n	ee44 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x104>
    edfa:	4620      	mov	r0, r4
    edfc:	f7ff fd59 	bl	e8b2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ee00:	b930      	cbnz	r0, ee10 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd0>
    ee02:	4620      	mov	r0, r4
    ee04:	f7ff fd67 	bl	e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ee08:	2800      	cmp	r0, #0
    ee0a:	bf08      	it	eq
    ee0c:	2650      	moveq	r6, #80	; 0x50
    ee0e:	d000      	beq.n	ee12 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd2>
    ee10:	2655      	movs	r6, #85	; 0x55
    ee12:	4668      	mov	r0, sp
    ee14:	f7fd fe48 	bl	caa8 <mpsl_fem_pa_is_configured>
    ee18:	f89d 0000 	ldrb.w	r0, [sp]
    ee1c:	2800      	cmp	r0, #0
    ee1e:	bf14      	ite	ne
    ee20:	2701      	movne	r7, #1
    ee22:	2700      	moveq	r7, #0
    ee24:	a801      	add	r0, sp, #4
    ee26:	f7fd fe27 	bl	ca78 <mpsl_fem_lna_is_configured>
    ee2a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ee2e:	2800      	cmp	r0, #0
    ee30:	bf18      	it	ne
    ee32:	2001      	movne	r0, #1
    ee34:	4338      	orrs	r0, r7
    ee36:	bf18      	it	ne
    ee38:	360a      	addne	r6, #10
    ee3a:	f7fd fd7b 	bl	c934 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    ee3e:	2800      	cmp	r0, #0
    ee40:	bf18      	it	ne
    ee42:	3618      	addne	r6, #24
    ee44:	f8a4 6138 	strh.w	r6, [r4, #312]	; 0x138
    ee48:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    ee4c:	2601      	movs	r6, #1
    ee4e:	f884 613b 	strb.w	r6, [r4, #315]	; 0x13b
    ee52:	2100      	movs	r1, #0
    ee54:	f504 7098 	add.w	r0, r4, #304	; 0x130
    ee58:	f7ff f96a 	bl	e130 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ee5c:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    ee60:	1c40      	adds	r0, r0, #1
    ee62:	280a      	cmp	r0, #10
    ee64:	bf38      	it	cc
    ee66:	f8a4 0148 	strhcc.w	r0, [r4, #328]	; 0x148
    ee6a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    ee6e:	b138      	cbz	r0, ee80 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x140>
    ee70:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    ee74:	1c40      	adds	r0, r0, #1
    ee76:	280a      	cmp	r0, #10
    ee78:	bf28      	it	cs
    ee7a:	f884 613a 	strbcs.w	r6, [r4, #314]	; 0x13a
    ee7e:	d202      	bcs.n	ee86 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x146>
    ee80:	2002      	movs	r0, #2
    ee82:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
    ee86:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
    ee8a:	bb08      	cbnz	r0, eed0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x190>
    ee8c:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
    ee90:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ee94:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    ee98:	4051      	eors	r1, r2
    ee9a:	ea71 0000 	orns	r0, r1, r0
    ee9e:	d01f      	beq.n	eee0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1a0>
    eea0:	4620      	mov	r0, r4
    eea2:	4629      	mov	r1, r5
    eea4:	f7f3 fb50 	bl	2548 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    eea8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    eeac:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    eeb0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    eeb4:	1840      	adds	r0, r0, r1
    eeb6:	eb45 0102 	adc.w	r1, r5, r2
    eeba:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    eebe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
    eec2:	1a10      	subs	r0, r2, r0
    eec4:	eb73 0001 	sbcs.w	r0, r3, r1
    eec8:	d50a      	bpl.n	eee0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1a0>
    eeca:	4620      	mov	r0, r4
    eecc:	f7f3 fd4a 	bl	2964 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eed0:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    eed4:	f7fb ff22 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eed8:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
    eedc:	b003      	add	sp, #12
    eede:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eee0:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    eee4:	f504 7198 	add.w	r1, r4, #304	; 0x130
    eee8:	f7fb fac4 	bl	a474 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eeec:	2800      	cmp	r0, #0
    eeee:	bf1c      	itt	ne
    eef0:	b003      	addne	sp, #12
    eef2:	bdf0      	popne	{r4, r5, r6, r7, pc}
    eef4:	f240 618e 	movw	r1, #1678	; 0x68e
    eef8:	2030      	movs	r0, #48	; 0x30
    eefa:	f7f1 fb83 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eefe:	b003      	add	sp, #12
    ef00:	4620      	mov	r0, r4
    ef02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ef06:	f7ff bc76 	b.w	e7f6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ef0a:	21eb      	movs	r1, #235	; 0xeb
    ef0c:	2030      	movs	r0, #48	; 0x30
    ef0e:	f7f1 fb79 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef12:	21ef      	movs	r1, #239	; 0xef
    ef14:	2030      	movs	r0, #48	; 0x30
    ef16:	f7f1 fb75 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef1a <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ef1a:	f7f1 bfa9 	b.w	e70 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ef1e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    ef1e:	f7f6 b847 	b.w	4fb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    ef22:	f240 31a7 	movw	r1, #935	; 0x3a7
    ef26:	2032      	movs	r0, #50	; 0x32
    ef28:	f7f1 fb6c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef2c:	f7f6 b840 	b.w	4fb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>

0000ef30 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>:
    ef30:	b500      	push	{lr}
    ef32:	b083      	sub	sp, #12
    ef34:	f7f2 f8de 	bl	10f4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ef38:	aa01      	add	r2, sp, #4
    ef3a:	4669      	mov	r1, sp
    ef3c:	f7fe fcf9 	bl	d932 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    ef40:	9800      	ldr	r0, [sp, #0]
    ef42:	f7fe fcb4 	bl	d8ae <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ef46:	7cc0      	ldrb	r0, [r0, #19]
    ef48:	28ff      	cmp	r0, #255	; 0xff
    ef4a:	bf14      	ite	ne
    ef4c:	2001      	movne	r0, #1
    ef4e:	2000      	moveq	r0, #0
    ef50:	b003      	add	sp, #12
    ef52:	bd00      	pop	{pc}

0000ef54 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>:
    ef54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef58:	4606      	mov	r6, r0
    ef5a:	78c0      	ldrb	r0, [r0, #3]
    ef5c:	2405      	movs	r4, #5
    ef5e:	460d      	mov	r5, r1
    ef60:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    ef64:	f04f 0700 	mov.w	r7, #0
    ef68:	bf1c      	itt	ne
    ef6a:	4630      	movne	r0, r6
    ef6c:	f116 0804 	addsne.w	r8, r6, #4
    ef70:	d069      	beq.n	f046 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xf2>
    ef72:	f7ff fa11 	bl	e398 <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    ef76:	7468      	strb	r0, [r5, #17]
    ef78:	4630      	mov	r0, r6
    ef7a:	f7ff fa0a 	bl	e392 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    ef7e:	74a8      	strb	r0, [r5, #18]
    ef80:	f898 0000 	ldrb.w	r0, [r8]
    ef84:	7068      	strb	r0, [r5, #1]
    ef86:	78f0      	ldrb	r0, [r6, #3]
    ef88:	0980      	lsrs	r0, r0, #6
    ef8a:	7028      	strb	r0, [r5, #0]
    ef8c:	f898 0000 	ldrb.w	r0, [r8]
    ef90:	f010 0f01 	tst.w	r0, #1
    ef94:	bf08      	it	eq
    ef96:	606f      	streq	r7, [r5, #4]
    ef98:	d002      	beq.n	efa0 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x4c>
    ef9a:	1d70      	adds	r0, r6, #5
    ef9c:	240b      	movs	r4, #11
    ef9e:	6068      	str	r0, [r5, #4]
    efa0:	f898 0000 	ldrb.w	r0, [r8]
    efa4:	f010 0f02 	tst.w	r0, #2
    efa8:	bf08      	it	eq
    efaa:	60af      	streq	r7, [r5, #8]
    efac:	d002      	beq.n	efb4 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x60>
    efae:	1930      	adds	r0, r6, r4
    efb0:	1da4      	adds	r4, r4, #6
    efb2:	60a8      	str	r0, [r5, #8]
    efb4:	f898 0000 	ldrb.w	r0, [r8]
    efb8:	f010 0f04 	tst.w	r0, #4
    efbc:	bf18      	it	ne
    efbe:	1c64      	addne	r4, r4, #1
    efc0:	f010 0f08 	tst.w	r0, #8
    efc4:	bf08      	it	eq
    efc6:	616f      	streq	r7, [r5, #20]
    efc8:	d002      	beq.n	efd0 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x7c>
    efca:	1930      	adds	r0, r6, r4
    efcc:	1ca4      	adds	r4, r4, #2
    efce:	6168      	str	r0, [r5, #20]
    efd0:	f898 0000 	ldrb.w	r0, [r8]
    efd4:	f010 0f10 	tst.w	r0, #16
    efd8:	bf08      	it	eq
    efda:	61af      	streq	r7, [r5, #24]
    efdc:	d002      	beq.n	efe4 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x90>
    efde:	1930      	adds	r0, r6, r4
    efe0:	1ce4      	adds	r4, r4, #3
    efe2:	61a8      	str	r0, [r5, #24]
    efe4:	f898 0000 	ldrb.w	r0, [r8]
    efe8:	f010 0f20 	tst.w	r0, #32
    efec:	bf08      	it	eq
    efee:	61ef      	streq	r7, [r5, #28]
    eff0:	d004      	beq.n	effc <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xa8>
    eff2:	1930      	adds	r0, r6, r4
    eff4:	61e8      	str	r0, [r5, #28]
    eff6:	f104 0012 	add.w	r0, r4, #18
    effa:	b2c4      	uxtb	r4, r0
    effc:	f898 0000 	ldrb.w	r0, [r8]
    f000:	f010 0f40 	tst.w	r0, #64	; 0x40
    f004:	bf08      	it	eq
    f006:	622f      	streq	r7, [r5, #32]
    f008:	d003      	beq.n	f012 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xbe>
    f00a:	1930      	adds	r0, r6, r4
    f00c:	6228      	str	r0, [r5, #32]
    f00e:	1c60      	adds	r0, r4, #1
    f010:	b2c4      	uxtb	r4, r0
    f012:	78f0      	ldrb	r0, [r6, #3]
    f014:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    f018:	1b08      	subs	r0, r1, r4
    f01a:	1d00      	adds	r0, r0, #4
    f01c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    f020:	bf1a      	itte	ne
    f022:	1932      	addne	r2, r6, r4
    f024:	626a      	strne	r2, [r5, #36]	; 0x24
    f026:	626f      	streq	r7, [r5, #36]	; 0x24
    f028:	7872      	ldrb	r2, [r6, #1]
    f02a:	1a51      	subs	r1, r2, r1
    f02c:	1e49      	subs	r1, r1, #1
    f02e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    f032:	7429      	strb	r1, [r5, #16]
    f034:	bf04      	itt	eq
    f036:	60ef      	streq	r7, [r5, #12]
    f038:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f03c:	4420      	add	r0, r4
    f03e:	4430      	add	r0, r6
    f040:	60e8      	str	r0, [r5, #12]
    f042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f046:	602f      	str	r7, [r5, #0]
    f048:	606f      	str	r7, [r5, #4]
    f04a:	60af      	str	r7, [r5, #8]
    f04c:	60ef      	str	r7, [r5, #12]
    f04e:	612f      	str	r7, [r5, #16]
    f050:	616f      	str	r7, [r5, #20]
    f052:	61af      	str	r7, [r5, #24]
    f054:	61ef      	str	r7, [r5, #28]
    f056:	622f      	str	r7, [r5, #32]
    f058:	624f      	str	r7, [r1, #36]	; 0x24
    f05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f05e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f05e:	7802      	ldrb	r2, [r0, #0]
    f060:	f002 020f 	and.w	r2, r2, #15
    f064:	2a07      	cmp	r2, #7
    f066:	d001      	beq.n	f06c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xe>
    f068:	f7f6 bc04 	b.w	5874 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f06c:	f7ff bf72 	b.w	ef54 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>

0000f070 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    f070:	b530      	push	{r4, r5, lr}
    f072:	b083      	sub	sp, #12
    f074:	245e      	movs	r4, #94	; 0x5e
    f076:	f7fd fc5d 	bl	c934 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    f07a:	2800      	cmp	r0, #0
    f07c:	bf18      	it	ne
    f07e:	2476      	movne	r4, #118	; 0x76
    f080:	4668      	mov	r0, sp
    f082:	f7fd fd11 	bl	caa8 <mpsl_fem_pa_is_configured>
    f086:	f89d 0000 	ldrb.w	r0, [sp]
    f08a:	2800      	cmp	r0, #0
    f08c:	bf14      	ite	ne
    f08e:	2501      	movne	r5, #1
    f090:	2500      	moveq	r5, #0
    f092:	a801      	add	r0, sp, #4
    f094:	f7fd fcf0 	bl	ca78 <mpsl_fem_lna_is_configured>
    f098:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f09c:	2800      	cmp	r0, #0
    f09e:	bf18      	it	ne
    f0a0:	2001      	movne	r0, #1
    f0a2:	4328      	orrs	r0, r5
    f0a4:	bf18      	it	ne
    f0a6:	340a      	addne	r4, #10
    f0a8:	4620      	mov	r0, r4
    f0aa:	b003      	add	sp, #12
    f0ac:	bd30      	pop	{r4, r5, pc}

0000f0ae <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    f0ae:	b530      	push	{r4, r5, lr}
    f0b0:	b083      	sub	sp, #12
    f0b2:	245e      	movs	r4, #94	; 0x5e
    f0b4:	f7fd fc3e 	bl	c934 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    f0b8:	2800      	cmp	r0, #0
    f0ba:	bf18      	it	ne
    f0bc:	2476      	movne	r4, #118	; 0x76
    f0be:	4668      	mov	r0, sp
    f0c0:	f7fd fcf2 	bl	caa8 <mpsl_fem_pa_is_configured>
    f0c4:	f89d 0000 	ldrb.w	r0, [sp]
    f0c8:	2800      	cmp	r0, #0
    f0ca:	bf14      	ite	ne
    f0cc:	2501      	movne	r5, #1
    f0ce:	2500      	moveq	r5, #0
    f0d0:	a801      	add	r0, sp, #4
    f0d2:	f7fd fcd1 	bl	ca78 <mpsl_fem_lna_is_configured>
    f0d6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f0da:	2800      	cmp	r0, #0
    f0dc:	bf18      	it	ne
    f0de:	2001      	movne	r0, #1
    f0e0:	4328      	orrs	r0, r5
    f0e2:	bf18      	it	ne
    f0e4:	340a      	addne	r4, #10
    f0e6:	f104 006b 	add.w	r0, r4, #107	; 0x6b
    f0ea:	b003      	add	sp, #12
    f0ec:	bd30      	pop	{r4, r5, pc}

0000f0ee <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f0ee:	f7f1 bebf 	b.w	e70 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f0f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f0f2:	b510      	push	{r4, lr}
    f0f4:	e9dd c302 	ldrd	ip, r3, [sp, #8]
    f0f8:	ebb0 000c 	subs.w	r0, r0, ip
    f0fc:	eb61 0303 	sbc.w	r3, r1, r3
    f100:	f04f 3cff 	mov.w	ip, #4294967295
    f104:	f1d0 4100 	rsbs	r1, r0, #2147483648	; 0x80000000
    f108:	eb7c 0103 	sbcs.w	r1, ip, r3
    f10c:	da05      	bge.n	f11a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f10e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f112:	1a41      	subs	r1, r0, r1
    f114:	f173 0100 	sbcs.w	r1, r3, #0
    f118:	db03      	blt.n	f122 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x30>
    f11a:	21b0      	movs	r1, #176	; 0xb0
    f11c:	2037      	movs	r0, #55	; 0x37
    f11e:	f7f1 fa71 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f122:	2b00      	cmp	r3, #0
    f124:	bfb8      	it	lt
    f126:	f1d0 0000 	rsbslt	r0, r0, #0
    f12a:	fbb0 f1f2 	udiv	r1, r0, r2
    f12e:	fb02 0011 	mls	r0, r2, r1, r0
    f132:	2b00      	cmp	r3, #0
    f134:	bfa8      	it	ge
    f136:	bd10      	popge	{r4, pc}
    f138:	2800      	cmp	r0, #0
    f13a:	bf18      	it	ne
    f13c:	1a10      	subne	r0, r2, r0
    f13e:	bd10      	pop	{r4, pc}

0000f140 <sym_ML7KHO26ID5IAQG4EHQEFQ7YY4WWA5LXC5AE3GI>:
    f140:	b570      	push	{r4, r5, r6, lr}
    f142:	460c      	mov	r4, r1
    f144:	8f08      	ldrh	r0, [r1, #56]	; 0x38
    f146:	2101      	movs	r1, #1
    f148:	f7fe fd1a 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f14c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    f150:	b930      	cbnz	r0, f160 <sym_ML7KHO26ID5IAQG4EHQEFQ7YY4WWA5LXC5AE3GI+0x20>
    f152:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    f154:	2100      	movs	r1, #0
    f156:	f7fe fd13 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f15a:	2800      	cmp	r0, #0
    f15c:	bf08      	it	eq
    f15e:	bd70      	popeq	{r4, r5, r6, pc}
    f160:	f8a0 5156 	strh.w	r5, [r0, #342]	; 0x156
    f164:	bd70      	pop	{r4, r5, r6, pc}

0000f166 <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ>:
    f166:	b510      	push	{r4, lr}
    f168:	7808      	ldrb	r0, [r1, #0]
    f16a:	460c      	mov	r4, r1
    f16c:	b128      	cbz	r0, f17a <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x14>
    f16e:	2801      	cmp	r0, #1
    f170:	d00c      	beq.n	f18c <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x26>
    f172:	2141      	movs	r1, #65	; 0x41
    f174:	2011      	movs	r0, #17
    f176:	f7f1 fa45 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f17a:	f104 0018 	add.w	r0, r4, #24
    f17e:	f000 ff55 	bl	1002c <sym_S65COPWIAFLT7QK4B3CGHSYTM4OO4NO3OW6UHHI>
    f182:	b160      	cbz	r0, f19e <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x38>
    f184:	2139      	movs	r1, #57	; 0x39
    f186:	2011      	movs	r0, #17
    f188:	f7f1 fa3c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f18c:	f104 0018 	add.w	r0, r4, #24
    f190:	f000 ff41 	bl	10016 <sym_LIFN2Y3GE7UOQ2L3AQIJRF3IQCD3MRRIZIOEAJY>
    f194:	b118      	cbz	r0, f19e <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x38>
    f196:	213d      	movs	r1, #61	; 0x3d
    f198:	2011      	movs	r0, #17
    f19a:	f7f1 fa33 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f19e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f1a0:	2800      	cmp	r0, #0
    f1a2:	bf08      	it	eq
    f1a4:	bd10      	popeq	{r4, pc}
    f1a6:	6801      	ldr	r1, [r0, #0]
    f1a8:	6621      	str	r1, [r4, #96]	; 0x60
    f1aa:	f830 0c83 	ldrh.w	r0, [r0, #-131]
    f1ae:	2108      	movs	r1, #8
    f1b0:	f7f1 fd2c 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f1b4:	b118      	cbz	r0, f1be <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x58>
    f1b6:	214b      	movs	r1, #75	; 0x4b
    f1b8:	2011      	movs	r0, #17
    f1ba:	f7f1 fa23 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1be:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f1c0:	2800      	cmp	r0, #0
    f1c2:	d1f0      	bne.n	f1a6 <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x40>
    f1c4:	bd10      	pop	{r4, pc}

0000f1c6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    f1c6:	b570      	push	{r4, r5, r6, lr}
    f1c8:	6844      	ldr	r4, [r0, #4]
    f1ca:	2217      	movs	r2, #23
    f1cc:	f504 75ac 	add.w	r5, r4, #344	; 0x158
    f1d0:	2100      	movs	r1, #0
    f1d2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    f1d6:	f001 f9e2 	bl	1059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f1da:	2000      	movs	r0, #0
    f1dc:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    f1e0:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    f1e4:	f8a5 0047 	strh.w	r0, [r5, #71]	; 0x47
    f1e8:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
    f1ec:	207f      	movs	r0, #127	; 0x7f
    f1ee:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    f1f2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
    f1f6:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    f1fa:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    f1fe:	f994 1072 	ldrsb.w	r1, [r4, #114]	; 0x72
    f202:	4620      	mov	r0, r4
    f204:	f000 f80a 	bl	f21c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    f208:	20ff      	movs	r0, #255	; 0xff
    f20a:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
    f20e:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    f212:	f884 009e 	strb.w	r0, [r4, #158]	; 0x9e
    f216:	f884 009f 	strb.w	r0, [r4, #159]	; 0x9f
    f21a:	bd70      	pop	{r4, r5, r6, pc}

0000f21c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f21e:	460e      	mov	r6, r1
    f220:	4604      	mov	r4, r0
    f222:	207f      	movs	r0, #127	; 0x7f
    f224:	2301      	movs	r3, #1
    f226:	f640 1288 	movw	r2, #2440	; 0x988
    f22a:	4669      	mov	r1, sp
    f22c:	f7fd fc42 	bl	cab4 <mpsl_fem_tx_power_split>
    f230:	4607      	mov	r7, r0
    f232:	2500      	movs	r5, #0
    f234:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f238:	2301      	movs	r3, #1
    f23a:	f640 1288 	movw	r2, #2440	; 0x988
    f23e:	4669      	mov	r1, sp
    f240:	f7fd fc38 	bl	cab4 <mpsl_fem_tx_power_split>
    f244:	4286      	cmp	r6, r0
    f246:	bf08      	it	eq
    f248:	2501      	moveq	r5, #1
    f24a:	42be      	cmp	r6, r7
    f24c:	bf08      	it	eq
    f24e:	f045 0502 	orreq.w	r5, r5, #2
    f252:	f7f8 f81d 	bl	7290 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f256:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    f25a:	2201      	movs	r2, #1
    f25c:	ea4c 6301 	orr.w	r3, ip, r1, lsl #24
    f260:	f013 0f01 	tst.w	r3, #1
    f264:	bf18      	it	ne
    f266:	2203      	movne	r2, #3
    f268:	0ac0      	lsrs	r0, r0, #11
    f26a:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
    f26e:	f010 0f01 	tst.w	r0, #1
    f272:	bf18      	it	ne
    f274:	f042 020c 	orrne.w	r2, r2, #12
    f278:	f012 0f01 	tst.w	r2, #1
    f27c:	bf1c      	itt	ne
    f27e:	f884 608d 	strbne.w	r6, [r4, #141]	; 0x8d
    f282:	f884 508c 	strbne.w	r5, [r4, #140]	; 0x8c
    f286:	f012 0f02 	tst.w	r2, #2
    f28a:	bf1c      	itt	ne
    f28c:	f884 608f 	strbne.w	r6, [r4, #143]	; 0x8f
    f290:	f884 508e 	strbne.w	r5, [r4, #142]	; 0x8e
    f294:	f012 0f04 	tst.w	r2, #4
    f298:	bf1c      	itt	ne
    f29a:	f884 6091 	strbne.w	r6, [r4, #145]	; 0x91
    f29e:	f884 5090 	strbne.w	r5, [r4, #144]	; 0x90
    f2a2:	f012 0f08 	tst.w	r2, #8
    f2a6:	bf1c      	itt	ne
    f2a8:	f884 6093 	strbne.w	r6, [r4, #147]	; 0x93
    f2ac:	f884 5092 	strbne.w	r5, [r4, #146]	; 0x92
    f2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2b2:	b118      	cbz	r0, f2bc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa0>
    f2b4:	2802      	cmp	r0, #2
    f2b6:	d001      	beq.n	f2bc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa0>
    f2b8:	2001      	movs	r0, #1
    f2ba:	4770      	bx	lr
    f2bc:	2000      	movs	r0, #0
    f2be:	4770      	bx	lr

0000f2c0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f2c0:	b510      	push	{r4, lr}
    f2c2:	4604      	mov	r4, r0
    f2c4:	f7f7 ff14 	bl	70f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>
    f2c8:	b108      	cbz	r0, f2ce <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f2ca:	200c      	movs	r0, #12
    f2cc:	bd10      	pop	{r4, pc}
    f2ce:	7820      	ldrb	r0, [r4, #0]
    f2d0:	b128      	cbz	r0, f2de <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
    f2d2:	2801      	cmp	r0, #1
    f2d4:	d003      	beq.n	f2de <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
    f2d6:	28ff      	cmp	r0, #255	; 0xff
    f2d8:	d00b      	beq.n	f2f2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
    f2da:	2012      	movs	r0, #18
    f2dc:	bd10      	pop	{r4, pc}
    f2de:	f7ff ffe8 	bl	f2b2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x96>
    f2e2:	1c61      	adds	r1, r4, #1
    f2e4:	f7f2 fa8a 	bl	17fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f2e8:	b108      	cbz	r0, f2ee <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
    f2ea:	2000      	movs	r0, #0
    f2ec:	bd10      	pop	{r4, pc}
    f2ee:	2007      	movs	r0, #7
    f2f0:	bd10      	pop	{r4, pc}
    f2f2:	2001      	movs	r0, #1
    f2f4:	f7f2 fac4 	bl	1880 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    f2f8:	e7f7      	b.n	f2ea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

0000f2fa <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f2fa:	b510      	push	{r4, lr}
    f2fc:	f7f7 fef8 	bl	70f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>
    f300:	b108      	cbz	r0, f306 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f302:	200c      	movs	r0, #12
    f304:	bd10      	pop	{r4, pc}
    f306:	f7f2 fac1 	bl	188c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f30a:	2000      	movs	r0, #0
    f30c:	bd10      	pop	{r4, pc}

0000f30e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f30e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f312:	4606      	mov	r6, r0
    f314:	f000 fba4 	bl	fa60 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f318:	2800      	cmp	r0, #0
    f31a:	d112      	bne.n	f342 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f31c:	8830      	ldrh	r0, [r6, #0]
    f31e:	2100      	movs	r1, #0
    f320:	f7fe fc2e 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f324:	0004      	movs	r4, r0
    f326:	d00e      	beq.n	f346 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f328:	f000 fd5e 	bl	fde8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x346>
    f32c:	b158      	cbz	r0, f346 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f32e:	f894 0334 	ldrb.w	r0, [r4, #820]	; 0x334
    f332:	f88d 0000 	strb.w	r0, [sp]
    f336:	9800      	ldr	r0, [sp, #0]
    f338:	9000      	str	r0, [sp, #0]
    f33a:	f89d 0000 	ldrb.w	r0, [sp]
    f33e:	b120      	cbz	r0, f34a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f340:	203a      	movs	r0, #58	; 0x3a
    f342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f346:	2002      	movs	r0, #2
    f348:	e7fb      	b.n	f342 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f34a:	f04f 0800 	mov.w	r8, #0
    f34e:	88b0      	ldrh	r0, [r6, #4]
    f350:	f7fe fecd 	bl	e0ee <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f354:	4605      	mov	r5, r0
    f356:	4601      	mov	r1, r0
    f358:	2005      	movs	r0, #5
    f35a:	f7fe ff1d 	bl	e198 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f35e:	4607      	mov	r7, r0
    f360:	4629      	mov	r1, r5
    f362:	2008      	movs	r0, #8
    f364:	f7fe ff18 	bl	e198 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f368:	42b8      	cmp	r0, r7
    f36a:	d301      	bcc.n	f370 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f36c:	42af      	cmp	r7, r5
    f36e:	d301      	bcc.n	f374 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f370:	2012      	movs	r0, #18
    f372:	e7e6      	b.n	f342 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f374:	f641 504c 	movw	r0, #7500	; 0x1d4c
    f378:	4285      	cmp	r5, r0
    f37a:	d209      	bcs.n	f390 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
    f37c:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    f380:	2802      	cmp	r0, #2
    f382:	d103      	bne.n	f38c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x7e>
    f384:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    f388:	2802      	cmp	r0, #2
    f38a:	d001      	beq.n	f390 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
    f38c:	200c      	movs	r0, #12
    f38e:	e7d8      	b.n	f342 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f390:	f8a4 7338 	strh.w	r7, [r4, #824]	; 0x338
    f394:	e9c4 85cf 	strd	r8, r5, [r4, #828]	; 0x33c
    f398:	88f0      	ldrh	r0, [r6, #6]
    f39a:	f8a4 0344 	strh.w	r0, [r4, #836]	; 0x344
    f39e:	8930      	ldrh	r0, [r6, #8]
    f3a0:	f8a4 0346 	strh.w	r0, [r4, #838]	; 0x346
    f3a4:	f504 744d 	add.w	r4, r4, #820	; 0x334
    f3a8:	20ff      	movs	r0, #255	; 0xff
    f3aa:	7020      	strb	r0, [r4, #0]
    f3ac:	2000      	movs	r0, #0
    f3ae:	e7c8      	b.n	f342 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f3b0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f3b0:	b510      	push	{r4, lr}
    f3b2:	460b      	mov	r3, r1
    f3b4:	2201      	movs	r2, #1
    f3b6:	f100 0110 	add.w	r1, r0, #16
    f3ba:	f7f2 fba9 	bl	1b10 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f3be:	2000      	movs	r0, #0
    f3c0:	bd10      	pop	{r4, pc}

0000f3c2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f3c2:	b510      	push	{r4, lr}
    f3c4:	8800      	ldrh	r0, [r0, #0]
    f3c6:	2101      	movs	r1, #1
    f3c8:	f7fe fbda 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f3cc:	b118      	cbz	r0, f3d6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f3ce:	f890 13b8 	ldrb.w	r1, [r0, #952]	; 0x3b8
    f3d2:	b111      	cbz	r1, f3da <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f3d4:	e007      	b.n	f3e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f3d6:	2002      	movs	r0, #2
    f3d8:	bd10      	pop	{r4, pc}
    f3da:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
    f3de:	2916      	cmp	r1, #22
    f3e0:	d003      	beq.n	f3ea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f3e2:	2917      	cmp	r1, #23
    f3e4:	d001      	beq.n	f3ea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f3e6:	200c      	movs	r0, #12
    f3e8:	bd10      	pop	{r4, pc}
    f3ea:	2102      	movs	r1, #2
    f3ec:	f880 13b8 	strb.w	r1, [r0, #952]	; 0x3b8
    f3f0:	2000      	movs	r0, #0
    f3f2:	bd10      	pop	{r4, pc}

0000f3f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f3f4:	b510      	push	{r4, lr}
    f3f6:	2108      	movs	r1, #8
    f3f8:	f7f1 f992 	bl	720 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f3fc:	2000      	movs	r0, #0
    f3fe:	bd10      	pop	{r4, pc}

0000f400 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f400:	b510      	push	{r4, lr}
    f402:	4604      	mov	r4, r0
    f404:	f7f7 fcfc 	bl	6e00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    f408:	f7ff fa69 	bl	e8de <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f40c:	f7f2 fcca 	bl	1da4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f410:	7020      	strb	r0, [r4, #0]
    f412:	2000      	movs	r0, #0
    f414:	bd10      	pop	{r4, pc}

0000f416 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f416:	b510      	push	{r4, lr}
    f418:	4604      	mov	r4, r0
    f41a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f41e:	f000 fd39 	bl	fe94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f2>
    f422:	f7f2 fcbf 	bl	1da4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f426:	7020      	strb	r0, [r4, #0]
    f428:	f000 fcdb 	bl	fde2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x340>
    f42c:	f7f2 fcba 	bl	1da4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f430:	7060      	strb	r0, [r4, #1]
    f432:	2000      	movs	r0, #0
    f434:	bd10      	pop	{r4, pc}

0000f436 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f436:	2108      	movs	r1, #8
    f438:	7001      	strb	r1, [r0, #0]
    f43a:	2000      	movs	r0, #0
    f43c:	4770      	bx	lr

0000f43e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f43e:	b510      	push	{r4, lr}
    f440:	4604      	mov	r4, r0
    f442:	f7f7 fe55 	bl	70f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>
    f446:	b108      	cbz	r0, f44c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f448:	200c      	movs	r0, #12
    f44a:	bd10      	pop	{r4, pc}
    f44c:	7820      	ldrb	r0, [r4, #0]
    f44e:	b120      	cbz	r0, f45a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
    f450:	2801      	cmp	r0, #1
    f452:	d002      	beq.n	f45a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
    f454:	28ff      	cmp	r0, #255	; 0xff
    f456:	d108      	bne.n	f46a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
    f458:	e009      	b.n	f46e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
    f45a:	f7ff ff2a 	bl	f2b2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x96>
    f45e:	1c61      	adds	r1, r4, #1
    f460:	f7fe fe22 	bl	e0a8 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f464:	b108      	cbz	r0, f46a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
    f466:	2000      	movs	r0, #0
    f468:	bd10      	pop	{r4, pc}
    f46a:	2012      	movs	r0, #18
    f46c:	bd10      	pop	{r4, pc}
    f46e:	2000      	movs	r0, #0
    f470:	f7f2 fa06 	bl	1880 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    f474:	e7f7      	b.n	f466 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

0000f476 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f476:	b51c      	push	{r2, r3, r4, lr}
    f478:	4604      	mov	r4, r0
    f47a:	f7f7 fcc1 	bl	6e00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    f47e:	2000      	movs	r0, #0
    f480:	f88d 0002 	strb.w	r0, [sp, #2]
    f484:	2103      	movs	r1, #3
    f486:	f88d 1001 	strb.w	r1, [sp, #1]
    f48a:	f814 1b01 	ldrb.w	r1, [r4], #1
    f48e:	f88d 1003 	strb.w	r1, [sp, #3]
    f492:	f88d 0000 	strb.w	r0, [sp]
    f496:	4668      	mov	r0, sp
    f498:	9401      	str	r4, [sp, #4]
    f49a:	f000 f980 	bl	f79e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f49e:	bd1c      	pop	{r2, r3, r4, pc}

0000f4a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f4a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f4a2:	4605      	mov	r5, r0
    f4a4:	f7f7 fcac 	bl	6e00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    f4a8:	4606      	mov	r6, r0
    f4aa:	7828      	ldrb	r0, [r5, #0]
    f4ac:	2400      	movs	r4, #0
    f4ae:	b160      	cbz	r0, f4ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f4b0:	f88d 4000 	strb.w	r4, [sp]
    f4b4:	2001      	movs	r0, #1
    f4b6:	f10d 0101 	add.w	r1, sp, #1
    f4ba:	f7f1 ffbb 	bl	1434 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f4be:	b120      	cbz	r0, f4ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f4c0:	4668      	mov	r0, sp
    f4c2:	f000 f897 	bl	f5f4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f4c6:	2800      	cmp	r0, #0
    f4c8:	d112      	bne.n	f4f0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f4ca:	f88d 400c 	strb.w	r4, [sp, #12]
    f4ce:	4630      	mov	r0, r6
    f4d0:	f7ff f9f9 	bl	e8c6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f4d4:	b118      	cbz	r0, f4de <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f4d6:	2080      	movs	r0, #128	; 0x80
    f4d8:	f8ad 000d 	strh.w	r0, [sp, #13]
    f4dc:	e001      	b.n	f4e2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f4de:	f8ad 400d 	strh.w	r4, [sp, #13]
    f4e2:	f88d 400f 	strb.w	r4, [sp, #15]
    f4e6:	7828      	ldrb	r0, [r5, #0]
    f4e8:	2801      	cmp	r0, #1
    f4ea:	d003      	beq.n	f4f4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f4ec:	b138      	cbz	r0, f4fe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f4ee:	2012      	movs	r0, #18
    f4f0:	b004      	add	sp, #16
    f4f2:	bd70      	pop	{r4, r5, r6, pc}
    f4f4:	a903      	add	r1, sp, #12
    f4f6:	4630      	mov	r0, r6
    f4f8:	f7f7 fce0 	bl	6ebc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f4fc:	e7f8      	b.n	f4f0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f4fe:	4630      	mov	r0, r6
    f500:	f000 fca2 	bl	fe48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
    f504:	e7f4      	b.n	f4f0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f506 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f506:	b530      	push	{r4, r5, lr}
    f508:	b08b      	sub	sp, #44	; 0x2c
    f50a:	4604      	mov	r4, r0
    f50c:	f7f7 fc78 	bl	6e00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    f510:	4602      	mov	r2, r0
    f512:	7920      	ldrb	r0, [r4, #4]
    f514:	2804      	cmp	r0, #4
    f516:	d803      	bhi.n	f520 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f518:	8860      	ldrh	r0, [r4, #2]
    f51a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f51e:	d902      	bls.n	f526 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f520:	2012      	movs	r0, #18
    f522:	b00b      	add	sp, #44	; 0x2c
    f524:	bd30      	pop	{r4, r5, pc}
    f526:	2500      	movs	r5, #0
    f528:	f88d 5004 	strb.w	r5, [sp, #4]
    f52c:	7921      	ldrb	r1, [r4, #4]
    f52e:	9500      	str	r5, [sp, #0]
    f530:	f89d 0000 	ldrb.w	r0, [sp]
    f534:	2905      	cmp	r1, #5
    f536:	f040 0010 	orr.w	r0, r0, #16
    f53a:	f88d 0000 	strb.w	r0, [sp]
    f53e:	d254      	bcs.n	f5ea <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f540:	e8df f001 	tbb	[pc, r1]
    f544:	11050803 	.word	0x11050803
    f548:	000b      	.short	0x000b
    f54a:	f040 0001 	orr.w	r0, r0, #1
    f54e:	f040 0002 	orr.w	r0, r0, #2
    f552:	e006      	b.n	f562 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f554:	f040 0009 	orr.w	r0, r0, #9
    f558:	e001      	b.n	f55e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f55a:	f040 0001 	orr.w	r0, r0, #1
    f55e:	f040 0004 	orr.w	r0, r0, #4
    f562:	f88d 0000 	strb.w	r0, [sp]
    f566:	f8bd 0000 	ldrh.w	r0, [sp]
    f56a:	9000      	str	r0, [sp, #0]
    f56c:	f8bd 0000 	ldrh.w	r0, [sp]
    f570:	f8ad 0005 	strh.w	r0, [sp, #5]
    f574:	8821      	ldrh	r1, [r4, #0]
    f576:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f57a:	f361 201f 	bfi	r0, r1, #8, #24
    f57e:	f8cd 0006 	str.w	r0, [sp, #6]
    f582:	8861      	ldrh	r1, [r4, #2]
    f584:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f588:	f361 201f 	bfi	r0, r1, #8, #24
    f58c:	f8cd 0009 	str.w	r0, [sp, #9]
    f590:	7b60      	ldrb	r0, [r4, #13]
    f592:	f88d 000d 	strb.w	r0, [sp, #13]
    f596:	7960      	ldrb	r0, [r4, #5]
    f598:	f88d 000e 	strb.w	r0, [sp, #14]
    f59c:	79a0      	ldrb	r0, [r4, #6]
    f59e:	f88d 000f 	strb.w	r0, [sp, #15]
    f5a2:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f5a6:	9004      	str	r0, [sp, #16]
    f5a8:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f5ac:	f8ad 0014 	strh.w	r0, [sp, #20]
    f5b0:	7ba0      	ldrb	r0, [r4, #14]
    f5b2:	f88d 0016 	strb.w	r0, [sp, #22]
    f5b6:	207f      	movs	r0, #127	; 0x7f
    f5b8:	f88d 0017 	strb.w	r0, [sp, #23]
    f5bc:	2001      	movs	r0, #1
    f5be:	f88d 0018 	strb.w	r0, [sp, #24]
    f5c2:	f88d 5019 	strb.w	r5, [sp, #25]
    f5c6:	f88d 001a 	strb.w	r0, [sp, #26]
    f5ca:	f88d 501b 	strb.w	r5, [sp, #27]
    f5ce:	4610      	mov	r0, r2
    f5d0:	f7ff f99c 	bl	e90c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f5d4:	f88d 001c 	strb.w	r0, [sp, #28]
    f5d8:	f88d 501d 	strb.w	r5, [sp, #29]
    f5dc:	f88d 501e 	strb.w	r5, [sp, #30]
    f5e0:	a909      	add	r1, sp, #36	; 0x24
    f5e2:	a801      	add	r0, sp, #4
    f5e4:	f7f7 f9e4 	bl	69b0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f5e8:	e79b      	b.n	f522 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f5ea:	f241 215b 	movw	r1, #4699	; 0x125b
    f5ee:	2039      	movs	r0, #57	; 0x39
    f5f0:	f7f1 f808 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f5f4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f5f4:	b570      	push	{r4, r5, r6, lr}
    f5f6:	4604      	mov	r4, r0
    f5f8:	7800      	ldrb	r0, [r0, #0]
    f5fa:	2102      	movs	r1, #2
    f5fc:	f7fe fac0 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f600:	0005      	movs	r5, r0
    f602:	d007      	beq.n	f614 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f604:	f7ff fb9c 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f608:	b160      	cbz	r0, f624 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f60a:	4628      	mov	r0, r5
    f60c:	f7ff f963 	bl	e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f610:	b110      	cbz	r0, f618 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f612:	e005      	b.n	f620 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f614:	2042      	movs	r0, #66	; 0x42
    f616:	bd70      	pop	{r4, r5, r6, pc}
    f618:	4628      	mov	r0, r5
    f61a:	f7ff f94a 	bl	e8b2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f61e:	b108      	cbz	r0, f624 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f620:	200c      	movs	r0, #12
    f622:	bd70      	pop	{r4, r5, r6, pc}
    f624:	1c61      	adds	r1, r4, #1
    f626:	4628      	mov	r0, r5
    f628:	f7ff f967 	bl	e8fa <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f62c:	2000      	movs	r0, #0
    f62e:	bd70      	pop	{r4, r5, r6, pc}

0000f630 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    f630:	b510      	push	{r4, lr}
    f632:	4604      	mov	r4, r0
    f634:	f7f7 fdca 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f638:	b110      	cbz	r0, f640 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x10>
    f63a:	f7f7 fbe1 	bl	6e00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    f63e:	e004      	b.n	f64a <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x1a>
    f640:	7820      	ldrb	r0, [r4, #0]
    f642:	2102      	movs	r1, #2
    f644:	f7fe fa9c 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f648:	b140      	cbz	r0, f65c <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x2c>
    f64a:	7861      	ldrb	r1, [r4, #1]
    f64c:	f3c1 0240 	ubfx	r2, r1, #1, #1
    f650:	f001 0101 	and.w	r1, r1, #1
    f654:	f7ff f94c 	bl	e8f0 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    f658:	2000      	movs	r0, #0
    f65a:	bd10      	pop	{r4, pc}
    f65c:	2042      	movs	r0, #66	; 0x42
    f65e:	bd10      	pop	{r4, pc}

0000f660 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f660:	b510      	push	{r4, lr}
    f662:	4604      	mov	r4, r0
    f664:	2001      	movs	r0, #1
    f666:	f000 fa4a 	bl	fafe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5c>
    f66a:	b128      	cbz	r0, f678 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f66c:	4621      	mov	r1, r4
    f66e:	2001      	movs	r0, #1
    f670:	f7f1 fef8 	bl	1464 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f674:	2000      	movs	r0, #0
    f676:	bd10      	pop	{r4, pc}
    f678:	200c      	movs	r0, #12
    f67a:	bd10      	pop	{r4, pc}

0000f67c <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f67c:	b51c      	push	{r2, r3, r4, lr}
    f67e:	7801      	ldrb	r1, [r0, #0]
    f680:	f88d 1000 	strb.w	r1, [sp]
    f684:	7840      	ldrb	r0, [r0, #1]
    f686:	f88d 0001 	strb.w	r0, [sp, #1]
    f68a:	2000      	movs	r0, #0
    f68c:	f8ad 0002 	strh.w	r0, [sp, #2]
    f690:	f8ad 0004 	strh.w	r0, [sp, #4]
    f694:	4601      	mov	r1, r0
    f696:	4668      	mov	r0, sp
    f698:	f000 fb39 	bl	fd0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    f69c:	2800      	cmp	r0, #0
    f69e:	d102      	bne.n	f6a6 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f6a0:	4668      	mov	r0, sp
    f6a2:	f000 fb0f 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x222>
    f6a6:	bd1c      	pop	{r2, r3, r4, pc}

0000f6a8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f6a8:	b500      	push	{lr}
    f6aa:	b087      	sub	sp, #28
    f6ac:	7941      	ldrb	r1, [r0, #5]
    f6ae:	f88d 1000 	strb.w	r1, [sp]
    f6b2:	7981      	ldrb	r1, [r0, #6]
    f6b4:	f88d 1001 	strb.w	r1, [sp, #1]
    f6b8:	2101      	movs	r1, #1
    f6ba:	f88d 1002 	strb.w	r1, [sp, #2]
    f6be:	7801      	ldrb	r1, [r0, #0]
    f6c0:	f88d 1003 	strb.w	r1, [sp, #3]
    f6c4:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f6c8:	f240 2271 	movw	r2, #625	; 0x271
    f6cc:	4351      	muls	r1, r2
    f6ce:	9102      	str	r1, [sp, #8]
    f6d0:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f6d4:	4350      	muls	r0, r2
    f6d6:	9004      	str	r0, [sp, #16]
    f6d8:	2007      	movs	r0, #7
    f6da:	f88d 0018 	strb.w	r0, [sp, #24]
    f6de:	2000      	movs	r0, #0
    f6e0:	f88d 0019 	strb.w	r0, [sp, #25]
    f6e4:	9804      	ldr	r0, [sp, #16]
    f6e6:	f7f7 fb7f 	bl	6de8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a8>
    f6ea:	b140      	cbz	r0, f6fe <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f6ec:	9802      	ldr	r0, [sp, #8]
    f6ee:	f7f7 fb6f 	bl	6dd0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x290>
    f6f2:	b120      	cbz	r0, f6fe <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f6f4:	4668      	mov	r0, sp
    f6f6:	f000 f8e0 	bl	f8ba <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f6fa:	b007      	add	sp, #28
    f6fc:	bd00      	pop	{pc}
    f6fe:	2030      	movs	r0, #48	; 0x30
    f700:	e7fb      	b.n	f6fa <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f702 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f702:	b51c      	push	{r2, r3, r4, lr}
    f704:	4604      	mov	r4, r0
    f706:	f7f7 fb7b 	bl	6e00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    f70a:	2000      	movs	r0, #0
    f70c:	f88d 0000 	strb.w	r0, [sp]
    f710:	f88d 0002 	strb.w	r0, [sp, #2]
    f714:	2003      	movs	r0, #3
    f716:	f88d 0001 	strb.w	r0, [sp, #1]
    f71a:	f814 0b01 	ldrb.w	r0, [r4], #1
    f71e:	f88d 0003 	strb.w	r0, [sp, #3]
    f722:	4668      	mov	r0, sp
    f724:	9401      	str	r4, [sp, #4]
    f726:	f000 f926 	bl	f976 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f72a:	bd1c      	pop	{r2, r3, r4, pc}

0000f72c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f72c:	b510      	push	{r4, lr}
    f72e:	f7f1 febf 	bl	14b0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f732:	2000      	movs	r0, #0
    f734:	bd10      	pop	{r4, pc}

0000f736 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    f736:	b510      	push	{r4, lr}
    f738:	4604      	mov	r4, r0
    f73a:	7800      	ldrb	r0, [r0, #0]
    f73c:	28ff      	cmp	r0, #255	; 0xff
    f73e:	d009      	beq.n	f754 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    f740:	2102      	movs	r1, #2
    f742:	f7fe fa1d 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f746:	b118      	cbz	r0, f750 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    f748:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    f74c:	84c1      	strh	r1, [r0, #38]	; 0x26
    f74e:	e005      	b.n	f75c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    f750:	2042      	movs	r0, #66	; 0x42
    f752:	bd10      	pop	{r4, pc}
    f754:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f758:	f7f4 fade 	bl	3d18 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    f75c:	2000      	movs	r0, #0
    f75e:	bd10      	pop	{r4, pc}

0000f760 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f760:	b510      	push	{r4, lr}
    f762:	4604      	mov	r4, r0
    f764:	f7f7 fd2c 	bl	71c0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    f768:	b118      	cbz	r0, f772 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    f76a:	2000      	movs	r0, #0
    f76c:	f000 f9c7 	bl	fafe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5c>
    f770:	b128      	cbz	r0, f77e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    f772:	4621      	mov	r1, r4
    f774:	2000      	movs	r0, #0
    f776:	f7f1 fe75 	bl	1464 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f77a:	2000      	movs	r0, #0
    f77c:	bd10      	pop	{r4, pc}
    f77e:	200c      	movs	r0, #12
    f780:	bd10      	pop	{r4, pc}

0000f782 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f782:	b510      	push	{r4, lr}
    f784:	4604      	mov	r4, r0
    f786:	7800      	ldrb	r0, [r0, #0]
    f788:	b100      	cbz	r0, f78c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0xa>
    f78a:	2001      	movs	r0, #1
    f78c:	f7f7 f84c 	bl	6828 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    f790:	7820      	ldrb	r0, [r4, #0]
    f792:	b100      	cbz	r0, f796 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x14>
    f794:	2001      	movs	r0, #1
    f796:	f7f4 fb5d 	bl	3e54 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f79a:	2000      	movs	r0, #0
    f79c:	bd10      	pop	{r4, pc}

0000f79e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f79e:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f7a2:	4606      	mov	r6, r0
    f7a4:	7847      	ldrb	r7, [r0, #1]
    f7a6:	7800      	ldrb	r0, [r0, #0]
    f7a8:	2102      	movs	r1, #2
    f7aa:	f7fe f9e9 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f7ae:	0005      	movs	r5, r0
    f7b0:	d00b      	beq.n	f7ca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    f7b2:	f7f7 fd0b 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f7b6:	b158      	cbz	r0, f7d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x32>
    f7b8:	4628      	mov	r0, r5
    f7ba:	f7ff f801 	bl	e7c0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f7be:	4604      	mov	r4, r0
    f7c0:	78f0      	ldrb	r0, [r6, #3]
    f7c2:	42a0      	cmp	r0, r4
    f7c4:	d805      	bhi.n	f7d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
    f7c6:	4604      	mov	r4, r0
    f7c8:	e003      	b.n	f7d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
    f7ca:	2042      	movs	r0, #66	; 0x42
    f7cc:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    f7d0:	78f4      	ldrb	r4, [r6, #3]
    f7d2:	2f04      	cmp	r7, #4
    f7d4:	d031      	beq.n	f83a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x9c>
    f7d6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f7d8:	f7fe fb55 	bl	de86 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f7dc:	4420      	add	r0, r4
    f7de:	fa1f f880 	uxth.w	r8, r0
    f7e2:	f7f7 fcf3 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f7e6:	b9a0      	cbnz	r0, f812 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
    f7e8:	78f0      	ldrb	r0, [r6, #3]
    f7ea:	f04f 0912 	mov.w	r9, #18
    f7ee:	b118      	cbz	r0, f7f8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5a>
    f7f0:	4628      	mov	r0, r5
    f7f2:	f7ff f844 	bl	e87e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    f7f6:	b140      	cbz	r0, f80a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x6c>
    f7f8:	4628      	mov	r0, r5
    f7fa:	f7fe ffe1 	bl	e7c0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f7fe:	4540      	cmp	r0, r8
    f800:	d207      	bcs.n	f812 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
    f802:	4628      	mov	r0, r5
    f804:	f7ff f863 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f808:	b108      	cbz	r0, f80e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f80a:	4648      	mov	r0, r9
    f80c:	e7de      	b.n	f7cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    f80e:	2007      	movs	r0, #7
    f810:	e7dc      	b.n	f7cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    f812:	f7f7 fcdb 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f816:	4602      	mov	r2, r0
    f818:	4641      	mov	r1, r8
    f81a:	4628      	mov	r0, r5
    f81c:	f000 f98e 	bl	fb3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    f820:	2800      	cmp	r0, #0
    f822:	d1d3      	bne.n	f7cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    f824:	2f03      	cmp	r7, #3
    f826:	d000      	beq.n	f82a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
    f828:	b1c4      	cbz	r4, f85c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f82a:	4628      	mov	r0, r5
    f82c:	f7ff f84f 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f830:	7871      	ldrb	r1, [r6, #1]
    f832:	2903      	cmp	r1, #3
    f834:	d00d      	beq.n	f852 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
    f836:	b988      	cbnz	r0, f85c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f838:	e001      	b.n	f83e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xa0>
    f83a:	b97c      	cbnz	r4, f85c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f83c:	e7f5      	b.n	f82a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
    f83e:	2904      	cmp	r1, #4
    f840:	d107      	bne.n	f852 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
    f842:	4628      	mov	r0, r5
    f844:	f7ff fa7c 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f848:	b140      	cbz	r0, f85c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f84a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f84c:	f7fe fae1 	bl	de12 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f850:	b120      	cbz	r0, f85c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f852:	2f01      	cmp	r7, #1
    f854:	d004      	beq.n	f860 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
    f856:	2f03      	cmp	r7, #3
    f858:	d002      	beq.n	f860 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
    f85a:	e00e      	b.n	f87a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xdc>
    f85c:	2012      	movs	r0, #18
    f85e:	e7b5      	b.n	f7cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    f860:	4628      	mov	r0, r5
    f862:	f7ff f834 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f866:	b108      	cbz	r0, f86c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f868:	2200      	movs	r2, #0
    f86a:	e002      	b.n	f872 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
    f86c:	2f01      	cmp	r7, #1
    f86e:	d014      	beq.n	f89a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xfc>
    f870:	2201      	movs	r2, #1
    f872:	4668      	mov	r0, sp
    f874:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    f876:	f7fe fa65 	bl	dd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f87a:	2f04      	cmp	r7, #4
    f87c:	d018      	beq.n	f8b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x112>
    f87e:	6872      	ldr	r2, [r6, #4]
    f880:	4623      	mov	r3, r4
    f882:	2101      	movs	r1, #1
    f884:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f886:	f7fe fa95 	bl	ddb4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f88a:	2800      	cmp	r0, #0
    f88c:	d0bf      	beq.n	f80e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f88e:	7870      	ldrb	r0, [r6, #1]
    f890:	2802      	cmp	r0, #2
    f892:	d004      	beq.n	f89e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
    f894:	2803      	cmp	r0, #3
    f896:	d002      	beq.n	f89e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
    f898:	e00d      	b.n	f8b6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
    f89a:	2202      	movs	r2, #2
    f89c:	e7e9      	b.n	f872 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
    f89e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f8a0:	f7fe faf1 	bl	de86 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f8a4:	4602      	mov	r2, r0
    f8a6:	2101      	movs	r1, #1
    f8a8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f8aa:	f7fe fac8 	bl	de3e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f8ae:	e002      	b.n	f8b6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
    f8b0:	4628      	mov	r0, r5
    f8b2:	f7fe ff9c 	bl	e7ee <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>
    f8b6:	2000      	movs	r0, #0
    f8b8:	e788      	b.n	f7cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>

0000f8ba <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    f8ba:	b510      	push	{r4, lr}
    f8bc:	b08a      	sub	sp, #40	; 0x28
    f8be:	4604      	mov	r4, r0
    f8c0:	f7f7 f95e 	bl	6b80 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x40>
    f8c4:	2800      	cmp	r0, #0
    f8c6:	d103      	bne.n	f8d0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    f8c8:	f000 fab3 	bl	fe32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x390>
    f8cc:	b110      	cbz	r0, f8d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    f8ce:	200c      	movs	r0, #12
    f8d0:	b00a      	add	sp, #40	; 0x28
    f8d2:	bd10      	pop	{r4, pc}
    f8d4:	2102      	movs	r1, #2
    f8d6:	f104 0010 	add.w	r0, r4, #16
    f8da:	f7f7 faad 	bl	6e38 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2f8>
    f8de:	78a0      	ldrb	r0, [r4, #2]
    f8e0:	f88d 0000 	strb.w	r0, [sp]
    f8e4:	78a0      	ldrb	r0, [r4, #2]
    f8e6:	f88d 001c 	strb.w	r0, [sp, #28]
    f8ea:	7860      	ldrb	r0, [r4, #1]
    f8ec:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    f8f0:	7820      	ldrb	r0, [r4, #0]
    f8f2:	f88d 0020 	strb.w	r0, [sp, #32]
    f8f6:	7e20      	ldrb	r0, [r4, #24]
    f8f8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    f8fc:	7e60      	ldrb	r0, [r4, #25]
    f8fe:	b100      	cbz	r0, f902 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x48>
    f900:	2001      	movs	r0, #1
    f902:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    f906:	78a0      	ldrb	r0, [r4, #2]
    f908:	07c1      	lsls	r1, r0, #31
    f90a:	d014      	beq.n	f936 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x7c>
    f90c:	78e0      	ldrb	r0, [r4, #3]
    f90e:	f000 fa3f 	bl	fd90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ee>
    f912:	f88d 001d 	strb.w	r0, [sp, #29]
    f916:	68a0      	ldr	r0, [r4, #8]
    f918:	9001      	str	r0, [sp, #4]
    f91a:	6920      	ldr	r0, [r4, #16]
    f91c:	9002      	str	r0, [sp, #8]
    f91e:	78a0      	ldrb	r0, [r4, #2]
    f920:	0740      	lsls	r0, r0, #29
    f922:	d515      	bpl.n	f950 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
    f924:	7920      	ldrb	r0, [r4, #4]
    f926:	f000 fa33 	bl	fd90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ee>
    f92a:	f88d 001f 	strb.w	r0, [sp, #31]
    f92e:	68e0      	ldr	r0, [r4, #12]
    f930:	9005      	str	r0, [sp, #20]
    f932:	6960      	ldr	r0, [r4, #20]
    f934:	e00b      	b.n	f94e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x94>
    f936:	2802      	cmp	r0, #2
    f938:	d013      	beq.n	f962 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0xa8>
    f93a:	0740      	lsls	r0, r0, #29
    f93c:	d508      	bpl.n	f950 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
    f93e:	78e0      	ldrb	r0, [r4, #3]
    f940:	f000 fa26 	bl	fd90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ee>
    f944:	f88d 001f 	strb.w	r0, [sp, #31]
    f948:	68a0      	ldr	r0, [r4, #8]
    f94a:	9005      	str	r0, [sp, #20]
    f94c:	6920      	ldr	r0, [r4, #16]
    f94e:	9006      	str	r0, [sp, #24]
    f950:	4668      	mov	r0, sp
    f952:	f7f6 f983 	bl	5c5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    f956:	2800      	cmp	r0, #0
    f958:	d1ba      	bne.n	f8d0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    f95a:	a807      	add	r0, sp, #28
    f95c:	f7f4 fc0e 	bl	417c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    f960:	e7b6      	b.n	f8d0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    f962:	78e0      	ldrb	r0, [r4, #3]
    f964:	f000 fa14 	bl	fd90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ee>
    f968:	f88d 001e 	strb.w	r0, [sp, #30]
    f96c:	68a0      	ldr	r0, [r4, #8]
    f96e:	9003      	str	r0, [sp, #12]
    f970:	6920      	ldr	r0, [r4, #16]
    f972:	9004      	str	r0, [sp, #16]
    f974:	e7ec      	b.n	f950 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>

0000f976 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f976:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f97a:	4606      	mov	r6, r0
    f97c:	7845      	ldrb	r5, [r0, #1]
    f97e:	78c7      	ldrb	r7, [r0, #3]
    f980:	7800      	ldrb	r0, [r0, #0]
    f982:	2102      	movs	r1, #2
    f984:	f7fe f8fc 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f988:	0004      	movs	r4, r0
    f98a:	d007      	beq.n	f99c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f98c:	f7f7 fc1e 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f990:	b140      	cbz	r0, f9a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    f992:	4620      	mov	r0, r4
    f994:	f7fe ff9f 	bl	e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f998:	b118      	cbz	r0, f9a2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    f99a:	e003      	b.n	f9a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    f99c:	2042      	movs	r0, #66	; 0x42
    f99e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f9a2:	2700      	movs	r7, #0
    f9a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    f9a6:	f7fe fa72 	bl	de8e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f9aa:	4438      	add	r0, r7
    f9ac:	fa1f f880 	uxth.w	r8, r0
    f9b0:	f7f7 fc0c 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f9b4:	b928      	cbnz	r0, f9c2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
    f9b6:	78f0      	ldrb	r0, [r6, #3]
    f9b8:	b118      	cbz	r0, f9c2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
    f9ba:	4620      	mov	r0, r4
    f9bc:	f7fe ff8b 	bl	e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f9c0:	b198      	cbz	r0, f9ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
    f9c2:	f7f7 fc03 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    f9c6:	4602      	mov	r2, r0
    f9c8:	4641      	mov	r1, r8
    f9ca:	4620      	mov	r0, r4
    f9cc:	f000 f8b6 	bl	fb3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    f9d0:	2800      	cmp	r0, #0
    f9d2:	d1e4      	bne.n	f99e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    f9d4:	2d04      	cmp	r5, #4
    f9d6:	d008      	beq.n	f9ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
    f9d8:	2d03      	cmp	r5, #3
    f9da:	d00a      	beq.n	f9f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x7c>
    f9dc:	b12f      	cbz	r7, f9ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
    f9de:	4620      	mov	r0, r4
    f9e0:	f7ff f9ae 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f9e4:	b118      	cbz	r0, f9ee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x78>
    f9e6:	200c      	movs	r0, #12
    f9e8:	e7d9      	b.n	f99e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    f9ea:	2012      	movs	r0, #18
    f9ec:	e7d7      	b.n	f99e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    f9ee:	2d01      	cmp	r5, #1
    f9f0:	d10c      	bne.n	fa0c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f9f2:	4620      	mov	r0, r4
    f9f4:	f7fe ff6b 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f9f8:	b108      	cbz	r0, f9fe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x88>
    f9fa:	2204      	movs	r2, #4
    f9fc:	e002      	b.n	fa04 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f9fe:	2d01      	cmp	r5, #1
    fa00:	d010      	beq.n	fa24 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xae>
    fa02:	2205      	movs	r2, #5
    fa04:	4668      	mov	r0, sp
    fa06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    fa08:	f7fe f99c 	bl	dd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fa0c:	6872      	ldr	r2, [r6, #4]
    fa0e:	463b      	mov	r3, r7
    fa10:	2100      	movs	r1, #0
    fa12:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    fa14:	f7fe f9ce 	bl	ddb4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fa18:	b130      	cbz	r0, fa28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb2>
    fa1a:	2d02      	cmp	r5, #2
    fa1c:	d006      	beq.n	fa2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
    fa1e:	2d03      	cmp	r5, #3
    fa20:	d004      	beq.n	fa2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
    fa22:	e008      	b.n	fa36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xc0>
    fa24:	2206      	movs	r2, #6
    fa26:	e7ed      	b.n	fa04 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    fa28:	2007      	movs	r0, #7
    fa2a:	e7b8      	b.n	f99e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    fa2c:	4642      	mov	r2, r8
    fa2e:	2100      	movs	r1, #0
    fa30:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    fa32:	f7fe fa04 	bl	de3e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa36:	2000      	movs	r0, #0
    fa38:	e7b1      	b.n	f99e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>

0000fa3a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fa3a:	b510      	push	{r4, lr}
    fa3c:	4604      	mov	r4, r0
    fa3e:	4601      	mov	r1, r0
    fa40:	2000      	movs	r0, #0
    fa42:	f7f1 fcf7 	bl	1434 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fa46:	b910      	cbnz	r0, fa4e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fa48:	2000      	movs	r0, #0
    fa4a:	6020      	str	r0, [r4, #0]
    fa4c:	80a0      	strh	r0, [r4, #4]
    fa4e:	2000      	movs	r0, #0
    fa50:	bd10      	pop	{r4, pc}

0000fa52 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fa52:	b510      	push	{r4, lr}
    fa54:	f7f7 fbc6 	bl	71e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fa58:	2000      	movs	r0, #0
    fa5a:	bd10      	pop	{r4, pc}

0000fa5c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fa5c:	f000 b821 	b.w	faa2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fa60 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    fa60:	b510      	push	{r4, lr}
    fa62:	4604      	mov	r4, r0
    fa64:	2000      	movs	r0, #0
    fa66:	8822      	ldrh	r2, [r4, #0]
    fa68:	b086      	sub	sp, #24
    fa6a:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    fa6e:	39ff      	subs	r1, #255	; 0xff
    fa70:	d008      	beq.n	fa84 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    fa72:	a903      	add	r1, sp, #12
    fa74:	4610      	mov	r0, r2
    fa76:	f7fe fb22 	bl	e0be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa7a:	b110      	cbz	r0, fa82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    fa7c:	2002      	movs	r0, #2
    fa7e:	b006      	add	sp, #24
    fa80:	bd10      	pop	{r4, pc}
    fa82:	9804      	ldr	r0, [sp, #16]
    fa84:	8921      	ldrh	r1, [r4, #8]
    fa86:	89a3      	ldrh	r3, [r4, #12]
    fa88:	8962      	ldrh	r2, [r4, #10]
    fa8a:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fa8e:	88e3      	ldrh	r3, [r4, #6]
    fa90:	88a2      	ldrh	r2, [r4, #4]
    fa92:	8861      	ldrh	r1, [r4, #2]
    fa94:	f7f7 f8ee 	bl	6c74 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x134>
    fa98:	b108      	cbz	r0, fa9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    fa9a:	2000      	movs	r0, #0
    fa9c:	e7ef      	b.n	fa7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fa9e:	2030      	movs	r0, #48	; 0x30
    faa0:	e7ed      	b.n	fa7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000faa2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    faa2:	b510      	push	{r4, lr}
    faa4:	f7fe fa8a 	bl	dfbc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    faa8:	f7f1 fdbe 	bl	1628 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    faac:	f7f7 fc0c 	bl	72c8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fab0:	f7f2 fbe0 	bl	2274 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fab4:	2001      	movs	r0, #1
    fab6:	f7f7 fb8f 	bl	71d8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
    faba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fabe:	f7f7 b91f 	b.w	6d00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1c0>
    fac2:	0741      	lsls	r1, r0, #29
    fac4:	d501      	bpl.n	faca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28>
    fac6:	2008      	movs	r0, #8
    fac8:	4770      	bx	lr
    faca:	07c1      	lsls	r1, r0, #31
    facc:	d001      	beq.n	fad2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    face:	2001      	movs	r0, #1
    fad0:	4770      	bx	lr
    fad2:	0780      	lsls	r0, r0, #30
    fad4:	d501      	bpl.n	fada <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    fad6:	2002      	movs	r0, #2
    fad8:	4770      	bx	lr
    fada:	2000      	movs	r0, #0
    fadc:	4770      	bx	lr
    fade:	b510      	push	{r4, lr}
    fae0:	2801      	cmp	r0, #1
    fae2:	d00b      	beq.n	fafc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fae4:	2802      	cmp	r0, #2
    fae6:	d009      	beq.n	fafc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fae8:	2804      	cmp	r0, #4
    faea:	d006      	beq.n	fafa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    faec:	2808      	cmp	r0, #8
    faee:	d004      	beq.n	fafa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    faf0:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    faf4:	2006      	movs	r0, #6
    faf6:	f7f0 fd85 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fafa:	2003      	movs	r0, #3
    fafc:	bd10      	pop	{r4, pc}
    fafe:	b510      	push	{r4, lr}
    fb00:	4604      	mov	r4, r0
    fb02:	f7f7 f827 	bl	6b54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    fb06:	b170      	cbz	r0, fb26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fb08:	f7f7 fb60 	bl	71cc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    fb0c:	b150      	cbz	r0, fb24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    fb0e:	f7f7 f977 	bl	6e00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    fb12:	4604      	mov	r4, r0
    fb14:	f7fe fedf 	bl	e8d6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fb18:	b960      	cbnz	r0, fb34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    fb1a:	4620      	mov	r0, r4
    fb1c:	f7fe fec9 	bl	e8b2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fb20:	b108      	cbz	r0, fb26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fb22:	e007      	b.n	fb34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    fb24:	b134      	cbz	r4, fb34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    fb26:	f000 f984 	bl	fe32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x390>
    fb2a:	b128      	cbz	r0, fb38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    fb2c:	f7f4 fbcc 	bl	42c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    fb30:	2801      	cmp	r0, #1
    fb32:	d001      	beq.n	fb38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    fb34:	2000      	movs	r0, #0
    fb36:	bd10      	pop	{r4, pc}
    fb38:	2001      	movs	r0, #1
    fb3a:	bd10      	pop	{r4, pc}
    fb3c:	b570      	push	{r4, r5, r6, lr}
    fb3e:	460c      	mov	r4, r1
    fb40:	4605      	mov	r5, r0
    fb42:	b112      	cbz	r2, fb4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    fb44:	291f      	cmp	r1, #31
    fb46:	d80c      	bhi.n	fb62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc0>
    fb48:	e016      	b.n	fb78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    fb4a:	f7f1 fac1 	bl	10d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    fb4e:	42a0      	cmp	r0, r4
    fb50:	d201      	bcs.n	fb56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    fb52:	2007      	movs	r0, #7
    fb54:	bd70      	pop	{r4, r5, r6, pc}
    fb56:	4628      	mov	r0, r5
    fb58:	f7fe feb9 	bl	e8ce <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fb5c:	b118      	cbz	r0, fb66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc4>
    fb5e:	2c1f      	cmp	r4, #31
    fb60:	d901      	bls.n	fb66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc4>
    fb62:	2012      	movs	r0, #18
    fb64:	bd70      	pop	{r4, r5, r6, pc}
    fb66:	4628      	mov	r0, r5
    fb68:	f7fe febc 	bl	e8e4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fb6c:	b130      	cbz	r0, fb7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xda>
    fb6e:	4621      	mov	r1, r4
    fb70:	4628      	mov	r0, r5
    fb72:	f7fe fe44 	bl	e7fe <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    fb76:	b118      	cbz	r0, fb80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xde>
    fb78:	2000      	movs	r0, #0
    fb7a:	bd70      	pop	{r4, r5, r6, pc}
    fb7c:	2042      	movs	r0, #66	; 0x42
    fb7e:	bd70      	pop	{r4, r5, r6, pc}
    fb80:	2045      	movs	r0, #69	; 0x45
    fb82:	bd70      	pop	{r4, r5, r6, pc}
    fb84:	b510      	push	{r4, lr}
    fb86:	4604      	mov	r4, r0
    fb88:	7840      	ldrb	r0, [r0, #1]
    fb8a:	06c0      	lsls	r0, r0, #27
    fb8c:	d413      	bmi.n	fbb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x114>
    fb8e:	f7f7 fb85 	bl	729c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fb92:	0780      	lsls	r0, r0, #30
    fb94:	d405      	bmi.n	fba2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x100>
    fb96:	7d20      	ldrb	r0, [r4, #20]
    fb98:	2802      	cmp	r0, #2
    fb9a:	d029      	beq.n	fbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    fb9c:	7da0      	ldrb	r0, [r4, #22]
    fb9e:	2802      	cmp	r0, #2
    fba0:	d026      	beq.n	fbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    fba2:	f7f7 fb7b 	bl	729c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fba6:	0740      	lsls	r0, r0, #29
    fba8:	d405      	bmi.n	fbb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x114>
    fbaa:	7d20      	ldrb	r0, [r4, #20]
    fbac:	2803      	cmp	r0, #3
    fbae:	d01f      	beq.n	fbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    fbb0:	7da0      	ldrb	r0, [r4, #22]
    fbb2:	2803      	cmp	r0, #3
    fbb4:	d01c      	beq.n	fbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    fbb6:	7860      	ldrb	r0, [r4, #1]
    fbb8:	07c0      	lsls	r0, r0, #31
    fbba:	d002      	beq.n	fbc2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x120>
    fbbc:	f7f7 fb46 	bl	724c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    fbc0:	b1b0      	cbz	r0, fbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    fbc2:	7860      	ldrb	r0, [r4, #1]
    fbc4:	06c1      	lsls	r1, r0, #27
    fbc6:	d405      	bmi.n	fbd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fbc8:	0701      	lsls	r1, r0, #28
    fbca:	d503      	bpl.n	fbd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fbcc:	7d20      	ldrb	r0, [r4, #20]
    fbce:	2802      	cmp	r0, #2
    fbd0:	d10e      	bne.n	fbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    fbd2:	e00f      	b.n	fbf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x152>
    fbd4:	7d21      	ldrb	r1, [r4, #20]
    fbd6:	2902      	cmp	r1, #2
    fbd8:	d001      	beq.n	fbde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>
    fbda:	7ea1      	ldrb	r1, [r4, #26]
    fbdc:	b941      	cbnz	r1, fbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    fbde:	0700      	lsls	r0, r0, #28
    fbe0:	d408      	bmi.n	fbf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x152>
    fbe2:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fbe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    fbea:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    fbee:	d201      	bcs.n	fbf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x152>
    fbf0:	2011      	movs	r0, #17
    fbf2:	bd10      	pop	{r4, pc}
    fbf4:	2000      	movs	r0, #0
    fbf6:	bd10      	pop	{r4, pc}
    fbf8:	b538      	push	{r3, r4, r5, lr}
    fbfa:	4604      	mov	r4, r0
    fbfc:	7800      	ldrb	r0, [r0, #0]
    fbfe:	28ef      	cmp	r0, #239	; 0xef
    fc00:	d85c      	bhi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc02:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fc06:	f8ad 0000 	strh.w	r0, [sp]
    fc0a:	9800      	ldr	r0, [sp, #0]
    fc0c:	f000 f94a 	bl	fea4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x402>
    fc10:	b3a0      	cbz	r0, fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1da>
    fc12:	7860      	ldrb	r0, [r4, #1]
    fc14:	0701      	lsls	r1, r0, #28
    fc16:	d40b      	bmi.n	fc30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    fc18:	f8d4 1002 	ldr.w	r1, [r4, #2]
    fc1c:	f8d4 3005 	ldr.w	r3, [r4, #5]
    fc20:	0a0a      	lsrs	r2, r1, #8
    fc22:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    fc26:	d849      	bhi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc28:	2220      	movs	r2, #32
    fc2a:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
    fc2e:	d845      	bhi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc30:	7a61      	ldrb	r1, [r4, #9]
    fc32:	b319      	cbz	r1, fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1da>
    fc34:	2907      	cmp	r1, #7
    fc36:	d841      	bhi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc38:	7aa1      	ldrb	r1, [r4, #10]
    fc3a:	b129      	cbz	r1, fc48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    fc3c:	2901      	cmp	r1, #1
    fc3e:	d003      	beq.n	fc48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    fc40:	2902      	cmp	r1, #2
    fc42:	d001      	beq.n	fc48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    fc44:	2903      	cmp	r1, #3
    fc46:	d139      	bne.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc48:	0742      	lsls	r2, r0, #29
    fc4a:	d403      	bmi.n	fc54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b2>
    fc4c:	2902      	cmp	r1, #2
    fc4e:	d001      	beq.n	fc54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b2>
    fc50:	2903      	cmp	r1, #3
    fc52:	d105      	bne.n	fc60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1be>
    fc54:	7ae1      	ldrb	r1, [r4, #11]
    fc56:	b109      	cbz	r1, fc5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ba>
    fc58:	2901      	cmp	r1, #1
    fc5a:	d12f      	bne.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc5c:	0741      	lsls	r1, r0, #29
    fc5e:	d407      	bmi.n	fc70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    fc60:	7ca1      	ldrb	r1, [r4, #18]
    fc62:	b129      	cbz	r1, fc70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    fc64:	2901      	cmp	r1, #1
    fc66:	d003      	beq.n	fc70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    fc68:	2902      	cmp	r1, #2
    fc6a:	d001      	beq.n	fc70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    fc6c:	2903      	cmp	r1, #3
    fc6e:	d125      	bne.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc70:	06c1      	lsls	r1, r0, #27
    fc72:	d504      	bpl.n	fc7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
    fc74:	7d20      	ldrb	r0, [r4, #20]
    fc76:	2801      	cmp	r0, #1
    fc78:	d120      	bne.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc7a:	e01b      	b.n	fcb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x212>
    fc7c:	e01e      	b.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc7e:	7d21      	ldrb	r1, [r4, #20]
    fc80:	2902      	cmp	r1, #2
    fc82:	d10b      	bne.n	fc9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    fc84:	07c1      	lsls	r1, r0, #31
    fc86:	d019      	beq.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc88:	0741      	lsls	r1, r0, #29
    fc8a:	d417      	bmi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc8c:	0701      	lsls	r1, r0, #28
    fc8e:	d515      	bpl.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc90:	0641      	lsls	r1, r0, #25
    fc92:	d413      	bmi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc94:	0681      	lsls	r1, r0, #26
    fc96:	d411      	bmi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc98:	0781      	lsls	r1, r0, #30
    fc9a:	d40f      	bmi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fc9c:	06c0      	lsls	r0, r0, #27
    fc9e:	d409      	bmi.n	fcb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x212>
    fca0:	7da0      	ldrb	r0, [r4, #22]
    fca2:	2801      	cmp	r0, #1
    fca4:	d003      	beq.n	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    fca6:	2802      	cmp	r0, #2
    fca8:	d001      	beq.n	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    fcaa:	2803      	cmp	r0, #3
    fcac:	d106      	bne.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fcae:	7de0      	ldrb	r0, [r4, #23]
    fcb0:	280f      	cmp	r0, #15
    fcb2:	d803      	bhi.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    fcb4:	7e20      	ldrb	r0, [r4, #24]
    fcb6:	b118      	cbz	r0, fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
    fcb8:	2801      	cmp	r0, #1
    fcba:	d001      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
    fcbc:	2012      	movs	r0, #18
    fcbe:	bd38      	pop	{r3, r4, r5, pc}
    fcc0:	2000      	movs	r0, #0
    fcc2:	bd38      	pop	{r3, r4, r5, pc}
    fcc4:	b510      	push	{r4, lr}
    fcc6:	4604      	mov	r4, r0
    fcc8:	7800      	ldrb	r0, [r0, #0]
    fcca:	2801      	cmp	r0, #1
    fccc:	d009      	beq.n	fce2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    fcce:	f7f5 ff57 	bl	5b80 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fcd2:	2805      	cmp	r0, #5
    fcd4:	d003      	beq.n	fcde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    fcd6:	f7f5 fecd 	bl	5a74 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    fcda:	2800      	cmp	r0, #0
    fcdc:	d000      	beq.n	fce0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fcde:	200c      	movs	r0, #12
    fce0:	bd10      	pop	{r4, pc}
    fce2:	f7f4 fac9 	bl	4278 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    fce6:	b108      	cbz	r0, fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    fce8:	203a      	movs	r0, #58	; 0x3a
    fcea:	bd10      	pop	{r4, pc}
    fcec:	f7f4 fa38 	bl	4160 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    fcf0:	b158      	cbz	r0, fd0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x268>
    fcf2:	f7f4 f90b 	bl	3f0c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fcf6:	f7f4 f981 	bl	3ffc <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>
    fcfa:	2800      	cmp	r0, #0
    fcfc:	d1f5      	bne.n	fcea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x248>
    fcfe:	88a1      	ldrh	r1, [r4, #4]
    fd00:	8860      	ldrh	r0, [r4, #2]
    fd02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd06:	f7f5 be5f 	b.w	59c8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    fd0a:	2012      	movs	r0, #18
    fd0c:	bd10      	pop	{r4, pc}
    fd0e:	7802      	ldrb	r2, [r0, #0]
    fd10:	2a01      	cmp	r2, #1
    fd12:	d001      	beq.n	fd18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x276>
    fd14:	b1ba      	cbz	r2, fd46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fd16:	e018      	b.n	fd4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
    fd18:	7842      	ldrb	r2, [r0, #1]
    fd1a:	b13a      	cbz	r2, fd2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28a>
    fd1c:	2a01      	cmp	r2, #1
    fd1e:	d005      	beq.n	fd2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28a>
    fd20:	2a02      	cmp	r2, #2
    fd22:	d112      	bne.n	fd4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
    fd24:	b189      	cbz	r1, fd4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
    fd26:	8881      	ldrh	r1, [r0, #4]
    fd28:	b179      	cbz	r1, fd4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
    fd2a:	e000      	b.n	fd2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28c>
    fd2c:	b159      	cbz	r1, fd46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fd2e:	8841      	ldrh	r1, [r0, #2]
    fd30:	b149      	cbz	r1, fd46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fd32:	8880      	ldrh	r0, [r0, #4]
    fd34:	b138      	cbz	r0, fd46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fd36:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fd3a:	0049      	lsls	r1, r1, #1
    fd3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fd40:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    fd44:	d201      	bcs.n	fd4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
    fd46:	2000      	movs	r0, #0
    fd48:	4770      	bx	lr
    fd4a:	2012      	movs	r0, #18
    fd4c:	4770      	bx	lr
    fd4e:	b570      	push	{r4, r5, r6, lr}
    fd50:	4614      	mov	r4, r2
    fd52:	460d      	mov	r5, r1
    fd54:	b108      	cbz	r0, fd5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b8>
    fd56:	2801      	cmp	r0, #1
    fd58:	d10c      	bne.n	fd74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d2>
    fd5a:	2b02      	cmp	r3, #2
    fd5c:	d00c      	beq.n	fd78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d6>
    fd5e:	4619      	mov	r1, r3
    fd60:	4610      	mov	r0, r2
    fd62:	f7f7 f895 	bl	6e90 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x350>
    fd66:	b178      	cbz	r0, fd88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e6>
    fd68:	4628      	mov	r0, r5
    fd6a:	f7f7 f825 	bl	6db8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x278>
    fd6e:	b158      	cbz	r0, fd88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e6>
    fd70:	42ac      	cmp	r4, r5
    fd72:	d90b      	bls.n	fd8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ea>
    fd74:	2012      	movs	r0, #18
    fd76:	bd70      	pop	{r4, r5, r6, pc}
    fd78:	4610      	mov	r0, r2
    fd7a:	f7f7 f87d 	bl	6e78 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x338>
    fd7e:	b118      	cbz	r0, fd88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e6>
    fd80:	4628      	mov	r0, r5
    fd82:	f7f7 f86d 	bl	6e60 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x320>
    fd86:	e7f2      	b.n	fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2cc>
    fd88:	2030      	movs	r0, #48	; 0x30
    fd8a:	bd70      	pop	{r4, r5, r6, pc}
    fd8c:	2000      	movs	r0, #0
    fd8e:	bd70      	pop	{r4, r5, r6, pc}
    fd90:	2801      	cmp	r0, #1
    fd92:	d002      	beq.n	fd9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f8>
    fd94:	b118      	cbz	r0, fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2fc>
    fd96:	2000      	movs	r0, #0
    fd98:	4770      	bx	lr
    fd9a:	2002      	movs	r0, #2
    fd9c:	4770      	bx	lr
    fd9e:	2001      	movs	r0, #1
    fda0:	4770      	bx	lr
    fda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fda6:	7890      	ldrb	r0, [r2, #2]
    fda8:	9e06      	ldr	r6, [sp, #24]
    fdaa:	461d      	mov	r5, r3
    fdac:	4614      	mov	r4, r2
    fdae:	b908      	cbnz	r0, fdb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x312>
    fdb0:	f7f7 fa74 	bl	729c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fdb4:	78e4      	ldrb	r4, [r4, #3]
    fdb6:	4607      	mov	r7, r0
    fdb8:	b914      	cbnz	r4, fdc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x31e>
    fdba:	f7f7 fa6f 	bl	729c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fdbe:	4604      	mov	r4, r0
    fdc0:	b16f      	cbz	r7, fdde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33c>
    fdc2:	b164      	cbz	r4, fdde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33c>
    fdc4:	4638      	mov	r0, r7
    fdc6:	f7ff fe7c 	bl	fac2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20>
    fdca:	4620      	mov	r0, r4
    fdcc:	f7ff fe79 	bl	fac2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20>
    fdd0:	b12f      	cbz	r7, fdde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33c>
    fdd2:	b124      	cbz	r4, fdde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33c>
    fdd4:	702f      	strb	r7, [r5, #0]
    fdd6:	7034      	strb	r4, [r6, #0]
    fdd8:	2000      	movs	r0, #0
    fdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdde:	2009      	movs	r0, #9
    fde0:	e7fb      	b.n	fdda <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x338>
    fde2:	207f      	movs	r0, #127	; 0x7f
    fde4:	f000 b856 	b.w	fe94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f2>
    fde8:	b508      	push	{r3, lr}
    fdea:	f890 1318 	ldrb.w	r1, [r0, #792]	; 0x318
    fdee:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    fdf2:	f88d 0000 	strb.w	r0, [sp]
    fdf6:	9800      	ldr	r0, [sp, #0]
    fdf8:	9000      	str	r0, [sp, #0]
    fdfa:	f89d 0000 	ldrb.w	r0, [sp]
    fdfe:	b100      	cbz	r0, fe02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x360>
    fe00:	2001      	movs	r0, #1
    fe02:	1e40      	subs	r0, r0, #1
    fe04:	4208      	tst	r0, r1
    fe06:	d003      	beq.n	fe10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36e>
    fe08:	2904      	cmp	r1, #4
    fe0a:	d001      	beq.n	fe10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36e>
    fe0c:	2001      	movs	r0, #1
    fe0e:	bd08      	pop	{r3, pc}
    fe10:	2000      	movs	r0, #0
    fe12:	bd08      	pop	{r3, pc}
    fe14:	b570      	push	{r4, r5, r6, lr}
    fe16:	4605      	mov	r5, r0
    fe18:	2103      	movs	r1, #3
    fe1a:	f7fd feb1 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe1e:	0004      	movs	r4, r0
    fe20:	d105      	bne.n	fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    fe22:	2105      	movs	r1, #5
    fe24:	4628      	mov	r0, r5
    fe26:	f7fd feab 	bl	db80 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe2a:	b100      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    fe2c:	4604      	mov	r4, r0
    fe2e:	4620      	mov	r0, r4
    fe30:	bd70      	pop	{r4, r5, r6, pc}
    fe32:	b510      	push	{r4, lr}
    fe34:	f7f5 fea4 	bl	5b80 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fe38:	2804      	cmp	r0, #4
    fe3a:	d003      	beq.n	fe44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
    fe3c:	2805      	cmp	r0, #5
    fe3e:	d001      	beq.n	fe44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
    fe40:	2000      	movs	r0, #0
    fe42:	bd10      	pop	{r4, pc}
    fe44:	2001      	movs	r0, #1
    fe46:	bd10      	pop	{r4, pc}
    fe48:	b570      	push	{r4, r5, r6, lr}
    fe4a:	4605      	mov	r5, r0
    fe4c:	f7fe fd4a 	bl	e8e4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fe50:	b170      	cbz	r0, fe70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ce>
    fe52:	4628      	mov	r0, r5
    fe54:	f7fe ff74 	bl	ed40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fe58:	2800      	cmp	r0, #0
    fe5a:	d008      	beq.n	fe6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3cc>
    fe5c:	4628      	mov	r0, r5
    fe5e:	f7fe ff6c 	bl	ed3a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    fe62:	4604      	mov	r4, r0
    fe64:	4628      	mov	r0, r5
    fe66:	f7fe ff3e 	bl	ece6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fe6a:	b118      	cbz	r0, fe74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3d2>
    fe6c:	200c      	movs	r0, #12
    fe6e:	bd70      	pop	{r4, r5, r6, pc}
    fe70:	2042      	movs	r0, #66	; 0x42
    fe72:	bd70      	pop	{r4, r5, r6, pc}
    fe74:	b164      	cbz	r4, fe90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
    fe76:	8820      	ldrh	r0, [r4, #0]
    fe78:	f7f1 face 	bl	1418 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fe7c:	8820      	ldrh	r0, [r4, #0]
    fe7e:	2101      	movs	r1, #1
    fe80:	f7f0 fec4 	bl	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fe84:	b120      	cbz	r0, fe90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
    fe86:	f241 61ac 	movw	r1, #5804	; 0x16ac
    fe8a:	2039      	movs	r0, #57	; 0x39
    fe8c:	f7f0 fbba 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe90:	2000      	movs	r0, #0
    fe92:	bd70      	pop	{r4, r5, r6, pc}
    fe94:	b508      	push	{r3, lr}
    fe96:	f640 1288 	movw	r2, #2440	; 0x988
    fe9a:	2300      	movs	r3, #0
    fe9c:	4669      	mov	r1, sp
    fe9e:	f7fc fe09 	bl	cab4 <mpsl_fem_tx_power_split>
    fea2:	bd08      	pop	{r3, pc}
    fea4:	b2c0      	uxtb	r0, r0
    fea6:	06c1      	lsls	r1, r0, #27
    fea8:	d415      	bmi.n	fed6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x434>
    feaa:	0681      	lsls	r1, r0, #26
    feac:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    feb0:	d503      	bpl.n	feba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
    feb2:	bb21      	cbnz	r1, fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    feb4:	0781      	lsls	r1, r0, #30
    feb6:	d422      	bmi.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    feb8:	e001      	b.n	febe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    feba:	2900      	cmp	r1, #0
    febc:	d1fa      	bne.n	feb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
    febe:	0701      	lsls	r1, r0, #28
    fec0:	d51b      	bpl.n	fefa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x458>
    fec2:	07c1      	lsls	r1, r0, #31
    fec4:	d01b      	beq.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    fec6:	0781      	lsls	r1, r0, #30
    fec8:	d419      	bmi.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    feca:	0641      	lsls	r1, r0, #25
    fecc:	d417      	bmi.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    fece:	0741      	lsls	r1, r0, #29
    fed0:	d415      	bmi.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    fed2:	0680      	lsls	r0, r0, #26
    fed4:	e00f      	b.n	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x454>
    fed6:	0641      	lsls	r1, r0, #25
    fed8:	d411      	bmi.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    feda:	0681      	lsls	r1, r0, #26
    fedc:	d40f      	bmi.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    fede:	07c1      	lsls	r1, r0, #31
    fee0:	ea4f 7180 	mov.w	r1, r0, lsl #30
    fee4:	d004      	beq.n	fef0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44e>
    fee6:	2900      	cmp	r1, #0
    fee8:	db02      	blt.n	fef0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44e>
    feea:	0740      	lsls	r0, r0, #29
    feec:	d405      	bmi.n	fefa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x458>
    feee:	e006      	b.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    fef0:	0701      	lsls	r1, r0, #28
    fef2:	d404      	bmi.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    fef4:	0740      	lsls	r0, r0, #29
    fef6:	2800      	cmp	r0, #0
    fef8:	db01      	blt.n	fefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
    fefa:	2001      	movs	r0, #1
    fefc:	4770      	bx	lr
    fefe:	2000      	movs	r0, #0
    ff00:	4770      	bx	lr
    ff02:	b510      	push	{r4, lr}
    ff04:	f7f2 fcf6 	bl	28f4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    ff08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff0c:	f7f7 b9a4 	b.w	7258 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
    ff10:	b510      	push	{r4, lr}
    ff12:	f7f3 ff15 	bl	3d40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    ff16:	b108      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47a>
    ff18:	21fd      	movs	r1, #253	; 0xfd
    ff1a:	e004      	b.n	ff26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x484>
    ff1c:	f7f2 fcfa 	bl	2914 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ff20:	b120      	cbz	r0, ff2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48a>
    ff22:	f44f 7181 	mov.w	r1, #258	; 0x102
    ff26:	2001      	movs	r0, #1
    ff28:	f7f0 fb6c 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff30:	2002      	movs	r0, #2
    ff32:	f7fd be02 	b.w	db3a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ff36:	6802      	ldr	r2, [r0, #0]
    ff38:	b912      	cbnz	r2, ff40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49e>
    ff3a:	6001      	str	r1, [r0, #0]
    ff3c:	4770      	bx	lr
    ff3e:	4602      	mov	r2, r0
    ff40:	6850      	ldr	r0, [r2, #4]
    ff42:	b108      	cbz	r0, ff48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
    ff44:	428a      	cmp	r2, r1
    ff46:	d1fa      	bne.n	ff3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
    ff48:	428a      	cmp	r2, r1
    ff4a:	d0f7      	beq.n	ff3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49a>
    ff4c:	6051      	str	r1, [r2, #4]
    ff4e:	4770      	bx	lr
    ff50:	b510      	push	{r4, lr}
    ff52:	4604      	mov	r4, r0
    ff54:	e002      	b.n	ff5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ba>
    ff56:	6820      	ldr	r0, [r4, #0]
    ff58:	4780      	blx	r0
    ff5a:	6864      	ldr	r4, [r4, #4]
    ff5c:	2c00      	cmp	r4, #0
    ff5e:	d1fa      	bne.n	ff56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b4>
    ff60:	bd10      	pop	{r4, pc}
    ff62:	b510      	push	{r4, lr}
    ff64:	f7f4 f894 	bl	4090 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    ff68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff6c:	f7f7 b97e 	b.w	726c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>
    ff70:	b510      	push	{r4, lr}
    ff72:	f7f5 fe65 	bl	5c40 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    ff76:	b110      	cbz	r0, ff7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4dc>
    ff78:	f240 113b 	movw	r1, #315	; 0x13b
    ff7c:	e004      	b.n	ff88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4e6>
    ff7e:	f7f6 fbf9 	bl	6774 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    ff82:	b120      	cbz	r0, ff8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ec>
    ff84:	f44f 719e 	mov.w	r1, #316	; 0x13c
    ff88:	2001      	movs	r0, #1
    ff8a:	f7f0 fb3b 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff8e:	f7f6 fdd1 	bl	6b34 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    ff92:	f7f4 f8a1 	bl	40d8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    ff96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff9a:	f7f6 bcf3 	b.w	6984 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>

0000ff9e <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>:
    ff9e:	b510      	push	{r4, lr}
    ffa0:	2101      	movs	r1, #1
    ffa2:	71c1      	strb	r1, [r0, #7]
    ffa4:	7181      	strb	r1, [r0, #6]
    ffa6:	8081      	strh	r1, [r0, #4]
    ffa8:	4604      	mov	r4, r0
    ffaa:	2104      	movs	r1, #4
    ffac:	f7f0 fbaa 	bl	704 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    ffb0:	2800      	cmp	r0, #0
    ffb2:	d102      	bne.n	ffba <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA+0x1c>
    ffb4:	6820      	ldr	r0, [r4, #0]
    ffb6:	1c40      	adds	r0, r0, #1
    ffb8:	6020      	str	r0, [r4, #0]
    ffba:	bd10      	pop	{r4, pc}

0000ffbc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    ffbc:	f7fc ba0c 	b.w	c3d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    ffc0:	000b0001 	.word	0x000b0001
    ffc4:	000a0002 	.word	0x000a0002
    ffc8:	00090005 	.word	0x00090005
    ffcc:	0008000a 	.word	0x0008000a
    ffd0:	00070014 	.word	0x00070014
    ffd4:	0006001e 	.word	0x0006001e
    ffd8:	00050032 	.word	0x00050032
    ffdc:	0004004b 	.word	0x0004004b
    ffe0:	00030064 	.word	0x00030064
    ffe4:	00020096 	.word	0x00020096
    ffe8:	000100fa 	.word	0x000100fa
    ffec:	000001f4 	.word	0x000001f4

0000fff0 <sym_HDXV6XMLHCLB5RJEPHSKKLJJM3TFLHYSQSNRE7Y>:
    fff0:	6888      	ldr	r0, [r1, #8]
    fff2:	f7fd bf45 	b.w	de80 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000fff6 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>:
    fff6:	b508      	push	{r3, lr}
    fff8:	7c01      	ldrb	r1, [r0, #16]
    fffa:	f88d 1000 	strb.w	r1, [sp]
    fffe:	9900      	ldr	r1, [sp, #0]
   10000:	9100      	str	r1, [sp, #0]
   10002:	f89d 2000 	ldrb.w	r2, [sp]
   10006:	2a01      	cmp	r2, #1
   10008:	d003      	beq.n	10012 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ+0x1c>
   1000a:	f000 f814 	bl	10036 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   1000e:	2800      	cmp	r0, #0
   10010:	d000      	beq.n	10014 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ+0x1e>
   10012:	2001      	movs	r0, #1
   10014:	bd08      	pop	{r3, pc}

00010016 <sym_LIFN2Y3GE7UOQ2L3AQIJRF3IQCD3MRRIZIOEAJY>:
   10016:	b510      	push	{r4, lr}
   10018:	4604      	mov	r4, r0
   1001a:	f000 f841 	bl	100a0 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x2c>
   1001e:	b918      	cbnz	r0, 10028 <sym_LIFN2Y3GE7UOQ2L3AQIJRF3IQCD3MRRIZIOEAJY+0x12>
   10020:	f104 0020 	add.w	r0, r4, #32
   10024:	f7f6 fc62 	bl	68ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
   10028:	2000      	movs	r0, #0
   1002a:	bd10      	pop	{r4, pc}

0001002c <sym_S65COPWIAFLT7QK4B3CGHSYTM4OO4NO3OW6UHHI>:
   1002c:	b510      	push	{r4, lr}
   1002e:	f000 f837 	bl	100a0 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x2c>
   10032:	2000      	movs	r0, #0
   10034:	bd10      	pop	{r4, pc}

00010036 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>:
   10036:	b50e      	push	{r1, r2, r3, lr}
   10038:	7c01      	ldrb	r1, [r0, #16]
   1003a:	f88d 1000 	strb.w	r1, [sp]
   1003e:	9900      	ldr	r1, [sp, #0]
   10040:	9100      	str	r1, [sp, #0]
   10042:	f89d 2000 	ldrb.w	r2, [sp]
   10046:	b19a      	cbz	r2, 10070 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY+0x3a>
   10048:	7c01      	ldrb	r1, [r0, #16]
   1004a:	f88d 1008 	strb.w	r1, [sp, #8]
   1004e:	9902      	ldr	r1, [sp, #8]
   10050:	9100      	str	r1, [sp, #0]
   10052:	f89d 2000 	ldrb.w	r2, [sp]
   10056:	2a01      	cmp	r2, #1
   10058:	d00a      	beq.n	10070 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY+0x3a>
   1005a:	7c00      	ldrb	r0, [r0, #16]
   1005c:	f88d 0004 	strb.w	r0, [sp, #4]
   10060:	9801      	ldr	r0, [sp, #4]
   10062:	9000      	str	r0, [sp, #0]
   10064:	f89d 1000 	ldrb.w	r1, [sp]
   10068:	2907      	cmp	r1, #7
   1006a:	d001      	beq.n	10070 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY+0x3a>
   1006c:	2001      	movs	r0, #1
   1006e:	bd0e      	pop	{r1, r2, r3, pc}
   10070:	2000      	movs	r0, #0
   10072:	bd0e      	pop	{r1, r2, r3, pc}

00010074 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII>:
   10074:	b570      	push	{r4, r5, r6, lr}
   10076:	460e      	mov	r6, r1
   10078:	4605      	mov	r5, r0
   1007a:	f7ff ffbc 	bl	fff6 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
   1007e:	2800      	cmp	r0, #0
   10080:	d00d      	beq.n	1009e <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x2a>
   10082:	f105 0410 	add.w	r4, r5, #16
   10086:	2e01      	cmp	r6, #1
   10088:	d107      	bne.n	1009a <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x26>
   1008a:	2007      	movs	r0, #7
   1008c:	7020      	strb	r0, [r4, #0]
   1008e:	7928      	ldrb	r0, [r5, #4]
   10090:	f7fa fd12 	bl	aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   10094:	7928      	ldrb	r0, [r5, #4]
   10096:	f7fa fe63 	bl	ad60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   1009a:	2001      	movs	r0, #1
   1009c:	7020      	strb	r0, [r4, #0]
   1009e:	bd70      	pop	{r4, r5, r6, pc}
   100a0:	b510      	push	{r4, lr}
   100a2:	4604      	mov	r4, r0
   100a4:	f7ff ffa7 	bl	fff6 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
   100a8:	b178      	cbz	r0, 100ca <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x56>
   100aa:	2101      	movs	r1, #1
   100ac:	4620      	mov	r0, r4
   100ae:	f7ff ffe1 	bl	10074 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII>
   100b2:	7920      	ldrb	r0, [r4, #4]
   100b4:	f7fa fe32 	bl	ad1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   100b8:	b110      	cbz	r0, 100c0 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x4c>
   100ba:	2000      	movs	r0, #0
   100bc:	7420      	strb	r0, [r4, #16]
   100be:	bd10      	pop	{r4, pc}
   100c0:	f44f 7101 	mov.w	r1, #516	; 0x204
   100c4:	200b      	movs	r0, #11
   100c6:	f7f0 fa9d 	bl	604 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100ca:	200c      	movs	r0, #12
   100cc:	bd10      	pop	{r4, pc}

000100ce <sym_QT7CN5RSIHUVCYKTUKHJII2MTGNYH7F3ANVDDWQ>:
   100ce:	4770      	bx	lr

000100d0 <sym_W7HPZT4ZZWPRGP66GDZI4KM3L4VPFAYQTFZ7HRI>:
   100d0:	2106      	movs	r1, #6
   100d2:	f7f0 bd9b 	b.w	c0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>

000100d6 <sym_CCCM5F3WBE5G2EGSSOBDEOIOAKSXNRWOXMM3JZA>:
   100d6:	4770      	bx	lr

000100d8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   100d8:	b510      	push	{r4, lr}
   100da:	f7f7 fd43 	bl	7b64 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   100de:	f7f7 f9f3 	bl	74c8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   100e2:	f7f7 f985 	bl	73f0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   100e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100ea:	f7f7 b9e5 	b.w	74b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000100ee <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   100ee:	b510      	push	{r4, lr}
   100f0:	4604      	mov	r4, r0
   100f2:	4608      	mov	r0, r1
   100f4:	f7f7 feca 	bl	7e8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   100f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   100fc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10100:	fbb0 f0f1 	udiv	r0, r0, r1
   10104:	1a20      	subs	r0, r4, r0
   10106:	1e80      	subs	r0, r0, #2
   10108:	bd10      	pop	{r4, pc}

0001010a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1010a:	b510      	push	{r4, lr}
   1010c:	4604      	mov	r4, r0
   1010e:	4608      	mov	r0, r1
   10110:	f7f7 febc 	bl	7e8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10118:	fbb0 f0f1 	udiv	r0, r0, r1
   1011c:	1a20      	subs	r0, r4, r0
   1011e:	bd10      	pop	{r4, pc}

00010120 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   10120:	680a      	ldr	r2, [r1, #0]
   10122:	6002      	str	r2, [r0, #0]
   10124:	790b      	ldrb	r3, [r1, #4]
   10126:	7103      	strb	r3, [r0, #4]
   10128:	4770      	bx	lr

0001012a <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   1012a:	2100      	movs	r1, #0
   1012c:	6001      	str	r1, [r0, #0]
   1012e:	8081      	strh	r1, [r0, #4]
   10130:	4770      	bx	lr
   10132:	2804      	cmp	r0, #4
   10134:	d202      	bcs.n	1013c <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x12>
   10136:	f04f 0028 	mov.w	r0, #40	; 0x28
   1013a:	4770      	bx	lr
   1013c:	d102      	bne.n	10144 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x1a>
   1013e:	f04f 0010 	mov.w	r0, #16
   10142:	4770      	bx	lr
   10144:	f04f 0000 	mov.w	r0, #0
   10148:	4770      	bx	lr
   1014a:	2100      	movs	r1, #0
   1014c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10150:	f800 1f24 	strb.w	r1, [r0, #36]!
   10154:	7041      	strb	r1, [r0, #1]
   10156:	4770      	bx	lr

00010158 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10158:	b570      	push	{r4, r5, r6, lr}
   1015a:	f7f8 fef1 	bl	8f40 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   1015e:	4605      	mov	r5, r0
   10160:	2400      	movs	r4, #0
   10162:	e006      	b.n	10172 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10164:	4620      	mov	r0, r4
   10166:	f7f8 fef1 	bl	8f4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1016a:	f7ff ffee 	bl	1014a <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x20>
   1016e:	1c64      	adds	r4, r4, #1
   10170:	b2e4      	uxtb	r4, r4
   10172:	42ac      	cmp	r4, r5
   10174:	d3f6      	bcc.n	10164 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10176:	bd70      	pop	{r4, r5, r6, pc}

00010178 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10178:	f7fb bad0 	b.w	b71c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0001017c <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   1017c:	b510      	push	{r4, lr}
   1017e:	2000      	movs	r0, #0
   10180:	f7fb fe06 	bl	bd90 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10184:	6800      	ldr	r0, [r0, #0]
   10186:	2800      	cmp	r0, #0
   10188:	bf18      	it	ne
   1018a:	2001      	movne	r0, #1
   1018c:	bd10      	pop	{r4, pc}

0001018e <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   1018e:	b510      	push	{r4, lr}
   10190:	f7fb fe98 	bl	bec4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10194:	f7fb f93c 	bl	b410 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10198:	f000 f804 	bl	101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1019c:	b280      	uxth	r0, r0
   1019e:	bd10      	pop	{r4, pc}

000101a0 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>:
   101a0:	f000 b80d 	b.w	101be <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>

000101a4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   101a4:	0a41      	lsrs	r1, r0, #9
   101a6:	f643 5209 	movw	r2, #15625	; 0x3d09
   101aa:	4351      	muls	r1, r2
   101ac:	f3c0 0008 	ubfx	r0, r0, #0, #9
   101b0:	fb10 f002 	smulbb	r0, r0, r2
   101b4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   101b8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   101bc:	4770      	bx	lr

000101be <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>:
   101be:	2000      	movs	r0, #0
   101c0:	4770      	bx	lr
   101c2:	2800      	cmp	r0, #0
   101c4:	db09      	blt.n	101da <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1c>
   101c6:	f000 021f 	and.w	r2, r0, #31
   101ca:	2101      	movs	r1, #1
   101cc:	4091      	lsls	r1, r2
   101ce:	0940      	lsrs	r0, r0, #5
   101d0:	0080      	lsls	r0, r0, #2
   101d2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101d6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   101da:	4770      	bx	lr
   101dc:	2800      	cmp	r0, #0
   101de:	db0d      	blt.n	101fc <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x3e>
   101e0:	f000 021f 	and.w	r2, r0, #31
   101e4:	2101      	movs	r1, #1
   101e6:	4091      	lsls	r1, r2
   101e8:	0940      	lsrs	r0, r0, #5
   101ea:	0080      	lsls	r0, r0, #2
   101ec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101f0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   101f4:	f3bf 8f4f 	dsb	sy
   101f8:	f3bf 8f6f 	isb	sy
   101fc:	4770      	bx	lr
   101fe:	5840      	ldr	r0, [r0, r1]
   10200:	2800      	cmp	r0, #0
   10202:	d000      	beq.n	10206 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x48>
   10204:	2001      	movs	r0, #1
   10206:	4770      	bx	lr
   10208:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   1020c:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10210:	f002 0201 	and.w	r2, r2, #1
   10214:	03c0      	lsls	r0, r0, #15
   10216:	d503      	bpl.n	10220 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x62>
   10218:	428a      	cmp	r2, r1
   1021a:	d101      	bne.n	10220 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x62>
   1021c:	2001      	movs	r0, #1
   1021e:	4770      	bx	lr
   10220:	2000      	movs	r0, #0
   10222:	4770      	bx	lr

00010224 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10224:	b510      	push	{r4, lr}
   10226:	2101      	movs	r1, #1
   10228:	0788      	lsls	r0, r1, #30
   1022a:	f7fc f96d 	bl	c508 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1022e:	2800      	cmp	r0, #0
   10230:	d000      	beq.n	10234 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10232:	2001      	movs	r0, #1
   10234:	bd10      	pop	{r4, pc}

00010236 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10236:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1023a:	2101      	movs	r1, #1
   1023c:	6001      	str	r1, [r0, #0]
   1023e:	4770      	bx	lr

00010240 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10240:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10244:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10248:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   1024c:	f002 0203 	and.w	r2, r2, #3
   10250:	03c9      	lsls	r1, r1, #15
   10252:	d503      	bpl.n	1025c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10254:	4282      	cmp	r2, r0
   10256:	d101      	bne.n	1025c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10258:	2001      	movs	r0, #1
   1025a:	4770      	bx	lr
   1025c:	2000      	movs	r0, #0
   1025e:	4770      	bx	lr

00010260 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10260:	b510      	push	{r4, lr}
   10262:	2100      	movs	r1, #0
   10264:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10268:	f7fc f94e 	bl	c508 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1026c:	2800      	cmp	r0, #0
   1026e:	d000      	beq.n	10272 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10270:	2001      	movs	r0, #1
   10272:	bd10      	pop	{r4, pc}
   10274:	2800      	cmp	r0, #0
   10276:	db09      	blt.n	1028c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10278:	f000 021f 	and.w	r2, r0, #31
   1027c:	2101      	movs	r1, #1
   1027e:	4091      	lsls	r1, r2
   10280:	0940      	lsrs	r0, r0, #5
   10282:	0080      	lsls	r0, r0, #2
   10284:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10288:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1028c:	4770      	bx	lr
   1028e:	2800      	cmp	r0, #0
   10290:	db0d      	blt.n	102ae <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10292:	f000 021f 	and.w	r2, r0, #31
   10296:	2101      	movs	r1, #1
   10298:	4091      	lsls	r1, r2
   1029a:	0940      	lsrs	r0, r0, #5
   1029c:	0080      	lsls	r0, r0, #2
   1029e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102a2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   102a6:	f3bf 8f4f 	dsb	sy
   102aa:	f3bf 8f6f 	isb	sy
   102ae:	4770      	bx	lr
   102b0:	00021000 	.word	0x00021000
   102b4:	000000fa 	.word	0x000000fa
   102b8:	cc9ef18c 	.word	0xcc9ef18c
   102bc:	a7d74134 	.word	0xa7d74134
   102c0:	1459f70e 	.word	0x1459f70e
   102c4:	67d72bbb 	.word	0x67d72bbb
   102c8:	ebbebb7f 	.word	0xebbebb7f
   102cc:	2800      	cmp	r0, #0
   102ce:	db09      	blt.n	102e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   102d0:	f000 021f 	and.w	r2, r0, #31
   102d4:	2101      	movs	r1, #1
   102d6:	4091      	lsls	r1, r2
   102d8:	0940      	lsrs	r0, r0, #5
   102da:	0080      	lsls	r0, r0, #2
   102dc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102e0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   102e4:	4770      	bx	lr

000102e6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   102e6:	f3ef 8110 	mrs	r1, PRIMASK
   102ea:	b672      	cpsid	i
   102ec:	7802      	ldrb	r2, [r0, #0]
   102ee:	2a01      	cmp	r2, #1
   102f0:	d001      	beq.n	102f6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   102f2:	2201      	movs	r2, #1
   102f4:	e000      	b.n	102f8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   102f6:	2200      	movs	r2, #0
   102f8:	2301      	movs	r3, #1
   102fa:	7003      	strb	r3, [r0, #0]
   102fc:	b901      	cbnz	r1, 10300 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   102fe:	b662      	cpsie	i
   10300:	b10a      	cbz	r2, 10306 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10302:	2000      	movs	r0, #0
   10304:	4770      	bx	lr
   10306:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1030a:	4770      	bx	lr

0001030c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   1030c:	2100      	movs	r1, #0
   1030e:	7001      	strb	r1, [r0, #0]
   10310:	4608      	mov	r0, r1
   10312:	4770      	bx	lr

00010314 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10314:	f3ef 8110 	mrs	r1, PRIMASK
   10318:	b672      	cpsid	i
   1031a:	2200      	movs	r2, #0
   1031c:	7002      	strb	r2, [r0, #0]
   1031e:	b901      	cbnz	r1, 10322 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10320:	b662      	cpsie	i
   10322:	2000      	movs	r0, #0
   10324:	4770      	bx	lr

00010326 <mpsl_low_priority_process>:
   10326:	f7fc ba45 	b.w	c7b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0001032a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   1032a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1032e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10332:	280f      	cmp	r0, #15
   10334:	d001      	beq.n	1033a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10336:	2000      	movs	r0, #0
   10338:	4770      	bx	lr
   1033a:	2001      	movs	r0, #1
   1033c:	4770      	bx	lr

0001033e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   1033e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10342:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10346:	280a      	cmp	r0, #10
   10348:	d001      	beq.n	1034e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   1034a:	2000      	movs	r0, #0
   1034c:	4770      	bx	lr
   1034e:	2001      	movs	r0, #1
   10350:	4770      	bx	lr

00010352 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10352:	b500      	push	{lr}
   10354:	f7ff fff3 	bl	1033e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10358:	b120      	cbz	r0, 10364 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   1035a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1035e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10362:	b108      	cbz	r0, 10368 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10364:	2000      	movs	r0, #0
   10366:	bd00      	pop	{pc}
   10368:	2001      	movs	r0, #1
   1036a:	bd00      	pop	{pc}

0001036c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1036c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10370:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10374:	280e      	cmp	r0, #14
   10376:	d001      	beq.n	1037c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10378:	2000      	movs	r0, #0
   1037a:	4770      	bx	lr
   1037c:	2001      	movs	r0, #1
   1037e:	4770      	bx	lr

00010380 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10380:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10384:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10388:	2810      	cmp	r0, #16
   1038a:	d001      	beq.n	10390 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   1038c:	2000      	movs	r0, #0
   1038e:	4770      	bx	lr
   10390:	2001      	movs	r0, #1
   10392:	4770      	bx	lr

00010394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10394:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10398:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1039c:	2806      	cmp	r0, #6
   1039e:	d003      	beq.n	103a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   103a0:	1c40      	adds	r0, r0, #1
   103a2:	d001      	beq.n	103a8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   103a4:	2000      	movs	r0, #0
   103a6:	4770      	bx	lr
   103a8:	2001      	movs	r0, #1
   103aa:	4770      	bx	lr

000103ac <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   103ac:	b500      	push	{lr}
   103ae:	f7ff fff1 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   103b2:	b148      	cbz	r0, 103c8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   103b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103b8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   103bc:	2806      	cmp	r0, #6
   103be:	d303      	bcc.n	103c8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   103c0:	1c40      	adds	r0, r0, #1
   103c2:	d001      	beq.n	103c8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   103c4:	2001      	movs	r0, #1
   103c6:	bd00      	pop	{pc}
   103c8:	2000      	movs	r0, #0
   103ca:	bd00      	pop	{pc}

000103cc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   103cc:	b500      	push	{lr}
   103ce:	f7ff ffe1 	bl	10394 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   103d2:	b138      	cbz	r0, 103e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   103d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103d8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   103dc:	2806      	cmp	r0, #6
   103de:	d303      	bcc.n	103e8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   103e0:	1c40      	adds	r0, r0, #1
   103e2:	d001      	beq.n	103e8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   103e4:	2000      	movs	r0, #0
   103e6:	bd00      	pop	{pc}
   103e8:	2001      	movs	r0, #1
   103ea:	bd00      	pop	{pc}

000103ec <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   103ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103f0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   103f4:	280d      	cmp	r0, #13
   103f6:	d001      	beq.n	103fc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   103f8:	2000      	movs	r0, #0
   103fa:	4770      	bx	lr
   103fc:	2001      	movs	r0, #1
   103fe:	4770      	bx	lr

00010400 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10400:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10404:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10408:	2808      	cmp	r0, #8
   1040a:	d001      	beq.n	10410 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   1040c:	2000      	movs	r0, #0
   1040e:	4770      	bx	lr
   10410:	2001      	movs	r0, #1
   10412:	4770      	bx	lr

00010414 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10414:	f7fc ba08 	b.w	c828 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010418 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10418:	f7fc ba06 	b.w	c828 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0001041c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   1041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10420:	428a      	cmp	r2, r1
   10422:	d803      	bhi.n	1042c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10424:	2179      	movs	r1, #121	; 0x79
   10426:	2096      	movs	r0, #150	; 0x96
   10428:	f7fc f8c4 	bl	c5b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1042c:	fab2 f382 	clz	r3, r2
   10430:	b13b      	cbz	r3, 10442 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10432:	4099      	lsls	r1, r3
   10434:	f1c3 0420 	rsb	r4, r3, #32
   10438:	fa20 f404 	lsr.w	r4, r0, r4
   1043c:	4321      	orrs	r1, r4
   1043e:	4098      	lsls	r0, r3
   10440:	409a      	lsls	r2, r3
   10442:	0c14      	lsrs	r4, r2, #16
   10444:	0c07      	lsrs	r7, r0, #16
   10446:	b286      	uxth	r6, r0
   10448:	fbb1 f0f4 	udiv	r0, r1, r4
   1044c:	fbb1 f3f4 	udiv	r3, r1, r4
   10450:	fb04 1c10 	mls	ip, r4, r0, r1
   10454:	b295      	uxth	r5, r2
   10456:	fb03 f005 	mul.w	r0, r3, r5
   1045a:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   1045e:	4560      	cmp	r0, ip
   10460:	d907      	bls.n	10472 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10462:	eba0 000c 	sub.w	r0, r0, ip
   10466:	4290      	cmp	r0, r2
   10468:	d901      	bls.n	1046e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   1046a:	2002      	movs	r0, #2
   1046c:	e000      	b.n	10470 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   1046e:	2001      	movs	r0, #1
   10470:	1a1b      	subs	r3, r3, r0
   10472:	0409      	lsls	r1, r1, #16
   10474:	0418      	lsls	r0, r3, #16
   10476:	19c9      	adds	r1, r1, r7
   10478:	fba3 3702 	umull	r3, r7, r3, r2
   1047c:	1acf      	subs	r7, r1, r3
   1047e:	fbb7 f1f4 	udiv	r1, r7, r4
   10482:	fbb7 f3f4 	udiv	r3, r7, r4
   10486:	fb04 7413 	mls	r4, r4, r3, r7
   1048a:	fb01 f305 	mul.w	r3, r1, r5
   1048e:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10492:	42a3      	cmp	r3, r4
   10494:	d906      	bls.n	104a4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10496:	1b1b      	subs	r3, r3, r4
   10498:	4293      	cmp	r3, r2
   1049a:	d901      	bls.n	104a0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   1049c:	2202      	movs	r2, #2
   1049e:	e000      	b.n	104a2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   104a0:	2201      	movs	r2, #1
   104a2:	1a89      	subs	r1, r1, r2
   104a4:	4308      	orrs	r0, r1
   104a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000104aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   104aa:	b4f0      	push	{r4, r5, r6, r7}
   104ac:	ea80 0c01 	eor.w	ip, r0, r1
   104b0:	4603      	mov	r3, r0
   104b2:	f01c 0f03 	tst.w	ip, #3
   104b6:	d13c      	bne.n	10532 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   104b8:	f013 0f03 	tst.w	r3, #3
   104bc:	d00b      	beq.n	104d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   104be:	2a00      	cmp	r2, #0
   104c0:	bf04      	itt	eq
   104c2:	bcf0      	popeq	{r4, r5, r6, r7}
   104c4:	4770      	bxeq	lr
   104c6:	f811 cb01 	ldrb.w	ip, [r1], #1
   104ca:	f803 cb01 	strb.w	ip, [r3], #1
   104ce:	1e52      	subs	r2, r2, #1
   104d0:	f013 0f03 	tst.w	r3, #3
   104d4:	d1f3      	bne.n	104be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   104d6:	2a03      	cmp	r2, #3
   104d8:	d94f      	bls.n	1057a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   104da:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   104de:	d24c      	bcs.n	1057a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   104e0:	f1c2 0c00 	rsb	ip, r2, #0
   104e4:	ea4f 74ec 	mov.w	r4, ip, asr #31
   104e8:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   104ec:	ea4f 0cac 	mov.w	ip, ip, asr #2
   104f0:	f1cc 0c00 	rsb	ip, ip, #0
   104f4:	f1bc 0f00 	cmp.w	ip, #0
   104f8:	dd1b      	ble.n	10532 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   104fa:	1f0d      	subs	r5, r1, #4
   104fc:	1f1c      	subs	r4, r3, #4
   104fe:	f01c 0f01 	tst.w	ip, #1
   10502:	d003      	beq.n	1050c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10504:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10508:	f844 6f04 	str.w	r6, [r4, #4]!
   1050c:	ea5f 066c 	movs.w	r6, ip, asr #1
   10510:	d007      	beq.n	10522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10512:	686f      	ldr	r7, [r5, #4]
   10514:	6067      	str	r7, [r4, #4]
   10516:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1051a:	f844 7f08 	str.w	r7, [r4, #8]!
   1051e:	1e76      	subs	r6, r6, #1
   10520:	d1f7      	bne.n	10512 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10522:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10526:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1052a:	f1cc 0c00 	rsb	ip, ip, #0
   1052e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10532:	2a00      	cmp	r2, #0
   10534:	bf04      	itt	eq
   10536:	bcf0      	popeq	{r4, r5, r6, r7}
   10538:	4770      	bxeq	lr
   1053a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1053e:	d226      	bcs.n	1058e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10540:	2a00      	cmp	r2, #0
   10542:	bfdc      	itt	le
   10544:	bcf0      	pople	{r4, r5, r6, r7}
   10546:	4770      	bxle	lr
   10548:	1e49      	subs	r1, r1, #1
   1054a:	1e5b      	subs	r3, r3, #1
   1054c:	f012 0f01 	tst.w	r2, #1
   10550:	d003      	beq.n	1055a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10552:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10556:	f803 cf01 	strb.w	ip, [r3, #1]!
   1055a:	1052      	asrs	r2, r2, #1
   1055c:	bf04      	itt	eq
   1055e:	bcf0      	popeq	{r4, r5, r6, r7}
   10560:	4770      	bxeq	lr
   10562:	f891 c001 	ldrb.w	ip, [r1, #1]
   10566:	f883 c001 	strb.w	ip, [r3, #1]
   1056a:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   1056e:	f803 cf02 	strb.w	ip, [r3, #2]!
   10572:	1e52      	subs	r2, r2, #1
   10574:	d1f5      	bne.n	10562 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10576:	bcf0      	pop	{r4, r5, r6, r7}
   10578:	4770      	bx	lr
   1057a:	2a04      	cmp	r2, #4
   1057c:	d3d9      	bcc.n	10532 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1057e:	f851 cb04 	ldr.w	ip, [r1], #4
   10582:	1f12      	subs	r2, r2, #4
   10584:	f843 cb04 	str.w	ip, [r3], #4
   10588:	2a04      	cmp	r2, #4
   1058a:	d2f8      	bcs.n	1057e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   1058c:	e7d1      	b.n	10532 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1058e:	f811 cb01 	ldrb.w	ip, [r1], #1
   10592:	f803 cb01 	strb.w	ip, [r3], #1
   10596:	1e52      	subs	r2, r2, #1
   10598:	d1f9      	bne.n	1058e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1059a:	bcf0      	pop	{r4, r5, r6, r7}
   1059c:	4770      	bx	lr

0001059e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   1059e:	b470      	push	{r4, r5, r6}
   105a0:	4603      	mov	r3, r0
   105a2:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   105a6:	f010 0f03 	tst.w	r0, #3
   105aa:	d009      	beq.n	105c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   105ac:	2a00      	cmp	r2, #0
   105ae:	bf04      	itt	eq
   105b0:	bc70      	popeq	{r4, r5, r6}
   105b2:	4770      	bxeq	lr
   105b4:	f803 cb01 	strb.w	ip, [r3], #1
   105b8:	1e52      	subs	r2, r2, #1
   105ba:	f013 0f03 	tst.w	r3, #3
   105be:	d1f5      	bne.n	105ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   105c0:	b2c9      	uxtb	r1, r1
   105c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   105c6:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   105ca:	2a03      	cmp	r2, #3
   105cc:	d939      	bls.n	10642 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   105ce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   105d2:	d236      	bcs.n	10642 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   105d4:	4251      	negs	r1, r2
   105d6:	17cc      	asrs	r4, r1, #31
   105d8:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   105dc:	1089      	asrs	r1, r1, #2
   105de:	424e      	negs	r6, r1
   105e0:	2e00      	cmp	r6, #0
   105e2:	dd11      	ble.n	10608 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   105e4:	1f19      	subs	r1, r3, #4
   105e6:	f016 0f01 	tst.w	r6, #1
   105ea:	bf18      	it	ne
   105ec:	f841 5f04 	strne.w	r5, [r1, #4]!
   105f0:	1074      	asrs	r4, r6, #1
   105f2:	d004      	beq.n	105fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   105f4:	604d      	str	r5, [r1, #4]
   105f6:	f841 5f08 	str.w	r5, [r1, #8]!
   105fa:	1e64      	subs	r4, r4, #1
   105fc:	d1fa      	bne.n	105f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   105fe:	4271      	negs	r1, r6
   10600:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10604:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10608:	2a00      	cmp	r2, #0
   1060a:	bf04      	itt	eq
   1060c:	bc70      	popeq	{r4, r5, r6}
   1060e:	4770      	bxeq	lr
   10610:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10614:	d21d      	bcs.n	10652 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10616:	2a00      	cmp	r2, #0
   10618:	bfdc      	itt	le
   1061a:	bc70      	pople	{r4, r5, r6}
   1061c:	4770      	bxle	lr
   1061e:	1e59      	subs	r1, r3, #1
   10620:	f012 0f01 	tst.w	r2, #1
   10624:	bf18      	it	ne
   10626:	f801 cf01 	strbne.w	ip, [r1, #1]!
   1062a:	1052      	asrs	r2, r2, #1
   1062c:	bf04      	itt	eq
   1062e:	bc70      	popeq	{r4, r5, r6}
   10630:	4770      	bxeq	lr
   10632:	f881 c001 	strb.w	ip, [r1, #1]
   10636:	f801 cf02 	strb.w	ip, [r1, #2]!
   1063a:	1e52      	subs	r2, r2, #1
   1063c:	d1f9      	bne.n	10632 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   1063e:	bc70      	pop	{r4, r5, r6}
   10640:	4770      	bx	lr
   10642:	2a04      	cmp	r2, #4
   10644:	d3e0      	bcc.n	10608 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10646:	1f12      	subs	r2, r2, #4
   10648:	f843 5b04 	str.w	r5, [r3], #4
   1064c:	2a04      	cmp	r2, #4
   1064e:	d2fa      	bcs.n	10646 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10650:	e7da      	b.n	10608 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10652:	f803 cb01 	strb.w	ip, [r3], #1
   10656:	1e52      	subs	r2, r2, #1
   10658:	d1fb      	bne.n	10652 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1065a:	bc70      	pop	{r4, r5, r6}
   1065c:	4770      	bx	lr
   1065e:	2107      	movs	r1, #7
   10660:	7001      	strb	r1, [r0, #0]
   10662:	2000      	movs	r0, #0
   10664:	4770      	bx	lr
   10666:	2000      	movs	r0, #0
   10668:	4770      	bx	lr
   1066a:	2000      	movs	r0, #0
   1066c:	4770      	bx	lr
   1066e:	2000      	movs	r0, #0
   10670:	4770      	bx	lr
   10672:	b108      	cbz	r0, 10678 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xda>
   10674:	2000      	movs	r0, #0
   10676:	4770      	bx	lr
   10678:	f06f 0015 	mvn.w	r0, #21
   1067c:	4770      	bx	lr
   1067e:	f04f 30ff 	mov.w	r0, #4294967295
   10682:	4770      	bx	lr
   10684:	2000      	movs	r0, #0
   10686:	4770      	bx	lr
   10688:	2000      	movs	r0, #0
   1068a:	4770      	bx	lr
   1068c:	f04f 30ff 	mov.w	r0, #4294967295
   10690:	4770      	bx	lr
   10692:	4770      	bx	lr
   10694:	4770      	bx	lr
   10696:	2000      	movs	r0, #0
   10698:	4770      	bx	lr
   1069a:	2100      	movs	r1, #0
   1069c:	7001      	strb	r1, [r0, #0]
   1069e:	4770      	bx	lr
   106a0:	f04f 30ff 	mov.w	r0, #4294967295
   106a4:	4770      	bx	lr
   106a6:	f04f 30ff 	mov.w	r0, #4294967295
   106aa:	4770      	bx	lr
   106ac:	2100      	movs	r1, #0
   106ae:	7001      	strb	r1, [r0, #0]
   106b0:	4770      	bx	lr
   106b2:	f04f 30ff 	mov.w	r0, #4294967295
   106b6:	4770      	bx	lr
   106b8:	f04f 30ff 	mov.w	r0, #4294967295
   106bc:	4770      	bx	lr
   106be:	7800      	ldrb	r0, [r0, #0]
   106c0:	2800      	cmp	r0, #0
   106c2:	d001      	beq.n	106c8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12a>
   106c4:	f06f 0015 	mvn.w	r0, #21
   106c8:	4770      	bx	lr
   106ca:	2000      	movs	r0, #0
   106cc:	4770      	bx	lr
   106ce:	2200      	movs	r2, #0
   106d0:	f000 b802 	b.w	106d8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

000106d4 <mpsl_fem_init>:
   106d4:	f7f8 bba2 	b.w	8e1c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

000106d8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   106d8:	b570      	push	{r4, r5, r6, lr}
   106da:	4614      	mov	r4, r2
   106dc:	460d      	mov	r5, r1
   106de:	1b00      	subs	r0, r0, r4
   106e0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   106e4:	4288      	cmp	r0, r1
   106e6:	da01      	bge.n	106ec <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   106e8:	4608      	mov	r0, r1
   106ea:	e002      	b.n	106f2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   106ec:	287f      	cmp	r0, #127	; 0x7f
   106ee:	dd00      	ble.n	106f2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   106f0:	207f      	movs	r0, #127	; 0x7f
   106f2:	4619      	mov	r1, r3
   106f4:	b240      	sxtb	r0, r0
   106f6:	f7f8 fbc5 	bl	8e84 <mpsl_tx_power_radio_supported_power_adjust>
   106fa:	7028      	strb	r0, [r5, #0]
   106fc:	706c      	strb	r4, [r5, #1]
   106fe:	2100      	movs	r1, #0
   10700:	4420      	add	r0, r4
   10702:	70a9      	strb	r1, [r5, #2]
   10704:	b240      	sxtb	r0, r0
   10706:	bd70      	pop	{r4, r5, r6, pc}
   10708:	2625      	.short	0x2625
   1070a:	27          	.byte	0x27
   1070b:	01          	.byte	0x01
   1070c:	0103      	.short	0x0103
   1070e:	01          	.byte	0x01
   1070f:	d8          	.byte	0xd8
   10710:	f8f4f0ec 	.word	0xf8f4f0ec
   10714:	030200fc 	.word	0x030200fc
   10718:	07060504 	.word	0x07060504
   1071c:	00000008 	.word	0x00000008
	...
   10730:	01010100 	.word	0x01010100
   10734:	02020201 	.word	0x02020201
   10738:	03030302 	.word	0x03030302
   1073c:	04040403 	.word	0x04040403
   10740:	05050504 	.word	0x05050504
   10744:	07060605 	.word	0x07060605
   10748:	0b0a0908 	.word	0x0b0a0908
   1074c:	00000d0c 	.word	0x00000d0c
	...
   10760:	01010000 	.word	0x01010000
   10764:	02020101 	.word	0x02020101
   10768:	03030202 	.word	0x03030202
   1076c:	04040303 	.word	0x04040303
   10770:	05050404 	.word	0x05050404
   10774:	06060505 	.word	0x06060505
   10778:	00090806 	.word	0x00090806

0001077c <cb_data>:



static bool cb_data(struct bt_data *data, void *user_data)
{
    bcon_1_rssi = (int8_t)data->data[2];
   1077c:	6843      	ldr	r3, [r0, #4]
   1077e:	789a      	ldrb	r2, [r3, #2]
   10780:	4b01      	ldr	r3, [pc, #4]	; (10788 <cb_data+0xc>)
   // incomingID = (int8_t)data->data[0];

    return false;
}
   10782:	2000      	movs	r0, #0
    bcon_1_rssi = (int8_t)data->data[2];
   10784:	701a      	strb	r2, [r3, #0]
}
   10786:	4770      	bx	lr
   10788:	200033f9 	.word	0x200033f9

0001078c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1078c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1078e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10790:	b08a      	sub	sp, #40	; 0x28
   10792:	4604      	mov	r4, r0
   10794:	460e      	mov	r6, r1
   10796:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   10798:	2b03      	cmp	r3, #3
   1079a:	d820      	bhi.n	107de <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   1079c:	e8df f003 	tbb	[pc, r3]
   107a0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   107a4:	4911      	ldr	r1, [pc, #68]	; (107ec <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   107a6:	4628      	mov	r0, r5
   107a8:	f00c fbcb 	bl	1cf42 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   107ac:	9505      	str	r5, [sp, #20]
   107ae:	7863      	ldrb	r3, [r4, #1]
   107b0:	9304      	str	r3, [sp, #16]
   107b2:	78a3      	ldrb	r3, [r4, #2]
   107b4:	9303      	str	r3, [sp, #12]
   107b6:	78e3      	ldrb	r3, [r4, #3]
   107b8:	9302      	str	r3, [sp, #8]
   107ba:	7923      	ldrb	r3, [r4, #4]
   107bc:	9301      	str	r3, [sp, #4]
   107be:	7963      	ldrb	r3, [r4, #5]
   107c0:	9300      	str	r3, [sp, #0]
   107c2:	79a3      	ldrb	r3, [r4, #6]
   107c4:	4a0a      	ldr	r2, [pc, #40]	; (107f0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   107c6:	211e      	movs	r1, #30
   107c8:	4630      	mov	r0, r6
   107ca:	f00b fdcb 	bl	1c364 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   107ce:	b00a      	add	sp, #40	; 0x28
   107d0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   107d2:	4908      	ldr	r1, [pc, #32]	; (107f4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   107d4:	e7e7      	b.n	107a6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   107d6:	4908      	ldr	r1, [pc, #32]	; (107f8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   107d8:	e7e5      	b.n	107a6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   107da:	4908      	ldr	r1, [pc, #32]	; (107fc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   107dc:	e7e3      	b.n	107a6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   107de:	4a08      	ldr	r2, [pc, #32]	; (10800 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   107e0:	210a      	movs	r1, #10
   107e2:	4628      	mov	r0, r5
   107e4:	f00b fdbe 	bl	1c364 <snprintk>
		break;
   107e8:	e7e0      	b.n	107ac <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   107ea:	bf00      	nop
   107ec:	0001ef40 	.word	0x0001ef40
   107f0:	0001ef62 	.word	0x0001ef62
   107f4:	0001ef47 	.word	0x0001ef47
   107f8:	0001ef4e 	.word	0x0001ef4e
   107fc:	0001ef58 	.word	0x0001ef58
   10800:	0001fa57 	.word	0x0001fa57

00010804 <scan_cb>:



static void scan_cb(const bt_addr_le_t *addr, int8_t rssi, uint8_t adv_type,
		    struct net_buf_simple *buf)
{
   10804:	b5f0      	push	{r4, r5, r6, r7, lr}
   10806:	b089      	sub	sp, #36	; 0x24
   10808:	460f      	mov	r7, r1
	
	char addr_str[BT_ADDR_LE_STR_LEN];
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   1080a:	4669      	mov	r1, sp
{
   1080c:	4606      	mov	r6, r0
   1080e:	461d      	mov	r5, r3
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   10810:	f7ff ffbc 	bl	1078c <bt_addr_le_to_str.constprop.0.isra.0>

	if ((!strncmp(addr_str, dongle1_addr, BT_ADDR_STR_LEN-1)) && !(counter_rssi==10)){ //BT_ADDR_STR_LEN is 18 for some reason..
   10814:	4911      	ldr	r1, [pc, #68]	; (1085c <scan_cb+0x58>)
   10816:	2211      	movs	r2, #17
   10818:	4668      	mov	r0, sp
   1081a:	f00c fbac 	bl	1cf76 <strncmp>
   1081e:	b9d8      	cbnz	r0, 10858 <scan_cb+0x54>
   10820:	4c0f      	ldr	r4, [pc, #60]	; (10860 <scan_cb+0x5c>)
   10822:	f994 3000 	ldrsb.w	r3, [r4]
   10826:	2b0a      	cmp	r3, #10
   10828:	d016      	beq.n	10858 <scan_cb+0x54>
		printk("Device found: %s (RSSI measured: %d)\n", addr_str, rssi);
   1082a:	480e      	ldr	r0, [pc, #56]	; (10864 <scan_cb+0x60>)
   1082c:	463a      	mov	r2, r7
   1082e:	4669      	mov	r1, sp
   10830:	f00b fd8b 	bl	1c34a <printk>
		
		// Store the measurement dongle to DK RSSI
		//bcon_1_rssi[0]=rssi;
		// Request dual measurement, 1 means request
		mfg_data[0] = 1;
   10834:	4b0c      	ldr	r3, [pc, #48]	; (10868 <scan_cb+0x64>)
		// Store dual measurement
		bt_data_parse(buf,cb_data,(void *)addr);
   10836:	490d      	ldr	r1, [pc, #52]	; (1086c <scan_cb+0x68>)
		mfg_data[0] = 1;
   10838:	2201      	movs	r2, #1
   1083a:	701a      	strb	r2, [r3, #0]
		bt_data_parse(buf,cb_data,(void *)addr);
   1083c:	4628      	mov	r0, r5
   1083e:	4632      	mov	r2, r6
   10840:	f004 f912 	bl	14a68 <bt_data_parse>

		printk("Device: %s (RSSI received: %d)\n", addr_str, bcon_1_rssi);
   10844:	4b0a      	ldr	r3, [pc, #40]	; (10870 <scan_cb+0x6c>)
   10846:	480b      	ldr	r0, [pc, #44]	; (10874 <scan_cb+0x70>)
   10848:	f993 2000 	ldrsb.w	r2, [r3]
   1084c:	4669      	mov	r1, sp
   1084e:	f00b fd7c 	bl	1c34a <printk>
		counter_rssi++;
   10852:	7823      	ldrb	r3, [r4, #0]
   10854:	3301      	adds	r3, #1
   10856:	7023      	strb	r3, [r4, #0]
	

	}
	
}
   10858:	b009      	add	sp, #36	; 0x24
   1085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1085c:	20000514 	.word	0x20000514
   10860:	200033f8 	.word	0x200033f8
   10864:	0001ef85 	.word	0x0001ef85
   10868:	20000525 	.word	0x20000525
   1086c:	0001077d 	.word	0x0001077d
   10870:	200033f9 	.word	0x200033f9
   10874:	0001efab 	.word	0x0001efab

00010878 <main>:


int main(void)
{
   10878:	b570      	push	{r4, r5, r6, lr}
   1087a:	b098      	sub	sp, #96	; 0x60
	//console_init();

	struct bt_le_scan_param scan_param = {
   1087c:	2100      	movs	r1, #0
   1087e:	2214      	movs	r2, #20
   10880:	a806      	add	r0, sp, #24
   10882:	f00c fbbe 	bl	1d002 <memset>
   10886:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
		.interval   = 0x0010,
		.window     = 0x0010,
	};
	int err;
	char addr_s[BT_ADDR_LE_STR_LEN];
	bt_addr_le_t addr = {0};
   1088a:	2400      	movs	r4, #0
	size_t count = 1;

	uint8_t x, y;

	printk("Starting the measurements...HERE WE GO!!!!!!!!!!!!!\n");
   1088c:	4826      	ldr	r0, [pc, #152]	; (10928 <main+0xb0>)
	struct bt_le_scan_param scan_param = {
   1088e:	9308      	str	r3, [sp, #32]
	size_t count = 1;
   10890:	2301      	movs	r3, #1
	bt_addr_le_t addr = {0};
   10892:	9404      	str	r4, [sp, #16]
	size_t count = 1;
   10894:	9303      	str	r3, [sp, #12]
	bt_addr_le_t addr = {0};
   10896:	f8cd 4013 	str.w	r4, [sp, #19]
	printk("Starting the measurements...HERE WE GO!!!!!!!!!!!!!\n");
   1089a:	f00b fd56 	bl	1c34a <printk>



	err = bt_enable(NULL);
   1089e:	4620      	mov	r0, r4
   108a0:	f004 f822 	bl	148e8 <bt_enable>
	if (err) {
   108a4:	4601      	mov	r1, r0
   108a6:	b128      	cbz	r0, 108b4 <main+0x3c>
		printk("Bluetooth init failed (err %d)\n", err);
   108a8:	4820      	ldr	r0, [pc, #128]	; (1092c <main+0xb4>)

		k_sleep(K_MSEC(5000));

		err = bt_le_adv_stop();
		if (err) {
			printk("Advertising failed to stop (err %d)\n", err);
   108aa:	f00b fd4e 	bl	1c34a <printk>
			return 0;
		}
	} while (1);
	return 0;
}
   108ae:	2000      	movs	r0, #0
   108b0:	b018      	add	sp, #96	; 0x60
   108b2:	bd70      	pop	{r4, r5, r6, pc}
	printk("Bluetooth initialized\n");
   108b4:	481e      	ldr	r0, [pc, #120]	; (10930 <main+0xb8>)
   108b6:	f00b fd48 	bl	1c34a <printk>
	err = bt_le_scan_start(&scan_param, scan_cb);
   108ba:	491e      	ldr	r1, [pc, #120]	; (10934 <main+0xbc>)
   108bc:	a806      	add	r0, sp, #24
   108be:	f004 ff61 	bl	15784 <bt_le_scan_start>
   108c2:	4604      	mov	r4, r0
	printk("scanning..");
   108c4:	481c      	ldr	r0, [pc, #112]	; (10938 <main+0xc0>)
   108c6:	f00b fd40 	bl	1c34a <printk>
	if (err) {
   108ca:	b9b4      	cbnz	r4, 108fa <main+0x82>
		err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
   108cc:	4e1b      	ldr	r6, [pc, #108]	; (1093c <main+0xc4>)
   108ce:	4d1c      	ldr	r5, [pc, #112]	; (10940 <main+0xc8>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   108d0:	2100      	movs	r1, #0
   108d2:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   108d6:	f008 fc91 	bl	191fc <z_impl_k_sleep>
   108da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   108dc:	ac0b      	add	r4, sp, #44	; 0x2c
   108de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   108e0:	682b      	ldr	r3, [r5, #0]
   108e2:	6023      	str	r3, [r4, #0]
   108e4:	2300      	movs	r3, #0
   108e6:	4631      	mov	r1, r6
   108e8:	9300      	str	r3, [sp, #0]
   108ea:	2201      	movs	r2, #1
   108ec:	a80b      	add	r0, sp, #44	; 0x2c
   108ee:	f004 fdad 	bl	1544c <bt_le_adv_start>
		if (err) {
   108f2:	4601      	mov	r1, r0
   108f4:	b120      	cbz	r0, 10900 <main+0x88>
			printk("Advertising failed to start (err %d)\n", err);
   108f6:	4813      	ldr	r0, [pc, #76]	; (10944 <main+0xcc>)
   108f8:	e7d7      	b.n	108aa <main+0x32>
		printk("Starting scanning failed (err %d)\n", err);
   108fa:	4813      	ldr	r0, [pc, #76]	; (10948 <main+0xd0>)
   108fc:	4621      	mov	r1, r4
   108fe:	e7d4      	b.n	108aa <main+0x32>
		bt_id_get(&addr, &count);
   10900:	a903      	add	r1, sp, #12
   10902:	a804      	add	r0, sp, #16
   10904:	f004 f974 	bl	14bf0 <bt_id_get>
		bt_addr_le_to_str(&addr, addr_s, sizeof(addr_s));
   10908:	a910      	add	r1, sp, #64	; 0x40
   1090a:	a804      	add	r0, sp, #16
   1090c:	f7ff ff3e 	bl	1078c <bt_addr_le_to_str.constprop.0.isra.0>
   10910:	2100      	movs	r1, #0
   10912:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   10916:	f008 fc71 	bl	191fc <z_impl_k_sleep>
		err = bt_le_adv_stop();
   1091a:	f004 fdc9 	bl	154b0 <bt_le_adv_stop>
		if (err) {
   1091e:	4601      	mov	r1, r0
   10920:	2800      	cmp	r0, #0
   10922:	d0d4      	beq.n	108ce <main+0x56>
			printk("Advertising failed to stop (err %d)\n", err);
   10924:	4809      	ldr	r0, [pc, #36]	; (1094c <main+0xd4>)
   10926:	e7c0      	b.n	108aa <main+0x32>
   10928:	0001efcb 	.word	0x0001efcb
   1092c:	0001f000 	.word	0x0001f000
   10930:	0001f020 	.word	0x0001f020
   10934:	00010805 	.word	0x00010805
   10938:	0001f037 	.word	0x0001f037
   1093c:	0001ea88 	.word	0x0001ea88
   10940:	0001ea20 	.word	0x0001ea20
   10944:	0001f065 	.word	0x0001f065
   10948:	0001f042 	.word	0x0001f042
   1094c:	0001f08b 	.word	0x0001f08b

00010950 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   10950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10954:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   10956:	0784      	lsls	r4, r0, #30
{
   10958:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1095a:	f002 0304 	and.w	r3, r2, #4
   1095e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   10960:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   10964:	f103 0301 	add.w	r3, r3, #1
   10968:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   1096c:	9203      	str	r2, [sp, #12]
   1096e:	4605      	mov	r5, r0
   10970:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   10972:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   10974:	f040 81be 	bne.w	10cf4 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   10978:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   1097a:	b130      	cbz	r0, 1098a <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   1097c:	2907      	cmp	r1, #7
   1097e:	d809      	bhi.n	10994 <cbvprintf_package+0x44>
		return -ENOSPC;
   10980:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   10984:	b011      	add	sp, #68	; 0x44
   10986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1098a:	f001 0607 	and.w	r6, r1, #7
   1098e:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   10990:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   10994:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   10996:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   1099a:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   1099c:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   109a0:	f04f 33ff 	mov.w	r3, #4294967295
   109a4:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   109a6:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   109aa:	464f      	mov	r7, r9
	bool parsing = false;
   109ac:	46cb      	mov	fp, r9
	size = sizeof(char *);
   109ae:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   109b0:	b10d      	cbz	r5, 109b6 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   109b2:	9a00      	ldr	r2, [sp, #0]
   109b4:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   109b6:	9805      	ldr	r0, [sp, #20]
   109b8:	2800      	cmp	r0, #0
   109ba:	f300 80eb 	bgt.w	10b94 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   109be:	489a      	ldr	r0, [pc, #616]	; (10c28 <cbvprintf_package+0x2d8>)
   109c0:	9a00      	ldr	r2, [sp, #0]
   109c2:	4282      	cmp	r2, r0
   109c4:	d303      	bcc.n	109ce <cbvprintf_package+0x7e>
   109c6:	4899      	ldr	r0, [pc, #612]	; (10c2c <cbvprintf_package+0x2dc>)
   109c8:	4282      	cmp	r2, r0
   109ca:	f0c0 80e3 	bcc.w	10b94 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   109ce:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   109d0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   109d4:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   109d6:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   109da:	f100 8106 	bmi.w	10bea <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   109de:	2f0f      	cmp	r7, #15
   109e0:	f200 80b4 	bhi.w	10b4c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   109e4:	2d00      	cmp	r5, #0
   109e6:	f000 8108 	beq.w	10bfa <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   109ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
   109ee:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   109f2:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   109f4:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   109f8:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   109fc:	9804      	ldr	r0, [sp, #16]
   109fe:	3001      	adds	r0, #1
   10a00:	9004      	str	r0, [sp, #16]
   10a02:	e0ea      	b.n	10bda <cbvprintf_package+0x28a>
			switch (*fmt) {
   10a04:	287a      	cmp	r0, #122	; 0x7a
   10a06:	d860      	bhi.n	10aca <cbvprintf_package+0x17a>
   10a08:	284b      	cmp	r0, #75	; 0x4b
   10a0a:	d80e      	bhi.n	10a2a <cbvprintf_package+0xda>
   10a0c:	2847      	cmp	r0, #71	; 0x47
   10a0e:	d85c      	bhi.n	10aca <cbvprintf_package+0x17a>
   10a10:	2829      	cmp	r0, #41	; 0x29
   10a12:	d82f      	bhi.n	10a74 <cbvprintf_package+0x124>
   10a14:	2825      	cmp	r0, #37	; 0x25
   10a16:	d055      	beq.n	10ac4 <cbvprintf_package+0x174>
   10a18:	d857      	bhi.n	10aca <cbvprintf_package+0x17a>
   10a1a:	2820      	cmp	r0, #32
   10a1c:	d07d      	beq.n	10b1a <cbvprintf_package+0x1ca>
   10a1e:	3823      	subs	r0, #35	; 0x23
   10a20:	f1d0 0b00 	rsbs	fp, r0, #0
   10a24:	eb4b 0b00 	adc.w	fp, fp, r0
   10a28:	e077      	b.n	10b1a <cbvprintf_package+0x1ca>
   10a2a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   10a2e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   10a32:	d84a      	bhi.n	10aca <cbvprintf_package+0x17a>
   10a34:	e8df f00c 	tbb	[pc, ip]
   10a38:	49494971 	.word	0x49494971
   10a3c:	49494949 	.word	0x49494949
   10a40:	49494949 	.word	0x49494949
   10a44:	4949494c 	.word	0x4949494c
   10a48:	49494949 	.word	0x49494949
   10a4c:	4c495a49 	.word	0x4c495a49
   10a50:	5a5a5a4c 	.word	0x5a5a5a4c
   10a54:	496e4c71 	.word	0x496e4c71
   10a58:	4c184971 	.word	0x4c184971
   10a5c:	83494918 	.word	0x83494918
   10a60:	49494c80 	.word	0x49494c80
   10a64:	494c      	.short	0x494c
   10a66:	80          	.byte	0x80
   10a67:	00          	.byte	0x00
   10a68:	2000      	movs	r0, #0
   10a6a:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   10a6e:	f04f 0a04 	mov.w	sl, #4
   10a72:	e039      	b.n	10ae8 <cbvprintf_package+0x198>
			switch (*fmt) {
   10a74:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   10a78:	fa5f fc8c 	uxtb.w	ip, ip
   10a7c:	2201      	movs	r2, #1
   10a7e:	fa02 fc0c 	lsl.w	ip, r2, ip
   10a82:	ea1c 0f0e 	tst.w	ip, lr
   10a86:	d148      	bne.n	10b1a <cbvprintf_package+0x1ca>
   10a88:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   10a8c:	d12e      	bne.n	10aec <cbvprintf_package+0x19c>
   10a8e:	ea1c 0b02 	ands.w	fp, ip, r2
   10a92:	d042      	beq.n	10b1a <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   10a94:	3c01      	subs	r4, #1
   10a96:	4454      	add	r4, sl
   10a98:	f1ca 0c00 	rsb	ip, sl, #0
   10a9c:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   10aa0:	2d00      	cmp	r5, #0
   10aa2:	d061      	beq.n	10b68 <cbvprintf_package+0x218>
   10aa4:	eba3 0c05 	sub.w	ip, r3, r5
   10aa8:	44a4      	add	ip, r4
   10aaa:	45b4      	cmp	ip, r6
   10aac:	f63f af68 	bhi.w	10980 <cbvprintf_package+0x30>
		if (is_str_arg) {
   10ab0:	2800      	cmp	r0, #0
   10ab2:	d168      	bne.n	10b86 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   10ab4:	2b04      	cmp	r3, #4
   10ab6:	d147      	bne.n	10b48 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   10ab8:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   10abc:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   10abe:	3404      	adds	r4, #4
   10ac0:	2304      	movs	r3, #4
   10ac2:	e02a      	b.n	10b1a <cbvprintf_package+0x1ca>
				arg_idx--;
   10ac4:	9a01      	ldr	r2, [sp, #4]
   10ac6:	3a01      	subs	r2, #1
   10ac8:	9201      	str	r2, [sp, #4]
				parsing = false;
   10aca:	f04f 0b00 	mov.w	fp, #0
				continue;
   10ace:	e024      	b.n	10b1a <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   10ad0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   10ad4:	286c      	cmp	r0, #108	; 0x6c
   10ad6:	d134      	bne.n	10b42 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   10ad8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   10adc:	2000      	movs	r0, #0
   10ade:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   10ae0:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   10ae2:	d1c4      	bne.n	10a6e <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   10ae4:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   10ae8:	4653      	mov	r3, sl
   10aea:	e7d3      	b.n	10a94 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   10aec:	f108 0807 	add.w	r8, r8, #7
   10af0:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   10af4:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   10af6:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   10afa:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   10afe:	b135      	cbz	r5, 10b0e <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   10b00:	9806      	ldr	r0, [sp, #24]
   10b02:	4420      	add	r0, r4
   10b04:	42b0      	cmp	r0, r6
   10b06:	f63f af3b 	bhi.w	10980 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   10b0a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   10b0e:	3408      	adds	r4, #8
				parsing = false;
   10b10:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   10b14:	f04f 0a08 	mov.w	sl, #8
   10b18:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   10b1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   10b1e:	2800      	cmp	r0, #0
   10b20:	d078      	beq.n	10c14 <cbvprintf_package+0x2c4>
			if (!parsing) {
   10b22:	f1bb 0f00 	cmp.w	fp, #0
   10b26:	f47f af6d 	bne.w	10a04 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   10b2a:	2825      	cmp	r0, #37	; 0x25
   10b2c:	d1f5      	bne.n	10b1a <cbvprintf_package+0x1ca>
					arg_idx++;
   10b2e:	9b01      	ldr	r3, [sp, #4]
   10b30:	3301      	adds	r3, #1
   10b32:	9301      	str	r3, [sp, #4]
					parsing = true;
   10b34:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   10b38:	f04f 0a04 	mov.w	sl, #4
   10b3c:	e7ec      	b.n	10b18 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   10b3e:	4658      	mov	r0, fp
   10b40:	e793      	b.n	10a6a <cbvprintf_package+0x11a>
   10b42:	2000      	movs	r0, #0
				parsing = false;
   10b44:	4683      	mov	fp, r0
   10b46:	e7a5      	b.n	10a94 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   10b48:	2b08      	cmp	r3, #8
   10b4a:	d002      	beq.n	10b52 <cbvprintf_package+0x202>
					return -EINVAL;
   10b4c:	f06f 0015 	mvn.w	r0, #21
   10b50:	e718      	b.n	10984 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   10b52:	f108 0807 	add.w	r8, r8, #7
   10b56:	f028 0807 	bic.w	r8, r8, #7
   10b5a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   10b5e:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   10b62:	3408      	adds	r4, #8
   10b64:	2308      	movs	r3, #8
   10b66:	e7d8      	b.n	10b1a <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   10b68:	b968      	cbnz	r0, 10b86 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   10b6a:	2b04      	cmp	r3, #4
   10b6c:	d102      	bne.n	10b74 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   10b6e:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   10b72:	e7a4      	b.n	10abe <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   10b74:	2b08      	cmp	r3, #8
   10b76:	d1e9      	bne.n	10b4c <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   10b78:	f108 0807 	add.w	r8, r8, #7
   10b7c:	f028 0807 	bic.w	r8, r8, #7
   10b80:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   10b84:	e7ed      	b.n	10b62 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   10b86:	9a05      	ldr	r2, [sp, #20]
   10b88:	3a01      	subs	r2, #1
   10b8a:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   10b8c:	f858 2b04 	ldr.w	r2, [r8], #4
   10b90:	9200      	str	r2, [sp, #0]
   10b92:	e70d      	b.n	109b0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   10b94:	9a03      	ldr	r2, [sp, #12]
   10b96:	0790      	lsls	r0, r2, #30
   10b98:	d520      	bpl.n	10bdc <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   10b9a:	eba4 0e05 	sub.w	lr, r4, r5
   10b9e:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   10ba2:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   10ba6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   10baa:	d2cf      	bcs.n	10b4c <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   10bac:	2f0f      	cmp	r7, #15
   10bae:	d8cd      	bhi.n	10b4c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   10bb0:	b1f5      	cbz	r5, 10bf0 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   10bb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   10bb6:	eb0d 0e02 	add.w	lr, sp, r2
   10bba:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   10bbc:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   10bbe:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   10bc2:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   10bc6:	f1bc 0f00 	cmp.w	ip, #0
   10bca:	f43f af17 	beq.w	109fc <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   10bce:	f060 007f 	orn	r0, r0, #127	; 0x7f
   10bd2:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   10bd6:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   10bda:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   10bdc:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   10be0:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   10be2:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   10be4:	f64f 7eda 	movw	lr, #65498	; 0xffda
   10be8:	e797      	b.n	10b1a <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   10bea:	f04f 0c00 	mov.w	ip, #0
   10bee:	e7da      	b.n	10ba6 <cbvprintf_package+0x256>
				} else if (is_ro) {
   10bf0:	f1bc 0f00 	cmp.w	ip, #0
   10bf4:	d001      	beq.n	10bfa <cbvprintf_package+0x2aa>
					len += 1;
   10bf6:	3601      	adds	r6, #1
   10bf8:	e7ef      	b.n	10bda <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   10bfa:	9802      	ldr	r0, [sp, #8]
					len += 2;
   10bfc:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   10bfe:	2800      	cmp	r0, #0
   10c00:	d1eb      	bne.n	10bda <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   10c02:	9800      	ldr	r0, [sp, #0]
   10c04:	e9cd 3106 	strd	r3, r1, [sp, #24]
   10c08:	f00c f9a5 	bl	1cf56 <strlen>
   10c0c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   10c10:	4406      	add	r6, r0
   10c12:	e7e2      	b.n	10bda <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   10c14:	1b63      	subs	r3, r4, r5
   10c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10c1a:	d297      	bcs.n	10b4c <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   10c1c:	b945      	cbnz	r5, 10c30 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   10c1e:	f1a6 0408 	sub.w	r4, r6, #8
   10c22:	18e0      	adds	r0, r4, r3
   10c24:	e6ae      	b.n	10984 <cbvprintf_package+0x34>
   10c26:	bf00      	nop
   10c28:	0001e628 	.word	0x0001e628
   10c2c:	00020614 	.word	0x00020614
	if (rws_pos_en) {
   10c30:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   10c32:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   10c34:	089b      	lsrs	r3, r3, #2
   10c36:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   10c38:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   10c3c:	b1c2      	cbz	r2, 10c70 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   10c3e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   10c40:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   10c44:	f1b9 0f00 	cmp.w	r9, #0
   10c48:	d005      	beq.n	10c56 <cbvprintf_package+0x306>
   10c4a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   10c4c:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   10c4e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   10c52:	4297      	cmp	r7, r2
   10c54:	d10e      	bne.n	10c74 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   10c56:	f1c5 0301 	rsb	r3, r5, #1
   10c5a:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   10c5e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   10c62:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   10c64:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   10c68:	4557      	cmp	r7, sl
   10c6a:	d112      	bne.n	10c92 <cbvprintf_package+0x342>
	return BUF_OFFSET;
   10c6c:	1b60      	subs	r0, r4, r5
   10c6e:	e689      	b.n	10984 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   10c70:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   10c72:	e7e5      	b.n	10c40 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   10c74:	f810 3b01 	ldrb.w	r3, [r0], #1
   10c78:	0619      	lsls	r1, r3, #24
   10c7a:	d508      	bpl.n	10c8e <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   10c7c:	eb04 0e0c 	add.w	lr, r4, ip
   10c80:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   10c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   10c86:	f63f ae7b 	bhi.w	10980 <cbvprintf_package+0x30>
			*buf++ = pos;
   10c8a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   10c8e:	3201      	adds	r2, #1
   10c90:	e7df      	b.n	10c52 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   10c92:	f1b9 0f00 	cmp.w	r9, #0
   10c96:	d003      	beq.n	10ca0 <cbvprintf_package+0x350>
   10c98:	f998 2000 	ldrsb.w	r2, [r8]
   10c9c:	2a00      	cmp	r2, #0
   10c9e:	db17      	blt.n	10cd0 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   10ca0:	9b02      	ldr	r3, [sp, #8]
   10ca2:	b1d3      	cbz	r3, 10cda <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   10ca4:	f81a 200b 	ldrb.w	r2, [sl, fp]
   10ca8:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   10cac:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   10cae:	9b01      	ldr	r3, [sp, #4]
   10cb0:	1898      	adds	r0, r3, r2
   10cb2:	4420      	add	r0, r4
   10cb4:	42b0      	cmp	r0, r6
   10cb6:	f63f ae63 	bhi.w	10980 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   10cba:	f898 0000 	ldrb.w	r0, [r8]
   10cbe:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   10cc2:	9900      	ldr	r1, [sp, #0]
   10cc4:	9203      	str	r2, [sp, #12]
   10cc6:	4620      	mov	r0, r4
   10cc8:	f00c f990 	bl	1cfec <memcpy>
		buf += size;
   10ccc:	9a03      	ldr	r2, [sp, #12]
   10cce:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   10cd0:	f10a 0a01 	add.w	sl, sl, #1
   10cd4:	f108 0801 	add.w	r8, r8, #1
   10cd8:	e7c6      	b.n	10c68 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   10cda:	f898 2000 	ldrb.w	r2, [r8]
   10cde:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   10ce2:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   10ce4:	9b02      	ldr	r3, [sp, #8]
   10ce6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   10cea:	9800      	ldr	r0, [sp, #0]
   10cec:	f00c f933 	bl	1cf56 <strlen>
   10cf0:	1c42      	adds	r2, r0, #1
   10cf2:	e7dc      	b.n	10cae <cbvprintf_package+0x35e>
		return -EFAULT;
   10cf4:	f06f 000d 	mvn.w	r0, #13
   10cf8:	e644      	b.n	10984 <cbvprintf_package+0x34>
   10cfa:	bf00      	nop

00010cfc <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   10cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d00:	b095      	sub	sp, #84	; 0x54
   10d02:	af00      	add	r7, sp, #0
   10d04:	4604      	mov	r4, r0
   10d06:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   10d0a:	61bb      	str	r3, [r7, #24]
   10d0c:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   10d10:	627a      	str	r2, [r7, #36]	; 0x24
   10d12:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   10d14:	6239      	str	r1, [r7, #32]
   10d16:	b951      	cbnz	r1, 10d2e <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   10d18:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   10d1a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   10d1c:	7880      	ldrb	r0, [r0, #2]
   10d1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10d22:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   10d24:	460d      	mov	r5, r1
   10d26:	42ae      	cmp	r6, r5
   10d28:	d81a      	bhi.n	10d60 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   10d2a:	1b03      	subs	r3, r0, r4
   10d2c:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   10d2e:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   10d32:	78e3      	ldrb	r3, [r4, #3]
   10d34:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   10d36:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
   10d38:	f1b9 0f00 	cmp.w	r9, #0
   10d3c:	d002      	beq.n	10d44 <cbprintf_package_convert+0x48>
   10d3e:	f01b 0f01 	tst.w	fp, #1
   10d42:	d116      	bne.n	10d72 <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
   10d44:	697b      	ldr	r3, [r7, #20]
   10d46:	bb53      	cbnz	r3, 10d9e <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   10d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10d4a:	b11b      	cbz	r3, 10d54 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   10d4c:	69ba      	ldr	r2, [r7, #24]
   10d4e:	6a39      	ldr	r1, [r7, #32]
   10d50:	4620      	mov	r0, r4
   10d52:	4798      	blx	r3
		}

		return in_len;
   10d54:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   10d56:	4628      	mov	r0, r5
   10d58:	3754      	adds	r7, #84	; 0x54
   10d5a:	46bd      	mov	sp, r7
   10d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   10d60:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
   10d64:	4640      	mov	r0, r8
   10d66:	f00c f8f6 	bl	1cf56 <strlen>
   10d6a:	3001      	adds	r0, #1
   10d6c:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
   10d6e:	3501      	adds	r5, #1
   10d70:	e7d9      	b.n	10d26 <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
   10d72:	f894 a000 	ldrb.w	sl, [r4]
   10d76:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   10d78:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   10d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   10d7c:	ea4f 028a 	mov.w	r2, sl, lsl #2
   10d80:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   10d82:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   10d86:	2b00      	cmp	r3, #0
   10d88:	f040 8103 	bne.w	10f92 <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
   10d8c:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   10d8e:	46d0      	mov	r8, sl
   10d90:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
   10d94:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
   10d96:	4543      	cmp	r3, r8
   10d98:	d150      	bne.n	10e3c <cbprintf_package_convert+0x140>
   10d9a:	44ca      	add	sl, r9
   10d9c:	e013      	b.n	10dc6 <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
   10d9e:	f01b 0f02 	tst.w	fp, #2
   10da2:	d0d1      	beq.n	10d48 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   10da4:	f894 a000 	ldrb.w	sl, [r4]
   10da8:	ea4f 038a 	mov.w	r3, sl, lsl #2
   10dac:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   10dae:	6863      	ldr	r3, [r4, #4]
   10db0:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   10db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   10db4:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   10db8:	2b00      	cmp	r3, #0
   10dba:	d17a      	bne.n	10eb2 <cbprintf_package_convert+0x1b6>
		out_len = (int)in_len;
   10dbc:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   10dbe:	f1b9 0f00 	cmp.w	r9, #0
   10dc2:	d150      	bne.n	10e66 <cbprintf_package_convert+0x16a>
	size_t strl_cnt = 0;
   10dc4:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
   10dc6:	f01b 0f05 	tst.w	fp, #5
   10dca:	bf0c      	ite	eq
   10dcc:	2302      	moveq	r3, #2
   10dce:	2301      	movne	r3, #1
   10dd0:	627b      	str	r3, [r7, #36]	; 0x24
   10dd2:	697b      	ldr	r3, [r7, #20]
   10dd4:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   10dd8:	f00b 0302 	and.w	r3, fp, #2
   10ddc:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
   10dde:	45ca      	cmp	sl, r9
   10de0:	d0b9      	beq.n	10d56 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   10de2:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   10de6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   10dea:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   10dee:	4bae      	ldr	r3, [pc, #696]	; (110a8 <cbprintf_package_convert+0x3ac>)
   10df0:	4598      	cmp	r8, r3
   10df2:	d302      	bcc.n	10dfa <cbprintf_package_convert+0xfe>
   10df4:	4bad      	ldr	r3, [pc, #692]	; (110ac <cbprintf_package_convert+0x3b0>)
   10df6:	4598      	cmp	r8, r3
   10df8:	d33b      	bcc.n	10e72 <cbprintf_package_convert+0x176>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   10dfa:	693b      	ldr	r3, [r7, #16]
   10dfc:	2b00      	cmp	r3, #0
   10dfe:	d045      	beq.n	10e8c <cbprintf_package_convert+0x190>
   10e00:	69f8      	ldr	r0, [r7, #28]
   10e02:	f00b fa66 	bl	1c2d2 <is_ptr>
   10e06:	2800      	cmp	r0, #0
   10e08:	d040      	beq.n	10e8c <cbprintf_package_convert+0x190>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   10e0a:	46e8      	mov	r8, sp
   10e0c:	b08a      	sub	sp, #40	; 0x28
   10e0e:	466a      	mov	r2, sp
   10e10:	4ba7      	ldr	r3, [pc, #668]	; (110b0 <cbprintf_package_convert+0x3b4>)
   10e12:	6153      	str	r3, [r2, #20]
   10e14:	4ba7      	ldr	r3, [pc, #668]	; (110b4 <cbprintf_package_convert+0x3b8>)
   10e16:	6193      	str	r3, [r2, #24]
   10e18:	69fb      	ldr	r3, [r7, #28]
   10e1a:	e9c2 3107 	strd	r3, r1, [r2, #28]
   10e1e:	f240 3301 	movw	r3, #769	; 0x301
   10e22:	8493      	strh	r3, [r2, #36]	; 0x24
   10e24:	4ba4      	ldr	r3, [pc, #656]	; (110b8 <cbprintf_package_convert+0x3bc>)
   10e26:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   10e2a:	48a4      	ldr	r0, [pc, #656]	; (110bc <cbprintf_package_convert+0x3c0>)
   10e2c:	2300      	movs	r3, #0
   10e2e:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   10e32:	f001 f8c9 	bl	11fc8 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   10e36:	3d02      	subs	r5, #2
   10e38:	46c5      	mov	sp, r8
				continue;
   10e3a:	e7d0      	b.n	10dde <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   10e3c:	f818 2b01 	ldrb.w	r2, [r8], #1
   10e40:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   10e42:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   10e46:	f00c f886 	bl	1cf56 <strlen>
				if (strl && strl_cnt < strl_len) {
   10e4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   10e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   10e4e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   10e50:	b13a      	cbz	r2, 10e62 <cbprintf_package_convert+0x166>
   10e52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   10e56:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   10e58:	bf3e      	ittt	cc
   10e5a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   10e5c:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   10e60:	3601      	addcc	r6, #1
				out_len += len;
   10e62:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   10e64:	e797      	b.n	10d96 <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   10e66:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   10e6a:	bf1c      	itt	ne
   10e6c:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   10e6e:	44ca      	addne	sl, r9
   10e70:	e7a9      	b.n	10dc6 <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   10e72:	693b      	ldr	r3, [r7, #16]
   10e74:	b123      	cbz	r3, 10e80 <cbprintf_package_convert+0x184>
   10e76:	69f8      	ldr	r0, [r7, #28]
   10e78:	f00b fa2b 	bl	1c2d2 <is_ptr>
   10e7c:	2800      	cmp	r0, #0
   10e7e:	d1c4      	bne.n	10e0a <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   10e80:	f01b 0f01 	tst.w	fp, #1
   10e84:	d105      	bne.n	10e92 <cbprintf_package_convert+0x196>
					out_len -= drop_ro_str_pos ? 2 : 1;
   10e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e88:	1aed      	subs	r5, r5, r3
   10e8a:	e7a8      	b.n	10dde <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   10e8c:	6a3b      	ldr	r3, [r7, #32]
   10e8e:	2b00      	cmp	r3, #0
   10e90:	d0a5      	beq.n	10dde <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   10e92:	4640      	mov	r0, r8
   10e94:	f00c f85f 	bl	1cf56 <strlen>
				if (strl && strl_cnt < strl_len) {
   10e98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   10e9a:	b143      	cbz	r3, 10eae <cbprintf_package_convert+0x1b2>
   10e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   10ea0:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   10ea2:	bf3f      	itttt	cc
   10ea4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   10ea6:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   10ea8:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   10eac:	3601      	addcc	r6, #1
				out_len += (len - 1);
   10eae:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   10eb0:	e795      	b.n	10dde <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   10eb2:	f1b9 0f00 	cmp.w	r9, #0
   10eb6:	d071      	beq.n	10f9c <cbprintf_package_convert+0x2a0>
   10eb8:	f01b 0604 	ands.w	r6, fp, #4
   10ebc:	d071      	beq.n	10fa2 <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
   10ebe:	46c8      	mov	r8, r9
		scpy_cnt = 0;
   10ec0:	2600      	movs	r6, #0
		dst = keep_str_pos;
   10ec2:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   10ec6:	464a      	mov	r2, r9
   10ec8:	4651      	mov	r1, sl
   10eca:	f00c f88f 	bl	1cfec <memcpy>
	str_pos += ros_nbr;
   10ece:	697b      	ldr	r3, [r7, #20]
   10ed0:	005b      	lsls	r3, r3, #1
   10ed2:	60bb      	str	r3, [r7, #8]
   10ed4:	697b      	ldr	r3, [r7, #20]
   10ed6:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
   10ed8:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   10edc:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   10ede:	f00b 0302 	and.w	r3, fp, #2
   10ee2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
   10ee4:	697b      	ldr	r3, [r7, #20]
   10ee6:	459a      	cmp	sl, r3
   10ee8:	d15d      	bne.n	10fa6 <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
   10eea:	7823      	ldrb	r3, [r4, #0]
   10eec:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   10eee:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   10ef0:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   10ef4:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   10ef8:	bf0c      	ite	eq
   10efa:	ea4f 0158 	moveq.w	r1, r8, lsr #1
   10efe:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   10f00:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   10f04:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   10f06:	f040 809d 	bne.w	11044 <cbprintf_package_convert+0x348>
   10f0a:	f01b 0f04 	tst.w	fp, #4
   10f0e:	bf14      	ite	ne
   10f10:	4640      	movne	r0, r8
   10f12:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   10f14:	f894 b002 	ldrb.w	fp, [r4, #2]
   10f18:	f894 a003 	ldrb.w	sl, [r4, #3]
   10f1c:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   10f1e:	7062      	strb	r2, [r4, #1]
   10f20:	70a0      	strb	r0, [r4, #2]
   10f22:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   10f24:	69ba      	ldr	r2, [r7, #24]
   10f26:	68f9      	ldr	r1, [r7, #12]
   10f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10f2a:	4620      	mov	r0, r4
   10f2c:	4798      	blx	r3
	if (rv < 0) {
   10f2e:	1e05      	subs	r5, r0, #0
   10f30:	f6ff af11 	blt.w	10d56 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   10f34:	69fb      	ldr	r3, [r7, #28]
   10f36:	7023      	strb	r3, [r4, #0]
   10f38:	693b      	ldr	r3, [r7, #16]
   10f3a:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   10f3c:	4641      	mov	r1, r8
   10f3e:	69ba      	ldr	r2, [r7, #24]
   10f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   10f42:	f884 b002 	strb.w	fp, [r4, #2]
   10f46:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   10f4a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   10f4e:	4798      	blx	r3
	if (rv < 0) {
   10f50:	f1b0 0800 	subs.w	r8, r0, #0
   10f54:	f2c0 80a3 	blt.w	1109e <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   10f58:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   10f5a:	69ba      	ldr	r2, [r7, #24]
   10f5c:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   10f5e:	eba3 0109 	sub.w	r1, r3, r9
   10f62:	68fb      	ldr	r3, [r7, #12]
   10f64:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   10f66:	68bb      	ldr	r3, [r7, #8]
   10f68:	1ac9      	subs	r1, r1, r3
   10f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10f6c:	4798      	blx	r3
	if (rv < 0) {
   10f6e:	2800      	cmp	r0, #0
   10f70:	f2c0 8097 	blt.w	110a2 <cbprintf_package_convert+0x3a6>
	out_len += rv;
   10f74:	44a8      	add	r8, r5
	out_len += rv;
   10f76:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
   10f7a:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   10f7e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   10f82:	45b3      	cmp	fp, r6
   10f84:	db60      	blt.n	11048 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
   10f86:	2100      	movs	r1, #0
   10f88:	69ba      	ldr	r2, [r7, #24]
   10f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10f8c:	4608      	mov	r0, r1
   10f8e:	4798      	blx	r3
	return out_len;
   10f90:	e6e1      	b.n	10d56 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   10f92:	f107 0030 	add.w	r0, r7, #48	; 0x30
   10f96:	f04f 0800 	mov.w	r8, #0
   10f9a:	e794      	b.n	10ec6 <cbprintf_package_convert+0x1ca>
		scpy_cnt = 0;
   10f9c:	464e      	mov	r6, r9
		keep_cnt = 0;
   10f9e:	46c8      	mov	r8, r9
   10fa0:	e795      	b.n	10ece <cbprintf_package_convert+0x1d2>
   10fa2:	46b0      	mov	r8, r6
   10fa4:	e793      	b.n	10ece <cbprintf_package_convert+0x1d2>
		uint8_t arg_idx = *str_pos++;
   10fa6:	f81a 1b02 	ldrb.w	r1, [sl], #2
   10faa:	4a3f      	ldr	r2, [pc, #252]	; (110a8 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
   10fac:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   10fb0:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   10fb4:	4293      	cmp	r3, r2
   10fb6:	d302      	bcc.n	10fbe <cbprintf_package_convert+0x2c2>
   10fb8:	4a3c      	ldr	r2, [pc, #240]	; (110ac <cbprintf_package_convert+0x3b0>)
   10fba:	4293      	cmp	r3, r2
   10fbc:	d31c      	bcc.n	10ff8 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   10fbe:	693b      	ldr	r3, [r7, #16]
   10fc0:	b123      	cbz	r3, 10fcc <cbprintf_package_convert+0x2d0>
   10fc2:	69f8      	ldr	r0, [r7, #28]
   10fc4:	f00b f985 	bl	1c2d2 <is_ptr>
   10fc8:	2800      	cmp	r0, #0
   10fca:	d18b      	bne.n	10ee4 <cbprintf_package_convert+0x1e8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   10fcc:	687b      	ldr	r3, [r7, #4]
   10fce:	b9f3      	cbnz	r3, 1100e <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
   10fd0:	f108 0228 	add.w	r2, r8, #40	; 0x28
   10fd4:	f107 0028 	add.w	r0, r7, #40	; 0x28
   10fd8:	4402      	add	r2, r0
   10fda:	f108 0301 	add.w	r3, r8, #1
   10fde:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   10fe2:	f107 0250 	add.w	r2, r7, #80	; 0x50
   10fe6:	fa52 f383 	uxtab	r3, r2, r3
   10fea:	f108 0802 	add.w	r8, r8, #2
   10fee:	fa5f f888 	uxtb.w	r8, r8
   10ff2:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   10ff6:	e775      	b.n	10ee4 <cbprintf_package_convert+0x1e8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   10ff8:	693b      	ldr	r3, [r7, #16]
   10ffa:	b12b      	cbz	r3, 11008 <cbprintf_package_convert+0x30c>
   10ffc:	69f8      	ldr	r0, [r7, #28]
   10ffe:	f00b f968 	bl	1c2d2 <is_ptr>
   11002:	2800      	cmp	r0, #0
   11004:	f47f af6e 	bne.w	10ee4 <cbprintf_package_convert+0x1e8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11008:	f01b 0f01 	tst.w	fp, #1
   1100c:	d009      	beq.n	11022 <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   1100e:	f106 0228 	add.w	r2, r6, #40	; 0x28
   11012:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11016:	1c73      	adds	r3, r6, #1
   11018:	1856      	adds	r6, r2, r1
   1101a:	f806 5c20 	strb.w	r5, [r6, #-32]
   1101e:	b2de      	uxtb	r6, r3
   11020:	e760      	b.n	10ee4 <cbprintf_package_convert+0x1e8>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11022:	f01b 0f04 	tst.w	fp, #4
   11026:	f43f af5d 	beq.w	10ee4 <cbprintf_package_convert+0x1e8>
				keep_str_pos[keep_cnt++] = arg_pos;
   1102a:	f108 0228 	add.w	r2, r8, #40	; 0x28
   1102e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11032:	f108 0301 	add.w	r3, r8, #1
   11036:	eb02 0801 	add.w	r8, r2, r1
   1103a:	f808 5c10 	strb.w	r5, [r8, #-16]
   1103e:	fa5f f883 	uxtb.w	r8, r3
   11042:	e74f      	b.n	10ee4 <cbprintf_package_convert+0x1e8>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11044:	2000      	movs	r0, #0
   11046:	e765      	b.n	10f14 <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
   11048:	f81b 300a 	ldrb.w	r3, [fp, sl]
   1104c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   11050:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   11054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   11056:	b1fb      	cbz	r3, 11098 <cbprintf_package_convert+0x39c>
   11058:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   1105c:	69ba      	ldr	r2, [r7, #24]
   1105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11060:	2101      	movs	r1, #1
   11062:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   11066:	4798      	blx	r3
		if (rv < 0) {
   11068:	2800      	cmp	r0, #0
   1106a:	db1a      	blt.n	110a2 <cbprintf_package_convert+0x3a6>
		out_len += rv;
   1106c:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1106e:	f1b8 0f00 	cmp.w	r8, #0
   11072:	d106      	bne.n	11082 <cbprintf_package_convert+0x386>
   11074:	4648      	mov	r0, r9
   11076:	f00b ff6e 	bl	1cf56 <strlen>
   1107a:	f100 0801 	add.w	r8, r0, #1
   1107e:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   11082:	69ba      	ldr	r2, [r7, #24]
   11084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11086:	4641      	mov	r1, r8
   11088:	4648      	mov	r0, r9
   1108a:	4798      	blx	r3
		if (rv < 0) {
   1108c:	2800      	cmp	r0, #0
   1108e:	db08      	blt.n	110a2 <cbprintf_package_convert+0x3a6>
		out_len += rv;
   11090:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   11092:	f10b 0b01 	add.w	fp, fp, #1
   11096:	e774      	b.n	10f82 <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
   11098:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   1109c:	e7de      	b.n	1105c <cbprintf_package_convert+0x360>
   1109e:	4645      	mov	r5, r8
   110a0:	e659      	b.n	10d56 <cbprintf_package_convert+0x5a>
   110a2:	4605      	mov	r5, r0
   110a4:	e657      	b.n	10d56 <cbprintf_package_convert+0x5a>
   110a6:	bf00      	nop
   110a8:	0001e628 	.word	0x0001e628
   110ac:	00020614 	.word	0x00020614
   110b0:	0001f0b0 	.word	0x0001f0b0
   110b4:	0001f157 	.word	0x0001f157
   110b8:	01000005 	.word	0x01000005
   110bc:	0001e990 	.word	0x0001e990

000110c0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   110c0:	4b01      	ldr	r3, [pc, #4]	; (110c8 <__printk_hook_install+0x8>)
   110c2:	6018      	str	r0, [r3, #0]
}
   110c4:	4770      	bx	lr
   110c6:	bf00      	nop
   110c8:	20000350 	.word	0x20000350

000110cc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   110cc:	b530      	push	{r4, r5, lr}
   110ce:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   110d0:	2500      	movs	r5, #0
   110d2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   110d6:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   110d8:	9500      	str	r5, [sp, #0]
   110da:	a903      	add	r1, sp, #12
   110dc:	4805      	ldr	r0, [pc, #20]	; (110f4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   110de:	9505      	str	r5, [sp, #20]
   110e0:	f000 f918 	bl	11314 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   110e4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   110e8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   110ea:	bfb8      	it	lt
   110ec:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   110ee:	b007      	add	sp, #28
   110f0:	bd30      	pop	{r4, r5, pc}
   110f2:	bf00      	nop
   110f4:	0001c321 	.word	0x0001c321

000110f8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   110f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   110fc:	8b05      	ldrh	r5, [r0, #24]
{
   110fe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11100:	0728      	lsls	r0, r5, #28
{
   11102:	4690      	mov	r8, r2
	if (processing) {
   11104:	d411      	bmi.n	1112a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   11106:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11108:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   1110c:	f040 80cd 	bne.w	112aa <process_event+0x1b2>
			evt = process_recheck(mgr);
   11110:	4620      	mov	r0, r4
   11112:	f00b fb03 	bl	1c71c <process_recheck>
		}

		if (evt == EVT_NOP) {
   11116:	b178      	cbz	r0, 11138 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   11118:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1111a:	8b21      	ldrh	r1, [r4, #24]
   1111c:	2804      	cmp	r0, #4
   1111e:	d811      	bhi.n	11144 <process_event+0x4c>
   11120:	e8df f000 	tbb	[pc, r0]
   11124:	856d10c3 	.word	0x856d10c3
   11128:	95          	.byte	0x95
   11129:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   1112a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1112c:	bf0c      	ite	eq
   1112e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11132:	f045 0520 	orrne.w	r5, r5, #32
   11136:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11138:	f388 8811 	msr	BASEPRI, r8
   1113c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11144:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11148:	45aa      	cmp	sl, r5
   1114a:	f000 80a6 	beq.w	1129a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   1114e:	2700      	movs	r7, #0
   11150:	46b9      	mov	r9, r7
   11152:	463e      	mov	r6, r7
   11154:	68a3      	ldr	r3, [r4, #8]
   11156:	2b00      	cmp	r3, #0
   11158:	f000 80bd 	beq.w	112d6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1115c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11160:	8321      	strh	r1, [r4, #24]
   11162:	f388 8811 	msr	BASEPRI, r8
   11166:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1116a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1116c:	2900      	cmp	r1, #0
   1116e:	f000 80bb 	beq.w	112e8 <process_event+0x1f0>
	return node->next;
   11172:	680d      	ldr	r5, [r1, #0]
   11174:	2900      	cmp	r1, #0
   11176:	f000 80b7 	beq.w	112e8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   1117a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1117e:	4633      	mov	r3, r6
   11180:	4652      	mov	r2, sl
   11182:	4620      	mov	r0, r4
   11184:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11186:	2d00      	cmp	r5, #0
   11188:	d076      	beq.n	11278 <process_event+0x180>
   1118a:	682b      	ldr	r3, [r5, #0]
   1118c:	4629      	mov	r1, r5
   1118e:	461d      	mov	r5, r3
   11190:	e7f0      	b.n	11174 <process_event+0x7c>
   11192:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11196:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11198:	2a01      	cmp	r2, #1
   1119a:	d81b      	bhi.n	111d4 <process_event+0xdc>
	list->head = NULL;
   1119c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1119e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   111a2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   111a4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   111a6:	b289      	uxth	r1, r1
	list->tail = NULL;
   111a8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   111ac:	d109      	bne.n	111c2 <process_event+0xca>
   111ae:	463b      	mov	r3, r7
   111b0:	e003      	b.n	111ba <process_event+0xc2>
				mgr->refs += 1U;
   111b2:	8b62      	ldrh	r2, [r4, #26]
   111b4:	3201      	adds	r2, #1
   111b6:	8362      	strh	r2, [r4, #26]
	return node->next;
   111b8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   111ba:	2b00      	cmp	r3, #0
   111bc:	d1f9      	bne.n	111b2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   111be:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   111c2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   111c4:	4620      	mov	r0, r4
   111c6:	f00b faa9 	bl	1c71c <process_recheck>
   111ca:	2800      	cmp	r0, #0
   111cc:	d07b      	beq.n	112c6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   111ce:	f041 0120 	orr.w	r1, r1, #32
   111d2:	e077      	b.n	112c4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   111d4:	2b04      	cmp	r3, #4
   111d6:	d10a      	bne.n	111ee <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   111d8:	f021 0107 	bic.w	r1, r1, #7
   111dc:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   111de:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   111e0:	4620      	mov	r0, r4
   111e2:	f00b fa9b 	bl	1c71c <process_recheck>
   111e6:	b110      	cbz	r0, 111ee <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   111e8:	f041 0120 	orr.w	r1, r1, #32
   111ec:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   111ee:	8b21      	ldrh	r1, [r4, #24]
   111f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   111f4:	45aa      	cmp	sl, r5
   111f6:	d050      	beq.n	1129a <process_event+0x1a2>
   111f8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   111fa:	46b9      	mov	r9, r7
   111fc:	e7aa      	b.n	11154 <process_event+0x5c>
			transit = mgr->transitions->start;
   111fe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11200:	f021 0107 	bic.w	r1, r1, #7
   11204:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   11208:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   1120a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1120e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11210:	d12d      	bne.n	1126e <process_event+0x176>
		    || (transit != NULL)) {
   11212:	f1b9 0f00 	cmp.w	r9, #0
   11216:	d040      	beq.n	1129a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11218:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1121c:	8321      	strh	r1, [r4, #24]
   1121e:	f388 8811 	msr	BASEPRI, r8
   11222:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   11226:	493a      	ldr	r1, [pc, #232]	; (11310 <process_event+0x218>)
   11228:	4620      	mov	r0, r4
   1122a:	47c8      	blx	r9
   1122c:	e029      	b.n	11282 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1122e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   11232:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11234:	f041 0104 	orr.w	r1, r1, #4
   11238:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1123a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   1123c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11240:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11242:	d0e6      	beq.n	11212 <process_event+0x11a>
   11244:	2700      	movs	r7, #0
		res = 0;
   11246:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11248:	f04f 0a04 	mov.w	sl, #4
   1124c:	e782      	b.n	11154 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1124e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   11252:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11254:	f041 0105 	orr.w	r1, r1, #5
   11258:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1125a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   1125c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11260:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11262:	d0d6      	beq.n	11212 <process_event+0x11a>
   11264:	2700      	movs	r7, #0
		res = 0;
   11266:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11268:	f04f 0a05 	mov.w	sl, #5
   1126c:	e772      	b.n	11154 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   1126e:	2700      	movs	r7, #0
		res = 0;
   11270:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11272:	f04f 0a06 	mov.w	sl, #6
   11276:	e76d      	b.n	11154 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11278:	462b      	mov	r3, r5
   1127a:	e787      	b.n	1118c <process_event+0x94>
			if (transit != NULL) {
   1127c:	f1b9 0f00 	cmp.w	r9, #0
   11280:	d1d1      	bne.n	11226 <process_event+0x12e>
	__asm__ volatile(
   11282:	f04f 0340 	mov.w	r3, #64	; 0x40
   11286:	f3ef 8811 	mrs	r8, BASEPRI
   1128a:	f383 8812 	msr	BASEPRI_MAX, r3
   1128e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11292:	8b23      	ldrh	r3, [r4, #24]
   11294:	f023 0308 	bic.w	r3, r3, #8
   11298:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1129a:	8b25      	ldrh	r5, [r4, #24]
   1129c:	06ea      	lsls	r2, r5, #27
   1129e:	d52e      	bpl.n	112fe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   112a0:	f025 0310 	bic.w	r3, r5, #16
   112a4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   112a6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   112aa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   112ac:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   112ae:	2e00      	cmp	r6, #0
   112b0:	f6bf af6f 	bge.w	11192 <process_event+0x9a>
	list->head = NULL;
   112b4:	2300      	movs	r3, #0
		*clients = mgr->clients;
   112b6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   112b8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   112bc:	f021 0107 	bic.w	r1, r1, #7
   112c0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   112c4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   112c6:	8b21      	ldrh	r1, [r4, #24]
   112c8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   112cc:	45aa      	cmp	sl, r5
   112ce:	f04f 0900 	mov.w	r9, #0
   112d2:	f47f af3f 	bne.w	11154 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   112d6:	2f00      	cmp	r7, #0
   112d8:	d09b      	beq.n	11212 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   112da:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   112de:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   112e0:	f388 8811 	msr	BASEPRI, r8
   112e4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   112e8:	2f00      	cmp	r7, #0
   112ea:	d0c7      	beq.n	1127c <process_event+0x184>
	return node->next;
   112ec:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   112ee:	4639      	mov	r1, r7
   112f0:	4633      	mov	r3, r6
   112f2:	4652      	mov	r2, sl
   112f4:	4620      	mov	r0, r4
   112f6:	f00b fa3d 	bl	1c774 <notify_one>
	list->head = node;
   112fa:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   112fc:	e7f4      	b.n	112e8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   112fe:	06ab      	lsls	r3, r5, #26
   11300:	f57f af1a 	bpl.w	11138 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11304:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11308:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1130a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   1130e:	e6ff      	b.n	11110 <process_event+0x18>
   11310:	0001c7a1 	.word	0x0001c7a1

00011314 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11318:	4681      	mov	r9, r0
   1131a:	b095      	sub	sp, #84	; 0x54
   1131c:	468b      	mov	fp, r1
   1131e:	4617      	mov	r7, r2
   11320:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11322:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11324:	7838      	ldrb	r0, [r7, #0]
   11326:	b908      	cbnz	r0, 1132c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11328:	4628      	mov	r0, r5
   1132a:	e358      	b.n	119de <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   1132c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1132e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   11330:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   11332:	d006      	beq.n	11342 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   11334:	4659      	mov	r1, fp
   11336:	47c8      	blx	r9
   11338:	2800      	cmp	r0, #0
   1133a:	f2c0 8350 	blt.w	119de <z_cbvprintf_impl+0x6ca>
   1133e:	3501      	adds	r5, #1
		if (bps == NULL) {
   11340:	e1fb      	b.n	1173a <z_cbvprintf_impl+0x426>
		} state = {
   11342:	2218      	movs	r2, #24
   11344:	2100      	movs	r1, #0
   11346:	a80e      	add	r0, sp, #56	; 0x38
   11348:	f00b fe5b 	bl	1d002 <memset>
	if (*sp == '%') {
   1134c:	787b      	ldrb	r3, [r7, #1]
   1134e:	2b25      	cmp	r3, #37	; 0x25
   11350:	d07d      	beq.n	1144e <z_cbvprintf_impl+0x13a>
   11352:	2300      	movs	r3, #0
   11354:	1c78      	adds	r0, r7, #1
   11356:	4698      	mov	r8, r3
   11358:	469e      	mov	lr, r3
   1135a:	469c      	mov	ip, r3
   1135c:	461e      	mov	r6, r3
   1135e:	4601      	mov	r1, r0
		switch (*sp) {
   11360:	f810 2b01 	ldrb.w	r2, [r0], #1
   11364:	2a2b      	cmp	r2, #43	; 0x2b
   11366:	f000 80a1 	beq.w	114ac <z_cbvprintf_impl+0x198>
   1136a:	f200 8098 	bhi.w	1149e <z_cbvprintf_impl+0x18a>
   1136e:	2a20      	cmp	r2, #32
   11370:	f000 809f 	beq.w	114b2 <z_cbvprintf_impl+0x19e>
   11374:	2a23      	cmp	r2, #35	; 0x23
   11376:	f000 809f 	beq.w	114b8 <z_cbvprintf_impl+0x1a4>
   1137a:	b12b      	cbz	r3, 11388 <z_cbvprintf_impl+0x74>
   1137c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11384:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11388:	f1b8 0f00 	cmp.w	r8, #0
   1138c:	d005      	beq.n	1139a <z_cbvprintf_impl+0x86>
   1138e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11392:	f043 0320 	orr.w	r3, r3, #32
   11396:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1139a:	f1be 0f00 	cmp.w	lr, #0
   1139e:	d005      	beq.n	113ac <z_cbvprintf_impl+0x98>
   113a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   113a4:	f043 0310 	orr.w	r3, r3, #16
   113a8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   113ac:	f1bc 0f00 	cmp.w	ip, #0
   113b0:	d005      	beq.n	113be <z_cbvprintf_impl+0xaa>
   113b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   113b6:	f043 0308 	orr.w	r3, r3, #8
   113ba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   113be:	b12e      	cbz	r6, 113cc <z_cbvprintf_impl+0xb8>
   113c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   113c4:	f043 0304 	orr.w	r3, r3, #4
   113c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   113cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   113d0:	f003 0044 	and.w	r0, r3, #68	; 0x44
   113d4:	2844      	cmp	r0, #68	; 0x44
   113d6:	d103      	bne.n	113e0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   113d8:	f36f 1386 	bfc	r3, #6, #1
   113dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   113e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   113e4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   113e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   113ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   113ee:	d17f      	bne.n	114f0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   113f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   113f4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   113f8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   113fa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   113fe:	781a      	ldrb	r2, [r3, #0]
   11400:	2a2e      	cmp	r2, #46	; 0x2e
   11402:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11406:	bf0c      	ite	eq
   11408:	2101      	moveq	r1, #1
   1140a:	2100      	movne	r1, #0
   1140c:	f361 0241 	bfi	r2, r1, #1, #1
   11410:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   11414:	d178      	bne.n	11508 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   11416:	785a      	ldrb	r2, [r3, #1]
   11418:	2a2a      	cmp	r2, #42	; 0x2a
   1141a:	d06e      	beq.n	114fa <z_cbvprintf_impl+0x1e6>
	++sp;
   1141c:	3301      	adds	r3, #1
	size_t val = 0;
   1141e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11420:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11424:	4619      	mov	r1, r3
   11426:	f811 0b01 	ldrb.w	r0, [r1], #1
   1142a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1142e:	2e09      	cmp	r6, #9
   11430:	f240 8095 	bls.w	1155e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   11434:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   11438:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1143a:	f3c1 0040 	ubfx	r0, r1, #1, #1
   1143e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   11442:	460a      	mov	r2, r1
   11444:	f360 0241 	bfi	r2, r0, #1, #1
   11448:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   1144c:	e05c      	b.n	11508 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   1144e:	1cba      	adds	r2, r7, #2
   11450:	9203      	str	r2, [sp, #12]
   11452:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   11456:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1145a:	07da      	lsls	r2, r3, #31
   1145c:	f140 812e 	bpl.w	116bc <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   11460:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   11464:	f1b8 0f00 	cmp.w	r8, #0
   11468:	da07      	bge.n	1147a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   1146a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1146e:	f042 0204 	orr.w	r2, r2, #4
   11472:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   11476:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   1147a:	075e      	lsls	r6, r3, #29
   1147c:	f140 8127 	bpl.w	116ce <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   11480:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   11484:	f1ba 0f00 	cmp.w	sl, #0
   11488:	f280 8126 	bge.w	116d8 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   1148c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   11490:	f36f 0341 	bfc	r3, #1, #1
   11494:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   11498:	f04f 3aff 	mov.w	sl, #4294967295
   1149c:	e11c      	b.n	116d8 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   1149e:	2a2d      	cmp	r2, #45	; 0x2d
   114a0:	d00d      	beq.n	114be <z_cbvprintf_impl+0x1aa>
   114a2:	2a30      	cmp	r2, #48	; 0x30
   114a4:	f47f af69 	bne.w	1137a <z_cbvprintf_impl+0x66>
   114a8:	2301      	movs	r3, #1
	} while (loop);
   114aa:	e758      	b.n	1135e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   114ac:	f04f 0c01 	mov.w	ip, #1
   114b0:	e755      	b.n	1135e <z_cbvprintf_impl+0x4a>
   114b2:	f04f 0e01 	mov.w	lr, #1
   114b6:	e752      	b.n	1135e <z_cbvprintf_impl+0x4a>
   114b8:	f04f 0801 	mov.w	r8, #1
   114bc:	e74f      	b.n	1135e <z_cbvprintf_impl+0x4a>
   114be:	2601      	movs	r6, #1
   114c0:	e74d      	b.n	1135e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   114c2:	fb0e 6202 	mla	r2, lr, r2, r6
   114c6:	3a30      	subs	r2, #48	; 0x30
   114c8:	4603      	mov	r3, r0
   114ca:	4618      	mov	r0, r3
   114cc:	f810 6b01 	ldrb.w	r6, [r0], #1
   114d0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   114d4:	f1bc 0f09 	cmp.w	ip, #9
   114d8:	d9f3      	bls.n	114c2 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   114da:	4299      	cmp	r1, r3
   114dc:	d08f      	beq.n	113fe <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   114de:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   114e2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   114e4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   114e6:	f362 0141 	bfi	r1, r2, #1, #1
   114ea:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   114ee:	e786      	b.n	113fe <z_cbvprintf_impl+0xea>
   114f0:	460b      	mov	r3, r1
	size_t val = 0;
   114f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   114f4:	f04f 0e0a 	mov.w	lr, #10
   114f8:	e7e7      	b.n	114ca <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   114fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   114fe:	f042 0204 	orr.w	r2, r2, #4
   11502:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   11506:	3302      	adds	r3, #2
	switch (*sp) {
   11508:	781a      	ldrb	r2, [r3, #0]
   1150a:	2a6c      	cmp	r2, #108	; 0x6c
   1150c:	d047      	beq.n	1159e <z_cbvprintf_impl+0x28a>
   1150e:	d82b      	bhi.n	11568 <z_cbvprintf_impl+0x254>
   11510:	2a68      	cmp	r2, #104	; 0x68
   11512:	d031      	beq.n	11578 <z_cbvprintf_impl+0x264>
   11514:	2a6a      	cmp	r2, #106	; 0x6a
   11516:	d04b      	beq.n	115b0 <z_cbvprintf_impl+0x29c>
   11518:	2a4c      	cmp	r2, #76	; 0x4c
   1151a:	d051      	beq.n	115c0 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   1151c:	461a      	mov	r2, r3
   1151e:	f812 3b01 	ldrb.w	r3, [r2], #1
   11522:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   11524:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   11526:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   1152a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   1152e:	f200 80be 	bhi.w	116ae <z_cbvprintf_impl+0x39a>
   11532:	2b6d      	cmp	r3, #109	; 0x6d
   11534:	d851      	bhi.n	115da <z_cbvprintf_impl+0x2c6>
   11536:	2b69      	cmp	r3, #105	; 0x69
   11538:	f200 80b9 	bhi.w	116ae <z_cbvprintf_impl+0x39a>
   1153c:	2b57      	cmp	r3, #87	; 0x57
   1153e:	d867      	bhi.n	11610 <z_cbvprintf_impl+0x2fc>
   11540:	2b41      	cmp	r3, #65	; 0x41
   11542:	d003      	beq.n	1154c <z_cbvprintf_impl+0x238>
   11544:	3b45      	subs	r3, #69	; 0x45
   11546:	2b02      	cmp	r3, #2
   11548:	f200 80b1 	bhi.w	116ae <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   1154c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11550:	2204      	movs	r2, #4
   11552:	f362 0302 	bfi	r3, r2, #0, #3
   11556:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   1155a:	2301      	movs	r3, #1
			break;
   1155c:	e073      	b.n	11646 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   1155e:	fb0c 0202 	mla	r2, ip, r2, r0
   11562:	3a30      	subs	r2, #48	; 0x30
   11564:	460b      	mov	r3, r1
   11566:	e75d      	b.n	11424 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   11568:	2a74      	cmp	r2, #116	; 0x74
   1156a:	d025      	beq.n	115b8 <z_cbvprintf_impl+0x2a4>
   1156c:	2a7a      	cmp	r2, #122	; 0x7a
   1156e:	d1d5      	bne.n	1151c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   11570:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11574:	2106      	movs	r1, #6
   11576:	e00c      	b.n	11592 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   11578:	785a      	ldrb	r2, [r3, #1]
   1157a:	2a68      	cmp	r2, #104	; 0x68
   1157c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11580:	d106      	bne.n	11590 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   11582:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11584:	f361 02c6 	bfi	r2, r1, #3, #4
   11588:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   1158c:	3302      	adds	r3, #2
   1158e:	e7c5      	b.n	1151c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   11590:	2102      	movs	r1, #2
   11592:	f361 02c6 	bfi	r2, r1, #3, #4
   11596:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   1159a:	3301      	adds	r3, #1
   1159c:	e7be      	b.n	1151c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   1159e:	785a      	ldrb	r2, [r3, #1]
   115a0:	2a6c      	cmp	r2, #108	; 0x6c
   115a2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   115a6:	d101      	bne.n	115ac <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   115a8:	2104      	movs	r1, #4
   115aa:	e7eb      	b.n	11584 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   115ac:	2103      	movs	r1, #3
   115ae:	e7f0      	b.n	11592 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   115b0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   115b4:	2105      	movs	r1, #5
   115b6:	e7ec      	b.n	11592 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   115b8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   115bc:	2107      	movs	r1, #7
   115be:	e7e8      	b.n	11592 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   115c0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   115c4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   115c8:	f022 0202 	bic.w	r2, r2, #2
   115cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   115d0:	f042 0202 	orr.w	r2, r2, #2
   115d4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   115d8:	e7df      	b.n	1159a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   115da:	3b6e      	subs	r3, #110	; 0x6e
   115dc:	b2d9      	uxtb	r1, r3
   115de:	2301      	movs	r3, #1
   115e0:	408b      	lsls	r3, r1
   115e2:	f240 4182 	movw	r1, #1154	; 0x482
   115e6:	420b      	tst	r3, r1
   115e8:	d137      	bne.n	1165a <z_cbvprintf_impl+0x346>
   115ea:	f013 0f24 	tst.w	r3, #36	; 0x24
   115ee:	d151      	bne.n	11694 <z_cbvprintf_impl+0x380>
   115f0:	07d8      	lsls	r0, r3, #31
   115f2:	d55c      	bpl.n	116ae <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   115f4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   115f8:	2103      	movs	r1, #3
   115fa:	f361 0302 	bfi	r3, r1, #0, #3
   115fe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11602:	f002 0378 	and.w	r3, r2, #120	; 0x78
   11606:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1160a:	424b      	negs	r3, r1
   1160c:	414b      	adcs	r3, r1
   1160e:	e01a      	b.n	11646 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   11610:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   11614:	b2c9      	uxtb	r1, r1
   11616:	2001      	movs	r0, #1
   11618:	fa00 f101 	lsl.w	r1, r0, r1
   1161c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   11620:	d194      	bne.n	1154c <z_cbvprintf_impl+0x238>
   11622:	f640 0601 	movw	r6, #2049	; 0x801
   11626:	4231      	tst	r1, r6
   11628:	d11d      	bne.n	11666 <z_cbvprintf_impl+0x352>
   1162a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1162e:	d03e      	beq.n	116ae <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   11630:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11634:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11638:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1163c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1163e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11642:	d034      	beq.n	116ae <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   11644:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   11646:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1164a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1164e:	430b      	orrs	r3, r1
   11650:	f363 0241 	bfi	r2, r3, #1, #1
   11654:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   11658:	e6fd      	b.n	11456 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   1165a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1165e:	2102      	movs	r1, #2
   11660:	f361 0302 	bfi	r3, r1, #0, #3
   11664:	e7e8      	b.n	11638 <z_cbvprintf_impl+0x324>
   11666:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   1166a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   1166c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11670:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11674:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11676:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   1167a:	bf02      	ittt	eq
   1167c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   11680:	f041 0101 	orreq.w	r1, r1, #1
   11684:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   11688:	2b63      	cmp	r3, #99	; 0x63
   1168a:	d1db      	bne.n	11644 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1168c:	1e13      	subs	r3, r2, #0
   1168e:	bf18      	it	ne
   11690:	2301      	movne	r3, #1
   11692:	e7d8      	b.n	11646 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   11694:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11698:	2103      	movs	r1, #3
   1169a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   1169e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   116a2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   116a6:	bf14      	ite	ne
   116a8:	2301      	movne	r3, #1
   116aa:	2300      	moveq	r3, #0
   116ac:	e7cb      	b.n	11646 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   116ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   116b2:	f043 0301 	orr.w	r3, r3, #1
   116b6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   116ba:	e7c3      	b.n	11644 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   116bc:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   116c0:	2a00      	cmp	r2, #0
			width = conv->width_value;
   116c2:	bfb4      	ite	lt
   116c4:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   116c8:	f04f 38ff 	movge.w	r8, #4294967295
   116cc:	e6d5      	b.n	1147a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   116ce:	0798      	lsls	r0, r3, #30
   116d0:	f57f aee2 	bpl.w	11498 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   116d4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   116d8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   116dc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   116de:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   116e2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   116e6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   116ea:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   116ec:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   116f0:	d133      	bne.n	1175a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   116f2:	1ecb      	subs	r3, r1, #3
   116f4:	2b04      	cmp	r3, #4
   116f6:	d804      	bhi.n	11702 <z_cbvprintf_impl+0x3ee>
   116f8:	e8df f003 	tbb	[pc, r3]
   116fc:	21464621 	.word	0x21464621
   11700:	21          	.byte	0x21
   11701:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11702:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   11704:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   11706:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1170a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   1170e:	d11c      	bne.n	1174a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   11710:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   11714:	17da      	asrs	r2, r3, #31
   11716:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   1171a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   1171c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11720:	f013 0603 	ands.w	r6, r3, #3
   11724:	d050      	beq.n	117c8 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   11726:	9b03      	ldr	r3, [sp, #12]
   11728:	463a      	mov	r2, r7
   1172a:	4659      	mov	r1, fp
   1172c:	4648      	mov	r0, r9
   1172e:	f00b f923 	bl	1c978 <outs>
   11732:	2800      	cmp	r0, #0
   11734:	f2c0 8153 	blt.w	119de <z_cbvprintf_impl+0x6ca>
   11738:	4405      	add	r5, r0
			continue;
   1173a:	9f03      	ldr	r7, [sp, #12]
   1173c:	e5f2      	b.n	11324 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1173e:	f854 3b04 	ldr.w	r3, [r4], #4
   11742:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   11744:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   11748:	e7e8      	b.n	1171c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   1174a:	2902      	cmp	r1, #2
   1174c:	d1e5      	bne.n	1171a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   1174e:	b21a      	sxth	r2, r3
   11750:	f343 33c0 	sbfx	r3, r3, #15, #1
   11754:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11758:	e7df      	b.n	1171a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1175a:	2b02      	cmp	r3, #2
   1175c:	d124      	bne.n	117a8 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   1175e:	1ecb      	subs	r3, r1, #3
   11760:	2b04      	cmp	r3, #4
   11762:	d804      	bhi.n	1176e <z_cbvprintf_impl+0x45a>
   11764:	e8df f003 	tbb	[pc, r3]
   11768:	18101018 	.word	0x18101018
   1176c:	18          	.byte	0x18
   1176d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1176e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   11770:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11774:	f04f 0200 	mov.w	r2, #0
   11778:	d014      	beq.n	117a4 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   1177a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1177c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   11780:	d1cc      	bne.n	1171c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   11782:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11784:	930e      	str	r3, [sp, #56]	; 0x38
   11786:	e7c9      	b.n	1171c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   11788:	3407      	adds	r4, #7
   1178a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1178e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11792:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11796:	e7c1      	b.n	1171c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   11798:	f854 3b04 	ldr.w	r3, [r4], #4
   1179c:	930e      	str	r3, [sp, #56]	; 0x38
   1179e:	2300      	movs	r3, #0
   117a0:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   117a2:	e7bb      	b.n	1171c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   117a4:	b2db      	uxtb	r3, r3
   117a6:	e7cd      	b.n	11744 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   117a8:	2b04      	cmp	r3, #4
   117aa:	d108      	bne.n	117be <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   117ac:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   117ae:	f024 0407 	bic.w	r4, r4, #7
   117b2:	e9d4 2300 	ldrd	r2, r3, [r4]
   117b6:	3408      	adds	r4, #8
   117b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   117bc:	e7ae      	b.n	1171c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   117be:	2b03      	cmp	r3, #3
   117c0:	d1ac      	bne.n	1171c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   117c2:	f854 3b04 	ldr.w	r3, [r4], #4
   117c6:	e7dd      	b.n	11784 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   117c8:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   117cc:	2878      	cmp	r0, #120	; 0x78
   117ce:	d8b4      	bhi.n	1173a <z_cbvprintf_impl+0x426>
   117d0:	2862      	cmp	r0, #98	; 0x62
   117d2:	d81c      	bhi.n	1180e <z_cbvprintf_impl+0x4fa>
   117d4:	2825      	cmp	r0, #37	; 0x25
   117d6:	f43f adad 	beq.w	11334 <z_cbvprintf_impl+0x20>
   117da:	2858      	cmp	r0, #88	; 0x58
   117dc:	d1ad      	bne.n	1173a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   117de:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   117e2:	9300      	str	r3, [sp, #0]
   117e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   117e8:	ab08      	add	r3, sp, #32
   117ea:	aa10      	add	r2, sp, #64	; 0x40
   117ec:	f00b f87e 	bl	1c8ec <encode_uint>
			if (precision >= 0) {
   117f0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   117f4:	4607      	mov	r7, r0
			if (precision >= 0) {
   117f6:	f280 809a 	bge.w	1192e <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   117fa:	2f00      	cmp	r7, #0
   117fc:	d09d      	beq.n	1173a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   117fe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11802:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   11804:	2e00      	cmp	r6, #0
   11806:	f000 80c1 	beq.w	1198c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   1180a:	3001      	adds	r0, #1
   1180c:	e0be      	b.n	1198c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   1180e:	3863      	subs	r0, #99	; 0x63
   11810:	2815      	cmp	r0, #21
   11812:	d892      	bhi.n	1173a <z_cbvprintf_impl+0x426>
   11814:	a201      	add	r2, pc, #4	; (adr r2, 1181c <z_cbvprintf_impl+0x508>)
   11816:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1181a:	bf00      	nop
   1181c:	000118f1 	.word	0x000118f1
   11820:	00011903 	.word	0x00011903
   11824:	0001173b 	.word	0x0001173b
   11828:	0001173b 	.word	0x0001173b
   1182c:	0001173b 	.word	0x0001173b
   11830:	0001173b 	.word	0x0001173b
   11834:	00011903 	.word	0x00011903
   11838:	0001173b 	.word	0x0001173b
   1183c:	0001173b 	.word	0x0001173b
   11840:	0001173b 	.word	0x0001173b
   11844:	0001173b 	.word	0x0001173b
   11848:	00011991 	.word	0x00011991
   1184c:	00011929 	.word	0x00011929
   11850:	0001194f 	.word	0x0001194f
   11854:	0001173b 	.word	0x0001173b
   11858:	0001173b 	.word	0x0001173b
   1185c:	00011875 	.word	0x00011875
   11860:	0001173b 	.word	0x0001173b
   11864:	00011929 	.word	0x00011929
   11868:	0001173b 	.word	0x0001173b
   1186c:	0001173b 	.word	0x0001173b
   11870:	00011929 	.word	0x00011929
			if (precision >= 0) {
   11874:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   11878:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   1187a:	db35      	blt.n	118e8 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   1187c:	4651      	mov	r1, sl
   1187e:	4638      	mov	r0, r7
   11880:	f00b fb70 	bl	1cf64 <strnlen>
			bpe = bps + len;
   11884:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   11888:	2f00      	cmp	r7, #0
   1188a:	f43f af56 	beq.w	1173a <z_cbvprintf_impl+0x426>
		char sign = 0;
   1188e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   11890:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11894:	f013 0210 	ands.w	r2, r3, #16
   11898:	9205      	str	r2, [sp, #20]
   1189a:	f000 8093 	beq.w	119c4 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   1189e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   118a0:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   118a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   118a4:	bf48      	it	mi
   118a6:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   118a8:	9204      	str	r2, [sp, #16]
   118aa:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   118ac:	bf48      	it	mi
   118ae:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   118b0:	f1b8 0f00 	cmp.w	r8, #0
   118b4:	f340 80a0 	ble.w	119f8 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   118b8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   118bc:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   118c0:	f3c2 0380 	ubfx	r3, r2, #2, #1
   118c4:	0750      	lsls	r0, r2, #29
   118c6:	9306      	str	r3, [sp, #24]
   118c8:	f100 8096 	bmi.w	119f8 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   118cc:	0651      	lsls	r1, r2, #25
   118ce:	f140 8089 	bpl.w	119e4 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   118d2:	b13e      	cbz	r6, 118e4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   118d4:	4659      	mov	r1, fp
   118d6:	4630      	mov	r0, r6
   118d8:	47c8      	blx	r9
   118da:	2800      	cmp	r0, #0
   118dc:	db7f      	blt.n	119de <z_cbvprintf_impl+0x6ca>
   118de:	9b06      	ldr	r3, [sp, #24]
   118e0:	3501      	adds	r5, #1
   118e2:	461e      	mov	r6, r3
					pad = '0';
   118e4:	2230      	movs	r2, #48	; 0x30
   118e6:	e07e      	b.n	119e6 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   118e8:	4638      	mov	r0, r7
   118ea:	f00b fb34 	bl	1cf56 <strlen>
   118ee:	e7c9      	b.n	11884 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   118f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   118f2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   118f6:	2600      	movs	r6, #0
			bps = buf;
   118f8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   118fa:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   118fe:	2001      	movs	r0, #1
   11900:	e7c6      	b.n	11890 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   11902:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   11904:	bf5c      	itt	pl
   11906:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   1190a:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   1190c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   11910:	bf48      	it	mi
   11912:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   11914:	2b00      	cmp	r3, #0
   11916:	f6bf af62 	bge.w	117de <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   1191a:	4252      	negs	r2, r2
   1191c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11920:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   11924:	262d      	movs	r6, #45	; 0x2d
   11926:	e75a      	b.n	117de <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11928:	2600      	movs	r6, #0
   1192a:	e758      	b.n	117de <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   1192c:	2600      	movs	r6, #0
				conv->flag_zero = false;
   1192e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   11932:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11936:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   11938:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1193c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   1193e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   11942:	f67f af5a 	bls.w	117fa <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   11946:	ebaa 0303 	sub.w	r3, sl, r3
   1194a:	9311      	str	r3, [sp, #68]	; 0x44
   1194c:	e755      	b.n	117fa <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   1194e:	980e      	ldr	r0, [sp, #56]	; 0x38
   11950:	b390      	cbz	r0, 119b8 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11952:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11956:	9300      	str	r3, [sp, #0]
   11958:	aa10      	add	r2, sp, #64	; 0x40
   1195a:	ab08      	add	r3, sp, #32
   1195c:	2100      	movs	r1, #0
   1195e:	f00a ffc5 	bl	1c8ec <encode_uint>
				conv->altform_0c = true;
   11962:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   11966:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1196a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1196e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   11972:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11976:	4607      	mov	r7, r0
				conv->altform_0c = true;
   11978:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   1197c:	dad6      	bge.n	1192c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   1197e:	2800      	cmp	r0, #0
   11980:	f43f aedb 	beq.w	1173a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11984:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11988:	1a18      	subs	r0, r3, r0
		char sign = 0;
   1198a:	2600      	movs	r6, #0
   1198c:	469a      	mov	sl, r3
   1198e:	e77f      	b.n	11890 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   11990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   11992:	2907      	cmp	r1, #7
   11994:	f63f aed1 	bhi.w	1173a <z_cbvprintf_impl+0x426>
   11998:	e8df f001 	tbb	[pc, r1]
   1199c:	0c06040c 	.word	0x0c06040c
   119a0:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   119a4:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   119a6:	e6c8      	b.n	1173a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   119a8:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   119aa:	e6c6      	b.n	1173a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   119ac:	17ea      	asrs	r2, r5, #31
   119ae:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   119b2:	e6c2      	b.n	1173a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   119b4:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   119b6:	e6c0      	b.n	1173a <z_cbvprintf_impl+0x426>
   119b8:	4f2e      	ldr	r7, [pc, #184]	; (11a74 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   119ba:	4606      	mov	r6, r0
			bpe = bps + 5;
   119bc:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   119c0:	2005      	movs	r0, #5
   119c2:	e765      	b.n	11890 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   119c4:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   119c6:	bf48      	it	mi
   119c8:	3001      	addmi	r0, #1
   119ca:	e769      	b.n	118a0 <z_cbvprintf_impl+0x58c>
   119cc:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   119ce:	4610      	mov	r0, r2
   119d0:	9206      	str	r2, [sp, #24]
   119d2:	4659      	mov	r1, fp
   119d4:	47c8      	blx	r9
   119d6:	2800      	cmp	r0, #0
   119d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   119dc:	da04      	bge.n	119e8 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   119de:	b015      	add	sp, #84	; 0x54
   119e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   119e4:	2220      	movs	r2, #32
					pad = '0';
   119e6:	4643      	mov	r3, r8
				while (width-- > 0) {
   119e8:	4619      	mov	r1, r3
   119ea:	2900      	cmp	r1, #0
   119ec:	f103 33ff 	add.w	r3, r3, #4294967295
   119f0:	dcec      	bgt.n	119cc <z_cbvprintf_impl+0x6b8>
   119f2:	4445      	add	r5, r8
   119f4:	1a6d      	subs	r5, r5, r1
   119f6:	4698      	mov	r8, r3
		if (sign != 0) {
   119f8:	b12e      	cbz	r6, 11a06 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   119fa:	4659      	mov	r1, fp
   119fc:	4630      	mov	r0, r6
   119fe:	47c8      	blx	r9
   11a00:	2800      	cmp	r0, #0
   11a02:	dbec      	blt.n	119de <z_cbvprintf_impl+0x6ca>
   11a04:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11a06:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11a0a:	06da      	lsls	r2, r3, #27
   11a0c:	d401      	bmi.n	11a12 <z_cbvprintf_impl+0x6fe>
   11a0e:	071b      	lsls	r3, r3, #28
   11a10:	d505      	bpl.n	11a1e <z_cbvprintf_impl+0x70a>
				OUTC('0');
   11a12:	4659      	mov	r1, fp
   11a14:	2030      	movs	r0, #48	; 0x30
   11a16:	47c8      	blx	r9
   11a18:	2800      	cmp	r0, #0
   11a1a:	dbe0      	blt.n	119de <z_cbvprintf_impl+0x6ca>
   11a1c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11a1e:	9b05      	ldr	r3, [sp, #20]
   11a20:	b133      	cbz	r3, 11a30 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   11a22:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11a26:	4659      	mov	r1, fp
   11a28:	47c8      	blx	r9
   11a2a:	2800      	cmp	r0, #0
   11a2c:	dbd7      	blt.n	119de <z_cbvprintf_impl+0x6ca>
   11a2e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11a30:	9e04      	ldr	r6, [sp, #16]
   11a32:	442e      	add	r6, r5
   11a34:	e005      	b.n	11a42 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   11a36:	4659      	mov	r1, fp
   11a38:	2030      	movs	r0, #48	; 0x30
   11a3a:	47c8      	blx	r9
   11a3c:	2800      	cmp	r0, #0
   11a3e:	dbce      	blt.n	119de <z_cbvprintf_impl+0x6ca>
   11a40:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11a42:	1b73      	subs	r3, r6, r5
   11a44:	2b00      	cmp	r3, #0
   11a46:	dcf6      	bgt.n	11a36 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   11a48:	4653      	mov	r3, sl
   11a4a:	463a      	mov	r2, r7
   11a4c:	4659      	mov	r1, fp
   11a4e:	4648      	mov	r0, r9
   11a50:	f00a ff92 	bl	1c978 <outs>
   11a54:	2800      	cmp	r0, #0
   11a56:	dbc2      	blt.n	119de <z_cbvprintf_impl+0x6ca>
   11a58:	4405      	add	r5, r0
		while (width > 0) {
   11a5a:	44a8      	add	r8, r5
   11a5c:	eba8 0305 	sub.w	r3, r8, r5
   11a60:	2b00      	cmp	r3, #0
   11a62:	f77f ae6a 	ble.w	1173a <z_cbvprintf_impl+0x426>
			OUTC(' ');
   11a66:	4659      	mov	r1, fp
   11a68:	2020      	movs	r0, #32
   11a6a:	47c8      	blx	r9
   11a6c:	2800      	cmp	r0, #0
   11a6e:	dbb6      	blt.n	119de <z_cbvprintf_impl+0x6ca>
   11a70:	3501      	adds	r5, #1
			--width;
   11a72:	e7f3      	b.n	11a5c <z_cbvprintf_impl+0x748>
   11a74:	0001f181 	.word	0x0001f181

00011a78 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   11a78:	b508      	push	{r3, lr}
	__asm__ volatile(
   11a7a:	f04f 0240 	mov.w	r2, #64	; 0x40
   11a7e:	f3ef 8311 	mrs	r3, BASEPRI
   11a82:	f382 8812 	msr	BASEPRI_MAX, r2
   11a86:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   11a8a:	f001 feff 	bl	1388c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11a8e:	4803      	ldr	r0, [pc, #12]	; (11a9c <sys_reboot+0x24>)
   11a90:	f00a fc5b 	bl	1c34a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11a94:	f001 f808 	bl	12aa8 <arch_cpu_idle>
   11a98:	e7fc      	b.n	11a94 <sys_reboot+0x1c>
   11a9a:	bf00      	nop
   11a9c:	0001f187 	.word	0x0001f187

00011aa0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   11aa0:	f005 be84 	b.w	177ac <SystemInit>

00011aa4 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   11aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11aa8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 11b04 <activate_foreach_backend+0x60>
{
   11aac:	4604      	mov	r4, r0
	while (mask_cpy) {
   11aae:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   11ab0:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   11ab4:	b914      	cbnz	r4, 11abc <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   11ab6:	4638      	mov	r0, r7
   11ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   11abc:	fa94 f5a4 	rbit	r5, r4
   11ac0:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   11ac4:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11ac8:	012e      	lsls	r6, r5, #4
   11aca:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   11ace:	ea6f 0a03 	mvn.w	sl, r3
   11ad2:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11ad6:	7b2b      	ldrb	r3, [r5, #12]
   11ad8:	2b00      	cmp	r3, #0
   11ada:	d0eb      	beq.n	11ab4 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   11adc:	f858 3006 	ldr.w	r3, [r8, r6]
   11ae0:	691b      	ldr	r3, [r3, #16]
   11ae2:	b94b      	cbnz	r3, 11af8 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   11ae4:	4446      	add	r6, r8
			log_backend_enable(backend,
   11ae6:	2204      	movs	r2, #4
   11ae8:	6873      	ldr	r3, [r6, #4]
   11aea:	4628      	mov	r0, r5
   11aec:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   11aee:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   11af2:	f000 fa55 	bl	11fa0 <log_backend_enable>
   11af6:	e7dd      	b.n	11ab4 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   11af8:	4628      	mov	r0, r5
   11afa:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11afc:	2800      	cmp	r0, #0
   11afe:	d1d9      	bne.n	11ab4 <activate_foreach_backend+0x10>
   11b00:	e7f0      	b.n	11ae4 <activate_foreach_backend+0x40>
   11b02:	bf00      	nop
   11b04:	0001e9f8 	.word	0x0001e9f8

00011b08 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   11b08:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   11b0a:	4910      	ldr	r1, [pc, #64]	; (11b4c <enable_logger+0x44>)
   11b0c:	4810      	ldr	r0, [pc, #64]	; (11b50 <enable_logger+0x48>)
{
   11b0e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   11b10:	2200      	movs	r2, #0
   11b12:	f00c fc15 	bl	1e340 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11b16:	4d0f      	ldr	r5, [pc, #60]	; (11b54 <enable_logger+0x4c>)
   11b18:	490f      	ldr	r1, [pc, #60]	; (11b58 <enable_logger+0x50>)
   11b1a:	2200      	movs	r2, #0
   11b1c:	2300      	movs	r3, #0
   11b1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11b22:	2400      	movs	r4, #0
   11b24:	230e      	movs	r3, #14
   11b26:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11b2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11b2e:	4b0b      	ldr	r3, [pc, #44]	; (11b5c <enable_logger+0x54>)
   11b30:	9400      	str	r4, [sp, #0]
   11b32:	f44f 7240 	mov.w	r2, #768	; 0x300
   11b36:	4628      	mov	r0, r5
   11b38:	f006 fd54 	bl	185e4 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   11b3c:	4908      	ldr	r1, [pc, #32]	; (11b60 <enable_logger+0x58>)
   11b3e:	4628      	mov	r0, r5
   11b40:	f00c f8f5 	bl	1dd2e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   11b44:	4620      	mov	r0, r4
   11b46:	b009      	add	sp, #36	; 0x24
   11b48:	bd30      	pop	{r4, r5, pc}
   11b4a:	bf00      	nop
   11b4c:	00011b65 	.word	0x00011b65
   11b50:	20001a38 	.word	0x20001a38
   11b54:	200015b0 	.word	0x200015b0
   11b58:	200039c0 	.word	0x200039c0
   11b5c:	00011e4d 	.word	0x00011e4d
   11b60:	0001f1b0 	.word	0x0001f1b0

00011b64 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11b64:	4801      	ldr	r0, [pc, #4]	; (11b6c <log_process_thread_timer_expiry_fn+0x8>)
   11b66:	f006 becb 	b.w	18900 <z_impl_k_sem_give>
   11b6a:	bf00      	nop
   11b6c:	200005f4 	.word	0x200005f4

00011b70 <z_log_init>:
{
   11b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b74:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   11b76:	481f      	ldr	r0, [pc, #124]	; (11bf4 <z_log_init+0x84>)
{
   11b78:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   11b7a:	f00b f931 	bl	1cde0 <atomic_inc>
   11b7e:	4606      	mov	r6, r0
   11b80:	2800      	cmp	r0, #0
   11b82:	d030      	beq.n	11be6 <z_log_init+0x76>
	uint32_t mask = 0;
   11b84:	2500      	movs	r5, #0
}
   11b86:	4628      	mov	r0, r5
   11b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   11b8c:	7b23      	ldrb	r3, [r4, #12]
   11b8e:	b173      	cbz	r3, 11bae <z_log_init+0x3e>
	if (backend->api->init) {
   11b90:	6823      	ldr	r3, [r4, #0]
   11b92:	68db      	ldr	r3, [r3, #12]
   11b94:	b10b      	cbz	r3, 11b9a <z_log_init+0x2a>
		backend->api->init(backend);
   11b96:	4620      	mov	r0, r4
   11b98:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   11b9a:	6823      	ldr	r3, [r4, #0]
   11b9c:	691b      	ldr	r3, [r3, #16]
   11b9e:	b9d3      	cbnz	r3, 11bd6 <z_log_init+0x66>
				log_backend_enable(backend,
   11ba0:	6863      	ldr	r3, [r4, #4]
   11ba2:	2204      	movs	r2, #4
   11ba4:	6819      	ldr	r1, [r3, #0]
   11ba6:	4620      	mov	r0, r4
   11ba8:	f000 f9fa 	bl	11fa0 <log_backend_enable>
			i++;
   11bac:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11bae:	3410      	adds	r4, #16
   11bb0:	454c      	cmp	r4, r9
   11bb2:	d3eb      	bcc.n	11b8c <z_log_init+0x1c>
	if (blocking) {
   11bb4:	f1b8 0f00 	cmp.w	r8, #0
   11bb8:	d0e5      	beq.n	11b86 <z_log_init+0x16>
		while (mask) {
   11bba:	2d00      	cmp	r5, #0
   11bbc:	d0e2      	beq.n	11b84 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   11bbe:	4628      	mov	r0, r5
   11bc0:	f7ff ff70 	bl	11aa4 <activate_foreach_backend>
   11bc4:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   11bc6:	2f00      	cmp	r7, #0
   11bc8:	d0f7      	beq.n	11bba <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   11bca:	2100      	movs	r1, #0
   11bcc:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11bd0:	f007 fb14 	bl	191fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11bd4:	e7f1      	b.n	11bba <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   11bd6:	4620      	mov	r0, r4
   11bd8:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   11bda:	2800      	cmp	r0, #0
   11bdc:	d0e0      	beq.n	11ba0 <z_log_init+0x30>
				mask |= BIT(i);
   11bde:	fa0a f306 	lsl.w	r3, sl, r6
   11be2:	431d      	orrs	r5, r3
   11be4:	e7e2      	b.n	11bac <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11be6:	4c04      	ldr	r4, [pc, #16]	; (11bf8 <z_log_init+0x88>)
   11be8:	f8df 9010 	ldr.w	r9, [pc, #16]	; 11bfc <z_log_init+0x8c>
	uint32_t mask = 0;
   11bec:	4605      	mov	r5, r0
				mask |= BIT(i);
   11bee:	f04f 0a01 	mov.w	sl, #1
   11bf2:	e7dd      	b.n	11bb0 <z_log_init+0x40>
   11bf4:	20002190 	.word	0x20002190
   11bf8:	0001e9f8 	.word	0x0001e9f8
   11bfc:	0001ea18 	.word	0x0001ea18

00011c00 <log_format_func_t_get>:
}
   11c00:	4b01      	ldr	r3, [pc, #4]	; (11c08 <log_format_func_t_get+0x8>)
   11c02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11c06:	4770      	bx	lr
   11c08:	0001eaa4 	.word	0x0001eaa4

00011c0c <log_set_timestamp_func>:
{
   11c0c:	b508      	push	{r3, lr}
   11c0e:	4603      	mov	r3, r0
   11c10:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   11c12:	b12b      	cbz	r3, 11c20 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   11c14:	4a04      	ldr	r2, [pc, #16]	; (11c28 <log_set_timestamp_func+0x1c>)
   11c16:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   11c18:	f000 fc48 	bl	124ac <log_output_timestamp_freq_set>
	return 0;
   11c1c:	2000      	movs	r0, #0
}
   11c1e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   11c20:	f06f 0015 	mvn.w	r0, #21
   11c24:	e7fb      	b.n	11c1e <log_set_timestamp_func+0x12>
   11c26:	bf00      	nop
   11c28:	20000354 	.word	0x20000354

00011c2c <z_log_notify_backend_enabled>:
{
   11c2c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11c2e:	4c04      	ldr	r4, [pc, #16]	; (11c40 <z_log_notify_backend_enabled+0x14>)
   11c30:	7823      	ldrb	r3, [r4, #0]
   11c32:	b913      	cbnz	r3, 11c3a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   11c34:	4803      	ldr	r0, [pc, #12]	; (11c44 <z_log_notify_backend_enabled+0x18>)
   11c36:	f006 fe63 	bl	18900 <z_impl_k_sem_give>
	backend_attached = true;
   11c3a:	2301      	movs	r3, #1
   11c3c:	7023      	strb	r3, [r4, #0]
}
   11c3e:	bd10      	pop	{r4, pc}
   11c40:	200033fa 	.word	0x200033fa
   11c44:	200005f4 	.word	0x200005f4

00011c48 <z_log_dropped>:
{
   11c48:	b510      	push	{r4, lr}
   11c4a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   11c4c:	4808      	ldr	r0, [pc, #32]	; (11c70 <z_log_dropped+0x28>)
   11c4e:	f00b f8c7 	bl	1cde0 <atomic_inc>
	if (buffered) {
   11c52:	b15c      	cbz	r4, 11c6c <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11c54:	f3bf 8f5b 	dmb	ish
   11c58:	4b06      	ldr	r3, [pc, #24]	; (11c74 <z_log_dropped+0x2c>)
   11c5a:	e853 1f00 	ldrex	r1, [r3]
   11c5e:	3901      	subs	r1, #1
   11c60:	e843 1200 	strex	r2, r1, [r3]
   11c64:	2a00      	cmp	r2, #0
   11c66:	d1f8      	bne.n	11c5a <z_log_dropped+0x12>
   11c68:	f3bf 8f5b 	dmb	ish
}
   11c6c:	bd10      	pop	{r4, pc}
   11c6e:	bf00      	nop
   11c70:	20002188 	.word	0x20002188
   11c74:	2000218c 	.word	0x2000218c

00011c78 <z_log_dropped_read_and_clear>:
}
   11c78:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11c7a:	4b06      	ldr	r3, [pc, #24]	; (11c94 <z_log_dropped_read_and_clear+0x1c>)
   11c7c:	f3bf 8f5b 	dmb	ish
   11c80:	4601      	mov	r1, r0
   11c82:	e853 0f00 	ldrex	r0, [r3]
   11c86:	e843 1200 	strex	r2, r1, [r3]
   11c8a:	2a00      	cmp	r2, #0
   11c8c:	d1f9      	bne.n	11c82 <z_log_dropped_read_and_clear+0xa>
   11c8e:	f3bf 8f5b 	dmb	ish
   11c92:	4770      	bx	lr
   11c94:	20002188 	.word	0x20002188

00011c98 <dropped_notify>:
{
   11c98:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11c9a:	f7ff ffed 	bl	11c78 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11c9e:	4c08      	ldr	r4, [pc, #32]	; (11cc0 <dropped_notify+0x28>)
   11ca0:	4e08      	ldr	r6, [pc, #32]	; (11cc4 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   11ca2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11ca4:	42b4      	cmp	r4, r6
   11ca6:	d300      	bcc.n	11caa <dropped_notify+0x12>
}
   11ca8:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   11caa:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   11cac:	795b      	ldrb	r3, [r3, #5]
   11cae:	b12b      	cbz	r3, 11cbc <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   11cb0:	6823      	ldr	r3, [r4, #0]
   11cb2:	685b      	ldr	r3, [r3, #4]
   11cb4:	b113      	cbz	r3, 11cbc <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   11cb6:	4629      	mov	r1, r5
   11cb8:	4620      	mov	r0, r4
   11cba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11cbc:	3410      	adds	r4, #16
   11cbe:	e7f1      	b.n	11ca4 <dropped_notify+0xc>
   11cc0:	0001e9f8 	.word	0x0001e9f8
   11cc4:	0001ea18 	.word	0x0001ea18

00011cc8 <z_log_msg_init>:
{
   11cc8:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   11cca:	4c04      	ldr	r4, [pc, #16]	; (11cdc <z_log_msg_init+0x14>)
   11ccc:	4904      	ldr	r1, [pc, #16]	; (11ce0 <z_log_msg_init+0x18>)
   11cce:	4620      	mov	r0, r4
   11cd0:	f00a ff23 	bl	1cb1a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   11cd4:	4b03      	ldr	r3, [pc, #12]	; (11ce4 <z_log_msg_init+0x1c>)
   11cd6:	601c      	str	r4, [r3, #0]
}
   11cd8:	bd10      	pop	{r4, pc}
   11cda:	bf00      	nop
   11cdc:	20000538 	.word	0x20000538
   11ce0:	0001ea90 	.word	0x0001ea90
   11ce4:	20002180 	.word	0x20002180

00011ce8 <log_core_init>:
{
   11ce8:	b508      	push	{r3, lr}
	panic_mode = false;
   11cea:	4a07      	ldr	r2, [pc, #28]	; (11d08 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   11cec:	4807      	ldr	r0, [pc, #28]	; (11d0c <log_core_init+0x24>)
	panic_mode = false;
   11cee:	2300      	movs	r3, #0
   11cf0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   11cf2:	4a07      	ldr	r2, [pc, #28]	; (11d10 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
   11cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
   11cf8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   11cfa:	f7ff ff87 	bl	11c0c <log_set_timestamp_func>
}
   11cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   11d02:	f7ff bfe1 	b.w	11cc8 <z_log_msg_init>
   11d06:	bf00      	nop
   11d08:	200033fb 	.word	0x200033fb
   11d0c:	0001cddd 	.word	0x0001cddd
   11d10:	20002188 	.word	0x20002188

00011d14 <z_log_msg_alloc>:
{
   11d14:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   11d16:	2200      	movs	r2, #0
   11d18:	4801      	ldr	r0, [pc, #4]	; (11d20 <z_log_msg_alloc+0xc>)
   11d1a:	2300      	movs	r3, #0
   11d1c:	f00a bf1e 	b.w	1cb5c <mpsc_pbuf_alloc>
   11d20:	20000538 	.word	0x20000538

00011d24 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   11d24:	4801      	ldr	r0, [pc, #4]	; (11d2c <z_log_msg_local_claim+0x8>)
   11d26:	f00a bfb7 	b.w	1cc98 <mpsc_pbuf_claim>
   11d2a:	bf00      	nop
   11d2c:	20000538 	.word	0x20000538

00011d30 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   11d30:	4b02      	ldr	r3, [pc, #8]	; (11d3c <z_log_msg_free+0xc>)
{
   11d32:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   11d34:	6818      	ldr	r0, [r3, #0]
   11d36:	f00a bfff 	b.w	1cd38 <mpsc_pbuf_free>
   11d3a:	bf00      	nop
   11d3c:	20002180 	.word	0x20002180

00011d40 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   11d40:	4801      	ldr	r0, [pc, #4]	; (11d48 <z_log_msg_pending+0x8>)
   11d42:	f00b b82d 	b.w	1cda0 <mpsc_pbuf_is_pending>
   11d46:	bf00      	nop
   11d48:	20000538 	.word	0x20000538

00011d4c <z_impl_log_process>:
{
   11d4c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   11d4e:	4b28      	ldr	r3, [pc, #160]	; (11df0 <z_impl_log_process+0xa4>)
   11d50:	7818      	ldrb	r0, [r3, #0]
   11d52:	2800      	cmp	r0, #0
   11d54:	d04b      	beq.n	11dee <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   11d56:	f7ff ffe5 	bl	11d24 <z_log_msg_local_claim>
	if (msg) {
   11d5a:	4605      	mov	r5, r0
   11d5c:	b190      	cbz	r0, 11d84 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11d5e:	f3bf 8f5b 	dmb	ish
   11d62:	4b24      	ldr	r3, [pc, #144]	; (11df4 <z_impl_log_process+0xa8>)
   11d64:	e853 1f00 	ldrex	r1, [r3]
   11d68:	3901      	subs	r1, #1
   11d6a:	e843 1200 	strex	r2, r1, [r3]
   11d6e:	2a00      	cmp	r2, #0
   11d70:	d1f8      	bne.n	11d64 <z_impl_log_process+0x18>
   11d72:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11d76:	4c20      	ldr	r4, [pc, #128]	; (11df8 <z_impl_log_process+0xac>)
   11d78:	4e20      	ldr	r6, [pc, #128]	; (11dfc <z_impl_log_process+0xb0>)
   11d7a:	42b4      	cmp	r4, r6
   11d7c:	d32d      	bcc.n	11dda <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   11d7e:	4628      	mov	r0, r5
   11d80:	f7ff ffd6 	bl	11d30 <z_log_msg_free>
	return dropped_cnt > 0;
   11d84:	4b1e      	ldr	r3, [pc, #120]	; (11e00 <z_impl_log_process+0xb4>)
   11d86:	4c1f      	ldr	r4, [pc, #124]	; (11e04 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   11d88:	681b      	ldr	r3, [r3, #0]
   11d8a:	2b00      	cmp	r3, #0
   11d8c:	dd19      	ble.n	11dc2 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   11d8e:	f00c faaf 	bl	1e2f0 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   11d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11d96:	fba0 0302 	umull	r0, r3, r0, r2
   11d9a:	fb02 3101 	mla	r1, r2, r1, r3
   11d9e:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   11da0:	e9d4 2000 	ldrd	r2, r0, [r4]
   11da4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11da8:	1a9b      	subs	r3, r3, r2
   11daa:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   11dae:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   11db2:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   11db6:	4293      	cmp	r3, r2
   11db8:	f171 0100 	sbcs.w	r1, r1, #0
   11dbc:	d301      	bcc.n	11dc2 <z_impl_log_process+0x76>
				dropped_notify();
   11dbe:	f7ff ff6b 	bl	11c98 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   11dc2:	e9d4 3200 	ldrd	r3, r2, [r4]
   11dc6:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   11dca:	f142 0200 	adc.w	r2, r2, #0
   11dce:	e9c4 3200 	strd	r3, r2, [r4]
}
   11dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   11dd6:	f7ff bfb3 	b.w	11d40 <z_log_msg_pending>
	return backend->cb->active;
   11dda:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   11ddc:	795b      	ldrb	r3, [r3, #5]
   11dde:	b123      	cbz	r3, 11dea <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   11de0:	6823      	ldr	r3, [r4, #0]
   11de2:	4629      	mov	r1, r5
   11de4:	681b      	ldr	r3, [r3, #0]
   11de6:	4620      	mov	r0, r4
   11de8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11dea:	3410      	adds	r4, #16
   11dec:	e7c5      	b.n	11d7a <z_impl_log_process+0x2e>
}
   11dee:	bd70      	pop	{r4, r5, r6, pc}
   11df0:	200033fa 	.word	0x200033fa
   11df4:	2000218c 	.word	0x2000218c
   11df8:	0001e9f8 	.word	0x0001e9f8
   11dfc:	0001ea18 	.word	0x0001ea18
   11e00:	20002188 	.word	0x20002188
   11e04:	20001a30 	.word	0x20001a30

00011e08 <z_impl_log_panic>:
{
   11e08:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   11e0a:	4d0d      	ldr	r5, [pc, #52]	; (11e40 <z_impl_log_panic+0x38>)
   11e0c:	7829      	ldrb	r1, [r5, #0]
   11e0e:	b961      	cbnz	r1, 11e2a <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   11e10:	2001      	movs	r0, #1
   11e12:	f7ff fead 	bl	11b70 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11e16:	4c0b      	ldr	r4, [pc, #44]	; (11e44 <z_impl_log_panic+0x3c>)
   11e18:	4e0b      	ldr	r6, [pc, #44]	; (11e48 <z_impl_log_panic+0x40>)
   11e1a:	42b4      	cmp	r4, r6
   11e1c:	d306      	bcc.n	11e2c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   11e1e:	f7ff ff95 	bl	11d4c <z_impl_log_process>
		while (log_process() == true) {
   11e22:	2800      	cmp	r0, #0
   11e24:	d1fb      	bne.n	11e1e <z_impl_log_panic+0x16>
	panic_mode = true;
   11e26:	2301      	movs	r3, #1
   11e28:	702b      	strb	r3, [r5, #0]
}
   11e2a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   11e2c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   11e2e:	795b      	ldrb	r3, [r3, #5]
   11e30:	b11b      	cbz	r3, 11e3a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   11e32:	6823      	ldr	r3, [r4, #0]
   11e34:	4620      	mov	r0, r4
   11e36:	689b      	ldr	r3, [r3, #8]
   11e38:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11e3a:	3410      	adds	r4, #16
   11e3c:	e7ed      	b.n	11e1a <z_impl_log_panic+0x12>
   11e3e:	bf00      	nop
   11e40:	200033fb 	.word	0x200033fb
   11e44:	0001e9f8 	.word	0x0001e9f8
   11e48:	0001ea18 	.word	0x0001ea18

00011e4c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   11e4c:	2100      	movs	r1, #0
{
   11e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   11e52:	4608      	mov	r0, r1
   11e54:	f7ff fe8c 	bl	11b70 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   11e58:	4604      	mov	r4, r0
   11e5a:	b348      	cbz	r0, 11eb0 <log_process_thread_func+0x64>
   11e5c:	f240 6867 	movw	r8, #1639	; 0x667
   11e60:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   11e64:	f007 f9e4 	bl	19230 <z_impl_z_current_get>
	proc_tid = process_tid;
   11e68:	4b1a      	ldr	r3, [pc, #104]	; (11ed4 <log_process_thread_func+0x88>)
   11e6a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   11e6c:	b130      	cbz	r0, 11e7c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11e6e:	4b1a      	ldr	r3, [pc, #104]	; (11ed8 <log_process_thread_func+0x8c>)
	    process_tid &&
   11e70:	681b      	ldr	r3, [r3, #0]
   11e72:	2b09      	cmp	r3, #9
   11e74:	dd02      	ble.n	11e7c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   11e76:	4819      	ldr	r0, [pc, #100]	; (11edc <log_process_thread_func+0x90>)
   11e78:	f006 fd42 	bl	18900 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11e7c:	4f18      	ldr	r7, [pc, #96]	; (11ee0 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   11e7e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 11edc <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   11e82:	2500      	movs	r5, #0
		if (activate_mask) {
   11e84:	b144      	cbz	r4, 11e98 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   11e86:	4620      	mov	r0, r4
   11e88:	f7ff fe0c 	bl	11aa4 <activate_foreach_backend>
			if (!activate_mask) {
   11e8c:	4604      	mov	r4, r0
   11e8e:	b918      	cbnz	r0, 11e98 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   11e90:	f04f 38ff 	mov.w	r8, #4294967295
   11e94:	f04f 39ff 	mov.w	r9, #4294967295
   11e98:	f7ff ff58 	bl	11d4c <z_impl_log_process>
		if (log_process() == false) {
   11e9c:	4606      	mov	r6, r0
   11e9e:	b928      	cbnz	r0, 11eac <log_process_thread_func+0x60>
			if (processed_any) {
   11ea0:	b9b5      	cbnz	r5, 11ed0 <log_process_thread_func+0x84>
   11ea2:	4642      	mov	r2, r8
   11ea4:	464b      	mov	r3, r9
   11ea6:	4650      	mov	r0, sl
   11ea8:	f006 fd50 	bl	1894c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   11eac:	4635      	mov	r5, r6
   11eae:	e7e9      	b.n	11e84 <log_process_thread_func+0x38>
   11eb0:	f04f 38ff 	mov.w	r8, #4294967295
   11eb4:	f04f 39ff 	mov.w	r9, #4294967295
   11eb8:	e7d4      	b.n	11e64 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   11eba:	682b      	ldr	r3, [r5, #0]
   11ebc:	699b      	ldr	r3, [r3, #24]
   11ebe:	b11b      	cbz	r3, 11ec8 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   11ec0:	2200      	movs	r2, #0
   11ec2:	4611      	mov	r1, r2
   11ec4:	4628      	mov	r0, r5
   11ec6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11ec8:	3510      	adds	r5, #16
   11eca:	42bd      	cmp	r5, r7
   11ecc:	d3f5      	bcc.n	11eba <log_process_thread_func+0x6e>
   11ece:	e7e8      	b.n	11ea2 <log_process_thread_func+0x56>
   11ed0:	4d04      	ldr	r5, [pc, #16]	; (11ee4 <log_process_thread_func+0x98>)
   11ed2:	e7fa      	b.n	11eca <log_process_thread_func+0x7e>
   11ed4:	20002184 	.word	0x20002184
   11ed8:	2000218c 	.word	0x2000218c
   11edc:	200005f4 	.word	0x200005f4
   11ee0:	0001ea18 	.word	0x0001ea18
   11ee4:	0001e9f8 	.word	0x0001e9f8

00011ee8 <z_log_msg_post_finalize>:
{
   11ee8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   11eea:	4818      	ldr	r0, [pc, #96]	; (11f4c <z_log_msg_post_finalize+0x64>)
   11eec:	f00a ff78 	bl	1cde0 <atomic_inc>
	if (panic_mode) {
   11ef0:	4b17      	ldr	r3, [pc, #92]	; (11f50 <z_log_msg_post_finalize+0x68>)
   11ef2:	781b      	ldrb	r3, [r3, #0]
   11ef4:	b17b      	cbz	r3, 11f16 <z_log_msg_post_finalize+0x2e>
   11ef6:	f04f 0340 	mov.w	r3, #64	; 0x40
   11efa:	f3ef 8411 	mrs	r4, BASEPRI
   11efe:	f383 8812 	msr	BASEPRI_MAX, r3
   11f02:	f3bf 8f6f 	isb	sy
   11f06:	f7ff ff21 	bl	11d4c <z_impl_log_process>
	__asm__ volatile(
   11f0a:	f384 8811 	msr	BASEPRI, r4
   11f0e:	f3bf 8f6f 	isb	sy
}
   11f12:	b002      	add	sp, #8
   11f14:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   11f16:	4b0f      	ldr	r3, [pc, #60]	; (11f54 <z_log_msg_post_finalize+0x6c>)
   11f18:	681b      	ldr	r3, [r3, #0]
   11f1a:	2b00      	cmp	r3, #0
   11f1c:	d0f9      	beq.n	11f12 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   11f1e:	b950      	cbnz	r0, 11f36 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   11f20:	2200      	movs	r2, #0
   11f22:	2300      	movs	r3, #0
   11f24:	e9cd 2300 	strd	r2, r3, [sp]
   11f28:	480b      	ldr	r0, [pc, #44]	; (11f58 <z_log_msg_post_finalize+0x70>)
   11f2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11f2e:	2300      	movs	r3, #0
   11f30:	f007 fbba 	bl	196a8 <z_impl_k_timer_start>
   11f34:	e7ed      	b.n	11f12 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   11f36:	280a      	cmp	r0, #10
   11f38:	d1eb      	bne.n	11f12 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   11f3a:	4807      	ldr	r0, [pc, #28]	; (11f58 <z_log_msg_post_finalize+0x70>)
   11f3c:	f00c fa0c 	bl	1e358 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11f40:	4806      	ldr	r0, [pc, #24]	; (11f5c <z_log_msg_post_finalize+0x74>)
}
   11f42:	b002      	add	sp, #8
   11f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f48:	f006 bcda 	b.w	18900 <z_impl_k_sem_give>
   11f4c:	2000218c 	.word	0x2000218c
   11f50:	200033fb 	.word	0x200033fb
   11f54:	20002184 	.word	0x20002184
   11f58:	20001a38 	.word	0x20001a38
   11f5c:	200005f4 	.word	0x200005f4

00011f60 <z_log_msg_commit>:
{
   11f60:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   11f62:	4b06      	ldr	r3, [pc, #24]	; (11f7c <z_log_msg_commit+0x1c>)
   11f64:	681b      	ldr	r3, [r3, #0]
{
   11f66:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   11f68:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   11f6a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   11f6c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   11f6e:	4804      	ldr	r0, [pc, #16]	; (11f80 <z_log_msg_commit+0x20>)
   11f70:	f00a fe72 	bl	1cc58 <mpsc_pbuf_commit>
}
   11f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   11f78:	f7ff bfb6 	b.w	11ee8 <z_log_msg_post_finalize>
   11f7c:	20000354 	.word	0x20000354
   11f80:	20000538 	.word	0x20000538

00011f84 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   11f84:	4a04      	ldr	r2, [pc, #16]	; (11f98 <log_source_name_get+0x14>)
   11f86:	4b05      	ldr	r3, [pc, #20]	; (11f9c <log_source_name_get+0x18>)
   11f88:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   11f8a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   11f8e:	bf34      	ite	cc
   11f90:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   11f94:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   11f96:	4770      	bx	lr
   11f98:	0001e950 	.word	0x0001e950
   11f9c:	0001e9f8 	.word	0x0001e9f8

00011fa0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   11fa0:	4b08      	ldr	r3, [pc, #32]	; (11fc4 <log_backend_enable+0x24>)
   11fa2:	1ac3      	subs	r3, r0, r3
{
   11fa4:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   11fa6:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   11fa8:	6844      	ldr	r4, [r0, #4]
   11faa:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   11fac:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   11fae:	6843      	ldr	r3, [r0, #4]
   11fb0:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   11fb2:	6843      	ldr	r3, [r0, #4]
   11fb4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   11fb6:	6843      	ldr	r3, [r0, #4]
   11fb8:	2201      	movs	r2, #1
   11fba:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   11fbc:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   11fbe:	f7ff be35 	b.w	11c2c <z_log_notify_backend_enabled>
   11fc2:	bf00      	nop
   11fc4:	0001e9f8 	.word	0x0001e9f8

00011fc8 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   11fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fcc:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   11fce:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   11fd2:	f3c1 2649 	ubfx	r6, r1, #9, #10
   11fd6:	9005      	str	r0, [sp, #20]
   11fd8:	460d      	mov	r5, r1
   11fda:	4690      	mov	r8, r2
   11fdc:	4699      	mov	r9, r3
   11fde:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   11fe0:	2e00      	cmp	r6, #0
   11fe2:	d03c      	beq.n	1205e <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   11fe4:	f04f 0b04 	mov.w	fp, #4
   11fe8:	af09      	add	r7, sp, #36	; 0x24
   11fea:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   11fee:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   11ff0:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   11ff2:	ab0b      	add	r3, sp, #44	; 0x2c
   11ff4:	f8cd b008 	str.w	fp, [sp, #8]
   11ff8:	9701      	str	r7, [sp, #4]
   11ffa:	f8cd a000 	str.w	sl, [sp]
   11ffe:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   12000:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   12004:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   12006:	9607      	str	r6, [sp, #28]
   12008:	f7fe fe78 	bl	10cfc <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   1200c:	f3c0 0309 	ubfx	r3, r0, #0, #10
   12010:	1918      	adds	r0, r3, r4
   12012:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   12016:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   12018:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1201a:	f363 2552 	bfi	r5, r3, #9, #10
   1201e:	9306      	str	r3, [sp, #24]
   12020:	f7ff fe78 	bl	11d14 <z_log_msg_alloc>
		if (msg) {
   12024:	4604      	mov	r4, r0
   12026:	b178      	cbz	r0, 12048 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   12028:	9b06      	ldr	r3, [sp, #24]
   1202a:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   1202c:	3010      	adds	r0, #16
   1202e:	2200      	movs	r2, #0
   12030:	900b      	str	r0, [sp, #44]	; 0x2c
   12032:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   12034:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   12038:	4a0c      	ldr	r2, [pc, #48]	; (1206c <z_impl_z_log_msg_static_create+0xa4>)
   1203a:	9907      	ldr	r1, [sp, #28]
   1203c:	f8cd a000 	str.w	sl, [sp]
   12040:	ab0b      	add	r3, sp, #44	; 0x2c
   12042:	4640      	mov	r0, r8
   12044:	f7fe fe5a 	bl	10cfc <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   12048:	f366 2552 	bfi	r5, r6, #9, #10
   1204c:	9905      	ldr	r1, [sp, #20]
   1204e:	464b      	mov	r3, r9
   12050:	462a      	mov	r2, r5
   12052:	4620      	mov	r0, r4
}
   12054:	b00f      	add	sp, #60	; 0x3c
   12056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   1205a:	f00a bef7 	b.w	1ce4c <z_log_msg_finalize>
   1205e:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   12062:	0880      	lsrs	r0, r0, #2
   12064:	f7ff fe56 	bl	11d14 <z_log_msg_alloc>
   12068:	4604      	mov	r4, r0
   1206a:	e7ed      	b.n	12048 <z_impl_z_log_msg_static_create+0x80>
   1206c:	0001ce21 	.word	0x0001ce21

00012070 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   12070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12074:	b087      	sub	sp, #28
   12076:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1207a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   1207e:	4604      	mov	r4, r0
   12080:	460f      	mov	r7, r1
   12082:	4693      	mov	fp, r2
   12084:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   12086:	b3b6      	cbz	r6, 120f6 <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   12088:	2110      	movs	r1, #16
   1208a:	f8cd 9000 	str.w	r9, [sp]
   1208e:	4633      	mov	r3, r6
   12090:	4652      	mov	r2, sl
   12092:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   12094:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   12098:	f7fe fc5a 	bl	10950 <cbvprintf_package>
   1209c:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1209e:	4b17      	ldr	r3, [pc, #92]	; (120fc <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   120a0:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   120a2:	f004 0407 	and.w	r4, r4, #7
   120a6:	f00b 0b07 	and.w	fp, fp, #7
   120aa:	00e4      	lsls	r4, r4, #3
   120ac:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   120b0:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   120b4:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   120b8:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   120ba:	4408      	add	r0, r1
	struct log_msg_desc desc =
   120bc:	4b10      	ldr	r3, [pc, #64]	; (12100 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   120be:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   120c2:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   120c6:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   120c8:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   120ca:	f7ff fe23 	bl	11d14 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   120ce:	4605      	mov	r5, r0
   120d0:	b140      	cbz	r0, 120e4 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   120d2:	b13e      	cbz	r6, 120e4 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   120d4:	9903      	ldr	r1, [sp, #12]
   120d6:	f8cd 9000 	str.w	r9, [sp]
   120da:	4633      	mov	r3, r6
   120dc:	4652      	mov	r2, sl
   120de:	3010      	adds	r0, #16
   120e0:	f7fe fc36 	bl	10950 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   120e4:	4643      	mov	r3, r8
   120e6:	4622      	mov	r2, r4
   120e8:	4639      	mov	r1, r7
   120ea:	4628      	mov	r0, r5
	}
}
   120ec:	b007      	add	sp, #28
   120ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   120f2:	f00a beab 	b.w	1ce4c <z_log_msg_finalize>
		plen = 0;
   120f6:	4631      	mov	r1, r6
   120f8:	e7d1      	b.n	1209e <z_impl_z_log_msg_runtime_vcreate+0x2e>
   120fa:	bf00      	nop
   120fc:	0007fe00 	.word	0x0007fe00
   12100:	7ff80000 	.word	0x7ff80000

00012104 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   12104:	b40e      	push	{r1, r2, r3}
   12106:	b503      	push	{r0, r1, lr}
   12108:	ab03      	add	r3, sp, #12
   1210a:	4601      	mov	r1, r0
   1210c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12110:	4804      	ldr	r0, [pc, #16]	; (12124 <print_formatted+0x20>)
	va_start(args, fmt);
   12112:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12114:	f00a fec1 	bl	1ce9a <cbvprintf>
	va_end(args);

	return length;
}
   12118:	b002      	add	sp, #8
   1211a:	f85d eb04 	ldr.w	lr, [sp], #4
   1211e:	b003      	add	sp, #12
   12120:	4770      	bx	lr
   12122:	bf00      	nop
   12124:	0001cec3 	.word	0x0001cec3

00012128 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12128:	06ca      	lsls	r2, r1, #27
   1212a:	d405      	bmi.n	12138 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1212c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   1212e:	bf4c      	ite	mi
   12130:	4902      	ldrmi	r1, [pc, #8]	; (1213c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   12132:	4903      	ldrpl	r1, [pc, #12]	; (12140 <newline_print+0x18>)
   12134:	f7ff bfe6 	b.w	12104 <print_formatted>
	}
}
   12138:	4770      	bx	lr
   1213a:	bf00      	nop
   1213c:	0001f1c6 	.word	0x0001f1c6
   12140:	0001f1c5 	.word	0x0001f1c5

00012144 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   12144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12148:	b089      	sub	sp, #36	; 0x24
   1214a:	469b      	mov	fp, r3
   1214c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12150:	9304      	str	r3, [sp, #16]
   12152:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   12156:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   12158:	9b04      	ldr	r3, [sp, #16]
{
   1215a:	9206      	str	r2, [sp, #24]
   1215c:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   12160:	4604      	mov	r4, r0
   12162:	460d      	mov	r5, r1
	if (!raw_string) {
   12164:	2b00      	cmp	r3, #0
   12166:	f000 8087 	beq.w	12278 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1216a:	f006 0308 	and.w	r3, r6, #8
   1216e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   12170:	f00a fe54 	bl	1ce1c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   12174:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   12178:	4602      	mov	r2, r0
   1217a:	2800      	cmp	r0, #0
   1217c:	d04b      	beq.n	12216 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   1217e:	4986      	ldr	r1, [pc, #536]	; (12398 <log_output_process+0x254>)
   12180:	4620      	mov	r0, r4
   12182:	f7ff ffbf 	bl	12104 <print_formatted>
   12186:	4680      	mov	r8, r0
	if (stamp) {
   12188:	f1ba 0f00 	cmp.w	sl, #0
   1218c:	d008      	beq.n	121a0 <log_output_process+0x5c>
	if (!format) {
   1218e:	f016 0f44 	tst.w	r6, #68	; 0x44
   12192:	d142      	bne.n	1221a <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   12194:	4981      	ldr	r1, [pc, #516]	; (1239c <log_output_process+0x258>)
   12196:	462a      	mov	r2, r5
   12198:	4620      	mov	r0, r4
   1219a:	f7ff ffb3 	bl	12104 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1219e:	4480      	add	r8, r0
	if (color) {
   121a0:	f006 0301 	and.w	r3, r6, #1
   121a4:	b15b      	cbz	r3, 121be <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   121a6:	4b7e      	ldr	r3, [pc, #504]	; (123a0 <log_output_process+0x25c>)
   121a8:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   121aa:	497e      	ldr	r1, [pc, #504]	; (123a4 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   121ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   121b0:	4b7d      	ldr	r3, [pc, #500]	; (123a8 <log_output_process+0x264>)
   121b2:	4620      	mov	r0, r4
   121b4:	2a00      	cmp	r2, #0
   121b6:	bf08      	it	eq
   121b8:	461a      	moveq	r2, r3
   121ba:	f7ff ffa3 	bl	12104 <print_formatted>
	if (level_on) {
   121be:	f006 0308 	and.w	r3, r6, #8
   121c2:	2b00      	cmp	r3, #0
   121c4:	d055      	beq.n	12272 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   121c6:	4b79      	ldr	r3, [pc, #484]	; (123ac <log_output_process+0x268>)
   121c8:	9a04      	ldr	r2, [sp, #16]
   121ca:	4979      	ldr	r1, [pc, #484]	; (123b0 <log_output_process+0x26c>)
   121cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   121d0:	4620      	mov	r0, r4
   121d2:	f7ff ff97 	bl	12104 <print_formatted>
   121d6:	4605      	mov	r5, r0
	if (domain) {
   121d8:	9b06      	ldr	r3, [sp, #24]
   121da:	b12b      	cbz	r3, 121e8 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   121dc:	4975      	ldr	r1, [pc, #468]	; (123b4 <log_output_process+0x270>)
   121de:	461a      	mov	r2, r3
   121e0:	4620      	mov	r0, r4
   121e2:	f7ff ff8f 	bl	12104 <print_formatted>
   121e6:	4405      	add	r5, r0
	if (source) {
   121e8:	f1bb 0f00 	cmp.w	fp, #0
   121ec:	d005      	beq.n	121fa <log_output_process+0xb6>
		total += print_formatted(output,
   121ee:	4972      	ldr	r1, [pc, #456]	; (123b8 <log_output_process+0x274>)
   121f0:	465a      	mov	r2, fp
   121f2:	4620      	mov	r0, r4
   121f4:	f7ff ff86 	bl	12104 <print_formatted>
   121f8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   121fa:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   121fc:	f1b9 0f00 	cmp.w	r9, #0
   12200:	d149      	bne.n	12296 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   12202:	2f00      	cmp	r7, #0
   12204:	d14f      	bne.n	122a6 <log_output_process+0x162>
	if (color) {
   12206:	07f3      	lsls	r3, r6, #31
   12208:	f100 80c0 	bmi.w	1238c <log_output_process+0x248>
	newline_print(output, flags);
   1220c:	4631      	mov	r1, r6
   1220e:	4620      	mov	r0, r4
   12210:	f7ff ff8a 	bl	12128 <newline_print>
}
   12214:	e0b4      	b.n	12380 <log_output_process+0x23c>
	uint32_t length = 0U;
   12216:	4680      	mov	r8, r0
   12218:	e7b6      	b.n	12188 <log_output_process+0x44>
	} else if (freq != 0U) {
   1221a:	4b68      	ldr	r3, [pc, #416]	; (123bc <log_output_process+0x278>)
   1221c:	6818      	ldr	r0, [r3, #0]
   1221e:	2800      	cmp	r0, #0
   12220:	d0bd      	beq.n	1219e <log_output_process+0x5a>
		timestamp /= timestamp_div;
   12222:	4b67      	ldr	r3, [pc, #412]	; (123c0 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   12224:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   12228:	681b      	ldr	r3, [r3, #0]
   1222a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   1222e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   12232:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   12236:	fb00 5513 	mls	r5, r0, r3, r5
   1223a:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   1223e:	fb0e f505 	mul.w	r5, lr, r5
   12242:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   12246:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12248:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   1224c:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12250:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   12254:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12258:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   1225c:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1225e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   12262:	4958      	ldr	r1, [pc, #352]	; (123c4 <log_output_process+0x280>)
   12264:	e9cd c501 	strd	ip, r5, [sp, #4]
   12268:	4652      	mov	r2, sl
   1226a:	4620      	mov	r0, r4
   1226c:	f7ff ff4a 	bl	12104 <print_formatted>
   12270:	e795      	b.n	1219e <log_output_process+0x5a>
	int total = 0;
   12272:	f006 0508 	and.w	r5, r6, #8
   12276:	e7af      	b.n	121d8 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   12278:	f1bb 0f01 	cmp.w	fp, #1
   1227c:	d106      	bne.n	1228c <log_output_process+0x148>
	if (package) {
   1227e:	f1b9 0f00 	cmp.w	r9, #0
   12282:	d164      	bne.n	1234e <log_output_process+0x20a>
	if (data_len) {
   12284:	2f00      	cmp	r7, #0
   12286:	d07b      	beq.n	12380 <log_output_process+0x23c>
		prefix_offset = 0;
   12288:	2500      	movs	r5, #0
   1228a:	e00c      	b.n	122a6 <log_output_process+0x162>
	if (package) {
   1228c:	f1b9 0f00 	cmp.w	r9, #0
   12290:	d0f8      	beq.n	12284 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   12292:	484d      	ldr	r0, [pc, #308]	; (123c8 <log_output_process+0x284>)
   12294:	e05c      	b.n	12350 <log_output_process+0x20c>
		cb = out_func;
   12296:	484d      	ldr	r0, [pc, #308]	; (123cc <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   12298:	494d      	ldr	r1, [pc, #308]	; (123d0 <log_output_process+0x28c>)
   1229a:	464b      	mov	r3, r9
   1229c:	4622      	mov	r2, r4
   1229e:	f009 ffe7 	bl	1c270 <cbpprintf_external>
	if (data_len) {
   122a2:	2f00      	cmp	r7, #0
   122a4:	d068      	beq.n	12378 <log_output_process+0x234>
		print_formatted(output, " ");
   122a6:	f8df 912c 	ldr.w	r9, [pc, #300]	; 123d4 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   122aa:	f8df a12c 	ldr.w	sl, [pc, #300]	; 123d8 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   122ae:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   122b0:	4631      	mov	r1, r6
   122b2:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   122b4:	46b8      	mov	r8, r7
   122b6:	bf28      	it	cs
   122b8:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   122bc:	f7ff ff34 	bl	12128 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   122c0:	f04f 0b00 	mov.w	fp, #0
   122c4:	455d      	cmp	r5, fp
   122c6:	dc45      	bgt.n	12354 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   122c8:	9b05      	ldr	r3, [sp, #20]
   122ca:	4651      	mov	r1, sl
   122cc:	781a      	ldrb	r2, [r3, #0]
   122ce:	4620      	mov	r0, r4
   122d0:	f7ff ff18 	bl	12104 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   122d4:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   122d8:	f01b 0f07 	tst.w	fp, #7
   122dc:	d103      	bne.n	122e6 <log_output_process+0x1a2>
			print_formatted(output, " ");
   122de:	4649      	mov	r1, r9
   122e0:	4620      	mov	r0, r4
   122e2:	f7ff ff0f 	bl	12104 <print_formatted>
		if (i < length) {
   122e6:	45d8      	cmp	r8, fp
   122e8:	d93b      	bls.n	12362 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   122ea:	9b05      	ldr	r3, [sp, #20]
   122ec:	4651      	mov	r1, sl
   122ee:	f813 200b 	ldrb.w	r2, [r3, fp]
   122f2:	4620      	mov	r0, r4
   122f4:	f7ff ff06 	bl	12104 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   122f8:	f10b 0b01 	add.w	fp, fp, #1
   122fc:	f1bb 0f10 	cmp.w	fp, #16
   12300:	d1ea      	bne.n	122d8 <log_output_process+0x194>
	print_formatted(output, "|");
   12302:	4936      	ldr	r1, [pc, #216]	; (123dc <log_output_process+0x298>)
   12304:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12306:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   1230a:	f7ff fefb 	bl	12104 <print_formatted>
		if (i < length) {
   1230e:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   12310:	9b05      	ldr	r3, [sp, #20]
   12312:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   12314:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   12318:	295f      	cmp	r1, #95	; 0x5f
   1231a:	bf28      	it	cs
   1231c:	222e      	movcs	r2, #46	; 0x2e
   1231e:	4930      	ldr	r1, [pc, #192]	; (123e0 <log_output_process+0x29c>)
   12320:	4620      	mov	r0, r4
   12322:	f7ff feef 	bl	12104 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12326:	f10b 0b01 	add.w	fp, fp, #1
   1232a:	f1bb 0f10 	cmp.w	fp, #16
   1232e:	d01d      	beq.n	1236c <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   12330:	f01b 0f07 	tst.w	fp, #7
   12334:	d103      	bne.n	1233e <log_output_process+0x1fa>
			print_formatted(output, " ");
   12336:	4649      	mov	r1, r9
   12338:	4620      	mov	r0, r4
   1233a:	f7ff fee3 	bl	12104 <print_formatted>
		if (i < length) {
   1233e:	45d8      	cmp	r8, fp
   12340:	465a      	mov	r2, fp
   12342:	d8e5      	bhi.n	12310 <log_output_process+0x1cc>
			print_formatted(output, " ");
   12344:	4649      	mov	r1, r9
   12346:	4620      	mov	r0, r4
   12348:	f7ff fedc 	bl	12104 <print_formatted>
   1234c:	e7eb      	b.n	12326 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1234e:	481f      	ldr	r0, [pc, #124]	; (123cc <log_output_process+0x288>)
		prefix_offset = 0;
   12350:	9d04      	ldr	r5, [sp, #16]
   12352:	e7a1      	b.n	12298 <log_output_process+0x154>
		print_formatted(output, " ");
   12354:	4649      	mov	r1, r9
   12356:	4620      	mov	r0, r4
   12358:	f7ff fed4 	bl	12104 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1235c:	f10b 0b01 	add.w	fp, fp, #1
   12360:	e7b0      	b.n	122c4 <log_output_process+0x180>
			print_formatted(output, "   ");
   12362:	4920      	ldr	r1, [pc, #128]	; (123e4 <log_output_process+0x2a0>)
   12364:	4620      	mov	r0, r4
   12366:	f7ff fecd 	bl	12104 <print_formatted>
   1236a:	e7c5      	b.n	122f8 <log_output_process+0x1b4>
		data += length;
   1236c:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   1236e:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   12372:	4443      	add	r3, r8
   12374:	9305      	str	r3, [sp, #20]
	} while (len);
   12376:	d19a      	bne.n	122ae <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   12378:	9b04      	ldr	r3, [sp, #16]
   1237a:	2b00      	cmp	r3, #0
   1237c:	f47f af43 	bne.w	12206 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   12380:	4620      	mov	r0, r4
}
   12382:	b009      	add	sp, #36	; 0x24
   12384:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   12388:	f00a bd8e 	b.w	1cea8 <log_output_flush>
		print_formatted(output, "%s", log_color);
   1238c:	4a06      	ldr	r2, [pc, #24]	; (123a8 <log_output_process+0x264>)
   1238e:	4905      	ldr	r1, [pc, #20]	; (123a4 <log_output_process+0x260>)
   12390:	4620      	mov	r0, r4
   12392:	f7ff feb7 	bl	12104 <print_formatted>
}
   12396:	e739      	b.n	1220c <log_output_process+0xc8>
   12398:	0001f1cd 	.word	0x0001f1cd
   1239c:	0001f1d1 	.word	0x0001f1d1
   123a0:	0001eab4 	.word	0x0001eab4
   123a4:	0001fc36 	.word	0x0001fc36
   123a8:	0001f1c8 	.word	0x0001f1c8
   123ac:	0001eac8 	.word	0x0001eac8
   123b0:	0001f1f6 	.word	0x0001f1f6
   123b4:	0001f1fc 	.word	0x0001f1fc
   123b8:	0001f200 	.word	0x0001f200
   123bc:	20002198 	.word	0x20002198
   123c0:	20002194 	.word	0x20002194
   123c4:	0001f1da 	.word	0x0001f1da
   123c8:	0001cef9 	.word	0x0001cef9
   123cc:	0001cec3 	.word	0x0001cec3
   123d0:	0001ce9b 	.word	0x0001ce9b
   123d4:	0001f20d 	.word	0x0001f20d
   123d8:	0001f205 	.word	0x0001f205
   123dc:	0001f20f 	.word	0x0001f20f
   123e0:	0001f211 	.word	0x0001f211
   123e4:	0001f20b 	.word	0x0001f20b

000123e8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   123e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   123ec:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   123ee:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   123f0:	688e      	ldr	r6, [r1, #8]
   123f2:	b086      	sub	sp, #24
   123f4:	4605      	mov	r5, r0
   123f6:	460c      	mov	r4, r1
   123f8:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   123fa:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   123fe:	b15b      	cbz	r3, 12418 <log_output_msg_process+0x30>
   12400:	4a13      	ldr	r2, [pc, #76]	; (12450 <log_output_msg_process+0x68>)
   12402:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   12404:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   12408:	2900      	cmp	r1, #0
   1240a:	db1f      	blt.n	1244c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   1240c:	7820      	ldrb	r0, [r4, #0]
   1240e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   12412:	f7ff fdb7 	bl	11f84 <log_source_name_get>
   12416:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   12418:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   1241a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   1241c:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   12420:	9700      	str	r7, [sp, #0]
   12422:	f3c2 2249 	ubfx	r2, r2, #9, #10
   12426:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   12428:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   1242c:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   12430:	bf08      	it	eq
   12432:	2100      	moveq	r1, #0
   12434:	e9cd 0803 	strd	r0, r8, [sp, #12]
   12438:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1243c:	2200      	movs	r2, #0
   1243e:	4631      	mov	r1, r6
   12440:	4628      	mov	r0, r5
   12442:	f7ff fe7f 	bl	12144 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   12446:	b006      	add	sp, #24
   12448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1244c:	2300      	movs	r3, #0
   1244e:	e7e3      	b.n	12418 <log_output_msg_process+0x30>
   12450:	0001e950 	.word	0x0001e950

00012454 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12454:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12456:	f242 730f 	movw	r3, #9999	; 0x270f
   1245a:	428b      	cmp	r3, r1
   1245c:	bf28      	it	cs
   1245e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   12460:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12462:	4a0f      	ldr	r2, [pc, #60]	; (124a0 <log_output_dropped_process+0x4c>)
{
   12464:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12466:	2105      	movs	r1, #5
   12468:	4668      	mov	r0, sp
   1246a:	f009 ff7b 	bl	1c364 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1246e:	6863      	ldr	r3, [r4, #4]
   12470:	490c      	ldr	r1, [pc, #48]	; (124a4 <log_output_dropped_process+0x50>)
   12472:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12474:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12476:	220b      	movs	r2, #11
   12478:	4628      	mov	r0, r5
   1247a:	f00a fd01 	bl	1ce80 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1247e:	6863      	ldr	r3, [r4, #4]
   12480:	4632      	mov	r2, r6
   12482:	4669      	mov	r1, sp
   12484:	4628      	mov	r0, r5
   12486:	685b      	ldr	r3, [r3, #4]
   12488:	f00a fcfa 	bl	1ce80 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1248c:	6863      	ldr	r3, [r4, #4]
   1248e:	4906      	ldr	r1, [pc, #24]	; (124a8 <log_output_dropped_process+0x54>)
   12490:	685b      	ldr	r3, [r3, #4]
   12492:	221b      	movs	r2, #27
   12494:	4628      	mov	r0, r5
   12496:	f00a fcf3 	bl	1ce80 <buffer_write>
		     output->control_block->ctx);
}
   1249a:	b002      	add	sp, #8
   1249c:	bd70      	pop	{r4, r5, r6, pc}
   1249e:	bf00      	nop
   124a0:	000204a4 	.word	0x000204a4
   124a4:	0001f230 	.word	0x0001f230
   124a8:	0001f214 	.word	0x0001f214

000124ac <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   124ac:	4a07      	ldr	r2, [pc, #28]	; (124cc <log_output_timestamp_freq_set+0x20>)
   124ae:	2100      	movs	r1, #0
   124b0:	2301      	movs	r3, #1
   124b2:	4290      	cmp	r0, r2
   124b4:	d806      	bhi.n	124c4 <log_output_timestamp_freq_set+0x18>
   124b6:	4a06      	ldr	r2, [pc, #24]	; (124d0 <log_output_timestamp_freq_set+0x24>)
   124b8:	b901      	cbnz	r1, 124bc <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   124ba:	2301      	movs	r3, #1
   124bc:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   124be:	4b05      	ldr	r3, [pc, #20]	; (124d4 <log_output_timestamp_freq_set+0x28>)
   124c0:	6018      	str	r0, [r3, #0]
}
   124c2:	4770      	bx	lr
		frequency /= 2U;
   124c4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   124c6:	005b      	lsls	r3, r3, #1
   124c8:	2101      	movs	r1, #1
   124ca:	e7f2      	b.n	124b2 <log_output_timestamp_freq_set+0x6>
   124cc:	000f4240 	.word	0x000f4240
   124d0:	20002194 	.word	0x20002194
   124d4:	20002198 	.word	0x20002198

000124d8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   124d8:	4b01      	ldr	r3, [pc, #4]	; (124e0 <log_backend_rtt_init+0x8>)
   124da:	2201      	movs	r2, #1
   124dc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   124de:	4770      	bx	lr
   124e0:	200033fc 	.word	0x200033fc

000124e4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   124e4:	4b01      	ldr	r3, [pc, #4]	; (124ec <format_set+0x8>)
	return 0;
}
   124e6:	2000      	movs	r0, #0
	log_format_current = log_type;
   124e8:	6019      	str	r1, [r3, #0]
}
   124ea:	4770      	bx	lr
   124ec:	200021b0 	.word	0x200021b0

000124f0 <panic>:
	panic_mode = true;
   124f0:	4b02      	ldr	r3, [pc, #8]	; (124fc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   124f2:	4803      	ldr	r0, [pc, #12]	; (12500 <panic+0x10>)
   124f4:	2201      	movs	r2, #1
   124f6:	701a      	strb	r2, [r3, #0]
   124f8:	f00a bcd6 	b.w	1cea8 <log_output_flush>
   124fc:	200033fd 	.word	0x200033fd
   12500:	0001eaf8 	.word	0x0001eaf8

00012504 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12504:	4801      	ldr	r0, [pc, #4]	; (1250c <dropped+0x8>)
   12506:	f7ff bfa5 	b.w	12454 <log_output_dropped_process>
   1250a:	bf00      	nop
   1250c:	0001eaf8 	.word	0x0001eaf8

00012510 <process>:
{
   12510:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12512:	4b06      	ldr	r3, [pc, #24]	; (1252c <process+0x1c>)
   12514:	6818      	ldr	r0, [r3, #0]
{
   12516:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12518:	f7ff fb72 	bl	11c00 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   1251c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1251e:	4603      	mov	r3, r0
}
   12520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   12524:	4802      	ldr	r0, [pc, #8]	; (12530 <process+0x20>)
   12526:	220f      	movs	r2, #15
   12528:	4718      	bx	r3
   1252a:	bf00      	nop
   1252c:	200021b0 	.word	0x200021b0
   12530:	0001eaf8 	.word	0x0001eaf8

00012534 <on_failed_write>:
	if (retry_cnt == 0) {
   12534:	b910      	cbnz	r0, 1253c <on_failed_write+0x8>
		host_present = false;
   12536:	4b07      	ldr	r3, [pc, #28]	; (12554 <on_failed_write+0x20>)
   12538:	7018      	strb	r0, [r3, #0]
}
   1253a:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   1253c:	4b06      	ldr	r3, [pc, #24]	; (12558 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   1253e:	781b      	ldrb	r3, [r3, #0]
   12540:	b11b      	cbz	r3, 1254a <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   12542:	f241 3088 	movw	r0, #5000	; 0x1388
   12546:	f00b bed5 	b.w	1e2f4 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1254a:	20a4      	movs	r0, #164	; 0xa4
   1254c:	2100      	movs	r1, #0
   1254e:	f006 be55 	b.w	191fc <z_impl_k_sleep>
   12552:	bf00      	nop
   12554:	200033fc 	.word	0x200033fc
   12558:	200033fd 	.word	0x200033fd

0001255c <data_out_block_mode>:
{
   1255c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   12560:	f8df 9074 	ldr.w	r9, [pc, #116]	; 125d8 <data_out_block_mode+0x7c>
   12564:	4f1d      	ldr	r7, [pc, #116]	; (125dc <data_out_block_mode+0x80>)
{
   12566:	4680      	mov	r8, r0
   12568:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1256a:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   1256c:	f899 5000 	ldrb.w	r5, [r9]
   12570:	b995      	cbnz	r5, 12598 <data_out_block_mode+0x3c>
			RTT_LOCK();
   12572:	f005 fe2f 	bl	181d4 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12576:	4628      	mov	r0, r5
   12578:	4632      	mov	r2, r6
   1257a:	4641      	mov	r1, r8
   1257c:	f005 fdd8 	bl	18130 <SEGGER_RTT_WriteSkipNoLock>
   12580:	4605      	mov	r5, r0
			RTT_UNLOCK();
   12582:	f005 fe31 	bl	181e8 <zephyr_rtt_mutex_unlock>
		if (ret) {
   12586:	b1e5      	cbz	r5, 125c2 <data_out_block_mode+0x66>
	host_present = true;
   12588:	2301      	movs	r3, #1
   1258a:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   1258c:	f899 3000 	ldrb.w	r3, [r9]
   12590:	b973      	cbnz	r3, 125b0 <data_out_block_mode+0x54>
}
   12592:	4630      	mov	r0, r6
   12594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12598:	4632      	mov	r2, r6
   1259a:	4641      	mov	r1, r8
   1259c:	2000      	movs	r0, #0
   1259e:	f005 fdc7 	bl	18130 <SEGGER_RTT_WriteSkipNoLock>
   125a2:	4605      	mov	r5, r0
   125a4:	e7ef      	b.n	12586 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   125a6:	4620      	mov	r0, r4
   125a8:	f7ff ffc4 	bl	12534 <on_failed_write>
   125ac:	1e65      	subs	r5, r4, #1
   125ae:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   125b0:	2000      	movs	r0, #0
   125b2:	f005 fe05 	bl	181c0 <SEGGER_RTT_HasDataUp>
   125b6:	2800      	cmp	r0, #0
   125b8:	d0eb      	beq.n	12592 <data_out_block_mode+0x36>
   125ba:	783b      	ldrb	r3, [r7, #0]
   125bc:	2b00      	cmp	r3, #0
   125be:	d1f2      	bne.n	125a6 <data_out_block_mode+0x4a>
   125c0:	e7e7      	b.n	12592 <data_out_block_mode+0x36>
		} else if (host_present) {
   125c2:	783b      	ldrb	r3, [r7, #0]
   125c4:	2b00      	cmp	r3, #0
   125c6:	d0e4      	beq.n	12592 <data_out_block_mode+0x36>
			retry_cnt--;
   125c8:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   125ca:	4620      	mov	r0, r4
   125cc:	f7ff ffb2 	bl	12534 <on_failed_write>
	} while ((ret == 0) && host_present);
   125d0:	783b      	ldrb	r3, [r7, #0]
   125d2:	2b00      	cmp	r3, #0
   125d4:	d1ca      	bne.n	1256c <data_out_block_mode+0x10>
   125d6:	e7dc      	b.n	12592 <data_out_block_mode+0x36>
   125d8:	200033fd 	.word	0x200033fd
   125dc:	200033fc 	.word	0x200033fc

000125e0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   125e0:	4b01      	ldr	r3, [pc, #4]	; (125e8 <format_set+0x8>)
	return 0;
}
   125e2:	2000      	movs	r0, #0
	log_format_current = log_type;
   125e4:	6019      	str	r1, [r3, #0]
}
   125e6:	4770      	bx	lr
   125e8:	200021c8 	.word	0x200021c8

000125ec <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   125ec:	4b02      	ldr	r3, [pc, #8]	; (125f8 <panic+0xc>)
	log_output_flush(output);
   125ee:	4803      	ldr	r0, [pc, #12]	; (125fc <panic+0x10>)
   125f0:	2201      	movs	r2, #1
   125f2:	701a      	strb	r2, [r3, #0]
   125f4:	f00a bc58 	b.w	1cea8 <log_output_flush>
   125f8:	2000340f 	.word	0x2000340f
   125fc:	0001eb24 	.word	0x0001eb24

00012600 <dropped>:
	log_output_dropped_process(output, cnt);
   12600:	4801      	ldr	r0, [pc, #4]	; (12608 <dropped+0x8>)
   12602:	f7ff bf27 	b.w	12454 <log_output_dropped_process>
   12606:	bf00      	nop
   12608:	0001eb24 	.word	0x0001eb24

0001260c <process>:
{
   1260c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1260e:	4b06      	ldr	r3, [pc, #24]	; (12628 <process+0x1c>)
   12610:	6818      	ldr	r0, [r3, #0]
{
   12612:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12614:	f7ff faf4 	bl	11c00 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   12618:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1261a:	4603      	mov	r3, r0
}
   1261c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   12620:	4802      	ldr	r0, [pc, #8]	; (1262c <process+0x20>)
   12622:	220f      	movs	r2, #15
   12624:	4718      	bx	r3
   12626:	bf00      	nop
   12628:	200021c8 	.word	0x200021c8
   1262c:	0001eb24 	.word	0x0001eb24

00012630 <char_out>:
{
   12630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   12632:	4f07      	ldr	r7, [pc, #28]	; (12650 <char_out+0x20>)
   12634:	460d      	mov	r5, r1
   12636:	4604      	mov	r4, r0
   12638:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1263a:	42b4      	cmp	r4, r6
   1263c:	d101      	bne.n	12642 <char_out+0x12>
}
   1263e:	4628      	mov	r0, r5
   12640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   12642:	f814 1b01 	ldrb.w	r1, [r4], #1
   12646:	68bb      	ldr	r3, [r7, #8]
   12648:	4801      	ldr	r0, [pc, #4]	; (12650 <char_out+0x20>)
   1264a:	685b      	ldr	r3, [r3, #4]
   1264c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1264e:	e7f4      	b.n	1263a <char_out+0xa>
   12650:	0001e788 	.word	0x0001e788

00012654 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12658:	4605      	mov	r5, r0
	__asm__ volatile(
   1265a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1265e:	f3ef 8611 	mrs	r6, BASEPRI
   12662:	f383 8812 	msr	BASEPRI_MAX, r3
   12666:	f3bf 8f6f 	isb	sy
	return list->head;
   1266a:	4b0e      	ldr	r3, [pc, #56]	; (126a4 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1266c:	4f0e      	ldr	r7, [pc, #56]	; (126a8 <pm_state_notify+0x54>)
   1266e:	681c      	ldr	r4, [r3, #0]
   12670:	f8df 8038 	ldr.w	r8, [pc, #56]	; 126ac <pm_state_notify+0x58>
   12674:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12678:	b92c      	cbnz	r4, 12686 <pm_state_notify+0x32>
	__asm__ volatile(
   1267a:	f386 8811 	msr	BASEPRI, r6
   1267e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   12686:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1268a:	2d00      	cmp	r5, #0
   1268c:	bf18      	it	ne
   1268e:	4613      	movne	r3, r2
		if (callback) {
   12690:	b12b      	cbz	r3, 1269e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12692:	f898 2014 	ldrb.w	r2, [r8, #20]
   12696:	fb09 f202 	mul.w	r2, r9, r2
   1269a:	5cb8      	ldrb	r0, [r7, r2]
   1269c:	4798      	blx	r3
	return node->next;
   1269e:	6824      	ldr	r4, [r4, #0]
   126a0:	e7ea      	b.n	12678 <pm_state_notify+0x24>
   126a2:	bf00      	nop
   126a4:	200021e4 	.word	0x200021e4
   126a8:	200021d8 	.word	0x200021d8
   126ac:	200028f0 	.word	0x200028f0

000126b0 <pm_system_resume>:

void pm_system_resume(void)
{
   126b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   126b2:	4b19      	ldr	r3, [pc, #100]	; (12718 <pm_system_resume+0x68>)
   126b4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   126b6:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   126ba:	f004 031f 	and.w	r3, r4, #31
   126be:	2201      	movs	r2, #1
   126c0:	409a      	lsls	r2, r3
   126c2:	4b16      	ldr	r3, [pc, #88]	; (1271c <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   126c4:	0961      	lsrs	r1, r4, #5
   126c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   126ca:	43d0      	mvns	r0, r2
   126cc:	e853 1f00 	ldrex	r1, [r3]
   126d0:	ea01 0500 	and.w	r5, r1, r0
   126d4:	e843 5600 	strex	r6, r5, [r3]
   126d8:	2e00      	cmp	r6, #0
   126da:	d1f7      	bne.n	126cc <pm_system_resume+0x1c>
   126dc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   126e0:	420a      	tst	r2, r1
   126e2:	d013      	beq.n	1270c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   126e4:	4b0e      	ldr	r3, [pc, #56]	; (12720 <pm_system_resume+0x70>)
   126e6:	4d0f      	ldr	r5, [pc, #60]	; (12724 <pm_system_resume+0x74>)
   126e8:	b18b      	cbz	r3, 1270e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   126ea:	230c      	movs	r3, #12
   126ec:	4363      	muls	r3, r4
   126ee:	18ea      	adds	r2, r5, r3
   126f0:	5ce8      	ldrb	r0, [r5, r3]
   126f2:	7851      	ldrb	r1, [r2, #1]
   126f4:	f00a fc9d 	bl	1d032 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   126f8:	2000      	movs	r0, #0
   126fa:	f7ff ffab 	bl	12654 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   126fe:	230c      	movs	r3, #12
   12700:	435c      	muls	r4, r3
   12702:	192a      	adds	r2, r5, r4
   12704:	2300      	movs	r3, #0
   12706:	512b      	str	r3, [r5, r4]
   12708:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1270c:	bd70      	pop	{r4, r5, r6, pc}
   1270e:	f383 8811 	msr	BASEPRI, r3
   12712:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12716:	e7ef      	b.n	126f8 <pm_system_resume+0x48>
   12718:	200028f0 	.word	0x200028f0
   1271c:	200021ec 	.word	0x200021ec
   12720:	0001d033 	.word	0x0001d033
   12724:	200021d8 	.word	0x200021d8

00012728 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1272c:	4b35      	ldr	r3, [pc, #212]	; (12804 <pm_system_suspend+0xdc>)
{
   1272e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   12730:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   12732:	f04f 0340 	mov.w	r3, #64	; 0x40
   12736:	f3ef 8811 	mrs	r8, BASEPRI
   1273a:	f383 8812 	msr	BASEPRI_MAX, r3
   1273e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   12742:	240c      	movs	r4, #12
   12744:	4b30      	ldr	r3, [pc, #192]	; (12808 <pm_system_suspend+0xe0>)
   12746:	4e31      	ldr	r6, [pc, #196]	; (1280c <pm_system_suspend+0xe4>)
   12748:	436c      	muls	r4, r5
   1274a:	191a      	adds	r2, r3, r4
   1274c:	5d19      	ldrb	r1, [r3, r4]
   1274e:	2900      	cmp	r1, #0
   12750:	d04c      	beq.n	127ec <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   12752:	ca07      	ldmia	r2, {r0, r1, r2}
   12754:	eb06 0c04 	add.w	ip, r6, r4
   12758:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1275c:	2200      	movs	r2, #0
   1275e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   12760:	f388 8811 	msr	BASEPRI, r8
   12764:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12768:	230c      	movs	r3, #12
   1276a:	436b      	muls	r3, r5
   1276c:	18f2      	adds	r2, r6, r3
   1276e:	5cf0      	ldrb	r0, [r6, r3]
   12770:	2800      	cmp	r0, #0
   12772:	d039      	beq.n	127e8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   12774:	1c7b      	adds	r3, r7, #1
   12776:	d010      	beq.n	1279a <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12778:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1277c:	4c24      	ldr	r4, [pc, #144]	; (12810 <pm_system_suspend+0xe8>)
   1277e:	4a25      	ldr	r2, [pc, #148]	; (12814 <pm_system_suspend+0xec>)
   12780:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12784:	2100      	movs	r1, #0
   12786:	fbec 4100 	umlal	r4, r1, ip, r0
   1278a:	2300      	movs	r3, #0
   1278c:	4620      	mov	r0, r4
   1278e:	f7ed fcb7 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12792:	2101      	movs	r1, #1
   12794:	1a38      	subs	r0, r7, r0
   12796:	f00b fd8b 	bl	1e2b0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1279a:	f006 fc71 	bl	19080 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1279e:	2001      	movs	r0, #1
   127a0:	f7ff ff58 	bl	12654 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   127a4:	f3bf 8f5b 	dmb	ish
   127a8:	4b1b      	ldr	r3, [pc, #108]	; (12818 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   127aa:	096a      	lsrs	r2, r5, #5
   127ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   127b0:	f005 011f 	and.w	r1, r5, #31
   127b4:	2201      	movs	r2, #1
   127b6:	408a      	lsls	r2, r1
   127b8:	e853 0f00 	ldrex	r0, [r3]
   127bc:	4310      	orrs	r0, r2
   127be:	e843 0100 	strex	r1, r0, [r3]
   127c2:	2900      	cmp	r1, #0
   127c4:	d1f8      	bne.n	127b8 <pm_system_suspend+0x90>
   127c6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   127ca:	4b14      	ldr	r3, [pc, #80]	; (1281c <pm_system_suspend+0xf4>)
   127cc:	b13b      	cbz	r3, 127de <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   127ce:	230c      	movs	r3, #12
   127d0:	fb03 f005 	mul.w	r0, r3, r5
   127d4:	1833      	adds	r3, r6, r0
   127d6:	5c30      	ldrb	r0, [r6, r0]
   127d8:	7859      	ldrb	r1, [r3, #1]
   127da:	f00a fc1e 	bl	1d01a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   127de:	f7ff ff67 	bl	126b0 <pm_system_resume>
	k_sched_unlock();
   127e2:	f006 fc61 	bl	190a8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   127e6:	2001      	movs	r0, #1
}
   127e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   127ec:	4601      	mov	r1, r0
   127ee:	4628      	mov	r0, r5
   127f0:	f000 f816 	bl	12820 <pm_policy_next_state>
		if (info != NULL) {
   127f4:	2800      	cmp	r0, #0
   127f6:	d0b3      	beq.n	12760 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   127f8:	c807      	ldmia	r0, {r0, r1, r2}
   127fa:	4434      	add	r4, r6
   127fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   12800:	e7ae      	b.n	12760 <pm_system_suspend+0x38>
   12802:	bf00      	nop
   12804:	200028f0 	.word	0x200028f0
   12808:	200021cc 	.word	0x200021cc
   1280c:	200021d8 	.word	0x200021d8
   12810:	000f423f 	.word	0x000f423f
   12814:	000f4240 	.word	0x000f4240
   12818:	200021ec 	.word	0x200021ec
   1281c:	0001d01b 	.word	0x0001d01b

00012820 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12824:	b085      	sub	sp, #20
   12826:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12828:	a903      	add	r1, sp, #12
   1282a:	f000 f843 	bl	128b4 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1282e:	4b1e      	ldr	r3, [pc, #120]	; (128a8 <pm_policy_next_state+0x88>)
   12830:	9d03      	ldr	r5, [sp, #12]
   12832:	f8d3 a000 	ldr.w	sl, [r3]
   12836:	f8df 8074 	ldr.w	r8, [pc, #116]	; 128ac <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1283a:	1e43      	subs	r3, r0, #1
   1283c:	b21b      	sxth	r3, r3
   1283e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12842:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12844:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12848:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1284c:	f04f 0b00 	mov.w	fp, #0
   12850:	b924      	cbnz	r4, 1285c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   12852:	46a1      	mov	r9, r4
}
   12854:	4648      	mov	r0, r9
   12856:	b005      	add	sp, #20
   12858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1285c:	6868      	ldr	r0, [r5, #4]
   1285e:	4a14      	ldr	r2, [pc, #80]	; (128b0 <pm_policy_next_state+0x90>)
   12860:	46c4      	mov	ip, r8
   12862:	4659      	mov	r1, fp
   12864:	fbe0 c107 	umlal	ip, r1, r0, r7
   12868:	2300      	movs	r3, #0
   1286a:	4660      	mov	r0, ip
   1286c:	f7ed fc48 	bl	100 <__aeabi_uldivmod>
   12870:	9001      	str	r0, [sp, #4]
   12872:	68a8      	ldr	r0, [r5, #8]
   12874:	4a0e      	ldr	r2, [pc, #56]	; (128b0 <pm_policy_next_state+0x90>)
   12876:	46c4      	mov	ip, r8
   12878:	4659      	mov	r1, fp
   1287a:	fbe0 c107 	umlal	ip, r1, r0, r7
   1287e:	2300      	movs	r3, #0
   12880:	4660      	mov	r0, ip
   12882:	f7ed fc3d 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12886:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1288a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1288c:	d001      	beq.n	12892 <pm_policy_next_state+0x72>
   1288e:	4582      	cmp	sl, r0
   12890:	d905      	bls.n	1289e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   12892:	1c73      	adds	r3, r6, #1
   12894:	d0de      	beq.n	12854 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   12896:	9b01      	ldr	r3, [sp, #4]
   12898:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1289a:	42b0      	cmp	r0, r6
   1289c:	d9da      	bls.n	12854 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1289e:	3c01      	subs	r4, #1
   128a0:	b2a4      	uxth	r4, r4
   128a2:	3d0c      	subs	r5, #12
   128a4:	e7d4      	b.n	12850 <pm_policy_next_state+0x30>
   128a6:	bf00      	nop
   128a8:	20000358 	.word	0x20000358
   128ac:	000f423f 	.word	0x000f423f
   128b0:	000f4240 	.word	0x000f4240

000128b4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   128b4:	b908      	cbnz	r0, 128ba <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   128b6:	4b02      	ldr	r3, [pc, #8]	; (128c0 <pm_state_cpu_get_all+0xc>)
   128b8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   128ba:	2000      	movs	r0, #0
   128bc:	4770      	bx	lr
   128be:	bf00      	nop
   128c0:	0001eb34 	.word	0x0001eb34

000128c4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   128c4:	4801      	ldr	r0, [pc, #4]	; (128cc <nrf_cc3xx_platform_abort_init+0x8>)
   128c6:	f007 b84d 	b.w	19964 <nrf_cc3xx_platform_set_abort>
   128ca:	bf00      	nop
   128cc:	0001eb34 	.word	0x0001eb34

000128d0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   128d0:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   128d2:	4604      	mov	r4, r0
   128d4:	b918      	cbnz	r0, 128de <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   128d6:	4b0f      	ldr	r3, [pc, #60]	; (12914 <mutex_free_platform+0x44>)
   128d8:	480f      	ldr	r0, [pc, #60]	; (12918 <mutex_free_platform+0x48>)
   128da:	685b      	ldr	r3, [r3, #4]
   128dc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   128de:	6861      	ldr	r1, [r4, #4]
   128e0:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   128e4:	d00f      	beq.n	12906 <mutex_free_platform+0x36>
   128e6:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   128ea:	d00c      	beq.n	12906 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   128ec:	4d0b      	ldr	r5, [pc, #44]	; (1291c <mutex_free_platform+0x4c>)
   128ee:	42a9      	cmp	r1, r5
   128f0:	d009      	beq.n	12906 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   128f2:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   128f6:	d007      	beq.n	12908 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   128f8:	4809      	ldr	r0, [pc, #36]	; (12920 <mutex_free_platform+0x50>)
   128fa:	4621      	mov	r1, r4
   128fc:	f00b f9e8 	bl	1dcd0 <k_mem_slab_free>
        mutex->mutex = NULL;
   12900:	2300      	movs	r3, #0
   12902:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12904:	6065      	str	r5, [r4, #4]
}
   12906:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12908:	6820      	ldr	r0, [r4, #0]
   1290a:	2214      	movs	r2, #20
   1290c:	f00a fb79 	bl	1d002 <memset>
   12910:	e7f8      	b.n	12904 <mutex_free_platform+0x34>
   12912:	bf00      	nop
   12914:	200004a4 	.word	0x200004a4
   12918:	0001f289 	.word	0x0001f289
   1291c:	a95c5f2c 	.word	0xa95c5f2c
   12920:	200026f0 	.word	0x200026f0

00012924 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12924:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12926:	b320      	cbz	r0, 12972 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   12928:	6843      	ldr	r3, [r0, #4]
   1292a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   1292e:	d110      	bne.n	12952 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12930:	2201      	movs	r2, #1
   12932:	6803      	ldr	r3, [r0, #0]
   12934:	f3bf 8f5b 	dmb	ish
   12938:	e853 1f00 	ldrex	r1, [r3]
   1293c:	2900      	cmp	r1, #0
   1293e:	d103      	bne.n	12948 <mutex_lock_platform+0x24>
   12940:	e843 2000 	strex	r0, r2, [r3]
   12944:	2800      	cmp	r0, #0
   12946:	d1f7      	bne.n	12938 <mutex_lock_platform+0x14>
   12948:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1294c:	d10d      	bne.n	1296a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   1294e:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   12950:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12952:	4a09      	ldr	r2, [pc, #36]	; (12978 <mutex_lock_platform+0x54>)
   12954:	4293      	cmp	r3, r2
   12956:	d00a      	beq.n	1296e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12958:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1295a:	f04f 32ff 	mov.w	r2, #4294967295
   1295e:	f04f 33ff 	mov.w	r3, #4294967295
   12962:	f005 fee3 	bl	1872c <z_impl_k_mutex_lock>
        if (ret == 0) {
   12966:	2800      	cmp	r0, #0
   12968:	d0f1      	beq.n	1294e <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1296a:	4804      	ldr	r0, [pc, #16]	; (1297c <mutex_lock_platform+0x58>)
   1296c:	e7f0      	b.n	12950 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1296e:	4804      	ldr	r0, [pc, #16]	; (12980 <mutex_lock_platform+0x5c>)
   12970:	e7ee      	b.n	12950 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12972:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12976:	e7eb      	b.n	12950 <mutex_lock_platform+0x2c>
   12978:	a95c5f2c 	.word	0xa95c5f2c
   1297c:	ffff8fe9 	.word	0xffff8fe9
   12980:	ffff8fea 	.word	0xffff8fea

00012984 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12984:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12986:	b1d8      	cbz	r0, 129c0 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12988:	6843      	ldr	r3, [r0, #4]
   1298a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   1298e:	d110      	bne.n	129b2 <mutex_unlock_platform+0x2e>
   12990:	2200      	movs	r2, #0
   12992:	6803      	ldr	r3, [r0, #0]
   12994:	f3bf 8f5b 	dmb	ish
   12998:	e853 1f00 	ldrex	r1, [r3]
   1299c:	2901      	cmp	r1, #1
   1299e:	d103      	bne.n	129a8 <mutex_unlock_platform+0x24>
   129a0:	e843 2000 	strex	r0, r2, [r3]
   129a4:	2800      	cmp	r0, #0
   129a6:	d1f7      	bne.n	12998 <mutex_unlock_platform+0x14>
   129a8:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   129ac:	d10b      	bne.n	129c6 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   129ae:	2000      	movs	r0, #0
    }
}
   129b0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   129b2:	4a07      	ldr	r2, [pc, #28]	; (129d0 <mutex_unlock_platform+0x4c>)
   129b4:	4293      	cmp	r3, r2
   129b6:	d008      	beq.n	129ca <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   129b8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   129ba:	f005 ff31 	bl	18820 <z_impl_k_mutex_unlock>
   129be:	e7f6      	b.n	129ae <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   129c0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   129c4:	e7f4      	b.n	129b0 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   129c6:	4803      	ldr	r0, [pc, #12]	; (129d4 <mutex_unlock_platform+0x50>)
   129c8:	e7f2      	b.n	129b0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   129ca:	4803      	ldr	r0, [pc, #12]	; (129d8 <mutex_unlock_platform+0x54>)
   129cc:	e7f0      	b.n	129b0 <mutex_unlock_platform+0x2c>
   129ce:	bf00      	nop
   129d0:	a95c5f2c 	.word	0xa95c5f2c
   129d4:	ffff8fe9 	.word	0xffff8fe9
   129d8:	ffff8fea 	.word	0xffff8fea

000129dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   129dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   129de:	4604      	mov	r4, r0
   129e0:	b918      	cbnz	r0, 129ea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   129e2:	4b1d      	ldr	r3, [pc, #116]	; (12a58 <mutex_init_platform+0x7c>)
   129e4:	481d      	ldr	r0, [pc, #116]	; (12a5c <mutex_init_platform+0x80>)
   129e6:	685b      	ldr	r3, [r3, #4]
   129e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   129ea:	6863      	ldr	r3, [r4, #4]
   129ec:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   129f0:	d02f      	beq.n	12a52 <mutex_init_platform+0x76>
   129f2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   129f6:	d02c      	beq.n	12a52 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   129f8:	4a19      	ldr	r2, [pc, #100]	; (12a60 <mutex_init_platform+0x84>)
   129fa:	4293      	cmp	r3, r2
   129fc:	d119      	bne.n	12a32 <mutex_init_platform+0x56>
   129fe:	6823      	ldr	r3, [r4, #0]
   12a00:	bb03      	cbnz	r3, 12a44 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12a02:	4818      	ldr	r0, [pc, #96]	; (12a64 <mutex_init_platform+0x88>)
   12a04:	f04f 32ff 	mov.w	r2, #4294967295
   12a08:	f04f 33ff 	mov.w	r3, #4294967295
   12a0c:	4621      	mov	r1, r4
   12a0e:	f005 fd89 	bl	18524 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12a12:	b908      	cbnz	r0, 12a18 <mutex_init_platform+0x3c>
   12a14:	6823      	ldr	r3, [r4, #0]
   12a16:	b91b      	cbnz	r3, 12a20 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   12a18:	4b0f      	ldr	r3, [pc, #60]	; (12a58 <mutex_init_platform+0x7c>)
   12a1a:	4813      	ldr	r0, [pc, #76]	; (12a68 <mutex_init_platform+0x8c>)
   12a1c:	685b      	ldr	r3, [r3, #4]
   12a1e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12a20:	6820      	ldr	r0, [r4, #0]
   12a22:	2214      	movs	r2, #20
   12a24:	2100      	movs	r1, #0
   12a26:	f00a faec 	bl	1d002 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12a2a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   12a2e:	6063      	str	r3, [r4, #4]
   12a30:	e008      	b.n	12a44 <mutex_init_platform+0x68>
    switch(flags){
   12a32:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12a36:	d80d      	bhi.n	12a54 <mutex_init_platform+0x78>
   12a38:	2b3a      	cmp	r3, #58	; 0x3a
   12a3a:	d003      	beq.n	12a44 <mutex_init_platform+0x68>
   12a3c:	f640 62ba 	movw	r2, #3770	; 0xeba
   12a40:	4293      	cmp	r3, r2
   12a42:	d1de      	bne.n	12a02 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   12a44:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   12a46:	f00b f988 	bl	1dd5a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12a4a:	6863      	ldr	r3, [r4, #4]
   12a4c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   12a50:	6063      	str	r3, [r4, #4]
}
   12a52:	bd10      	pop	{r4, pc}
    switch(flags){
   12a54:	4a05      	ldr	r2, [pc, #20]	; (12a6c <mutex_init_platform+0x90>)
   12a56:	e7f3      	b.n	12a40 <mutex_init_platform+0x64>
   12a58:	200004a4 	.word	0x200004a4
   12a5c:	0001f289 	.word	0x0001f289
   12a60:	a95c5f2c 	.word	0xa95c5f2c
   12a64:	200026f0 	.word	0x200026f0
   12a68:	0001f2af 	.word	0x0001f2af
   12a6c:	3a00003a 	.word	0x3a00003a

00012a70 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12a70:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12a72:	4906      	ldr	r1, [pc, #24]	; (12a8c <nrf_cc3xx_platform_mutex_init+0x1c>)
   12a74:	4806      	ldr	r0, [pc, #24]	; (12a90 <nrf_cc3xx_platform_mutex_init+0x20>)
   12a76:	2340      	movs	r3, #64	; 0x40
   12a78:	2214      	movs	r2, #20
   12a7a:	f00b f91b 	bl	1dcb4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   12a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   12a82:	4904      	ldr	r1, [pc, #16]	; (12a94 <nrf_cc3xx_platform_mutex_init+0x24>)
   12a84:	4804      	ldr	r0, [pc, #16]	; (12a98 <nrf_cc3xx_platform_mutex_init+0x28>)
   12a86:	f007 b833 	b.w	19af0 <nrf_cc3xx_platform_set_mutexes>
   12a8a:	bf00      	nop
   12a8c:	200021f0 	.word	0x200021f0
   12a90:	200026f0 	.word	0x200026f0
   12a94:	0001eb3c 	.word	0x0001eb3c
   12a98:	0001eb50 	.word	0x0001eb50

00012a9c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12a9c:	4901      	ldr	r1, [pc, #4]	; (12aa4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12a9e:	2210      	movs	r2, #16
	str	r2, [r1]
   12aa0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12aa2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12aa4:	e000ed10 	.word	0xe000ed10

00012aa8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12aa8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12aaa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12aac:	f380 8811 	msr	BASEPRI, r0
	isb
   12ab0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   12ab4:	f3bf 8f4f 	dsb	sy
   12ab8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12aba:	b662      	cpsie	i
	isb
   12abc:	f3bf 8f6f 	isb	sy

	bx	lr
   12ac0:	4770      	bx	lr
   12ac2:	bf00      	nop

00012ac4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12ac4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12ac6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12ac8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   12acc:	f3bf 8f4f 	dsb	sy
   12ad0:	bf20      	wfe

	msr	BASEPRI, r0
   12ad2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12ad6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12ad8:	4770      	bx	lr
   12ada:	bf00      	nop

00012adc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae0:	4682      	mov	sl, r0
   12ae2:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   12ae4:	460c      	mov	r4, r1
   12ae6:	2900      	cmp	r1, #0
   12ae8:	d052      	beq.n	12b90 <z_arm_fatal_error+0xb4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12aea:	466e      	mov	r6, sp
   12aec:	b08a      	sub	sp, #40	; 0x28
   12aee:	e9d1 1200 	ldrd	r1, r2, [r1]
   12af2:	68a3      	ldr	r3, [r4, #8]
   12af4:	466d      	mov	r5, sp
   12af6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 12ba0 <z_arm_fatal_error+0xc4>
   12afa:	482a      	ldr	r0, [pc, #168]	; (12ba4 <z_arm_fatal_error+0xc8>)
   12afc:	6168      	str	r0, [r5, #20]
   12afe:	46a8      	mov	r8, r5
   12b00:	f04f 0b06 	mov.w	fp, #6
   12b04:	e9c5 9106 	strd	r9, r1, [r5, #24]
   12b08:	e9c5 2308 	strd	r2, r3, [r5, #32]
   12b0c:	f848 bf10 	str.w	fp, [r8, #16]!
   12b10:	4825      	ldr	r0, [pc, #148]	; (12ba8 <z_arm_fatal_error+0xcc>)
   12b12:	4642      	mov	r2, r8
   12b14:	2300      	movs	r3, #0
   12b16:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   12b1a:	f7ff fa55 	bl	11fc8 <z_impl_z_log_msg_static_create>
   12b1e:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12b20:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   12b24:	6963      	ldr	r3, [r4, #20]
   12b26:	46ad      	mov	sp, r5
   12b28:	4820      	ldr	r0, [pc, #128]	; (12bac <z_arm_fatal_error+0xd0>)
   12b2a:	626b      	str	r3, [r5, #36]	; 0x24
   12b2c:	e9c5 0905 	strd	r0, r9, [r5, #20]
   12b30:	e9c5 1207 	strd	r1, r2, [r5, #28]
   12b34:	f8c5 b010 	str.w	fp, [r5, #16]
   12b38:	481b      	ldr	r0, [pc, #108]	; (12ba8 <z_arm_fatal_error+0xcc>)
   12b3a:	2300      	movs	r3, #0
   12b3c:	4642      	mov	r2, r8
   12b3e:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   12b42:	f7ff fa41 	bl	11fc8 <z_impl_z_log_msg_static_create>
   12b46:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12b48:	b088      	sub	sp, #32
   12b4a:	69e3      	ldr	r3, [r4, #28]
   12b4c:	466d      	mov	r5, sp
   12b4e:	4a18      	ldr	r2, [pc, #96]	; (12bb0 <z_arm_fatal_error+0xd4>)
   12b50:	61eb      	str	r3, [r5, #28]
   12b52:	46a8      	mov	r8, r5
   12b54:	f04f 0b04 	mov.w	fp, #4
   12b58:	e9c5 2905 	strd	r2, r9, [r5, #20]
   12b5c:	f848 bf10 	str.w	fp, [r8, #16]!
   12b60:	4811      	ldr	r0, [pc, #68]	; (12ba8 <z_arm_fatal_error+0xcc>)
   12b62:	2300      	movs	r3, #0
   12b64:	4642      	mov	r2, r8
   12b66:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12b6a:	f7ff fa2d 	bl	11fc8 <z_impl_z_log_msg_static_create>
   12b6e:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12b70:	69a3      	ldr	r3, [r4, #24]
   12b72:	46ad      	mov	sp, r5
   12b74:	4a0f      	ldr	r2, [pc, #60]	; (12bb4 <z_arm_fatal_error+0xd8>)
   12b76:	61eb      	str	r3, [r5, #28]
   12b78:	e9c5 2905 	strd	r2, r9, [r5, #20]
   12b7c:	f8c5 b010 	str.w	fp, [r5, #16]
   12b80:	4809      	ldr	r0, [pc, #36]	; (12ba8 <z_arm_fatal_error+0xcc>)
   12b82:	2300      	movs	r3, #0
   12b84:	4642      	mov	r2, r8
   12b86:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12b8a:	f7ff fa1d 	bl	11fc8 <z_impl_z_log_msg_static_create>
   12b8e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12b90:	4621      	mov	r1, r4
   12b92:	4650      	mov	r0, sl
   12b94:	f005 fb2e 	bl	181f4 <z_fatal_error>
}
   12b98:	46bd      	mov	sp, r7
   12b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b9e:	bf00      	nop
   12ba0:	0001f387 	.word	0x0001f387
   12ba4:	0001f2dc 	.word	0x0001f2dc
   12ba8:	0001e9d8 	.word	0x0001e9d8
   12bac:	0001f30f 	.word	0x0001f30f
   12bb0:	0001f342 	.word	0x0001f342
   12bb4:	0001f355 	.word	0x0001f355

00012bb8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12bb8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12bba:	2800      	cmp	r0, #0
   12bbc:	db07      	blt.n	12bce <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12bbe:	4a04      	ldr	r2, [pc, #16]	; (12bd0 <arch_irq_enable+0x18>)
   12bc0:	0941      	lsrs	r1, r0, #5
   12bc2:	2301      	movs	r3, #1
   12bc4:	f000 001f 	and.w	r0, r0, #31
   12bc8:	4083      	lsls	r3, r0
   12bca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   12bce:	4770      	bx	lr
   12bd0:	e000e100 	.word	0xe000e100

00012bd4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12bd4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12bd6:	2800      	cmp	r0, #0
   12bd8:	db0c      	blt.n	12bf4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12bda:	0943      	lsrs	r3, r0, #5
   12bdc:	4906      	ldr	r1, [pc, #24]	; (12bf8 <arch_irq_disable+0x24>)
   12bde:	f000 001f 	and.w	r0, r0, #31
   12be2:	3320      	adds	r3, #32
   12be4:	2201      	movs	r2, #1
   12be6:	4082      	lsls	r2, r0
   12be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12bec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12bf0:	f3bf 8f6f 	isb	sy
}
   12bf4:	4770      	bx	lr
   12bf6:	bf00      	nop
   12bf8:	e000e100 	.word	0xe000e100

00012bfc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12bfc:	4b05      	ldr	r3, [pc, #20]	; (12c14 <arch_irq_is_enabled+0x18>)
   12bfe:	0942      	lsrs	r2, r0, #5
   12c00:	f000 001f 	and.w	r0, r0, #31
   12c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12c08:	2301      	movs	r3, #1
   12c0a:	fa03 f000 	lsl.w	r0, r3, r0
}
   12c0e:	4010      	ands	r0, r2
   12c10:	4770      	bx	lr
   12c12:	bf00      	nop
   12c14:	e000e100 	.word	0xe000e100

00012c18 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12c18:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12c1a:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   12c1c:	bf54      	ite	pl
   12c1e:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12c20:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12c22:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c24:	bfac      	ite	ge
   12c26:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c2a:	4a07      	ldrlt	r2, [pc, #28]	; (12c48 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c2c:	ea4f 1341 	mov.w	r3, r1, lsl #5
   12c30:	bfac      	ite	ge
   12c32:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c36:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c3a:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c3c:	bfb4      	ite	lt
   12c3e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c40:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   12c44:	4770      	bx	lr
   12c46:	bf00      	nop
   12c48:	e000ed14 	.word	0xe000ed14

00012c4c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12c4c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12c4e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12c50:	4b04      	ldr	r3, [pc, #16]	; (12c64 <_arch_isr_direct_pm+0x18>)
   12c52:	699a      	ldr	r2, [r3, #24]
   12c54:	b11a      	cbz	r2, 12c5e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   12c56:	2200      	movs	r2, #0
   12c58:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   12c5a:	f00b f86f 	bl	1dd3c <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12c5e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12c60:	bd08      	pop	{r3, pc}
   12c62:	bf00      	nop
   12c64:	200028f0 	.word	0x200028f0

00012c68 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12c68:	bf30      	wfi
    b z_SysNmiOnReset
   12c6a:	f7ff bffd 	b.w	12c68 <z_SysNmiOnReset>
   12c6e:	bf00      	nop

00012c70 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12c70:	4a0b      	ldr	r2, [pc, #44]	; (12ca0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   12c72:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12c74:	4b0b      	ldr	r3, [pc, #44]	; (12ca4 <z_arm_prep_c+0x34>)
   12c76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12c7a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12c7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12c80:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12c84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12c88:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12c90:	f005 fb70 	bl	18374 <z_bss_zero>
	z_data_copy();
   12c94:	f006 fb44 	bl	19320 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12c98:	f000 fc40 	bl	1351c <z_arm_interrupt_init>
	z_cstart();
   12c9c:	f005 fbae 	bl	183fc <z_cstart>
   12ca0:	00000000 	.word	0x00000000
   12ca4:	e000ed00 	.word	0xe000ed00

00012ca8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12ca8:	4a09      	ldr	r2, [pc, #36]	; (12cd0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12caa:	490a      	ldr	r1, [pc, #40]	; (12cd4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12cac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12cae:	6809      	ldr	r1, [r1, #0]
   12cb0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12cb2:	4909      	ldr	r1, [pc, #36]	; (12cd8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   12cb4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12cb6:	684b      	ldr	r3, [r1, #4]
   12cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12cbc:	604b      	str	r3, [r1, #4]
   12cbe:	2300      	movs	r3, #0
   12cc0:	f383 8811 	msr	BASEPRI, r3
   12cc4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12cc8:	6893      	ldr	r3, [r2, #8]
}
   12cca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12ccc:	4770      	bx	lr
   12cce:	bf00      	nop
   12cd0:	200028f0 	.word	0x200028f0
   12cd4:	0001ed88 	.word	0x0001ed88
   12cd8:	e000ed00 	.word	0xe000ed00

00012cdc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12cdc:	4912      	ldr	r1, [pc, #72]	; (12d28 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12cde:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12ce0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12ce4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12ce6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12cea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12cee:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   12cf0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12cf4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12cf8:	4f0c      	ldr	r7, [pc, #48]	; (12d2c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12cfa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12cfe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12d00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12d02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12d04:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12d06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12d08:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12d0a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   12d0e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12d10:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12d12:	f000 fc9f 	bl	13654 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12d16:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12d1a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   12d1e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12d22:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12d26:	4770      	bx	lr
    ldr r1, =_kernel
   12d28:	200028f0 	.word	0x200028f0
    ldr v4, =_SCS_ICSR
   12d2c:	e000ed04 	.word	0xe000ed04

00012d30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   12d30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12d34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12d36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12d3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12d3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12d40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12d44:	2902      	cmp	r1, #2
    beq _oops
   12d46:	d0ff      	beq.n	12d48 <_oops>

00012d48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12d48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   12d4a:	f00a f8e8 	bl	1cf1e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   12d4e:	bd01      	pop	{r0, pc}

00012d50 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12d50:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12d54:	9b00      	ldr	r3, [sp, #0]
   12d56:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   12d5a:	490a      	ldr	r1, [pc, #40]	; (12d84 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12d5c:	9b01      	ldr	r3, [sp, #4]
   12d5e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12d62:	9b02      	ldr	r3, [sp, #8]
   12d64:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12d68:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12d70:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   12d74:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12d78:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12d7a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12d7c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12d7e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12d80:	4770      	bx	lr
   12d82:	bf00      	nop
   12d84:	0001c37f 	.word	0x0001c37f

00012d88 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12d88:	4a09      	ldr	r2, [pc, #36]	; (12db0 <z_check_thread_stack_fail+0x28>)
{
   12d8a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   12d8c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   12d8e:	b170      	cbz	r0, 12dae <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12d90:	f113 0f16 	cmn.w	r3, #22
   12d94:	6e80      	ldr	r0, [r0, #104]	; 0x68
   12d96:	d005      	beq.n	12da4 <z_check_thread_stack_fail+0x1c>
   12d98:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   12d9c:	429a      	cmp	r2, r3
   12d9e:	d805      	bhi.n	12dac <z_check_thread_stack_fail+0x24>
   12da0:	4283      	cmp	r3, r0
   12da2:	d203      	bcs.n	12dac <z_check_thread_stack_fail+0x24>
		return 0;
   12da4:	4281      	cmp	r1, r0
   12da6:	bf28      	it	cs
   12da8:	2000      	movcs	r0, #0
   12daa:	4770      	bx	lr
   12dac:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   12dae:	4770      	bx	lr
   12db0:	200028f0 	.word	0x200028f0

00012db4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12db4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12db6:	4b09      	ldr	r3, [pc, #36]	; (12ddc <arch_switch_to_main_thread+0x28>)
   12db8:	6098      	str	r0, [r3, #8]
{
   12dba:	460d      	mov	r5, r1
   12dbc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   12dbe:	f000 fc49 	bl	13654 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12dc2:	4620      	mov	r0, r4
   12dc4:	f385 8809 	msr	PSP, r5
   12dc8:	2100      	movs	r1, #0
   12dca:	b663      	cpsie	if
   12dcc:	f381 8811 	msr	BASEPRI, r1
   12dd0:	f3bf 8f6f 	isb	sy
   12dd4:	2200      	movs	r2, #0
   12dd6:	2300      	movs	r3, #0
   12dd8:	f009 fad1 	bl	1c37e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12ddc:	200028f0 	.word	0x200028f0

00012de0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12de0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12de2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12de4:	4a0b      	ldr	r2, [pc, #44]	; (12e14 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12de6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12de8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12dea:	bf1e      	ittt	ne
	movne	r1, #0
   12dec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12dee:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   12df0:	f00a ffa4 	blne	1dd3c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12df4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12df6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12dfa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12dfe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12e02:	4905      	ldr	r1, [pc, #20]	; (12e18 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12e04:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12e06:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12e08:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12e0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12e0e:	4903      	ldr	r1, [pc, #12]	; (12e1c <_isr_wrapper+0x3c>)
	bx r1
   12e10:	4708      	bx	r1
   12e12:	0000      	.short	0x0000
	ldr r2, =_kernel
   12e14:	200028f0 	.word	0x200028f0
	ldr r1, =_sw_isr_table
   12e18:	0001e7a0 	.word	0x0001e7a0
	ldr r1, =z_arm_int_exit
   12e1c:	00012e21 	.word	0x00012e21

00012e20 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12e20:	4b04      	ldr	r3, [pc, #16]	; (12e34 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12e22:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12e24:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   12e26:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12e28:	d003      	beq.n	12e32 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12e2a:	4903      	ldr	r1, [pc, #12]	; (12e38 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12e30:	600a      	str	r2, [r1, #0]

00012e32 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12e32:	4770      	bx	lr
	ldr r3, =_kernel
   12e34:	200028f0 	.word	0x200028f0
	ldr r1, =_SCS_ICSR
   12e38:	e000ed04 	.word	0xe000ed04

00012e3c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12e40:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   12e42:	46e8      	mov	r8, sp
   12e44:	b088      	sub	sp, #32
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12e46:	4606      	mov	r6, r0
   12e48:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   12e4a:	466a      	mov	r2, sp
   12e4c:	4b4d      	ldr	r3, [pc, #308]	; (12f84 <bus_fault.constprop.0+0x148>)
   12e4e:	4c4e      	ldr	r4, [pc, #312]	; (12f88 <bus_fault.constprop.0+0x14c>)
   12e50:	6153      	str	r3, [r2, #20]
   12e52:	f04f 0903 	mov.w	r9, #3
   12e56:	6194      	str	r4, [r2, #24]
   12e58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e5c:	f842 9f10 	str.w	r9, [r2, #16]!
   12e60:	484a      	ldr	r0, [pc, #296]	; (12f8c <bus_fault.constprop.0+0x150>)
   12e62:	f00a f86b 	bl	1cf3c <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12e66:	4b4a      	ldr	r3, [pc, #296]	; (12f90 <bus_fault.constprop.0+0x154>)
   12e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12e6a:	04d9      	lsls	r1, r3, #19
   12e6c:	46c5      	mov	sp, r8
   12e6e:	d50c      	bpl.n	12e8a <bus_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error");
   12e70:	b088      	sub	sp, #32
   12e72:	466a      	mov	r2, sp
   12e74:	4b47      	ldr	r3, [pc, #284]	; (12f94 <bus_fault.constprop.0+0x158>)
   12e76:	4845      	ldr	r0, [pc, #276]	; (12f8c <bus_fault.constprop.0+0x150>)
   12e78:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12e7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e80:	f842 9f10 	str.w	r9, [r2, #16]!
   12e84:	f00a f85a 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   12e88:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12e8a:	4b41      	ldr	r3, [pc, #260]	; (12f90 <bus_fault.constprop.0+0x154>)
   12e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12e8e:	051a      	lsls	r2, r3, #20
   12e90:	d50e      	bpl.n	12eb0 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Unstacking error");
   12e92:	46e8      	mov	r8, sp
   12e94:	b088      	sub	sp, #32
   12e96:	466a      	mov	r2, sp
   12e98:	4b3f      	ldr	r3, [pc, #252]	; (12f98 <bus_fault.constprop.0+0x15c>)
   12e9a:	483c      	ldr	r0, [pc, #240]	; (12f8c <bus_fault.constprop.0+0x150>)
   12e9c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12ea0:	2303      	movs	r3, #3
   12ea2:	f842 3f10 	str.w	r3, [r2, #16]!
   12ea6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12eaa:	f00a f847 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   12eae:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12eb0:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 12f90 <bus_fault.constprop.0+0x154>
   12eb4:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   12eb8:	059b      	lsls	r3, r3, #22
   12eba:	d52a      	bpl.n	12f12 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Precise data bus error");
   12ebc:	46e8      	mov	r8, sp
   12ebe:	b088      	sub	sp, #32
   12ec0:	466a      	mov	r2, sp
   12ec2:	4b36      	ldr	r3, [pc, #216]	; (12f9c <bus_fault.constprop.0+0x160>)
   12ec4:	4831      	ldr	r0, [pc, #196]	; (12f8c <bus_fault.constprop.0+0x150>)
   12ec6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12eca:	2303      	movs	r3, #3
   12ecc:	f842 3f10 	str.w	r3, [r2, #16]!
   12ed0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12ed4:	f00a f832 	bl	1cf3c <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12ed8:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12edc:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
   12ee0:	0410      	lsls	r0, r2, #16
   12ee2:	46c5      	mov	sp, r8
   12ee4:	d515      	bpl.n	12f12 <bus_fault.constprop.0+0xd6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12ee6:	b088      	sub	sp, #32
   12ee8:	466a      	mov	r2, sp
   12eea:	492d      	ldr	r1, [pc, #180]	; (12fa0 <bus_fault.constprop.0+0x164>)
   12eec:	61d3      	str	r3, [r2, #28]
   12eee:	2304      	movs	r3, #4
   12ef0:	e9c2 1405 	strd	r1, r4, [r2, #20]
   12ef4:	4825      	ldr	r0, [pc, #148]	; (12f8c <bus_fault.constprop.0+0x150>)
   12ef6:	f842 3f10 	str.w	r3, [r2, #16]!
   12efa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12efe:	f00a f81d 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   12f02:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   12f04:	b12e      	cbz	r6, 12f12 <bus_fault.constprop.0+0xd6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12f06:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   12f0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12f0e:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12f12:	4b1f      	ldr	r3, [pc, #124]	; (12f90 <bus_fault.constprop.0+0x154>)
   12f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f16:	0559      	lsls	r1, r3, #21
   12f18:	d50e      	bpl.n	12f38 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Imprecise data bus error");
   12f1a:	466e      	mov	r6, sp
   12f1c:	b088      	sub	sp, #32
   12f1e:	466a      	mov	r2, sp
   12f20:	4b20      	ldr	r3, [pc, #128]	; (12fa4 <bus_fault.constprop.0+0x168>)
   12f22:	481a      	ldr	r0, [pc, #104]	; (12f8c <bus_fault.constprop.0+0x150>)
   12f24:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12f28:	2303      	movs	r3, #3
   12f2a:	f842 3f10 	str.w	r3, [r2, #16]!
   12f2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12f32:	f00a f803 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   12f36:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12f38:	4b15      	ldr	r3, [pc, #84]	; (12f90 <bus_fault.constprop.0+0x154>)
   12f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f3c:	05d2      	lsls	r2, r2, #23
   12f3e:	d518      	bpl.n	12f72 <bus_fault.constprop.0+0x136>
		PR_FAULT_INFO("  Instruction bus error");
   12f40:	466e      	mov	r6, sp
   12f42:	b088      	sub	sp, #32
   12f44:	466a      	mov	r2, sp
   12f46:	4b18      	ldr	r3, [pc, #96]	; (12fa8 <bus_fault.constprop.0+0x16c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12f48:	4810      	ldr	r0, [pc, #64]	; (12f8c <bus_fault.constprop.0+0x150>)
   12f4a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12f4e:	2303      	movs	r3, #3
   12f50:	f842 3f10 	str.w	r3, [r2, #16]!
   12f54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12f58:	f009 fff0 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   12f5c:	46b5      	mov	sp, r6
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12f5e:	4a0c      	ldr	r2, [pc, #48]	; (12f90 <bus_fault.constprop.0+0x154>)
   12f60:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   12f62:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12f64:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12f68:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12f6a:	7028      	strb	r0, [r5, #0]

	return reason;
}
   12f6c:	46bd      	mov	sp, r7
   12f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f74:	049b      	lsls	r3, r3, #18
   12f76:	d5f2      	bpl.n	12f5e <bus_fault.constprop.0+0x122>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12f78:	466e      	mov	r6, sp
   12f7a:	b088      	sub	sp, #32
   12f7c:	466a      	mov	r2, sp
   12f7e:	4b0b      	ldr	r3, [pc, #44]	; (12fac <bus_fault.constprop.0+0x170>)
   12f80:	e7e2      	b.n	12f48 <bus_fault.constprop.0+0x10c>
   12f82:	bf00      	nop
   12f84:	0001f390 	.word	0x0001f390
   12f88:	0001f76b 	.word	0x0001f76b
   12f8c:	0001e9d8 	.word	0x0001e9d8
   12f90:	e000ed00 	.word	0xe000ed00
   12f94:	0001f3aa 	.word	0x0001f3aa
   12f98:	0001f3bf 	.word	0x0001f3bf
   12f9c:	0001f3d6 	.word	0x0001f3d6
   12fa0:	0001f3f3 	.word	0x0001f3f3
   12fa4:	0001f40c 	.word	0x0001f40c
   12fa8:	0001f42b 	.word	0x0001f42b
   12fac:	0001f447 	.word	0x0001f447

00012fb0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fb2:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   12fb4:	466d      	mov	r5, sp
   12fb6:	b088      	sub	sp, #32
   12fb8:	466a      	mov	r2, sp
   12fba:	4b43      	ldr	r3, [pc, #268]	; (130c8 <usage_fault.constprop.0+0x118>)
   12fbc:	4c43      	ldr	r4, [pc, #268]	; (130cc <usage_fault.constprop.0+0x11c>)
   12fbe:	6153      	str	r3, [r2, #20]
   12fc0:	2603      	movs	r6, #3
   12fc2:	6194      	str	r4, [r2, #24]
   12fc4:	4842      	ldr	r0, [pc, #264]	; (130d0 <usage_fault.constprop.0+0x120>)
   12fc6:	f842 6f10 	str.w	r6, [r2, #16]!
   12fca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12fce:	f009 ffb5 	bl	1cf3c <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12fd2:	4b40      	ldr	r3, [pc, #256]	; (130d4 <usage_fault.constprop.0+0x124>)
   12fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12fd6:	019b      	lsls	r3, r3, #6
   12fd8:	46ad      	mov	sp, r5
   12fda:	d50c      	bpl.n	12ff6 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
   12fdc:	b088      	sub	sp, #32
   12fde:	466a      	mov	r2, sp
   12fe0:	4b3d      	ldr	r3, [pc, #244]	; (130d8 <usage_fault.constprop.0+0x128>)
   12fe2:	483b      	ldr	r0, [pc, #236]	; (130d0 <usage_fault.constprop.0+0x120>)
   12fe4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12fe8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12fec:	f842 6f10 	str.w	r6, [r2, #16]!
   12ff0:	f009 ffa4 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   12ff4:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12ff6:	4b37      	ldr	r3, [pc, #220]	; (130d4 <usage_fault.constprop.0+0x124>)
   12ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12ffa:	01dd      	lsls	r5, r3, #7
   12ffc:	d50e      	bpl.n	1301c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Unaligned memory access");
   12ffe:	466d      	mov	r5, sp
   13000:	b088      	sub	sp, #32
   13002:	466a      	mov	r2, sp
   13004:	4b35      	ldr	r3, [pc, #212]	; (130dc <usage_fault.constprop.0+0x12c>)
   13006:	4832      	ldr	r0, [pc, #200]	; (130d0 <usage_fault.constprop.0+0x120>)
   13008:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1300c:	2303      	movs	r3, #3
   1300e:	f842 3f10 	str.w	r3, [r2, #16]!
   13012:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13016:	f009 ff91 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   1301a:	46ad      	mov	sp, r5
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1301c:	4b2d      	ldr	r3, [pc, #180]	; (130d4 <usage_fault.constprop.0+0x124>)
   1301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13020:	0318      	lsls	r0, r3, #12
   13022:	d50e      	bpl.n	13042 <usage_fault.constprop.0+0x92>
		PR_FAULT_INFO("  No coprocessor instructions");
   13024:	466d      	mov	r5, sp
   13026:	b088      	sub	sp, #32
   13028:	466a      	mov	r2, sp
   1302a:	4b2d      	ldr	r3, [pc, #180]	; (130e0 <usage_fault.constprop.0+0x130>)
   1302c:	4828      	ldr	r0, [pc, #160]	; (130d0 <usage_fault.constprop.0+0x120>)
   1302e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13032:	2303      	movs	r3, #3
   13034:	f842 3f10 	str.w	r3, [r2, #16]!
   13038:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1303c:	f009 ff7e 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   13040:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13042:	4b24      	ldr	r3, [pc, #144]	; (130d4 <usage_fault.constprop.0+0x124>)
   13044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13046:	0359      	lsls	r1, r3, #13
   13048:	d50e      	bpl.n	13068 <usage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1304a:	466d      	mov	r5, sp
   1304c:	b088      	sub	sp, #32
   1304e:	466a      	mov	r2, sp
   13050:	4b24      	ldr	r3, [pc, #144]	; (130e4 <usage_fault.constprop.0+0x134>)
   13052:	481f      	ldr	r0, [pc, #124]	; (130d0 <usage_fault.constprop.0+0x120>)
   13054:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13058:	2303      	movs	r3, #3
   1305a:	f842 3f10 	str.w	r3, [r2, #16]!
   1305e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13062:	f009 ff6b 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   13066:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13068:	4b1a      	ldr	r3, [pc, #104]	; (130d4 <usage_fault.constprop.0+0x124>)
   1306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1306c:	039a      	lsls	r2, r3, #14
   1306e:	d50e      	bpl.n	1308e <usage_fault.constprop.0+0xde>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13070:	466d      	mov	r5, sp
   13072:	b088      	sub	sp, #32
   13074:	466a      	mov	r2, sp
   13076:	4b1c      	ldr	r3, [pc, #112]	; (130e8 <usage_fault.constprop.0+0x138>)
   13078:	4815      	ldr	r0, [pc, #84]	; (130d0 <usage_fault.constprop.0+0x120>)
   1307a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1307e:	2303      	movs	r3, #3
   13080:	f842 3f10 	str.w	r3, [r2, #16]!
   13084:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13088:	f009 ff58 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   1308c:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1308e:	4b11      	ldr	r3, [pc, #68]	; (130d4 <usage_fault.constprop.0+0x124>)
   13090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13092:	03db      	lsls	r3, r3, #15
   13094:	d50e      	bpl.n	130b4 <usage_fault.constprop.0+0x104>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13096:	466d      	mov	r5, sp
   13098:	b088      	sub	sp, #32
   1309a:	466a      	mov	r2, sp
   1309c:	4b13      	ldr	r3, [pc, #76]	; (130ec <usage_fault.constprop.0+0x13c>)
   1309e:	480c      	ldr	r0, [pc, #48]	; (130d0 <usage_fault.constprop.0+0x120>)
   130a0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   130a4:	2303      	movs	r3, #3
   130a6:	f842 3f10 	str.w	r3, [r2, #16]!
   130aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   130ae:	f009 ff45 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   130b2:	46ad      	mov	sp, r5
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   130b4:	4a07      	ldr	r2, [pc, #28]	; (130d4 <usage_fault.constprop.0+0x124>)
   130b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   130b8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   130bc:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   130c0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   130c2:	6293      	str	r3, [r2, #40]	; 0x28
}
   130c4:	46bd      	mov	sp, r7
   130c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   130c8:	0001f47a 	.word	0x0001f47a
   130cc:	0001f75f 	.word	0x0001f75f
   130d0:	0001e9d8 	.word	0x0001e9d8
   130d4:	e000ed00 	.word	0xe000ed00
   130d8:	0001f496 	.word	0x0001f496
   130dc:	0001f4ad 	.word	0x0001f4ad
   130e0:	0001f4cb 	.word	0x0001f4cb
   130e4:	0001f4ed 	.word	0x0001f4ed
   130e8:	0001f516 	.word	0x0001f516
   130ec:	0001f534 	.word	0x0001f534

000130f0 <mem_manage_fault>:
{
   130f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f4:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
   130f6:	466e      	mov	r6, sp
   130f8:	b088      	sub	sp, #32
{
   130fa:	4615      	mov	r5, r2
   130fc:	4680      	mov	r8, r0
   130fe:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13100:	466a      	mov	r2, sp
   13102:	4b5a      	ldr	r3, [pc, #360]	; (1326c <mem_manage_fault+0x17c>)
   13104:	4c5a      	ldr	r4, [pc, #360]	; (13270 <mem_manage_fault+0x180>)
   13106:	6153      	str	r3, [r2, #20]
   13108:	f04f 0a03 	mov.w	sl, #3
   1310c:	6194      	str	r4, [r2, #24]
   1310e:	4859      	ldr	r0, [pc, #356]	; (13274 <mem_manage_fault+0x184>)
   13110:	f842 af10 	str.w	sl, [r2, #16]!
   13114:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13118:	f009 ff10 	bl	1cf3c <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1311c:	4b56      	ldr	r3, [pc, #344]	; (13278 <mem_manage_fault+0x188>)
   1311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13120:	06db      	lsls	r3, r3, #27
   13122:	46b5      	mov	sp, r6
   13124:	d50c      	bpl.n	13140 <mem_manage_fault+0x50>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13126:	b088      	sub	sp, #32
   13128:	466a      	mov	r2, sp
   1312a:	4b54      	ldr	r3, [pc, #336]	; (1327c <mem_manage_fault+0x18c>)
   1312c:	4851      	ldr	r0, [pc, #324]	; (13274 <mem_manage_fault+0x184>)
   1312e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13132:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13136:	f842 af10 	str.w	sl, [r2, #16]!
   1313a:	f009 feff 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   1313e:	46b5      	mov	sp, r6
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13140:	4b4d      	ldr	r3, [pc, #308]	; (13278 <mem_manage_fault+0x188>)
   13142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13144:	071e      	lsls	r6, r3, #28
   13146:	d50e      	bpl.n	13166 <mem_manage_fault+0x76>
		PR_FAULT_INFO("  Unstacking error");
   13148:	466e      	mov	r6, sp
   1314a:	b088      	sub	sp, #32
   1314c:	466a      	mov	r2, sp
   1314e:	4b4c      	ldr	r3, [pc, #304]	; (13280 <mem_manage_fault+0x190>)
   13150:	4848      	ldr	r0, [pc, #288]	; (13274 <mem_manage_fault+0x184>)
   13152:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13156:	2303      	movs	r3, #3
   13158:	f842 3f10 	str.w	r3, [r2, #16]!
   1315c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13160:	f009 feec 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   13164:	46b5      	mov	sp, r6
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13166:	f8df b110 	ldr.w	fp, [pc, #272]	; 13278 <mem_manage_fault+0x188>
   1316a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   1316e:	0798      	lsls	r0, r3, #30
   13170:	d440      	bmi.n	131f4 <mem_manage_fault+0x104>
	uint32_t mmfar = -EINVAL;
   13172:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13176:	4b40      	ldr	r3, [pc, #256]	; (13278 <mem_manage_fault+0x188>)
   13178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1317a:	07da      	lsls	r2, r3, #31
   1317c:	d50e      	bpl.n	1319c <mem_manage_fault+0xac>
		PR_FAULT_INFO("  Instruction Access Violation");
   1317e:	46e9      	mov	r9, sp
   13180:	b088      	sub	sp, #32
   13182:	466a      	mov	r2, sp
   13184:	4b3f      	ldr	r3, [pc, #252]	; (13284 <mem_manage_fault+0x194>)
   13186:	483b      	ldr	r0, [pc, #236]	; (13274 <mem_manage_fault+0x184>)
   13188:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1318c:	2303      	movs	r3, #3
   1318e:	f842 3f10 	str.w	r3, [r2, #16]!
   13192:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13196:	f009 fed1 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   1319a:	46cd      	mov	sp, r9
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1319c:	4b36      	ldr	r3, [pc, #216]	; (13278 <mem_manage_fault+0x188>)
   1319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   131a0:	069b      	lsls	r3, r3, #26
   131a2:	d50e      	bpl.n	131c2 <mem_manage_fault+0xd2>
		PR_FAULT_INFO(
   131a4:	46e9      	mov	r9, sp
   131a6:	b088      	sub	sp, #32
   131a8:	466a      	mov	r2, sp
   131aa:	4b37      	ldr	r3, [pc, #220]	; (13288 <mem_manage_fault+0x198>)
   131ac:	4831      	ldr	r0, [pc, #196]	; (13274 <mem_manage_fault+0x184>)
   131ae:	e9c2 3405 	strd	r3, r4, [r2, #20]
   131b2:	2303      	movs	r3, #3
   131b4:	f842 3f10 	str.w	r3, [r2, #16]!
   131b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   131bc:	f009 febe 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   131c0:	46cd      	mov	sp, r9
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   131c2:	4c2d      	ldr	r4, [pc, #180]	; (13278 <mem_manage_fault+0x188>)
   131c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   131c6:	06d8      	lsls	r0, r3, #27
   131c8:	d442      	bmi.n	13250 <mem_manage_fault+0x160>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   131ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   131cc:	0799      	lsls	r1, r3, #30
   131ce:	d43f      	bmi.n	13250 <mem_manage_fault+0x160>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   131d0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   131d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   131d4:	4a28      	ldr	r2, [pc, #160]	; (13278 <mem_manage_fault+0x188>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   131d6:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   131d8:	bf42      	ittt	mi
   131da:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
   131dc:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
   131e0:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   131e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   131e4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   131e8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   131ea:	2300      	movs	r3, #0
   131ec:	702b      	strb	r3, [r5, #0]
}
   131ee:	46bd      	mov	sp, r7
   131f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		PR_FAULT_INFO("  Data Access Violation");
   131f4:	46ea      	mov	sl, sp
   131f6:	b088      	sub	sp, #32
   131f8:	466a      	mov	r2, sp
   131fa:	4b24      	ldr	r3, [pc, #144]	; (1328c <mem_manage_fault+0x19c>)
   131fc:	481d      	ldr	r0, [pc, #116]	; (13274 <mem_manage_fault+0x184>)
   131fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13202:	2303      	movs	r3, #3
   13204:	f842 3f10 	str.w	r3, [r2, #16]!
   13208:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1320c:	f009 fe96 	bl	1cf3c <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   13210:	f8db 6034 	ldr.w	r6, [fp, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13214:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   13218:	0619      	lsls	r1, r3, #24
   1321a:	46d5      	mov	sp, sl
   1321c:	d5a9      	bpl.n	13172 <mem_manage_fault+0x82>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1321e:	b088      	sub	sp, #32
   13220:	466a      	mov	r2, sp
   13222:	4b1b      	ldr	r3, [pc, #108]	; (13290 <mem_manage_fault+0x1a0>)
   13224:	61d6      	str	r6, [r2, #28]
   13226:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1322a:	2304      	movs	r3, #4
   1322c:	f842 3f10 	str.w	r3, [r2, #16]!
   13230:	4810      	ldr	r0, [pc, #64]	; (13274 <mem_manage_fault+0x184>)
   13232:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13236:	f009 fe81 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   1323a:	46d5      	mov	sp, sl
			if (from_hard_fault != 0) {
   1323c:	f1b9 0f00 	cmp.w	r9, #0
   13240:	d099      	beq.n	13176 <mem_manage_fault+0x86>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13242:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   13246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1324a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
   1324e:	e792      	b.n	13176 <mem_manage_fault+0x86>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13250:	6863      	ldr	r3, [r4, #4]
   13252:	051a      	lsls	r2, r3, #20
   13254:	d5bc      	bpl.n	131d0 <mem_manage_fault+0xe0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13256:	4641      	mov	r1, r8
   13258:	4630      	mov	r0, r6
   1325a:	f7ff fd95 	bl	12d88 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1325e:	2800      	cmp	r0, #0
   13260:	d0b6      	beq.n	131d0 <mem_manage_fault+0xe0>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13262:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13266:	2002      	movs	r0, #2
   13268:	e7b3      	b.n	131d2 <mem_manage_fault+0xe2>
   1326a:	bf00      	nop
   1326c:	0001f563 	.word	0x0001f563
   13270:	0001f775 	.word	0x0001f775
   13274:	0001e9d8 	.word	0x0001e9d8
   13278:	e000ed00 	.word	0xe000ed00
   1327c:	0001f57d 	.word	0x0001f57d
   13280:	0001f3bf 	.word	0x0001f3bf
   13284:	0001f5ea 	.word	0x0001f5ea
   13288:	0001f447 	.word	0x0001f447
   1328c:	0001f5b4 	.word	0x0001f5b4
   13290:	0001f5d0 	.word	0x0001f5d0

00013294 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13298:	4b86      	ldr	r3, [pc, #536]	; (134b4 <z_arm_fault+0x220>)
{
   1329a:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1329c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   132a0:	af00      	add	r7, sp, #0
   132a2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   132a4:	f3c8 0408 	ubfx	r4, r8, #0, #9
   132a8:	2600      	movs	r6, #0
   132aa:	f386 8811 	msr	BASEPRI, r6
   132ae:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   132b2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   132b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   132ba:	d113      	bne.n	132e4 <z_arm_fault+0x50>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   132bc:	f002 030c 	and.w	r3, r2, #12
   132c0:	2b08      	cmp	r3, #8
   132c2:	d11e      	bne.n	13302 <z_arm_fault+0x6e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   132c4:	466d      	mov	r5, sp
   132c6:	b088      	sub	sp, #32
   132c8:	466a      	mov	r2, sp
   132ca:	4b7b      	ldr	r3, [pc, #492]	; (134b8 <z_arm_fault+0x224>)
   132cc:	6153      	str	r3, [r2, #20]
   132ce:	4b7b      	ldr	r3, [pc, #492]	; (134bc <z_arm_fault+0x228>)
   132d0:	6193      	str	r3, [r2, #24]
   132d2:	2303      	movs	r3, #3
   132d4:	f842 3f10 	str.w	r3, [r2, #16]!
   132d8:	4879      	ldr	r0, [pc, #484]	; (134c0 <z_arm_fault+0x22c>)
   132da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   132de:	f009 fe2d 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   132e2:	46ad      	mov	sp, r5
	*nested_exc = false;
   132e4:	2600      	movs	r6, #0
		return NULL;
   132e6:	4635      	mov	r5, r6
	*recoverable = false;
   132e8:	2300      	movs	r3, #0
   132ea:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   132ec:	1ee3      	subs	r3, r4, #3
   132ee:	2b09      	cmp	r3, #9
   132f0:	f200 80c1 	bhi.w	13476 <z_arm_fault+0x1e2>
   132f4:	e8df f003 	tbb	[pc, r3]
   132f8:	a3aaa70a 	.word	0xa3aaa70a
   132fc:	bfbfbfbf 	.word	0xbfbfbfbf
   13300:	adbf      	.short	0xadbf
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13302:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   13304:	bf4c      	ite	mi
   13306:	460d      	movmi	r5, r1
			*nested_exc = true;
   13308:	2601      	movpl	r6, #1
   1330a:	e7ed      	b.n	132e8 <z_arm_fault+0x54>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1330c:	46e8      	mov	r8, sp
   1330e:	b088      	sub	sp, #32
   13310:	466a      	mov	r2, sp
   13312:	4b6c      	ldr	r3, [pc, #432]	; (134c4 <z_arm_fault+0x230>)
   13314:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 134c8 <z_arm_fault+0x234>
   13318:	6153      	str	r3, [r2, #20]
   1331a:	f04f 0a03 	mov.w	sl, #3
   1331e:	f8c2 9018 	str.w	r9, [r2, #24]
   13322:	4867      	ldr	r0, [pc, #412]	; (134c0 <z_arm_fault+0x22c>)
   13324:	f842 af10 	str.w	sl, [r2, #16]!
   13328:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1332c:	f009 fe06 	bl	1cf3c <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   13330:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13332:	4c60      	ldr	r4, [pc, #384]	; (134b4 <z_arm_fault+0x220>)
	*recoverable = false;
   13334:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13338:	079a      	lsls	r2, r3, #30
   1333a:	46c5      	mov	sp, r8
   1333c:	d50d      	bpl.n	1335a <z_arm_fault+0xc6>
		PR_EXC("  Bus fault on vector table read");
   1333e:	b088      	sub	sp, #32
   13340:	466a      	mov	r2, sp
   13342:	4b62      	ldr	r3, [pc, #392]	; (134cc <z_arm_fault+0x238>)
		PR_EXC("  Debug event");
   13344:	e9c2 3905 	strd	r3, r9, [r2, #20]
   13348:	f842 af10 	str.w	sl, [r2, #16]!
   1334c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	PR_FAULT_INFO("***** %s %d) *****",
   13350:	485b      	ldr	r0, [pc, #364]	; (134c0 <z_arm_fault+0x22c>)
   13352:	f009 fdf3 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   13356:	46c5      	mov	sp, r8
}
   13358:	e08b      	b.n	13472 <z_arm_fault+0x1de>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1335a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1335c:	2b00      	cmp	r3, #0
   1335e:	da03      	bge.n	13368 <z_arm_fault+0xd4>
		PR_EXC("  Debug event");
   13360:	b088      	sub	sp, #32
   13362:	466a      	mov	r2, sp
   13364:	4b5a      	ldr	r3, [pc, #360]	; (134d0 <z_arm_fault+0x23c>)
   13366:	e7ed      	b.n	13344 <z_arm_fault+0xb0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1336a:	005b      	lsls	r3, r3, #1
   1336c:	f140 8081 	bpl.w	13472 <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   13370:	b088      	sub	sp, #32
   13372:	466a      	mov	r2, sp
   13374:	4b57      	ldr	r3, [pc, #348]	; (134d4 <z_arm_fault+0x240>)
   13376:	4852      	ldr	r0, [pc, #328]	; (134c0 <z_arm_fault+0x22c>)
   13378:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1337c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13380:	f842 af10 	str.w	sl, [r2, #16]!
   13384:	f009 fdda 	bl	1cf3c <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   13388:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1338a:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13390:	46c5      	mov	sp, r8
   13392:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13398:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1339c:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1339e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   133a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   133a6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   133a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   133ac:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   133b0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   133b4:	429a      	cmp	r2, r3
   133b6:	d008      	beq.n	133ca <z_arm_fault+0x136>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   133b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   133ba:	b2db      	uxtb	r3, r3
   133bc:	b393      	cbz	r3, 13424 <z_arm_fault+0x190>
			reason = mem_manage_fault(esf, 1, recoverable);
   133be:	1dfa      	adds	r2, r7, #7
   133c0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   133c2:	4628      	mov	r0, r5
   133c4:	f7ff fe94 	bl	130f0 <mem_manage_fault>
   133c8:	e03b      	b.n	13442 <z_arm_fault+0x1ae>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   133ca:	b088      	sub	sp, #32
   133cc:	682b      	ldr	r3, [r5, #0]
   133ce:	466a      	mov	r2, sp
   133d0:	4941      	ldr	r1, [pc, #260]	; (134d8 <z_arm_fault+0x244>)
   133d2:	61d3      	str	r3, [r2, #28]
   133d4:	2304      	movs	r3, #4
   133d6:	e9c2 1905 	strd	r1, r9, [r2, #20]
   133da:	4839      	ldr	r0, [pc, #228]	; (134c0 <z_arm_fault+0x22c>)
   133dc:	f842 3f10 	str.w	r3, [r2, #16]!
   133e0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   133e4:	f009 fdaa 	bl	1cf3c <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   133e8:	682c      	ldr	r4, [r5, #0]
   133ea:	46c5      	mov	sp, r8
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   133ec:	79fb      	ldrb	r3, [r7, #7]
   133ee:	b9ab      	cbnz	r3, 1341c <z_arm_fault+0x188>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   133f0:	2220      	movs	r2, #32
   133f2:	4629      	mov	r1, r5
   133f4:	f107 0008 	add.w	r0, r7, #8
   133f8:	f009 fdf8 	bl	1cfec <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   133fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   133fe:	2e00      	cmp	r6, #0
   13400:	d052      	beq.n	134a8 <z_arm_fault+0x214>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13402:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13406:	b922      	cbnz	r2, 13412 <z_arm_fault+0x17e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13408:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1340c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13410:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13412:	f107 0108 	add.w	r1, r7, #8
   13416:	4620      	mov	r0, r4
   13418:	f7ff fb60 	bl	12adc <z_arm_fatal_error>
}
   1341c:	3728      	adds	r7, #40	; 0x28
   1341e:	46bd      	mov	sp, r7
   13420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   13424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13426:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1342a:	d004      	beq.n	13436 <z_arm_fault+0x1a2>
			reason = bus_fault(esf, 1, recoverable);
   1342c:	1df9      	adds	r1, r7, #7
   1342e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13430:	f7ff fd04 	bl	12e3c <bus_fault.constprop.0>
   13434:	e005      	b.n	13442 <z_arm_fault+0x1ae>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   13436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1343c:	d319      	bcc.n	13472 <z_arm_fault+0x1de>
			reason = usage_fault(esf);
   1343e:	f7ff fdb7 	bl	12fb0 <usage_fault.constprop.0>
   13442:	4604      	mov	r4, r0
   13444:	e7d2      	b.n	133ec <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   13446:	1dfa      	adds	r2, r7, #7
   13448:	2100      	movs	r1, #0
   1344a:	e7ba      	b.n	133c2 <z_arm_fault+0x12e>
		reason = bus_fault(esf, 0, recoverable);
   1344c:	1df9      	adds	r1, r7, #7
   1344e:	2000      	movs	r0, #0
   13450:	e7ee      	b.n	13430 <z_arm_fault+0x19c>
	PR_FAULT_INFO(
   13452:	466c      	mov	r4, sp
   13454:	b088      	sub	sp, #32
   13456:	466a      	mov	r2, sp
   13458:	4b20      	ldr	r3, [pc, #128]	; (134dc <z_arm_fault+0x248>)
   1345a:	6153      	str	r3, [r2, #20]
   1345c:	4b20      	ldr	r3, [pc, #128]	; (134e0 <z_arm_fault+0x24c>)
   1345e:	6193      	str	r3, [r2, #24]
   13460:	2303      	movs	r3, #3
   13462:	f842 3f10 	str.w	r3, [r2, #16]!
   13466:	4816      	ldr	r0, [pc, #88]	; (134c0 <z_arm_fault+0x22c>)
   13468:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1346c:	f009 fd66 	bl	1cf3c <z_log_msg_static_create.constprop.0>
   13470:	46a5      	mov	sp, r4
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13472:	2400      	movs	r4, #0
   13474:	e7ba      	b.n	133ec <z_arm_fault+0x158>
	PR_FAULT_INFO("***** %s %d) *****",
   13476:	4a1b      	ldr	r2, [pc, #108]	; (134e4 <z_arm_fault+0x250>)
   13478:	4b1b      	ldr	r3, [pc, #108]	; (134e8 <z_arm_fault+0x254>)
   1347a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1347e:	46e8      	mov	r8, sp
   13480:	b08a      	sub	sp, #40	; 0x28
   13482:	bf18      	it	ne
   13484:	4613      	movne	r3, r2
   13486:	466a      	mov	r2, sp
   13488:	4918      	ldr	r1, [pc, #96]	; (134ec <z_arm_fault+0x258>)
   1348a:	6151      	str	r1, [r2, #20]
   1348c:	4918      	ldr	r1, [pc, #96]	; (134f0 <z_arm_fault+0x25c>)
   1348e:	e9c2 1306 	strd	r1, r3, [r2, #24]
   13492:	f240 3301 	movw	r3, #769	; 0x301
   13496:	8493      	strh	r3, [r2, #36]	; 0x24
   13498:	3c10      	subs	r4, #16
   1349a:	4b16      	ldr	r3, [pc, #88]	; (134f4 <z_arm_fault+0x260>)
   1349c:	6214      	str	r4, [r2, #32]
   1349e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   134a2:	f842 3f10 	str.w	r3, [r2, #16]!
   134a6:	e753      	b.n	13350 <z_arm_fault+0xbc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   134a8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   134ac:	f023 0301 	bic.w	r3, r3, #1
   134b0:	e7ae      	b.n	13410 <z_arm_fault+0x17c>
   134b2:	bf00      	nop
   134b4:	e000ed00 	.word	0xe000ed00
   134b8:	0001f63b 	.word	0x0001f63b
   134bc:	0001f791 	.word	0x0001f791
   134c0:	0001e9d8 	.word	0x0001e9d8
   134c4:	0001f66a 	.word	0x0001f66a
   134c8:	0001f786 	.word	0x0001f786
   134cc:	0001f685 	.word	0x0001f685
   134d0:	0001f6aa 	.word	0x0001f6aa
   134d4:	0001f6bc 	.word	0x0001f6bc
   134d8:	0001f6df 	.word	0x0001f6df
   134dc:	0001f6ff 	.word	0x0001f6ff
   134e0:	0001f751 	.word	0x0001f751
   134e4:	0001f622 	.word	0x0001f622
   134e8:	0001f60d 	.word	0x0001f60d
   134ec:	0001f727 	.word	0x0001f727
   134f0:	0001f73e 	.word	0x0001f73e
   134f4:	01000005 	.word	0x01000005

000134f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   134f8:	4a02      	ldr	r2, [pc, #8]	; (13504 <z_arm_fault_init+0xc>)
   134fa:	6953      	ldr	r3, [r2, #20]
   134fc:	f043 0310 	orr.w	r3, r3, #16
   13500:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   13502:	4770      	bx	lr
   13504:	e000ed00 	.word	0xe000ed00

00013508 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13508:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1350c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13510:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13512:	4672      	mov	r2, lr
	bl z_arm_fault
   13514:	f7ff febe 	bl	13294 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13518:	bd01      	pop	{r0, pc}
   1351a:	bf00      	nop

0001351c <z_arm_interrupt_init>:
   1351c:	4804      	ldr	r0, [pc, #16]	; (13530 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1351e:	2300      	movs	r3, #0
   13520:	2140      	movs	r1, #64	; 0x40
   13522:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13524:	3301      	adds	r3, #1
   13526:	2b30      	cmp	r3, #48	; 0x30
   13528:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1352c:	d1f9      	bne.n	13522 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1352e:	4770      	bx	lr
   13530:	e000e100 	.word	0xe000e100

00013534 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13534:	2000      	movs	r0, #0
    msr CONTROL, r0
   13536:	f380 8814 	msr	CONTROL, r0
    isb
   1353a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1353e:	f7fe faaf 	bl	11aa0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13542:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13544:	490d      	ldr	r1, [pc, #52]	; (1357c <__start+0x48>)
    str r0, [r1]
   13546:	6008      	str	r0, [r1, #0]
    dsb
   13548:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1354c:	480c      	ldr	r0, [pc, #48]	; (13580 <__start+0x4c>)
    msr msp, r0
   1354e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13552:	f000 f82b 	bl	135ac <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13556:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13558:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1355c:	4809      	ldr	r0, [pc, #36]	; (13584 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1355e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   13562:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13564:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13568:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1356c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1356e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13570:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13574:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13578:	f7ff fb7a 	bl	12c70 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1357c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13580:	20005d80 	.word	0x20005d80
    ldr r0, =z_interrupt_stacks
   13584:	20004bc0 	.word	0x20004bc0

00013588 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13588:	4907      	ldr	r1, [pc, #28]	; (135a8 <z_arm_clear_arm_mpu_config+0x20>)
   1358a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1358e:	2300      	movs	r3, #0
	int num_regions =
   13590:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   13594:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   13596:	4293      	cmp	r3, r2
   13598:	db00      	blt.n	1359c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1359a:	4770      	bx	lr
  MPU->RNR = rnr;
   1359c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   135a0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   135a4:	3301      	adds	r3, #1
   135a6:	e7f6      	b.n	13596 <z_arm_clear_arm_mpu_config+0xe>
   135a8:	e000ed00 	.word	0xe000ed00

000135ac <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   135ac:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   135ae:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   135b0:	2300      	movs	r3, #0
   135b2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   135b6:	f7ff ffe7 	bl	13588 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   135ba:	4b14      	ldr	r3, [pc, #80]	; (1360c <z_arm_init_arch_hw_at_boot+0x60>)
   135bc:	f04f 32ff 	mov.w	r2, #4294967295
   135c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   135c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   135c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   135cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   135d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   135d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   135d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   135dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   135e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   135e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   135e8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   135ec:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   135f0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   135f4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   135f8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   135fc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   13600:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13606:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1360a:	bd08      	pop	{r3, pc}
   1360c:	e000e100 	.word	0xe000e100

00013610 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   13610:	4b08      	ldr	r3, [pc, #32]	; (13634 <z_impl_k_thread_abort+0x24>)
   13612:	689b      	ldr	r3, [r3, #8]
   13614:	4283      	cmp	r3, r0
   13616:	d10b      	bne.n	13630 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13618:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1361c:	b143      	cbz	r3, 13630 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1361e:	4b06      	ldr	r3, [pc, #24]	; (13638 <z_impl_k_thread_abort+0x28>)
   13620:	685a      	ldr	r2, [r3, #4]
   13622:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13626:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1362a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1362e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   13630:	f005 be04 	b.w	1923c <z_thread_abort>
   13634:	200028f0 	.word	0x200028f0
   13638:	e000ed00 	.word	0xe000ed00

0001363c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1363c:	4b02      	ldr	r3, [pc, #8]	; (13648 <z_arm_configure_static_mpu_regions+0xc>)
   1363e:	4a03      	ldr	r2, [pc, #12]	; (1364c <z_arm_configure_static_mpu_regions+0x10>)
   13640:	4803      	ldr	r0, [pc, #12]	; (13650 <z_arm_configure_static_mpu_regions+0x14>)
   13642:	2101      	movs	r1, #1
   13644:	f000 b89a 	b.w	1377c <arm_core_mpu_configure_static_mpu_regions>
   13648:	20040000 	.word	0x20040000
   1364c:	20000000 	.word	0x20000000
   13650:	0001eb60 	.word	0x0001eb60

00013654 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13654:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13656:	4b05      	ldr	r3, [pc, #20]	; (1366c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   13658:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1365a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1365c:	4a04      	ldr	r2, [pc, #16]	; (13670 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1365e:	2140      	movs	r1, #64	; 0x40
   13660:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13664:	4618      	mov	r0, r3
   13666:	2101      	movs	r1, #1
   13668:	f000 b892 	b.w	13790 <arm_core_mpu_configure_dynamic_mpu_regions>
   1366c:	2000270c 	.word	0x2000270c
   13670:	150b0000 	.word	0x150b0000

00013674 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13678:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 13738 <mpu_configure_regions+0xc4>
   1367c:	469c      	mov	ip, r3
   1367e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   13680:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   13682:	2300      	movs	r3, #0
   13684:	428b      	cmp	r3, r1
   13686:	da1c      	bge.n	136c2 <mpu_configure_regions+0x4e>
		if (regions[i].size == 0U) {
   13688:	6844      	ldr	r4, [r0, #4]
   1368a:	2c00      	cmp	r4, #0
   1368c:	d051      	beq.n	13732 <mpu_configure_regions+0xbe>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1368e:	f1bc 0f00 	cmp.w	ip, #0
   13692:	d01f      	beq.n	136d4 <mpu_configure_regions+0x60>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13694:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13696:	4234      	tst	r4, r6
   13698:	d017      	beq.n	136ca <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1369a:	466c      	mov	r4, sp
   1369c:	b088      	sub	sp, #32
   1369e:	466a      	mov	r2, sp
   136a0:	4926      	ldr	r1, [pc, #152]	; (1373c <mpu_configure_regions+0xc8>)
   136a2:	6151      	str	r1, [r2, #20]
   136a4:	4926      	ldr	r1, [pc, #152]	; (13740 <mpu_configure_regions+0xcc>)
   136a6:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   136aa:	2304      	movs	r3, #4
   136ac:	f842 3f10 	str.w	r3, [r2, #16]!
   136b0:	4824      	ldr	r0, [pc, #144]	; (13744 <mpu_configure_regions+0xd0>)
   136b2:	2300      	movs	r3, #0
   136b4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   136b8:	f7fe fc86 	bl	11fc8 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   136bc:	f06f 0515 	mvn.w	r5, #21
   136c0:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   136c2:	4628      	mov	r0, r5
   136c4:	46bd      	mov	sp, r7
   136c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   136ca:	2c1f      	cmp	r4, #31
   136cc:	d9e5      	bls.n	1369a <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   136ce:	6802      	ldr	r2, [r0, #0]
		&&
   136d0:	4216      	tst	r6, r2
   136d2:	d1e2      	bne.n	1369a <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   136d4:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   136d6:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   136d8:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   136da:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   136de:	d916      	bls.n	1370e <mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
   136e0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   136e4:	d815      	bhi.n	13712 <mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   136e6:	3c01      	subs	r4, #1
   136e8:	fab4 f484 	clz	r4, r4
   136ec:	f1c4 041f 	rsb	r4, r4, #31
   136f0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   136f2:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   136f6:	ea46 0604 	orr.w	r6, r6, r4
   136fa:	d90c      	bls.n	13716 <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   136fc:	466c      	mov	r4, sp
   136fe:	b088      	sub	sp, #32
   13700:	466a      	mov	r2, sp
   13702:	4b11      	ldr	r3, [pc, #68]	; (13748 <mpu_configure_regions+0xd4>)
   13704:	6153      	str	r3, [r2, #20]
   13706:	4b11      	ldr	r3, [pc, #68]	; (1374c <mpu_configure_regions+0xd8>)
   13708:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1370c:	e7cd      	b.n	136aa <mpu_configure_regions+0x36>
		return REGION_32B;
   1370e:	2408      	movs	r4, #8
   13710:	e7ef      	b.n	136f2 <mpu_configure_regions+0x7e>
		return REGION_4G;
   13712:	243e      	movs	r4, #62	; 0x3e
   13714:	e7ed      	b.n	136f2 <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13716:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   1371a:	432a      	orrs	r2, r5
   1371c:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13720:	f046 0601 	orr.w	r6, r6, #1
   13724:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13728:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   1372c:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1372e:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   13732:	3301      	adds	r3, #1
   13734:	300c      	adds	r0, #12
   13736:	e7a5      	b.n	13684 <mpu_configure_regions+0x10>
   13738:	e000ed00 	.word	0xe000ed00
   1373c:	0001f79d 	.word	0x0001f79d
   13740:	0001f807 	.word	0x0001f807
   13744:	0001e9c8 	.word	0x0001e9c8
   13748:	0001f7c4 	.word	0x0001f7c4
   1374c:	0001f7ee 	.word	0x0001f7ee

00013750 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13750:	4b04      	ldr	r3, [pc, #16]	; (13764 <arm_core_mpu_enable+0x14>)
   13752:	2205      	movs	r2, #5
   13754:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13758:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1375c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13760:	4770      	bx	lr
   13762:	bf00      	nop
   13764:	e000ed00 	.word	0xe000ed00

00013768 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13768:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1376c:	4b02      	ldr	r3, [pc, #8]	; (13778 <arm_core_mpu_disable+0x10>)
   1376e:	2200      	movs	r2, #0
   13770:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13774:	4770      	bx	lr
   13776:	bf00      	nop
   13778:	e000ed00 	.word	0xe000ed00

0001377c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1377c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1377e:	4c03      	ldr	r4, [pc, #12]	; (1378c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13780:	2301      	movs	r3, #1
   13782:	7822      	ldrb	r2, [r4, #0]
   13784:	f7ff ff76 	bl	13674 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13788:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1378a:	bd10      	pop	{r4, pc}
   1378c:	20003410 	.word	0x20003410

00013790 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   13790:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13792:	4a09      	ldr	r2, [pc, #36]	; (137b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13794:	2300      	movs	r3, #0
   13796:	7812      	ldrb	r2, [r2, #0]
   13798:	f7ff ff6c 	bl	13674 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1379c:	f110 0f16 	cmn.w	r0, #22
   137a0:	d003      	beq.n	137aa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   137a2:	4b06      	ldr	r3, [pc, #24]	; (137bc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   137a4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   137a6:	2807      	cmp	r0, #7
   137a8:	dd00      	ble.n	137ac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   137aa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   137ac:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   137b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   137b4:	3001      	adds	r0, #1
   137b6:	e7f6      	b.n	137a6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   137b8:	20003410 	.word	0x20003410
   137bc:	e000ed00 	.word	0xe000ed00

000137c0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   137c0:	4914      	ldr	r1, [pc, #80]	; (13814 <z_arm_mpu_init+0x54>)
   137c2:	6808      	ldr	r0, [r1, #0]
   137c4:	2808      	cmp	r0, #8
{
   137c6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   137c8:	d821      	bhi.n	1380e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   137ca:	f7ff ffcd 	bl	13768 <arm_core_mpu_disable>
   137ce:	4c12      	ldr	r4, [pc, #72]	; (13818 <z_arm_mpu_init+0x58>)
   137d0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   137d2:	2200      	movs	r2, #0
   137d4:	4290      	cmp	r0, r2
   137d6:	f101 010c 	add.w	r1, r1, #12
   137da:	d105      	bne.n	137e8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   137dc:	4b0f      	ldr	r3, [pc, #60]	; (1381c <z_arm_mpu_init+0x5c>)
   137de:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   137e0:	f7ff ffb6 	bl	13750 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   137e4:	2000      	movs	r0, #0
}
   137e6:	bd10      	pop	{r4, pc}
   137e8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   137ec:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   137f0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   137f4:	4313      	orrs	r3, r2
   137f6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   137fa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   137fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13802:	f043 0301 	orr.w	r3, r3, #1
   13806:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1380a:	3201      	adds	r2, #1
   1380c:	e7e2      	b.n	137d4 <z_arm_mpu_init+0x14>
		return -1;
   1380e:	f04f 30ff 	mov.w	r0, #4294967295
   13812:	e7e8      	b.n	137e6 <z_arm_mpu_init+0x26>
   13814:	0001eb6c 	.word	0x0001eb6c
   13818:	e000ed00 	.word	0xe000ed00
   1381c:	20003410 	.word	0x20003410

00013820 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   13820:	4b01      	ldr	r3, [pc, #4]	; (13828 <__stdout_hook_install+0x8>)
   13822:	6018      	str	r0, [r3, #0]
}
   13824:	4770      	bx	lr
   13826:	bf00      	nop
   13828:	2000037c 	.word	0x2000037c

0001382c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   1382c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1382e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13832:	f3ef 8011 	mrs	r0, BASEPRI
   13836:	f383 8812 	msr	BASEPRI_MAX, r3
   1383a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1383e:	4a11      	ldr	r2, [pc, #68]	; (13884 <nordicsemi_nrf52_init+0x58>)
   13840:	2301      	movs	r3, #1
   13842:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1384a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1384e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   13852:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   13856:	2c08      	cmp	r4, #8
   13858:	d108      	bne.n	1386c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1385a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   1385e:	2905      	cmp	r1, #5
   13860:	d804      	bhi.n	1386c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   13862:	4c09      	ldr	r4, [pc, #36]	; (13888 <nordicsemi_nrf52_init+0x5c>)
   13864:	5c61      	ldrb	r1, [r4, r1]
   13866:	b109      	cbz	r1, 1386c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   13868:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1386c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13870:	2201      	movs	r2, #1
   13872:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   13876:	f380 8811 	msr	BASEPRI, r0
   1387a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1387e:	2000      	movs	r0, #0
   13880:	bd10      	pop	{r4, pc}
   13882:	bf00      	nop
   13884:	4001e000 	.word	0x4001e000
   13888:	0001f82c 	.word	0x0001f82c

0001388c <sys_arch_reboot>:
    *p_gpregret = val;
   1388c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13890:	b2c0      	uxtb	r0, r0
   13892:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13896:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1389a:	4905      	ldr	r1, [pc, #20]	; (138b0 <sys_arch_reboot+0x24>)
   1389c:	4b05      	ldr	r3, [pc, #20]	; (138b4 <sys_arch_reboot+0x28>)
   1389e:	68ca      	ldr	r2, [r1, #12]
   138a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   138a4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   138a6:	60cb      	str	r3, [r1, #12]
   138a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   138ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   138ae:	e7fd      	b.n	138ac <sys_arch_reboot+0x20>
   138b0:	e000ed00 	.word	0xe000ed00
   138b4:	05fa0004 	.word	0x05fa0004

000138b8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   138b8:	b120      	cbz	r0, 138c4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   138ba:	4b03      	ldr	r3, [pc, #12]	; (138c8 <arch_busy_wait+0x10>)
   138bc:	0180      	lsls	r0, r0, #6
   138be:	f043 0301 	orr.w	r3, r3, #1
   138c2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   138c4:	4770      	bx	lr
   138c6:	bf00      	nop
   138c8:	0001ea80 	.word	0x0001ea80

000138cc <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   138cc:	4b0e      	ldr	r3, [pc, #56]	; (13908 <bt_hex+0x3c>)
   138ce:	2940      	cmp	r1, #64	; 0x40
{
   138d0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   138d2:	bf28      	it	cs
   138d4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   138d6:	4c0d      	ldr	r4, [pc, #52]	; (1390c <bt_hex+0x40>)
   138d8:	1846      	adds	r6, r0, r1
   138da:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   138dc:	42b0      	cmp	r0, r6
   138de:	f103 0302 	add.w	r3, r3, #2
   138e2:	d104      	bne.n	138ee <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   138e4:	2300      	movs	r3, #0
   138e6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   138ea:	4807      	ldr	r0, [pc, #28]	; (13908 <bt_hex+0x3c>)
   138ec:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   138ee:	7802      	ldrb	r2, [r0, #0]
   138f0:	0912      	lsrs	r2, r2, #4
   138f2:	5ca2      	ldrb	r2, [r4, r2]
   138f4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   138f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   138fc:	f002 020f 	and.w	r2, r2, #15
   13900:	5ca2      	ldrb	r2, [r4, r2]
   13902:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   13906:	e7e9      	b.n	138dc <bt_hex+0x10>
   13908:	2000342f 	.word	0x2000342f
   1390c:	0001f849 	.word	0x0001f849

00013910 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   13910:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   13912:	7803      	ldrb	r3, [r0, #0]
   13914:	b08b      	sub	sp, #44	; 0x2c
   13916:	4604      	mov	r4, r0
   13918:	ad07      	add	r5, sp, #28
   1391a:	2b03      	cmp	r3, #3
   1391c:	d821      	bhi.n	13962 <bt_addr_le_str+0x52>
   1391e:	e8df f003 	tbb	[pc, r3]
   13922:	1a02      	.short	0x1a02
   13924:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   13926:	4912      	ldr	r1, [pc, #72]	; (13970 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   13928:	4628      	mov	r0, r5
   1392a:	f009 fb0a 	bl	1cf42 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1392e:	9505      	str	r5, [sp, #20]
   13930:	7863      	ldrb	r3, [r4, #1]
   13932:	9304      	str	r3, [sp, #16]
   13934:	78a3      	ldrb	r3, [r4, #2]
   13936:	9303      	str	r3, [sp, #12]
   13938:	78e3      	ldrb	r3, [r4, #3]
   1393a:	9302      	str	r3, [sp, #8]
   1393c:	7923      	ldrb	r3, [r4, #4]
   1393e:	9301      	str	r3, [sp, #4]
   13940:	7963      	ldrb	r3, [r4, #5]
   13942:	9300      	str	r3, [sp, #0]
   13944:	79a3      	ldrb	r3, [r4, #6]
   13946:	4a0b      	ldr	r2, [pc, #44]	; (13974 <bt_addr_le_str+0x64>)
   13948:	480b      	ldr	r0, [pc, #44]	; (13978 <bt_addr_le_str+0x68>)
   1394a:	211e      	movs	r1, #30
   1394c:	f008 fd0a 	bl	1c364 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13950:	4809      	ldr	r0, [pc, #36]	; (13978 <bt_addr_le_str+0x68>)
   13952:	b00b      	add	sp, #44	; 0x2c
   13954:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   13956:	4909      	ldr	r1, [pc, #36]	; (1397c <bt_addr_le_str+0x6c>)
   13958:	e7e6      	b.n	13928 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   1395a:	4909      	ldr	r1, [pc, #36]	; (13980 <bt_addr_le_str+0x70>)
   1395c:	e7e4      	b.n	13928 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   1395e:	4909      	ldr	r1, [pc, #36]	; (13984 <bt_addr_le_str+0x74>)
   13960:	e7e2      	b.n	13928 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13962:	4a09      	ldr	r2, [pc, #36]	; (13988 <bt_addr_le_str+0x78>)
   13964:	210a      	movs	r1, #10
   13966:	4628      	mov	r0, r5
   13968:	f008 fcfc 	bl	1c364 <snprintk>
		break;
   1396c:	e7df      	b.n	1392e <bt_addr_le_str+0x1e>
   1396e:	bf00      	nop
   13970:	0001ef40 	.word	0x0001ef40
   13974:	0001ef62 	.word	0x0001ef62
   13978:	20003411 	.word	0x20003411
   1397c:	0001ef47 	.word	0x0001ef47
   13980:	0001ef4e 	.word	0x0001ef4e
   13984:	0001ef58 	.word	0x0001ef58
   13988:	0001fa57 	.word	0x0001fa57

0001398c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1398c:	b538      	push	{r3, r4, r5, lr}
   1398e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13990:	4805      	ldr	r0, [pc, #20]	; (139a8 <bt_buf_get_rx+0x1c>)
   13992:	f009 fcc0 	bl	1d316 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13996:	4604      	mov	r4, r0
   13998:	b120      	cbz	r0, 139a4 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1399a:	2100      	movs	r1, #0
   1399c:	300c      	adds	r0, #12
   1399e:	f009 fcc1 	bl	1d324 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   139a2:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   139a4:	4620      	mov	r0, r4
   139a6:	bd38      	pop	{r3, r4, r5, pc}
   139a8:	20000664 	.word	0x20000664

000139ac <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   139ac:	b510      	push	{r4, lr}
   139ae:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   139b0:	490a      	ldr	r1, [pc, #40]	; (139dc <bt_buf_get_cmd_complete+0x30>)
{
   139b2:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   139b4:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
   139b8:	b920      	cbnz	r0, 139c4 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   139ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   139be:	2001      	movs	r0, #1
   139c0:	f7ff bfe4 	b.w	1398c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   139c4:	f009 fce1 	bl	1d38a <net_buf_ref>
   139c8:	2301      	movs	r3, #1
		buf->len = 0U;
   139ca:	2100      	movs	r1, #0
   139cc:	7603      	strb	r3, [r0, #24]
   139ce:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   139d0:	4604      	mov	r4, r0
   139d2:	300c      	adds	r0, #12
   139d4:	f009 fca6 	bl	1d324 <net_buf_simple_reserve>
}
   139d8:	4620      	mov	r0, r4
   139da:	bd10      	pop	{r4, pc}
   139dc:	20000230 	.word	0x20000230

000139e0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   139e0:	b570      	push	{r4, r5, r6, lr}
   139e2:	4605      	mov	r5, r0
	switch (evt) {
   139e4:	3d0e      	subs	r5, #14
   139e6:	2d01      	cmp	r5, #1
{
   139e8:	460c      	mov	r4, r1
   139ea:	4610      	mov	r0, r2
   139ec:	4619      	mov	r1, r3
	switch (evt) {
   139ee:	d803      	bhi.n	139f8 <bt_buf_get_evt+0x18>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   139f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   139f4:	f7ff bfda 	b.w	139ac <bt_buf_get_cmd_complete>
		if (discardable) {
   139f8:	b164      	cbz	r4, 13a14 <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
   139fa:	4809      	ldr	r0, [pc, #36]	; (13a20 <bt_buf_get_evt+0x40>)
   139fc:	f009 fc8b 	bl	1d316 <net_buf_alloc_fixed>
			if (buf) {
   13a00:	4604      	mov	r4, r0
   13a02:	b128      	cbz	r0, 13a10 <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
   13a04:	2100      	movs	r1, #0
   13a06:	300c      	adds	r0, #12
   13a08:	f009 fc8c 	bl	1d324 <net_buf_simple_reserve>
   13a0c:	2301      	movs	r3, #1
   13a0e:	7623      	strb	r3, [r4, #24]
}
   13a10:	4620      	mov	r0, r4
   13a12:	bd70      	pop	{r4, r5, r6, pc}
   13a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13a18:	2001      	movs	r0, #1
   13a1a:	f7ff bfb7 	b.w	1398c <bt_buf_get_rx>
   13a1e:	bf00      	nop
   13a20:	2000060c 	.word	0x2000060c

00013a24 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   13a24:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   13a26:	4d0b      	ldr	r5, [pc, #44]	; (13a54 <ver_str+0x30>)
{
   13a28:	4606      	mov	r6, r0
	const char * const str[] = {
   13a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   13a2c:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   13a2e:	ac01      	add	r4, sp, #4
   13a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   13a3a:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   13a3c:	682b      	ldr	r3, [r5, #0]
   13a3e:	6023      	str	r3, [r4, #0]
		return str[ver];
   13a40:	bf9b      	ittet	ls
   13a42:	ab0e      	addls	r3, sp, #56	; 0x38
   13a44:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   13a48:	4803      	ldrhi	r0, [pc, #12]	; (13a58 <ver_str+0x34>)
		return str[ver];
   13a4a:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   13a4e:	b00e      	add	sp, #56	; 0x38
   13a50:	bd70      	pop	{r4, r5, r6, pc}
   13a52:	bf00      	nop
   13a54:	0001ea34 	.word	0x0001ea34
   13a58:	0001f85a 	.word	0x0001f85a

00013a5c <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   13a5c:	b5b0      	push	{r4, r5, r7, lr}
   13a5e:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   13a60:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   13a62:	af00      	add	r7, sp, #0
   13a64:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   13a66:	4629      	mov	r1, r5
   13a68:	68d8      	ldr	r0, [r3, #12]
   13a6a:	f7ff ff2f 	bl	138cc <bt_hex>
   13a6e:	b08c      	sub	sp, #48	; 0x30
   13a70:	466a      	mov	r2, sp
   13a72:	4b0a      	ldr	r3, [pc, #40]	; (13a9c <handle_event.part.0+0x40>)
   13a74:	6153      	str	r3, [r2, #20]
   13a76:	4b0a      	ldr	r3, [pc, #40]	; (13aa0 <handle_event.part.0+0x44>)
   13a78:	e9c2 3406 	strd	r3, r4, [r2, #24]
   13a7c:	f240 5303 	movw	r3, #1283	; 0x503
   13a80:	8513      	strh	r3, [r2, #40]	; 0x28
   13a82:	4b08      	ldr	r3, [pc, #32]	; (13aa4 <handle_event.part.0+0x48>)
   13a84:	e9c2 5008 	strd	r5, r0, [r2, #32]
   13a88:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   13a8c:	f842 3f10 	str.w	r3, [r2, #16]!
   13a90:	4805      	ldr	r0, [pc, #20]	; (13aa8 <handle_event.part.0+0x4c>)
   13a92:	f009 fae3 	bl	1d05c <z_log_msg_static_create.constprop.0>
}
   13a96:	46bd      	mov	sp, r7
   13a98:	bdb0      	pop	{r4, r5, r7, pc}
   13a9a:	bf00      	nop
   13a9c:	0001f862 	.word	0x0001f862
   13aa0:	0001fe91 	.word	0x0001fe91
   13aa4:	01000006 	.word	0x01000006
   13aa8:	0001e968 	.word	0x0001e968

00013aac <handle_event>:
{
   13aac:	b5b0      	push	{r4, r5, r7, lr}
   13aae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13ab2:	af00      	add	r7, sp, #0
   13ab4:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   13ab6:	4293      	cmp	r3, r2
   13ab8:	d103      	bne.n	13ac2 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   13aba:	4620      	mov	r0, r4
   13abc:	f7ff ffce 	bl	13a5c <handle_event.part.0>
}
   13ac0:	e01a      	b.n	13af8 <handle_event+0x4c>
		if (handler->event != event) {
   13ac2:	4610      	mov	r0, r2
   13ac4:	f810 5b08 	ldrb.w	r5, [r0], #8
   13ac8:	42a5      	cmp	r5, r4
   13aca:	d11b      	bne.n	13b04 <handle_event+0x58>
		if (buf->len < handler->min_len) {
   13acc:	8a0b      	ldrh	r3, [r1, #16]
   13ace:	7850      	ldrb	r0, [r2, #1]
   13ad0:	4298      	cmp	r0, r3
   13ad2:	d913      	bls.n	13afc <handle_event+0x50>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   13ad4:	466d      	mov	r5, sp
   13ad6:	b08a      	sub	sp, #40	; 0x28
   13ad8:	466a      	mov	r2, sp
   13ada:	490b      	ldr	r1, [pc, #44]	; (13b08 <handle_event+0x5c>)
   13adc:	6151      	str	r1, [r2, #20]
   13ade:	490b      	ldr	r1, [pc, #44]	; (13b0c <handle_event+0x60>)
   13ae0:	6214      	str	r4, [r2, #32]
   13ae2:	e9c2 1306 	strd	r1, r3, [r2, #24]
   13ae6:	2305      	movs	r3, #5
   13ae8:	f842 3f10 	str.w	r3, [r2, #16]!
   13aec:	4808      	ldr	r0, [pc, #32]	; (13b10 <handle_event+0x64>)
   13aee:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13af2:	f009 fab3 	bl	1d05c <z_log_msg_static_create.constprop.0>
   13af6:	46ad      	mov	sp, r5
}
   13af8:	46bd      	mov	sp, r7
   13afa:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   13afc:	6853      	ldr	r3, [r2, #4]
   13afe:	4608      	mov	r0, r1
   13b00:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   13b02:	e7f9      	b.n	13af8 <handle_event+0x4c>
   13b04:	4602      	mov	r2, r0
   13b06:	e7d6      	b.n	13ab6 <handle_event+0xa>
   13b08:	0001f888 	.word	0x0001f888
   13b0c:	0001fe7d 	.word	0x0001fe7d
   13b10:	0001e968 	.word	0x0001e968

00013b14 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   13b14:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13b16:	4834      	ldr	r0, [pc, #208]	; (13be8 <rx_work_handler+0xd4>)
{
   13b18:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13b1a:	f009 fc1d 	bl	1d358 <net_buf_slist_get>
	if (!buf) {
   13b1e:	4604      	mov	r4, r0
   13b20:	2800      	cmp	r0, #0
   13b22:	d04d      	beq.n	13bc0 <rx_work_handler+0xac>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13b24:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   13b26:	2b01      	cmp	r3, #1
   13b28:	d14c      	bne.n	13bc4 <rx_work_handler+0xb0>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13b2a:	8a03      	ldrh	r3, [r0, #16]
   13b2c:	2b01      	cmp	r3, #1
   13b2e:	d80c      	bhi.n	13b4a <rx_work_handler+0x36>
   13b30:	4a2e      	ldr	r2, [pc, #184]	; (13bec <rx_work_handler+0xd8>)
   13b32:	492f      	ldr	r1, [pc, #188]	; (13bf0 <rx_work_handler+0xdc>)
   13b34:	482f      	ldr	r0, [pc, #188]	; (13bf4 <rx_work_handler+0xe0>)
   13b36:	f640 136d 	movw	r3, #2413	; 0x96d
   13b3a:	f008 ff34 	bl	1c9a6 <assert_print>
   13b3e:	4040      	eors	r0, r0
   13b40:	f380 8811 	msr	BASEPRI, r0
   13b44:	f04f 0003 	mov.w	r0, #3
   13b48:	df02      	svc	2
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13b4a:	2102      	movs	r1, #2
   13b4c:	f104 000c 	add.w	r0, r4, #12
   13b50:	f009 fc3e 	bl	1d3d0 <net_buf_simple_pull_mem>
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   13b54:	7803      	ldrb	r3, [r0, #0]
   13b56:	3b0e      	subs	r3, #14
   13b58:	2b01      	cmp	r3, #1
   13b5a:	4605      	mov	r5, r0
   13b5c:	d80c      	bhi.n	13b78 <rx_work_handler+0x64>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13b5e:	4a23      	ldr	r2, [pc, #140]	; (13bec <rx_work_handler+0xd8>)
   13b60:	4925      	ldr	r1, [pc, #148]	; (13bf8 <rx_work_handler+0xe4>)
   13b62:	4824      	ldr	r0, [pc, #144]	; (13bf4 <rx_work_handler+0xe0>)
   13b64:	f640 1371 	movw	r3, #2417	; 0x971
   13b68:	f008 ff1d 	bl	1c9a6 <assert_print>
   13b6c:	4040      	eors	r0, r0
   13b6e:	f380 8811 	msr	BASEPRI, r0
   13b72:	f04f 0003 	mov.w	r0, #3
   13b76:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13b78:	4a20      	ldr	r2, [pc, #128]	; (13bfc <rx_work_handler+0xe8>)
   13b7a:	7828      	ldrb	r0, [r5, #0]
   13b7c:	2303      	movs	r3, #3
   13b7e:	4621      	mov	r1, r4
   13b80:	f7ff ff94 	bl	13aac <handle_event>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   13b84:	4620      	mov	r0, r4
   13b86:	f001 ff8b 	bl	15aa0 <net_buf_unref>
	return list->head;
   13b8a:	4b1d      	ldr	r3, [pc, #116]	; (13c00 <rx_work_handler+0xec>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   13b8c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   13b90:	b1b3      	cbz	r3, 13bc0 <rx_work_handler+0xac>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   13b92:	491c      	ldr	r1, [pc, #112]	; (13c04 <rx_work_handler+0xf0>)
   13b94:	481c      	ldr	r0, [pc, #112]	; (13c08 <rx_work_handler+0xf4>)
   13b96:	f00a fa19 	bl	1dfcc <k_work_submit_to_queue>
#endif
		if (err < 0) {
   13b9a:	2800      	cmp	r0, #0
   13b9c:	da10      	bge.n	13bc0 <rx_work_handler+0xac>
			LOG_ERR("Could not submit rx_work: %d", err);
   13b9e:	466c      	mov	r4, sp
   13ba0:	b088      	sub	sp, #32
   13ba2:	466a      	mov	r2, sp
   13ba4:	4b19      	ldr	r3, [pc, #100]	; (13c0c <rx_work_handler+0xf8>)
   13ba6:	6153      	str	r3, [r2, #20]
   13ba8:	4b19      	ldr	r3, [pc, #100]	; (13c10 <rx_work_handler+0xfc>)
   13baa:	e9c2 3006 	strd	r3, r0, [r2, #24]
   13bae:	2304      	movs	r3, #4
   13bb0:	f842 3f10 	str.w	r3, [r2, #16]!
   13bb4:	4817      	ldr	r0, [pc, #92]	; (13c14 <rx_work_handler+0x100>)
   13bb6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13bba:	f009 fa4f 	bl	1d05c <z_log_msg_static_create.constprop.0>
   13bbe:	46a5      	mov	sp, r4
		}
	}
}
   13bc0:	46bd      	mov	sp, r7
   13bc2:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   13bc4:	466d      	mov	r5, sp
   13bc6:	b088      	sub	sp, #32
   13bc8:	466a      	mov	r2, sp
   13bca:	4913      	ldr	r1, [pc, #76]	; (13c18 <rx_work_handler+0x104>)
   13bcc:	6151      	str	r1, [r2, #20]
   13bce:	4910      	ldr	r1, [pc, #64]	; (13c10 <rx_work_handler+0xfc>)
   13bd0:	4810      	ldr	r0, [pc, #64]	; (13c14 <rx_work_handler+0x100>)
	switch (bt_buf_get_type(buf)) {
   13bd2:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   13bd6:	2304      	movs	r3, #4
   13bd8:	f842 3f10 	str.w	r3, [r2, #16]!
   13bdc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13be0:	f009 fa3c 	bl	1d05c <z_log_msg_static_create.constprop.0>
   13be4:	46ad      	mov	sp, r5
   13be6:	e7cd      	b.n	13b84 <rx_work_handler+0x70>
   13be8:	2000032c 	.word	0x2000032c
   13bec:	0001f8ae 	.word	0x0001f8ae
   13bf0:	0001f8e2 	.word	0x0001f8e2
   13bf4:	0001f8fb 	.word	0x0001f8fb
   13bf8:	0001f918 	.word	0x0001f918
   13bfc:	0001ebec 	.word	0x0001ebec
   13c00:	20000230 	.word	0x20000230
   13c04:	20000394 	.word	0x20000394
   13c08:	20001af0 	.word	0x20001af0
   13c0c:	0001f95e 	.word	0x0001f95e
   13c10:	0001fe58 	.word	0x0001fe58
   13c14:	0001e968 	.word	0x0001e968
   13c18:	0001f946 	.word	0x0001f946

00013c1c <hci_le_meta_event>:
{
   13c1c:	b510      	push	{r4, lr}
   13c1e:	2101      	movs	r1, #1
   13c20:	4604      	mov	r4, r0
   13c22:	300c      	adds	r0, #12
   13c24:	f009 fbd4 	bl	1d3d0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13c28:	4621      	mov	r1, r4
   13c2a:	4a03      	ldr	r2, [pc, #12]	; (13c38 <hci_le_meta_event+0x1c>)
   13c2c:	7800      	ldrb	r0, [r0, #0]
}
   13c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13c32:	2301      	movs	r3, #1
   13c34:	f7ff bf3a 	b.w	13aac <handle_event>
   13c38:	0001ec04 	.word	0x0001ec04

00013c3c <hci_hardware_error>:
{
   13c3c:	b580      	push	{r7, lr}
   13c3e:	2101      	movs	r1, #1
   13c40:	af00      	add	r7, sp, #0
   13c42:	300c      	adds	r0, #12
   13c44:	f009 fbc4 	bl	1d3d0 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   13c48:	b088      	sub	sp, #32
   13c4a:	7803      	ldrb	r3, [r0, #0]
   13c4c:	466a      	mov	r2, sp
   13c4e:	4907      	ldr	r1, [pc, #28]	; (13c6c <hci_hardware_error+0x30>)
   13c50:	6151      	str	r1, [r2, #20]
   13c52:	4907      	ldr	r1, [pc, #28]	; (13c70 <hci_hardware_error+0x34>)
   13c54:	4807      	ldr	r0, [pc, #28]	; (13c74 <hci_hardware_error+0x38>)
   13c56:	e9c2 1306 	strd	r1, r3, [r2, #24]
   13c5a:	2304      	movs	r3, #4
   13c5c:	f842 3f10 	str.w	r3, [r2, #16]!
   13c60:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13c64:	f009 f9fa 	bl	1d05c <z_log_msg_static_create.constprop.0>
}
   13c68:	46bd      	mov	sp, r7
   13c6a:	bd80      	pop	{r7, pc}
   13c6c:	0001f97f 	.word	0x0001f97f
   13c70:	0001fe45 	.word	0x0001fe45
   13c74:	0001e968 	.word	0x0001e968

00013c78 <hci_cmd_done>:
{
   13c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c7c:	4680      	mov	r8, r0
   13c7e:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13c80:	7a90      	ldrb	r0, [r2, #10]
   13c82:	4d4e      	ldr	r5, [pc, #312]	; (13dbc <hci_cmd_done+0x144>)
{
   13c84:	460e      	mov	r6, r1
   13c86:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13c88:	f001 fe48 	bl	1591c <net_buf_pool_get>
   13c8c:	4285      	cmp	r5, r0
   13c8e:	d01a      	beq.n	13cc6 <hci_cmd_done+0x4e>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   13c90:	7aa4      	ldrb	r4, [r4, #10]
   13c92:	4620      	mov	r0, r4
   13c94:	f001 fe42 	bl	1591c <net_buf_pool_get>
   13c98:	466e      	mov	r6, sp
   13c9a:	b08c      	sub	sp, #48	; 0x30
   13c9c:	466a      	mov	r2, sp
   13c9e:	4b48      	ldr	r3, [pc, #288]	; (13dc0 <hci_cmd_done+0x148>)
   13ca0:	6153      	str	r3, [r2, #20]
   13ca2:	4b48      	ldr	r3, [pc, #288]	; (13dc4 <hci_cmd_done+0x14c>)
   13ca4:	6295      	str	r5, [r2, #40]	; 0x28
   13ca6:	e9c2 3806 	strd	r3, r8, [r2, #24]
   13caa:	2307      	movs	r3, #7
   13cac:	e9c2 4008 	strd	r4, r0, [r2, #32]
   13cb0:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   13cb4:	f842 3f10 	str.w	r3, [r2, #16]!
   13cb8:	4843      	ldr	r0, [pc, #268]	; (13dc8 <hci_cmd_done+0x150>)
   13cba:	f009 f9cf 	bl	1d05c <z_log_msg_static_create.constprop.0>
   13cbe:	46b5      	mov	sp, r6
}
   13cc0:	46bd      	mov	sp, r7
   13cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   13cc6:	4620      	mov	r0, r4
   13cc8:	f001 fe30 	bl	1592c <net_buf_id>
   13ccc:	4d3f      	ldr	r5, [pc, #252]	; (13dcc <hci_cmd_done+0x154>)
   13cce:	f04f 090c 	mov.w	r9, #12
   13cd2:	fb09 5000 	mla	r0, r9, r0, r5
   13cd6:	8843      	ldrh	r3, [r0, #2]
   13cd8:	4543      	cmp	r3, r8
   13cda:	d018      	beq.n	13d0e <hci_cmd_done+0x96>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   13cdc:	4620      	mov	r0, r4
   13cde:	f001 fe25 	bl	1592c <net_buf_id>
   13ce2:	fb09 5000 	mla	r0, r9, r0, r5
   13ce6:	466c      	mov	r4, sp
   13ce8:	b08a      	sub	sp, #40	; 0x28
   13cea:	8843      	ldrh	r3, [r0, #2]
   13cec:	466a      	mov	r2, sp
   13cee:	4938      	ldr	r1, [pc, #224]	; (13dd0 <hci_cmd_done+0x158>)
   13cf0:	6151      	str	r1, [r2, #20]
   13cf2:	4934      	ldr	r1, [pc, #208]	; (13dc4 <hci_cmd_done+0x14c>)
   13cf4:	6213      	str	r3, [r2, #32]
   13cf6:	2305      	movs	r3, #5
   13cf8:	e9c2 1806 	strd	r1, r8, [r2, #24]
   13cfc:	4832      	ldr	r0, [pc, #200]	; (13dc8 <hci_cmd_done+0x150>)
   13cfe:	f842 3f10 	str.w	r3, [r2, #16]!
   13d02:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   13d06:	f009 f9a9 	bl	1d05c <z_log_msg_static_create.constprop.0>
   13d0a:	46a5      	mov	sp, r4
		return;
   13d0c:	e7d8      	b.n	13cc0 <hci_cmd_done+0x48>
	if (bt_dev.sent_cmd) {
   13d0e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13dd4 <hci_cmd_done+0x15c>
   13d12:	f8d8 00f8 	ldr.w	r0, [r8, #248]	; 0xf8
   13d16:	b120      	cbz	r0, 13d22 <hci_cmd_done+0xaa>
		net_buf_unref(bt_dev.sent_cmd);
   13d18:	f001 fec2 	bl	15aa0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13d1c:	2300      	movs	r3, #0
   13d1e:	f8c8 30f8 	str.w	r3, [r8, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
   13d22:	4620      	mov	r0, r4
   13d24:	f001 fe02 	bl	1592c <net_buf_id>
   13d28:	f04f 080c 	mov.w	r8, #12
   13d2c:	fb08 5000 	mla	r0, r8, r0, r5
   13d30:	6843      	ldr	r3, [r0, #4]
   13d32:	b1eb      	cbz	r3, 13d70 <hci_cmd_done+0xf8>
   13d34:	b9e6      	cbnz	r6, 13d70 <hci_cmd_done+0xf8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13d36:	4620      	mov	r0, r4
   13d38:	f001 fdf8 	bl	1592c <net_buf_id>
   13d3c:	fb08 5000 	mla	r0, r8, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d40:	2201      	movs	r2, #1
   13d42:	6840      	ldr	r0, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   13d44:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   13d48:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d4a:	f001 0c1f 	and.w	ip, r1, #31
   13d4e:	fa02 f20c 	lsl.w	r2, r2, ip
	if (val) {
   13d52:	0949      	lsrs	r1, r1, #5
   13d54:	b328      	cbz	r0, 13da2 <hci_cmd_done+0x12a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13d56:	f3bf 8f5b 	dmb	ish
   13d5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13d5e:	e853 0f00 	ldrex	r0, [r3]
   13d62:	4310      	orrs	r0, r2
   13d64:	e843 0100 	strex	r1, r0, [r3]
   13d68:	2900      	cmp	r1, #0
   13d6a:	d1f8      	bne.n	13d5e <hci_cmd_done+0xe6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d6c:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   13d70:	4620      	mov	r0, r4
   13d72:	f001 fddb 	bl	1592c <net_buf_id>
   13d76:	f04f 080c 	mov.w	r8, #12
   13d7a:	fb08 5000 	mla	r0, r8, r0, r5
   13d7e:	6883      	ldr	r3, [r0, #8]
   13d80:	2b00      	cmp	r3, #0
   13d82:	d09d      	beq.n	13cc0 <hci_cmd_done+0x48>
		cmd(buf)->status = status;
   13d84:	4620      	mov	r0, r4
   13d86:	f001 fdd1 	bl	1592c <net_buf_id>
   13d8a:	fb08 f000 	mul.w	r0, r8, r0
   13d8e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13d90:	4620      	mov	r0, r4
   13d92:	f001 fdcb 	bl	1592c <net_buf_id>
   13d96:	fb08 5500 	mla	r5, r8, r0, r5
   13d9a:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   13d9c:	f004 fdb0 	bl	18900 <z_impl_k_sem_give>
}
   13da0:	e78e      	b.n	13cc0 <hci_cmd_done+0x48>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13da2:	43d2      	mvns	r2, r2
   13da4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13da8:	f3bf 8f5b 	dmb	ish
   13dac:	e853 0f00 	ldrex	r0, [r3]
   13db0:	4010      	ands	r0, r2
   13db2:	e843 0100 	strex	r1, r0, [r3]
   13db6:	2900      	cmp	r1, #0
   13db8:	d0d8      	beq.n	13d6c <hci_cmd_done+0xf4>
   13dba:	e7f7      	b.n	13dac <hci_cmd_done+0x134>
   13dbc:	20000638 	.word	0x20000638
   13dc0:	0001f9a5 	.word	0x0001f9a5
   13dc4:	0001fe9e 	.word	0x0001fe9e
   13dc8:	0001e968 	.word	0x0001e968
   13dcc:	20002718 	.word	0x20002718
   13dd0:	0001f9de 	.word	0x0001f9de
   13dd4:	20000230 	.word	0x20000230

00013dd8 <hci_cmd_status>:
{
   13dd8:	b538      	push	{r3, r4, r5, lr}
   13dda:	2104      	movs	r1, #4
   13ddc:	4604      	mov	r4, r0
   13dde:	300c      	adds	r0, #12
   13de0:	f009 faf6 	bl	1d3d0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13de4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13de6:	7801      	ldrb	r1, [r0, #0]
   13de8:	8840      	ldrh	r0, [r0, #2]
   13dea:	4622      	mov	r2, r4
   13dec:	f7ff ff44 	bl	13c78 <hci_cmd_done>
	if (ncmd) {
   13df0:	b125      	cbz	r5, 13dfc <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   13df2:	4803      	ldr	r0, [pc, #12]	; (13e00 <hci_cmd_status+0x28>)
}
   13df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13df8:	f004 bd82 	b.w	18900 <z_impl_k_sem_give>
   13dfc:	bd38      	pop	{r3, r4, r5, pc}
   13dfe:	bf00      	nop
   13e00:	20000310 	.word	0x20000310

00013e04 <hci_cmd_complete>:
{
   13e04:	b538      	push	{r3, r4, r5, lr}
   13e06:	2103      	movs	r1, #3
   13e08:	4604      	mov	r4, r0
   13e0a:	300c      	adds	r0, #12
   13e0c:	f009 fae0 	bl	1d3d0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   13e10:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   13e12:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13e14:	7819      	ldrb	r1, [r3, #0]
   13e16:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13e1a:	4622      	mov	r2, r4
   13e1c:	f7ff ff2c 	bl	13c78 <hci_cmd_done>
	if (ncmd) {
   13e20:	b125      	cbz	r5, 13e2c <hci_cmd_complete+0x28>
   13e22:	4803      	ldr	r0, [pc, #12]	; (13e30 <hci_cmd_complete+0x2c>)
}
   13e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13e28:	f004 bd6a 	b.w	18900 <z_impl_k_sem_give>
   13e2c:	bd38      	pop	{r3, r4, r5, pc}
   13e2e:	bf00      	nop
   13e30:	20000310 	.word	0x20000310

00013e34 <bt_hci_cmd_state_set_init>:
{
   13e34:	b510      	push	{r4, lr}
	state->bit = bit;
   13e36:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   13e3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13e3e:	720b      	strb	r3, [r1, #8]
{
   13e40:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   13e42:	f001 fd73 	bl	1592c <net_buf_id>
   13e46:	4b03      	ldr	r3, [pc, #12]	; (13e54 <bt_hci_cmd_state_set_init+0x20>)
   13e48:	220c      	movs	r2, #12
   13e4a:	fb02 3300 	mla	r3, r2, r0, r3
   13e4e:	605c      	str	r4, [r3, #4]
}
   13e50:	bd10      	pop	{r4, pc}
   13e52:	bf00      	nop
   13e54:	20002718 	.word	0x20002718

00013e58 <bt_hci_cmd_create>:
{
   13e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13e5c:	f04f 32ff 	mov.w	r2, #4294967295
   13e60:	f04f 33ff 	mov.w	r3, #4294967295
   13e64:	4606      	mov	r6, r0
   13e66:	4817      	ldr	r0, [pc, #92]	; (13ec4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   13e68:	4d17      	ldr	r5, [pc, #92]	; (13ec8 <bt_hci_cmd_create+0x70>)
{
   13e6a:	460f      	mov	r7, r1
   13e6c:	f009 fa53 	bl	1d316 <net_buf_alloc_fixed>
   13e70:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13e72:	f100 0a0c 	add.w	sl, r0, #12
   13e76:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13e78:	f04f 0800 	mov.w	r8, #0
   13e7c:	4650      	mov	r0, sl
   13e7e:	f009 fa51 	bl	1d324 <net_buf_simple_reserve>
   13e82:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   13e86:	4620      	mov	r0, r4
   13e88:	f001 fd50 	bl	1592c <net_buf_id>
   13e8c:	f04f 090c 	mov.w	r9, #12
   13e90:	fb09 5000 	mla	r0, r9, r0, r5
   13e94:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13e96:	4620      	mov	r0, r4
   13e98:	f001 fd48 	bl	1592c <net_buf_id>
   13e9c:	fb09 5000 	mla	r0, r9, r0, r5
   13ea0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   13ea4:	4620      	mov	r0, r4
   13ea6:	f001 fd41 	bl	1592c <net_buf_id>
   13eaa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   13eae:	2103      	movs	r1, #3
   13eb0:	f8c5 8004 	str.w	r8, [r5, #4]
   13eb4:	4650      	mov	r0, sl
   13eb6:	f009 fa6c 	bl	1d392 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   13eba:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   13ebc:	7087      	strb	r7, [r0, #2]
}
   13ebe:	4620      	mov	r0, r4
   13ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ec4:	20000638 	.word	0x20000638
   13ec8:	20002718 	.word	0x20002718

00013ecc <bt_hci_cmd_send_sync>:
{
   13ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13ed0:	b087      	sub	sp, #28
   13ed2:	4680      	mov	r8, r0
   13ed4:	af00      	add	r7, sp, #0
   13ed6:	4615      	mov	r5, r2
	if (!buf) {
   13ed8:	460c      	mov	r4, r1
   13eda:	b921      	cbnz	r1, 13ee6 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   13edc:	f7ff ffbc 	bl	13e58 <bt_hci_cmd_create>
		if (!buf) {
   13ee0:	4604      	mov	r4, r0
   13ee2:	2800      	cmp	r0, #0
   13ee4:	d05c      	beq.n	13fa0 <bt_hci_cmd_send_sync+0xd4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13ee6:	2201      	movs	r2, #1
   13ee8:	2100      	movs	r1, #0
   13eea:	4638      	mov	r0, r7
   13eec:	f009 ffcf 	bl	1de8e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13ef0:	4620      	mov	r0, r4
   13ef2:	f001 fd1b 	bl	1592c <net_buf_id>
   13ef6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 13fa8 <bt_hci_cmd_send_sync+0xdc>
   13efa:	230c      	movs	r3, #12
   13efc:	fb03 9000 	mla	r0, r3, r0, r9
   13f00:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13f02:	4620      	mov	r0, r4
   13f04:	f009 fa41 	bl	1d38a <net_buf_ref>
   13f08:	4601      	mov	r1, r0
   13f0a:	4828      	ldr	r0, [pc, #160]	; (13fac <bt_hci_cmd_send_sync+0xe0>)
   13f0c:	f009 fa3b 	bl	1d386 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13f10:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13f14:	2300      	movs	r3, #0
   13f16:	4638      	mov	r0, r7
   13f18:	f004 fd18 	bl	1894c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13f1c:	4606      	mov	r6, r0
   13f1e:	b180      	cbz	r0, 13f42 <bt_hci_cmd_send_sync+0x76>
   13f20:	4a23      	ldr	r2, [pc, #140]	; (13fb0 <bt_hci_cmd_send_sync+0xe4>)
   13f22:	4924      	ldr	r1, [pc, #144]	; (13fb4 <bt_hci_cmd_send_sync+0xe8>)
   13f24:	4824      	ldr	r0, [pc, #144]	; (13fb8 <bt_hci_cmd_send_sync+0xec>)
   13f26:	f240 1349 	movw	r3, #329	; 0x149
   13f2a:	f008 fd3c 	bl	1c9a6 <assert_print>
   13f2e:	4823      	ldr	r0, [pc, #140]	; (13fbc <bt_hci_cmd_send_sync+0xf0>)
   13f30:	4631      	mov	r1, r6
   13f32:	f008 fd38 	bl	1c9a6 <assert_print>
   13f36:	4040      	eors	r0, r0
   13f38:	f380 8811 	msr	BASEPRI, r0
   13f3c:	f04f 0003 	mov.w	r0, #3
   13f40:	df02      	svc	2
	status = cmd(buf)->status;
   13f42:	4620      	mov	r0, r4
   13f44:	f001 fcf2 	bl	1592c <net_buf_id>
   13f48:	230c      	movs	r3, #12
   13f4a:	4358      	muls	r0, r3
   13f4c:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   13f50:	b1f6      	cbz	r6, 13f90 <bt_hci_cmd_send_sync+0xc4>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   13f52:	466d      	mov	r5, sp
   13f54:	b08a      	sub	sp, #40	; 0x28
   13f56:	466a      	mov	r2, sp
   13f58:	4b19      	ldr	r3, [pc, #100]	; (13fc0 <bt_hci_cmd_send_sync+0xf4>)
   13f5a:	6153      	str	r3, [r2, #20]
   13f5c:	4b19      	ldr	r3, [pc, #100]	; (13fc4 <bt_hci_cmd_send_sync+0xf8>)
   13f5e:	6216      	str	r6, [r2, #32]
   13f60:	e9c2 3806 	strd	r3, r8, [r2, #24]
   13f64:	2305      	movs	r3, #5
   13f66:	f842 3f10 	str.w	r3, [r2, #16]!
   13f6a:	4817      	ldr	r0, [pc, #92]	; (13fc8 <bt_hci_cmd_send_sync+0xfc>)
   13f6c:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   13f70:	f009 f874 	bl	1d05c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   13f74:	4620      	mov	r0, r4
   13f76:	46ad      	mov	sp, r5
   13f78:	f001 fd92 	bl	15aa0 <net_buf_unref>
			return -ECONNREFUSED;
   13f7c:	2e09      	cmp	r6, #9
   13f7e:	bf14      	ite	ne
   13f80:	f06f 0004 	mvnne.w	r0, #4
   13f84:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   13f88:	371c      	adds	r7, #28
   13f8a:	46bd      	mov	sp, r7
   13f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   13f90:	b115      	cbz	r5, 13f98 <bt_hci_cmd_send_sync+0xcc>
		*rsp = buf;
   13f92:	602c      	str	r4, [r5, #0]
	return 0;
   13f94:	2000      	movs	r0, #0
   13f96:	e7f7      	b.n	13f88 <bt_hci_cmd_send_sync+0xbc>
		net_buf_unref(buf);
   13f98:	4620      	mov	r0, r4
   13f9a:	f001 fd81 	bl	15aa0 <net_buf_unref>
   13f9e:	e7f9      	b.n	13f94 <bt_hci_cmd_send_sync+0xc8>
			return -ENOBUFS;
   13fa0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13fa4:	e7f0      	b.n	13f88 <bt_hci_cmd_send_sync+0xbc>
   13fa6:	bf00      	nop
   13fa8:	20002718 	.word	0x20002718
   13fac:	20000334 	.word	0x20000334
   13fb0:	0001f8ae 	.word	0x0001f8ae
   13fb4:	0001fa15 	.word	0x0001fa15
   13fb8:	0001f8fb 	.word	0x0001f8fb
   13fbc:	0001fa1e 	.word	0x0001fa1e
   13fc0:	0001fa3e 	.word	0x0001fa3e
   13fc4:	0001feab 	.word	0x0001feab
   13fc8:	0001e968 	.word	0x0001e968

00013fcc <hci_init>:
{
   13fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13fd0:	4d95      	ldr	r5, [pc, #596]	; (14228 <hci_init+0x25c>)
{
   13fd2:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13fd4:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   13fd8:	6899      	ldr	r1, [r3, #8]
   13fda:	f011 0101 	ands.w	r1, r1, #1
{
   13fde:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13fe0:	d124      	bne.n	1402c <hci_init+0x60>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   13fe2:	1d3a      	adds	r2, r7, #4
   13fe4:	f640 4003 	movw	r0, #3075	; 0xc03
   13fe8:	f7ff ff70 	bl	13ecc <bt_hci_cmd_send_sync>
		if (err) {
   13fec:	4604      	mov	r4, r0
   13fee:	2800      	cmp	r0, #0
   13ff0:	d175      	bne.n	140de <hci_init+0x112>
		hci_reset_complete(rsp);
   13ff2:	687c      	ldr	r4, [r7, #4]
	uint8_t status = buf->data[0];
   13ff4:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   13ff6:	781b      	ldrb	r3, [r3, #0]
   13ff8:	b9ab      	cbnz	r3, 14026 <hci_init+0x5a>
		bt_scan_reset();
   13ffa:	f001 fad5 	bl	155a8 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13ffe:	f3bf 8f5b 	dmb	ish
   14002:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   14006:	f3bf 8f5b 	dmb	ish
   1400a:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1400e:	f003 0309 	and.w	r3, r3, #9
   14012:	f3bf 8f5b 	dmb	ish
   14016:	e852 1f00 	ldrex	r1, [r2]
   1401a:	e842 3000 	strex	r0, r3, [r2]
   1401e:	2800      	cmp	r0, #0
   14020:	d1f9      	bne.n	14016 <hci_init+0x4a>
   14022:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   14026:	4620      	mov	r0, r4
   14028:	f001 fd3a 	bl	15aa0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1402c:	1d3a      	adds	r2, r7, #4
   1402e:	2100      	movs	r1, #0
   14030:	f241 0003 	movw	r0, #4099	; 0x1003
   14034:	f7ff ff4a 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   14038:	4604      	mov	r4, r0
   1403a:	2800      	cmp	r0, #0
   1403c:	d14f      	bne.n	140de <hci_init+0x112>
	read_local_features_complete(rsp);
   1403e:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14040:	487a      	ldr	r0, [pc, #488]	; (1422c <hci_init+0x260>)
   14042:	68f1      	ldr	r1, [r6, #12]
   14044:	2208      	movs	r2, #8
   14046:	3101      	adds	r1, #1
   14048:	f008 ffd0 	bl	1cfec <memcpy>
	net_buf_unref(rsp);
   1404c:	4630      	mov	r0, r6
   1404e:	f001 fd27 	bl	15aa0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14052:	4621      	mov	r1, r4
   14054:	1d3a      	adds	r2, r7, #4
   14056:	f241 0001 	movw	r0, #4097	; 0x1001
   1405a:	f7ff ff37 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   1405e:	4604      	mov	r4, r0
   14060:	2800      	cmp	r0, #0
   14062:	d13c      	bne.n	140de <hci_init+0x112>
	read_local_ver_complete(rsp);
   14064:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   14066:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   14068:	785a      	ldrb	r2, [r3, #1]
   1406a:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1406e:	885a      	ldrh	r2, [r3, #2]
   14070:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   14074:	791a      	ldrb	r2, [r3, #4]
   14076:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1407a:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   1407e:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14082:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   14086:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1408a:	f001 fd09 	bl	15aa0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1408e:	4621      	mov	r1, r4
   14090:	1d3a      	adds	r2, r7, #4
   14092:	f241 0002 	movw	r0, #4098	; 0x1002
   14096:	f7ff ff19 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   1409a:	4604      	mov	r4, r0
   1409c:	b9f8      	cbnz	r0, 140de <hci_init+0x112>
	read_supported_commands_complete(rsp);
   1409e:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   140a0:	4863      	ldr	r0, [pc, #396]	; (14230 <hci_init+0x264>)
   140a2:	68f1      	ldr	r1, [r6, #12]
   140a4:	2240      	movs	r2, #64	; 0x40
   140a6:	3101      	adds	r1, #1
   140a8:	f008 ffa0 	bl	1cfec <memcpy>
	net_buf_unref(rsp);
   140ac:	4630      	mov	r0, r6
   140ae:	f001 fcf7 	bl	15aa0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   140b2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   140b6:	0658      	lsls	r0, r3, #25
   140b8:	d416      	bmi.n	140e8 <hci_init+0x11c>
		LOG_ERR("Non-LE capable controller detected!");
   140ba:	466c      	mov	r4, sp
   140bc:	b088      	sub	sp, #32
   140be:	466a      	mov	r2, sp
   140c0:	4b5c      	ldr	r3, [pc, #368]	; (14234 <hci_init+0x268>)
   140c2:	6153      	str	r3, [r2, #20]
   140c4:	4b5c      	ldr	r3, [pc, #368]	; (14238 <hci_init+0x26c>)
   140c6:	6193      	str	r3, [r2, #24]
   140c8:	2303      	movs	r3, #3
   140ca:	f842 3f10 	str.w	r3, [r2, #16]!
   140ce:	485b      	ldr	r0, [pc, #364]	; (1423c <hci_init+0x270>)
   140d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   140d4:	f008 ffc2 	bl	1d05c <z_log_msg_static_create.constprop.0>
   140d8:	46a5      	mov	sp, r4
		return -ENODEV;
   140da:	f06f 0412 	mvn.w	r4, #18
}
   140de:	4620      	mov	r0, r4
   140e0:	370c      	adds	r7, #12
   140e2:	46bd      	mov	sp, r7
   140e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   140e8:	4621      	mov	r1, r4
   140ea:	1d3a      	adds	r2, r7, #4
   140ec:	f242 0003 	movw	r0, #8195	; 0x2003
   140f0:	f7ff feec 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   140f4:	4604      	mov	r4, r0
   140f6:	2800      	cmp	r0, #0
   140f8:	d1f1      	bne.n	140de <hci_init+0x112>
	read_le_features_complete(rsp);
   140fa:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   140fc:	4850      	ldr	r0, [pc, #320]	; (14240 <hci_init+0x274>)
   140fe:	68f1      	ldr	r1, [r6, #12]
   14100:	2208      	movs	r2, #8
   14102:	3101      	adds	r1, #1
   14104:	f008 ff72 	bl	1cfec <memcpy>
	net_buf_unref(rsp);
   14108:	4630      	mov	r0, r6
   1410a:	f001 fcc9 	bl	15aa0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1410e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   14112:	0699      	lsls	r1, r3, #26
   14114:	d417      	bmi.n	14146 <hci_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14116:	2102      	movs	r1, #2
   14118:	f640 406d 	movw	r0, #3181	; 0xc6d
   1411c:	f7ff fe9c 	bl	13e58 <bt_hci_cmd_create>
		if (!buf) {
   14120:	4606      	mov	r6, r0
   14122:	2800      	cmp	r0, #0
   14124:	d04a      	beq.n	141bc <hci_init+0x1f0>
   14126:	2102      	movs	r1, #2
   14128:	300c      	adds	r0, #12
   1412a:	f009 f932 	bl	1d392 <net_buf_simple_add>
		cp_le->le = 0x01;
   1412e:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
   14130:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
   14132:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14134:	4622      	mov	r2, r4
   14136:	4631      	mov	r1, r6
   14138:	f640 406d 	movw	r0, #3181	; 0xc6d
   1413c:	f7ff fec6 	bl	13ecc <bt_hci_cmd_send_sync>
		if (err) {
   14140:	4604      	mov	r4, r0
   14142:	2800      	cmp	r0, #0
   14144:	d1cb      	bne.n	140de <hci_init+0x112>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14146:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   1414a:	071a      	lsls	r2, r3, #28
   1414c:	d512      	bpl.n	14174 <hci_init+0x1a8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1414e:	1d3a      	adds	r2, r7, #4
   14150:	2100      	movs	r1, #0
   14152:	f242 001c 	movw	r0, #8220	; 0x201c
   14156:	f7ff feb9 	bl	13ecc <bt_hci_cmd_send_sync>
		if (err) {
   1415a:	4604      	mov	r4, r0
   1415c:	2800      	cmp	r0, #0
   1415e:	d1be      	bne.n	140de <hci_init+0x112>
		le_read_supp_states_complete(rsp);
   14160:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   14162:	68c3      	ldr	r3, [r0, #12]
   14164:	f8d3 2001 	ldr.w	r2, [r3, #1]
   14168:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1416c:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   14170:	f001 fc96 	bl	15aa0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14174:	2108      	movs	r1, #8
   14176:	f242 0001 	movw	r0, #8193	; 0x2001
   1417a:	f7ff fe6d 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   1417e:	4604      	mov	r4, r0
   14180:	b1e0      	cbz	r0, 141bc <hci_init+0x1f0>
   14182:	2108      	movs	r1, #8
   14184:	300c      	adds	r0, #12
   14186:	f009 f904 	bl	1d392 <net_buf_simple_add>
	dst[0] = val;
   1418a:	2602      	movs	r6, #2
	dst[1] = val >> 8;
   1418c:	2200      	movs	r2, #0
	dst[0] = val;
   1418e:	7006      	strb	r6, [r0, #0]
	dst[1] = val >> 8;
   14190:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
   14192:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14194:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   14196:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14198:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1419a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1419c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1419e:	4621      	mov	r1, r4
   141a0:	f242 0001 	movw	r0, #8193	; 0x2001
   141a4:	f7ff fe92 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   141a8:	4604      	mov	r4, r0
   141aa:	2800      	cmp	r0, #0
   141ac:	d197      	bne.n	140de <hci_init+0x112>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   141ae:	2108      	movs	r1, #8
   141b0:	f640 4001 	movw	r0, #3073	; 0xc01
   141b4:	f7ff fe50 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   141b8:	4680      	mov	r8, r0
   141ba:	b910      	cbnz	r0, 141c2 <hci_init+0x1f6>
		return -ENOBUFS;
   141bc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   141c0:	e78d      	b.n	140de <hci_init+0x112>
   141c2:	2108      	movs	r1, #8
   141c4:	300c      	adds	r0, #12
   141c6:	f009 f8e4 	bl	1d392 <net_buf_simple_add>
   141ca:	2380      	movs	r3, #128	; 0x80
   141cc:	7043      	strb	r3, [r0, #1]
   141ce:	2320      	movs	r3, #32
	dst[0] = val;
   141d0:	7004      	strb	r4, [r0, #0]
   141d2:	7084      	strb	r4, [r0, #2]
   141d4:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
   141d6:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
   141d8:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
   141da:	70c6      	strb	r6, [r0, #3]
   141dc:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   141de:	4622      	mov	r2, r4
   141e0:	4641      	mov	r1, r8
   141e2:	f640 4001 	movw	r0, #3073	; 0xc01
   141e6:	f7ff fe71 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   141ea:	4604      	mov	r4, r0
   141ec:	2800      	cmp	r0, #0
   141ee:	f47f af76 	bne.w	140de <hci_init+0x112>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   141f2:	4601      	mov	r1, r0
   141f4:	1d3a      	adds	r2, r7, #4
   141f6:	f64f 4001 	movw	r0, #64513	; 0xfc01
   141fa:	f7ff fe67 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   141fe:	4c11      	ldr	r4, [pc, #68]	; (14244 <hci_init+0x278>)
   14200:	b320      	cbz	r0, 1424c <hci_init+0x280>
		LOG_WRN("Vendor HCI extensions not available");
   14202:	466d      	mov	r5, sp
   14204:	b088      	sub	sp, #32
   14206:	466a      	mov	r2, sp
   14208:	4b0f      	ldr	r3, [pc, #60]	; (14248 <hci_init+0x27c>)
   1420a:	480c      	ldr	r0, [pc, #48]	; (1423c <hci_init+0x270>)
   1420c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14210:	2303      	movs	r3, #3
   14212:	f842 3f10 	str.w	r3, [r2, #16]!
   14216:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1421a:	f008 ff1f 	bl	1d05c <z_log_msg_static_create.constprop.0>
   1421e:	46ad      	mov	sp, r5
	err = bt_id_init();
   14220:	f000 fef6 	bl	15010 <bt_id_init>
   14224:	4604      	mov	r4, r0
	if (err) {
   14226:	e75a      	b.n	140de <hci_init+0x112>
   14228:	20000230 	.word	0x20000230
   1422c:	200002a0 	.word	0x200002a0
   14230:	200002a8 	.word	0x200002a8
   14234:	0001fa5e 	.word	0x0001fa5e
   14238:	0001fecc 	.word	0x0001fecc
   1423c:	0001e968 	.word	0x0001e968
   14240:	20000300 	.word	0x20000300
   14244:	0001fec0 	.word	0x0001fec0
   14248:	0001fa86 	.word	0x0001fa86
	rp.info = (void *)rsp->data;
   1424c:	687b      	ldr	r3, [r7, #4]
   1424e:	68de      	ldr	r6, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   14250:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   14254:	2b03      	cmp	r3, #3
		return plat_str[platform];
   14256:	bf96      	itet	ls
   14258:	4a4f      	ldrls	r2, [pc, #316]	; (14398 <hci_init+0x3cc>)
	return "unknown";
   1425a:	4950      	ldrhi	r1, [pc, #320]	; (1439c <hci_init+0x3d0>)
		return plat_str[platform];
   1425c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   14260:	46e8      	mov	r8, sp
   14262:	b08a      	sub	sp, #40	; 0x28
   14264:	466a      	mov	r2, sp
   14266:	484e      	ldr	r0, [pc, #312]	; (143a0 <hci_init+0x3d4>)
   14268:	e9c2 1307 	strd	r1, r3, [r2, #28]
   1426c:	f240 3301 	movw	r3, #769	; 0x301
   14270:	8493      	strh	r3, [r2, #36]	; 0x24
   14272:	4b4c      	ldr	r3, [pc, #304]	; (143a4 <hci_init+0x3d8>)
   14274:	e9c2 0405 	strd	r0, r4, [r2, #20]
   14278:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   1427c:	f842 3f10 	str.w	r3, [r2, #16]!
   14280:	4849      	ldr	r0, [pc, #292]	; (143a8 <hci_init+0x3dc>)
   14282:	f008 feeb 	bl	1d05c <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   14286:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   1428a:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1428e:	2a02      	cmp	r2, #2
   14290:	46c5      	mov	sp, r8
   14292:	d157      	bne.n	14344 <hci_init+0x378>
	if (variant < ARRAY_SIZE(nordic_str)) {
   14294:	2b03      	cmp	r3, #3
   14296:	d855      	bhi.n	14344 <hci_init+0x378>
		return nordic_str[variant];
   14298:	4a44      	ldr	r2, [pc, #272]	; (143ac <hci_init+0x3e0>)
   1429a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   1429e:	46e8      	mov	r8, sp
   142a0:	b08a      	sub	sp, #40	; 0x28
   142a2:	466a      	mov	r2, sp
   142a4:	4842      	ldr	r0, [pc, #264]	; (143b0 <hci_init+0x3e4>)
   142a6:	e9c2 1307 	strd	r1, r3, [r2, #28]
   142aa:	f240 3301 	movw	r3, #769	; 0x301
   142ae:	8493      	strh	r3, [r2, #36]	; 0x24
   142b0:	4b3c      	ldr	r3, [pc, #240]	; (143a4 <hci_init+0x3d8>)
   142b2:	e9c2 0405 	strd	r0, r4, [r2, #20]
   142b6:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   142ba:	f842 3f10 	str.w	r3, [r2, #16]!
   142be:	483a      	ldr	r0, [pc, #232]	; (143a8 <hci_init+0x3dc>)
   142c0:	f008 fecc 	bl	1d05c <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   142c4:	7973      	ldrb	r3, [r6, #5]
   142c6:	f896 e006 	ldrb.w	lr, [r6, #6]
   142ca:	f8b6 c007 	ldrh.w	ip, [r6, #7]
   142ce:	f8d6 0009 	ldr.w	r0, [r6, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   142d2:	2b03      	cmp	r3, #3
   142d4:	46c5      	mov	sp, r8
		return var_str[variant];
   142d6:	bf96      	itet	ls
   142d8:	4a36      	ldrls	r2, [pc, #216]	; (143b4 <hci_init+0x3e8>)
	return "unknown";
   142da:	4930      	ldrhi	r1, [pc, #192]	; (1439c <hci_init+0x3d0>)
		return var_str[variant];
   142dc:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   142e0:	466e      	mov	r6, sp
   142e2:	b08e      	sub	sp, #56	; 0x38
   142e4:	466a      	mov	r2, sp
   142e6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 143b8 <hci_init+0x3ec>
   142ea:	62d0      	str	r0, [r2, #44]	; 0x2c
   142ec:	e9c2 1307 	strd	r1, r3, [r2, #28]
   142f0:	f240 3301 	movw	r3, #769	; 0x301
   142f4:	8613      	strh	r3, [r2, #48]	; 0x30
   142f6:	4b31      	ldr	r3, [pc, #196]	; (143bc <hci_init+0x3f0>)
   142f8:	482b      	ldr	r0, [pc, #172]	; (143a8 <hci_init+0x3dc>)
   142fa:	e9c2 8405 	strd	r8, r4, [r2, #20]
   142fe:	e9c2 ec09 	strd	lr, ip, [r2, #36]	; 0x24
   14302:	f244 41c0 	movw	r1, #17600	; 0x44c0
   14306:	f842 3f10 	str.w	r3, [r2, #16]!
   1430a:	f008 fea7 	bl	1d05c <z_log_msg_static_create.constprop.0>
   1430e:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
   14310:	6878      	ldr	r0, [r7, #4]
   14312:	f001 fbc5 	bl	15aa0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14316:	1d3a      	adds	r2, r7, #4
   14318:	2100      	movs	r1, #0
   1431a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1431e:	f7ff fdd5 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   14322:	4680      	mov	r8, r0
   14324:	b180      	cbz	r0, 14348 <hci_init+0x37c>
		LOG_WRN("Failed to read supported vendor commands");
   14326:	b088      	sub	sp, #32
   14328:	466a      	mov	r2, sp
   1432a:	4b25      	ldr	r3, [pc, #148]	; (143c0 <hci_init+0x3f4>)
			LOG_WRN("Failed to read supported vendor features");
   1432c:	481e      	ldr	r0, [pc, #120]	; (143a8 <hci_init+0x3dc>)
   1432e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14332:	2303      	movs	r3, #3
   14334:	f842 3f10 	str.w	r3, [r2, #16]!
   14338:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1433c:	f008 fe8e 	bl	1d05c <z_log_msg_static_create.constprop.0>
   14340:	46b5      	mov	sp, r6
			return;
   14342:	e76d      	b.n	14220 <hci_init+0x254>
		return "unknown";
   14344:	4915      	ldr	r1, [pc, #84]	; (1439c <hci_init+0x3d0>)
   14346:	e7aa      	b.n	1429e <hci_init+0x2d2>
	rp.cmds = (void *)rsp->data;
   14348:	f8d7 9004 	ldr.w	r9, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1434c:	481d      	ldr	r0, [pc, #116]	; (143c4 <hci_init+0x3f8>)
   1434e:	f8d9 100c 	ldr.w	r1, [r9, #12]
   14352:	2202      	movs	r2, #2
   14354:	3101      	adds	r1, #1
   14356:	f008 fe49 	bl	1cfec <memcpy>
	net_buf_unref(rsp);
   1435a:	4648      	mov	r0, r9
   1435c:	f001 fba0 	bl	15aa0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14360:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   14364:	075b      	lsls	r3, r3, #29
   14366:	f57f af5b 	bpl.w	14220 <hci_init+0x254>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1436a:	1d3a      	adds	r2, r7, #4
   1436c:	4641      	mov	r1, r8
   1436e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14372:	f7ff fdab 	bl	13ecc <bt_hci_cmd_send_sync>
		if (err) {
   14376:	b118      	cbz	r0, 14380 <hci_init+0x3b4>
			LOG_WRN("Failed to read supported vendor features");
   14378:	b088      	sub	sp, #32
   1437a:	466a      	mov	r2, sp
   1437c:	4b12      	ldr	r3, [pc, #72]	; (143c8 <hci_init+0x3fc>)
   1437e:	e7d5      	b.n	1432c <hci_init+0x360>
		rp.feat = (void *)rsp->data;
   14380:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14382:	4812      	ldr	r0, [pc, #72]	; (143cc <hci_init+0x400>)
   14384:	68e1      	ldr	r1, [r4, #12]
   14386:	2201      	movs	r2, #1
   14388:	4411      	add	r1, r2
   1438a:	f008 fe2f 	bl	1cfec <memcpy>
		net_buf_unref(rsp);
   1438e:	4620      	mov	r0, r4
   14390:	f001 fb86 	bl	15aa0 <net_buf_unref>
   14394:	e744      	b.n	14220 <hci_init+0x254>
   14396:	bf00      	nop
   14398:	0001ebcc 	.word	0x0001ebcc
   1439c:	0001f85a 	.word	0x0001f85a
   143a0:	0001faae 	.word	0x0001faae
   143a4:	01000005 	.word	0x01000005
   143a8:	0001e968 	.word	0x0001e968
   143ac:	0001ebbc 	.word	0x0001ebbc
   143b0:	0001facb 	.word	0x0001facb
   143b4:	0001ebac 	.word	0x0001ebac
   143b8:	0001fae7 	.word	0x0001fae7
   143bc:	01000008 	.word	0x01000008
   143c0:	0001fb18 	.word	0x0001fb18
   143c4:	200002e9 	.word	0x200002e9
   143c8:	0001fb45 	.word	0x0001fb45
   143cc:	200002e8 	.word	0x200002e8

000143d0 <bt_hci_le_rand>:
{
   143d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   143d2:	4b14      	ldr	r3, [pc, #80]	; (14424 <bt_hci_le_rand+0x54>)
   143d4:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   143d8:	2b00      	cmp	r3, #0
{
   143da:	4605      	mov	r5, r0
   143dc:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   143de:	da1d      	bge.n	1441c <bt_hci_le_rand+0x4c>
	while (len > 0) {
   143e0:	b914      	cbnz	r4, 143e8 <bt_hci_le_rand+0x18>
	return 0;
   143e2:	4620      	mov	r0, r4
}
   143e4:	b003      	add	sp, #12
   143e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   143e8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   143ea:	aa01      	add	r2, sp, #4
   143ec:	f04f 0100 	mov.w	r1, #0
   143f0:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   143f4:	4626      	mov	r6, r4
   143f6:	bf28      	it	cs
   143f8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   143fa:	f7ff fd67 	bl	13ecc <bt_hci_cmd_send_sync>
		if (err) {
   143fe:	2800      	cmp	r0, #0
   14400:	d1f0      	bne.n	143e4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   14402:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   14404:	68f9      	ldr	r1, [r7, #12]
   14406:	4632      	mov	r2, r6
   14408:	3101      	adds	r1, #1
   1440a:	4628      	mov	r0, r5
   1440c:	f008 fdee 	bl	1cfec <memcpy>
		net_buf_unref(rsp);
   14410:	4638      	mov	r0, r7
   14412:	f001 fb45 	bl	15aa0 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   14416:	4435      	add	r5, r6
		len -= count;
   14418:	1ba4      	subs	r4, r4, r6
   1441a:	e7e1      	b.n	143e0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   1441c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14420:	e7e0      	b.n	143e4 <bt_hci_le_rand+0x14>
   14422:	bf00      	nop
   14424:	20000230 	.word	0x20000230

00014428 <bt_send>:
	return bt_dev.drv->send(buf);
   14428:	4b02      	ldr	r3, [pc, #8]	; (14434 <bt_send+0xc>)
   1442a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   1442e:	695b      	ldr	r3, [r3, #20]
   14430:	4718      	bx	r3
   14432:	bf00      	nop
   14434:	20000230 	.word	0x20000230

00014438 <hci_tx_thread>:
{
   14438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1443c:	4d50      	ldr	r5, [pc, #320]	; (14580 <hci_tx_thread+0x148>)
	if (bt_dev.sent_cmd) {
   1443e:	4e51      	ldr	r6, [pc, #324]	; (14584 <hci_tx_thread+0x14c>)
{
   14440:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   14442:	68eb      	ldr	r3, [r5, #12]
   14444:	f36f 3394 	bfc	r3, #14, #7
   14448:	60eb      	str	r3, [r5, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1444a:	484d      	ldr	r0, [pc, #308]	; (14580 <hci_tx_thread+0x148>)
   1444c:	f04f 32ff 	mov.w	r2, #4294967295
   14450:	f04f 33ff 	mov.w	r3, #4294967295
   14454:	2101      	movs	r1, #1
   14456:	f005 f973 	bl	19740 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1445a:	b160      	cbz	r0, 14476 <hci_tx_thread+0x3e>
   1445c:	4a4a      	ldr	r2, [pc, #296]	; (14588 <hci_tx_thread+0x150>)
   1445e:	494b      	ldr	r1, [pc, #300]	; (1458c <hci_tx_thread+0x154>)
   14460:	484b      	ldr	r0, [pc, #300]	; (14590 <hci_tx_thread+0x158>)
   14462:	f640 13e6 	movw	r3, #2534	; 0x9e6
   14466:	f008 fa9e 	bl	1c9a6 <assert_print>
   1446a:	4040      	eors	r0, r0
   1446c:	f380 8811 	msr	BASEPRI, r0
   14470:	f04f 0003 	mov.w	r0, #3
   14474:	df02      	svc	2
		switch (ev->state) {
   14476:	68eb      	ldr	r3, [r5, #12]
   14478:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1447c:	2b01      	cmp	r3, #1
   1447e:	d912      	bls.n	144a6 <hci_tx_thread+0x6e>
   14480:	2b04      	cmp	r3, #4
   14482:	d013      	beq.n	144ac <hci_tx_thread+0x74>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   14484:	466c      	mov	r4, sp
   14486:	b088      	sub	sp, #32
   14488:	466a      	mov	r2, sp
   1448a:	4942      	ldr	r1, [pc, #264]	; (14594 <hci_tx_thread+0x15c>)
   1448c:	6151      	str	r1, [r2, #20]
   1448e:	4942      	ldr	r1, [pc, #264]	; (14598 <hci_tx_thread+0x160>)
   14490:	4842      	ldr	r0, [pc, #264]	; (1459c <hci_tx_thread+0x164>)
		switch (ev->state) {
   14492:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   14496:	2304      	movs	r3, #4
   14498:	f842 3f10 	str.w	r3, [r2, #16]!
   1449c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   144a0:	f008 fddc 	bl	1d05c <z_log_msg_static_create.constprop.0>
   144a4:	46a5      	mov	sp, r4
	z_impl_k_yield();
   144a6:	f004 fe27 	bl	190f8 <z_impl_k_yield>
	while (1) {
   144aa:	e7ca      	b.n	14442 <hci_tx_thread+0xa>
			if (ev->tag == BT_EVENT_CMD_TX) {
   144ac:	7b2b      	ldrb	r3, [r5, #12]
   144ae:	2b00      	cmp	r3, #0
   144b0:	d1f9      	bne.n	144a6 <hci_tx_thread+0x6e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   144b2:	483b      	ldr	r0, [pc, #236]	; (145a0 <hci_tx_thread+0x168>)
   144b4:	2200      	movs	r2, #0
   144b6:	2300      	movs	r3, #0
   144b8:	f008 ff32 	bl	1d320 <net_buf_get>
	BT_ASSERT(buf);
   144bc:	4604      	mov	r4, r0
   144be:	2800      	cmp	r0, #0
   144c0:	d04f      	beq.n	14562 <hci_tx_thread+0x12a>
	return z_impl_k_sem_take(sem, timeout);
   144c2:	f04f 33ff 	mov.w	r3, #4294967295
   144c6:	4837      	ldr	r0, [pc, #220]	; (145a4 <hci_tx_thread+0x16c>)
   144c8:	f04f 32ff 	mov.w	r2, #4294967295
   144cc:	f004 fa3e 	bl	1894c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   144d0:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   144d4:	bb6b      	cbnz	r3, 14532 <hci_tx_thread+0xfa>
	bt_dev.sent_cmd = net_buf_ref(buf);
   144d6:	4620      	mov	r0, r4
   144d8:	f008 ff57 	bl	1d38a <net_buf_ref>
   144dc:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
   144e0:	4620      	mov	r0, r4
   144e2:	f7ff ffa1 	bl	14428 <bt_send>
	if (err) {
   144e6:	2800      	cmp	r0, #0
   144e8:	d0dd      	beq.n	144a6 <hci_tx_thread+0x6e>
		LOG_ERR("Unable to send to driver (err %d)", err);
   144ea:	46e8      	mov	r8, sp
   144ec:	b088      	sub	sp, #32
   144ee:	466a      	mov	r2, sp
   144f0:	4b2d      	ldr	r3, [pc, #180]	; (145a8 <hci_tx_thread+0x170>)
   144f2:	6153      	str	r3, [r2, #20]
   144f4:	4b2d      	ldr	r3, [pc, #180]	; (145ac <hci_tx_thread+0x174>)
   144f6:	e9c2 3006 	strd	r3, r0, [r2, #24]
   144fa:	2304      	movs	r3, #4
   144fc:	f842 3f10 	str.w	r3, [r2, #16]!
   14500:	4826      	ldr	r0, [pc, #152]	; (1459c <hci_tx_thread+0x164>)
   14502:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14506:	f008 fda9 	bl	1d05c <z_log_msg_static_create.constprop.0>
   1450a:	46c5      	mov	sp, r8
	z_impl_k_sem_give(sem);
   1450c:	4825      	ldr	r0, [pc, #148]	; (145a4 <hci_tx_thread+0x16c>)
   1450e:	f004 f9f7 	bl	18900 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14512:	4620      	mov	r0, r4
   14514:	f001 fa0a 	bl	1592c <net_buf_id>
   14518:	4b25      	ldr	r3, [pc, #148]	; (145b0 <hci_tx_thread+0x178>)
   1451a:	220c      	movs	r2, #12
   1451c:	fb02 3000 	mla	r0, r2, r0, r3
   14520:	211f      	movs	r1, #31
   14522:	8840      	ldrh	r0, [r0, #2]
   14524:	4622      	mov	r2, r4
   14526:	f7ff fba7 	bl	13c78 <hci_cmd_done>
		net_buf_unref(buf);
   1452a:	4620      	mov	r0, r4
   1452c:	f001 fab8 	bl	15aa0 <net_buf_unref>
   14530:	e7b9      	b.n	144a6 <hci_tx_thread+0x6e>
		LOG_ERR("Uncleared pending sent_cmd");
   14532:	46e8      	mov	r8, sp
   14534:	b088      	sub	sp, #32
   14536:	466a      	mov	r2, sp
   14538:	4b1e      	ldr	r3, [pc, #120]	; (145b4 <hci_tx_thread+0x17c>)
   1453a:	6153      	str	r3, [r2, #20]
   1453c:	4b1b      	ldr	r3, [pc, #108]	; (145ac <hci_tx_thread+0x174>)
   1453e:	6193      	str	r3, [r2, #24]
   14540:	2303      	movs	r3, #3
   14542:	f842 3f10 	str.w	r3, [r2, #16]!
   14546:	4815      	ldr	r0, [pc, #84]	; (1459c <hci_tx_thread+0x164>)
   14548:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1454c:	f008 fd86 	bl	1d05c <z_log_msg_static_create.constprop.0>
   14550:	46c5      	mov	sp, r8
		net_buf_unref(bt_dev.sent_cmd);
   14552:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   14556:	f001 faa3 	bl	15aa0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1455a:	2300      	movs	r3, #0
   1455c:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
   14560:	e7b9      	b.n	144d6 <hci_tx_thread+0x9e>
	BT_ASSERT(buf);
   14562:	4a09      	ldr	r2, [pc, #36]	; (14588 <hci_tx_thread+0x150>)
   14564:	4914      	ldr	r1, [pc, #80]	; (145b8 <hci_tx_thread+0x180>)
   14566:	480a      	ldr	r0, [pc, #40]	; (14590 <hci_tx_thread+0x158>)
   14568:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1456c:	f008 fa1b 	bl	1c9a6 <assert_print>
   14570:	4040      	eors	r0, r0
   14572:	f380 8811 	msr	BASEPRI, r0
   14576:	f04f 0003 	mov.w	r0, #3
   1457a:	df02      	svc	2
   1457c:	e7a1      	b.n	144c2 <hci_tx_thread+0x8a>
   1457e:	bf00      	nop
   14580:	20000380 	.word	0x20000380
   14584:	20000230 	.word	0x20000230
   14588:	0001f8ae 	.word	0x0001f8ae
   1458c:	0001fa15 	.word	0x0001fa15
   14590:	0001f8fb 	.word	0x0001f8fb
   14594:	0001fb98 	.word	0x0001fb98
   14598:	0001fd2c 	.word	0x0001fd2c
   1459c:	0001e968 	.word	0x0001e968
   145a0:	20000334 	.word	0x20000334
   145a4:	20000310 	.word	0x20000310
   145a8:	0001fb72 	.word	0x0001fb72
   145ac:	0001fd23 	.word	0x0001fd23
   145b0:	20002718 	.word	0x20002718
   145b4:	0001fbbd 	.word	0x0001fbbd
   145b8:	00020187 	.word	0x00020187

000145bc <hci_event_prio>:
{
   145bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145c0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   145c2:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   145c6:	4630      	mov	r0, r6
   145c8:	f008 ff12 	bl	1d3f0 <net_buf_simple_headroom>
	state->len = buf->len;
   145cc:	8a27      	ldrh	r7, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   145ce:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
   145d0:	4605      	mov	r5, r0
   145d2:	d80c      	bhi.n	145ee <hci_event_prio+0x32>
   145d4:	4a20      	ldr	r2, [pc, #128]	; (14658 <hci_event_prio+0x9c>)
   145d6:	4921      	ldr	r1, [pc, #132]	; (1465c <hci_event_prio+0xa0>)
   145d8:	4821      	ldr	r0, [pc, #132]	; (14660 <hci_event_prio+0xa4>)
   145da:	f640 537b 	movw	r3, #3451	; 0xd7b
   145de:	f008 f9e2 	bl	1c9a6 <assert_print>
   145e2:	4040      	eors	r0, r0
   145e4:	f380 8811 	msr	BASEPRI, r0
   145e8:	f04f 0003 	mov.w	r0, #3
   145ec:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   145ee:	4630      	mov	r0, r6
   145f0:	2102      	movs	r1, #2
   145f2:	f008 feed 	bl	1d3d0 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   145f6:	7803      	ldrb	r3, [r0, #0]
   145f8:	2b05      	cmp	r3, #5
   145fa:	4606      	mov	r6, r0
   145fc:	d021      	beq.n	14642 <hci_event_prio+0x86>
   145fe:	3b0e      	subs	r3, #14
   14600:	2b01      	cmp	r3, #1
   14602:	d921      	bls.n	14648 <hci_event_prio+0x8c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14604:	4a14      	ldr	r2, [pc, #80]	; (14658 <hci_event_prio+0x9c>)
   14606:	4917      	ldr	r1, [pc, #92]	; (14664 <hci_event_prio+0xa8>)
   14608:	4815      	ldr	r0, [pc, #84]	; (14660 <hci_event_prio+0xa4>)
   1460a:	f640 537f 	movw	r3, #3455	; 0xd7f
   1460e:	f008 f9ca 	bl	1c9a6 <assert_print>
   14612:	4040      	eors	r0, r0
   14614:	f380 8811 	msr	BASEPRI, r0
   14618:	f04f 0003 	mov.w	r0, #3
   1461c:	df02      	svc	2
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1461e:	f04f 0802 	mov.w	r8, #2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14622:	4a11      	ldr	r2, [pc, #68]	; (14668 <hci_event_prio+0xac>)
   14624:	7830      	ldrb	r0, [r6, #0]
   14626:	2302      	movs	r3, #2
   14628:	4621      	mov	r1, r4
   1462a:	f7ff fa3f 	bl	13aac <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1462e:	f018 0f02 	tst.w	r8, #2
   14632:	d00c      	beq.n	1464e <hci_event_prio+0x92>
	buf->data = buf->__buf + state->offset;
   14634:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   14636:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
   14638:	fa13 f585 	uxtah	r5, r3, r5
   1463c:	60e5      	str	r5, [r4, #12]
}
   1463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   14642:	f04f 0803 	mov.w	r8, #3
   14646:	e7ec      	b.n	14622 <hci_event_prio+0x66>
	switch (evt) {
   14648:	f04f 0801 	mov.w	r8, #1
   1464c:	e7e9      	b.n	14622 <hci_event_prio+0x66>
		net_buf_unref(buf);
   1464e:	4620      	mov	r0, r4
}
   14650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14654:	f001 ba24 	b.w	15aa0 <net_buf_unref>
   14658:	0001f8ae 	.word	0x0001f8ae
   1465c:	0001f8e2 	.word	0x0001f8e2
   14660:	0001f8fb 	.word	0x0001f8fb
   14664:	0001fbdc 	.word	0x0001fbdc
   14668:	0001ebdc 	.word	0x0001ebdc

0001466c <bt_recv>:
{
   1466c:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1466e:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   14670:	2b01      	cmp	r3, #1
{
   14672:	af00      	add	r7, sp, #0
   14674:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   14676:	d129      	bne.n	146cc <bt_recv+0x60>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14678:	68c3      	ldr	r3, [r0, #12]
   1467a:	781b      	ldrb	r3, [r3, #0]
   1467c:	2b05      	cmp	r3, #5
   1467e:	d007      	beq.n	14690 <bt_recv+0x24>
   14680:	3b0e      	subs	r3, #14
   14682:	2b01      	cmp	r3, #1
   14684:	d806      	bhi.n	14694 <bt_recv+0x28>
			hci_event_prio(buf);
   14686:	f7ff ff99 	bl	145bc <hci_event_prio>
		return 0;
   1468a:	2000      	movs	r0, #0
}
   1468c:	46bd      	mov	sp, r7
   1468e:	bdb0      	pop	{r4, r5, r7, pc}
			hci_event_prio(buf);
   14690:	f7ff ff94 	bl	145bc <hci_event_prio>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   14694:	4819      	ldr	r0, [pc, #100]	; (146fc <bt_recv+0x90>)
   14696:	4621      	mov	r1, r4
   14698:	f008 fe48 	bl	1d32c <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1469c:	4918      	ldr	r1, [pc, #96]	; (14700 <bt_recv+0x94>)
   1469e:	4819      	ldr	r0, [pc, #100]	; (14704 <bt_recv+0x98>)
   146a0:	f009 fc94 	bl	1dfcc <k_work_submit_to_queue>
	if (err < 0) {
   146a4:	2800      	cmp	r0, #0
   146a6:	daf0      	bge.n	1468a <bt_recv+0x1e>
		LOG_ERR("Could not submit rx_work: %d", err);
   146a8:	466c      	mov	r4, sp
   146aa:	b088      	sub	sp, #32
   146ac:	466a      	mov	r2, sp
   146ae:	4b16      	ldr	r3, [pc, #88]	; (14708 <bt_recv+0x9c>)
   146b0:	6153      	str	r3, [r2, #20]
   146b2:	4b16      	ldr	r3, [pc, #88]	; (1470c <bt_recv+0xa0>)
   146b4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   146b8:	2304      	movs	r3, #4
   146ba:	f842 3f10 	str.w	r3, [r2, #16]!
   146be:	4814      	ldr	r0, [pc, #80]	; (14710 <bt_recv+0xa4>)
   146c0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   146c4:	f008 fcca 	bl	1d05c <z_log_msg_static_create.constprop.0>
   146c8:	46a5      	mov	sp, r4
   146ca:	e7de      	b.n	1468a <bt_recv+0x1e>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   146cc:	466d      	mov	r5, sp
   146ce:	b088      	sub	sp, #32
   146d0:	466a      	mov	r2, sp
   146d2:	4910      	ldr	r1, [pc, #64]	; (14714 <bt_recv+0xa8>)
   146d4:	6151      	str	r1, [r2, #20]
   146d6:	4910      	ldr	r1, [pc, #64]	; (14718 <bt_recv+0xac>)
   146d8:	480d      	ldr	r0, [pc, #52]	; (14710 <bt_recv+0xa4>)
	switch (bt_buf_get_type(buf)) {
   146da:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   146de:	2304      	movs	r3, #4
   146e0:	f842 3f10 	str.w	r3, [r2, #16]!
   146e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   146e8:	f008 fcb8 	bl	1d05c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   146ec:	4620      	mov	r0, r4
   146ee:	46ad      	mov	sp, r5
   146f0:	f001 f9d6 	bl	15aa0 <net_buf_unref>
		return -EINVAL;
   146f4:	f06f 0015 	mvn.w	r0, #21
   146f8:	e7c8      	b.n	1468c <bt_recv+0x20>
   146fa:	bf00      	nop
   146fc:	2000032c 	.word	0x2000032c
   14700:	20000394 	.word	0x20000394
   14704:	20001af0 	.word	0x20001af0
   14708:	0001f95e 	.word	0x0001f95e
   1470c:	0001fe68 	.word	0x0001fe68
   14710:	0001e968 	.word	0x0001e968
   14714:	0001fbf5 	.word	0x0001fbf5
   14718:	0001fe75 	.word	0x0001fe75

0001471c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1471c:	4a08      	ldr	r2, [pc, #32]	; (14740 <bt_hci_driver_register+0x24>)
{
   1471e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14720:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
   14724:	b930      	cbnz	r0, 14734 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   14726:	68d9      	ldr	r1, [r3, #12]
   14728:	b139      	cbz	r1, 1473a <bt_hci_driver_register+0x1e>
   1472a:	6959      	ldr	r1, [r3, #20]
   1472c:	b129      	cbz	r1, 1473a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1472e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
   14732:	4770      	bx	lr
		return -EALREADY;
   14734:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14738:	4770      	bx	lr
		return -EINVAL;
   1473a:	f06f 0015 	mvn.w	r0, #21
}
   1473e:	4770      	bx	lr
   14740:	20000230 	.word	0x20000230

00014744 <bt_finalize_init>:
{
   14744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14748:	4c4f      	ldr	r4, [pc, #316]	; (14888 <bt_finalize_init+0x144>)
   1474a:	b083      	sub	sp, #12
   1474c:	af00      	add	r7, sp, #0
   1474e:	f3bf 8f5b 	dmb	ish
   14752:	e854 3f00 	ldrex	r3, [r4]
   14756:	f043 0304 	orr.w	r3, r3, #4
   1475a:	e844 3200 	strex	r2, r3, [r4]
   1475e:	2a00      	cmp	r2, #0
   14760:	d1f7      	bne.n	14752 <bt_finalize_init+0xe>
   14762:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   14766:	2000      	movs	r0, #0
   14768:	f000 ff24 	bl	155b4 <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1476c:	f1a4 05cc 	sub.w	r5, r4, #204	; 0xcc
   14770:	f814 2cc5 	ldrb.w	r2, [r4, #-197]
   14774:	4b45      	ldr	r3, [pc, #276]	; (1488c <bt_finalize_init+0x148>)
   14776:	4c46      	ldr	r4, [pc, #280]	; (14890 <bt_finalize_init+0x14c>)
   14778:	4628      	mov	r0, r5
   1477a:	2a01      	cmp	r2, #1
   1477c:	bf88      	it	hi
   1477e:	461c      	movhi	r4, r3
   14780:	46e8      	mov	r8, sp
   14782:	f7ff f8c5 	bl	13910 <bt_addr_le_str>
   14786:	b08a      	sub	sp, #40	; 0x28
   14788:	466b      	mov	r3, sp
   1478a:	4942      	ldr	r1, [pc, #264]	; (14894 <bt_finalize_init+0x150>)
   1478c:	4e42      	ldr	r6, [pc, #264]	; (14898 <bt_finalize_init+0x154>)
   1478e:	6159      	str	r1, [r3, #20]
   14790:	4942      	ldr	r1, [pc, #264]	; (1489c <bt_finalize_init+0x158>)
   14792:	6079      	str	r1, [r7, #4]
   14794:	e9c3 6406 	strd	r6, r4, [r3, #24]
   14798:	6218      	str	r0, [r3, #32]
   1479a:	f103 0210 	add.w	r2, r3, #16
   1479e:	1d38      	adds	r0, r7, #4
   147a0:	f103 0123 	add.w	r1, r3, #35	; 0x23
   147a4:	f103 0427 	add.w	r4, r3, #39	; 0x27
   147a8:	f810 cb01 	ldrb.w	ip, [r0], #1
   147ac:	f801 cf01 	strb.w	ip, [r1, #1]!
   147b0:	428c      	cmp	r4, r1
   147b2:	d1f9      	bne.n	147a8 <bt_finalize_init+0x64>
   147b4:	493a      	ldr	r1, [pc, #232]	; (148a0 <bt_finalize_init+0x15c>)
   147b6:	6119      	str	r1, [r3, #16]
   147b8:	483a      	ldr	r0, [pc, #232]	; (148a4 <bt_finalize_init+0x160>)
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   147ba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 148a8 <bt_finalize_init+0x164>
   147be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 148a4 <bt_finalize_init+0x160>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   147c2:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   147c6:	f008 fc49 	bl	1d05c <z_log_msg_static_create.constprop.0>
   147ca:	46c5      	mov	sp, r8
	for (i = 1; i < bt_dev.id_count; i++) {
   147cc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 148ac <bt_finalize_init+0x168>
   147d0:	2401      	movs	r4, #1
   147d2:	79ea      	ldrb	r2, [r5, #7]
   147d4:	4294      	cmp	r4, r2
   147d6:	f108 0807 	add.w	r8, r8, #7
   147da:	db3d      	blt.n	14858 <bt_finalize_init+0x114>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   147dc:	f895 8068 	ldrb.w	r8, [r5, #104]	; 0x68
   147e0:	4640      	mov	r0, r8
   147e2:	f7ff f91f 	bl	13a24 <ver_str>
   147e6:	46ea      	mov	sl, sp
   147e8:	b08c      	sub	sp, #48	; 0x30
   147ea:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
   147ee:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
   147f2:	466c      	mov	r4, sp
   147f4:	492e      	ldr	r1, [pc, #184]	; (148b0 <bt_finalize_init+0x16c>)
   147f6:	e9c4 0807 	strd	r0, r8, [r4, #28]
   147fa:	46a0      	mov	r8, r4
   147fc:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
   14800:	f240 3901 	movw	r9, #769	; 0x301
   14804:	4b2b      	ldr	r3, [pc, #172]	; (148b4 <bt_finalize_init+0x170>)
   14806:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
   1480a:	e9c4 1605 	strd	r1, r6, [r4, #20]
   1480e:	f848 3f10 	str.w	r3, [r8, #16]!
   14812:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   14816:	4642      	mov	r2, r8
   14818:	4822      	ldr	r0, [pc, #136]	; (148a4 <bt_finalize_init+0x160>)
   1481a:	f008 fc1f 	bl	1d05c <z_log_msg_static_create.constprop.0>
   1481e:	46d5      	mov	sp, sl
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   14820:	f895 a069 	ldrb.w	sl, [r5, #105]	; 0x69
   14824:	4650      	mov	r0, sl
   14826:	f7ff f8fd 	bl	13a24 <ver_str>
   1482a:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   1482e:	46a5      	mov	sp, r4
   14830:	4a21      	ldr	r2, [pc, #132]	; (148b8 <bt_finalize_init+0x174>)
   14832:	6263      	str	r3, [r4, #36]	; 0x24
   14834:	4b21      	ldr	r3, [pc, #132]	; (148bc <bt_finalize_init+0x178>)
   14836:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
   1483a:	e9c4 2605 	strd	r2, r6, [r4, #20]
   1483e:	e9c4 0a07 	strd	r0, sl, [r4, #28]
   14842:	6123      	str	r3, [r4, #16]
   14844:	4817      	ldr	r0, [pc, #92]	; (148a4 <bt_finalize_init+0x160>)
   14846:	4642      	mov	r2, r8
   14848:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   1484c:	f008 fc06 	bl	1d05c <z_log_msg_static_create.constprop.0>
}
   14850:	370c      	adds	r7, #12
   14852:	46bd      	mov	sp, r7
   14854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   14858:	4640      	mov	r0, r8
   1485a:	f7ff f859 	bl	13910 <bt_addr_le_str>
   1485e:	46eb      	mov	fp, sp
   14860:	b08a      	sub	sp, #40	; 0x28
   14862:	466a      	mov	r2, sp
   14864:	4b16      	ldr	r3, [pc, #88]	; (148c0 <bt_finalize_init+0x17c>)
   14866:	f240 4102 	movw	r1, #1026	; 0x402
   1486a:	e9c2 4007 	strd	r4, r0, [r2, #28]
   1486e:	8491      	strh	r1, [r2, #36]	; 0x24
   14870:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14874:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   14878:	f842 9f10 	str.w	r9, [r2, #16]!
   1487c:	4650      	mov	r0, sl
   1487e:	f008 fbed 	bl	1d05c <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   14882:	3401      	adds	r4, #1
   14884:	46dd      	mov	sp, fp
   14886:	e7a4      	b.n	147d2 <bt_finalize_init+0x8e>
   14888:	200002fc 	.word	0x200002fc
   1488c:	0001fc0d 	.word	0x0001fc0d
   14890:	0001f1c7 	.word	0x0001f1c7
   14894:	0001fc11 	.word	0x0001fc11
   14898:	0001fe34 	.word	0x0001fe34
   1489c:	04020301 	.word	0x04020301
   148a0:	02000005 	.word	0x02000005
   148a4:	0001e968 	.word	0x0001e968
   148a8:	01000005 	.word	0x01000005
   148ac:	20000230 	.word	0x20000230
   148b0:	0001fc39 	.word	0x0001fc39
   148b4:	01000007 	.word	0x01000007
   148b8:	0001fc7b 	.word	0x0001fc7b
   148bc:	01000006 	.word	0x01000006
   148c0:	0001fc24 	.word	0x0001fc24

000148c4 <init_work>:
{
   148c4:	b510      	push	{r4, lr}
	err = hci_init();
   148c6:	f7ff fb81 	bl	13fcc <hci_init>
	if (err) {
   148ca:	4604      	mov	r4, r0
   148cc:	b908      	cbnz	r0, 148d2 <init_work+0xe>
	bt_finalize_init();
   148ce:	f7ff ff39 	bl	14744 <bt_finalize_init>
	if (ready_cb) {
   148d2:	4b04      	ldr	r3, [pc, #16]	; (148e4 <init_work+0x20>)
   148d4:	681b      	ldr	r3, [r3, #0]
   148d6:	b11b      	cbz	r3, 148e0 <init_work+0x1c>
		ready_cb(err);
   148d8:	4620      	mov	r0, r4
}
   148da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   148de:	4718      	bx	r3
}
   148e0:	bd10      	pop	{r4, pc}
   148e2:	bf00      	nop
   148e4:	20002730 	.word	0x20002730

000148e8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   148e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   148ea:	4d4a      	ldr	r5, [pc, #296]	; (14a14 <bt_enable+0x12c>)
{
   148ec:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   148ee:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
   148f2:	af08      	add	r7, sp, #32
   148f4:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   148f6:	b9ab      	cbnz	r3, 14924 <bt_enable+0x3c>
		LOG_ERR("No HCI driver registered");
   148f8:	466c      	mov	r4, sp
   148fa:	4622      	mov	r2, r4
   148fc:	b088      	sub	sp, #32
   148fe:	4b46      	ldr	r3, [pc, #280]	; (14a18 <bt_enable+0x130>)
   14900:	6163      	str	r3, [r4, #20]
   14902:	4b46      	ldr	r3, [pc, #280]	; (14a1c <bt_enable+0x134>)
   14904:	61a3      	str	r3, [r4, #24]
   14906:	2303      	movs	r3, #3
   14908:	f842 3f10 	str.w	r3, [r2, #16]!
   1490c:	4844      	ldr	r0, [pc, #272]	; (14a20 <bt_enable+0x138>)
   1490e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14912:	f008 fba3 	bl	1d05c <z_log_msg_static_create.constprop.0>
   14916:	46a5      	mov	sp, r4
		return -ENODEV;
   14918:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1491c:	4620      	mov	r0, r4
   1491e:	3704      	adds	r7, #4
   14920:	46bd      	mov	sp, r7
   14922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14924:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   14928:	f3bf 8f5b 	dmb	ish
   1492c:	e853 2f00 	ldrex	r2, [r3]
   14930:	f022 0202 	bic.w	r2, r2, #2
   14934:	e843 2100 	strex	r1, r2, [r3]
   14938:	2900      	cmp	r1, #0
   1493a:	d1f7      	bne.n	1492c <bt_enable+0x44>
   1493c:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14940:	f3bf 8f5b 	dmb	ish
   14944:	e853 4f00 	ldrex	r4, [r3]
   14948:	f044 0201 	orr.w	r2, r4, #1
   1494c:	e843 2100 	strex	r1, r2, [r3]
   14950:	2900      	cmp	r1, #0
   14952:	d1f7      	bne.n	14944 <bt_enable+0x5c>
   14954:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14958:	f014 0401 	ands.w	r4, r4, #1
   1495c:	d157      	bne.n	14a0e <bt_enable+0x126>
	ready_cb = cb;
   1495e:	4b31      	ldr	r3, [pc, #196]	; (14a24 <bt_enable+0x13c>)
   14960:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14962:	2201      	movs	r2, #1
   14964:	4611      	mov	r1, r2
   14966:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   1496a:	f009 fa90 	bl	1de8e <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1496e:	f505 7082 	add.w	r0, r5, #260	; 0x104
   14972:	f009 fa6b 	bl	1de4c <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14976:	2200      	movs	r2, #0
   14978:	2300      	movs	r3, #0
   1497a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1497e:	f06f 0308 	mvn.w	r3, #8
   14982:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14986:	e9cd 4400 	strd	r4, r4, [sp]
   1498a:	4b27      	ldr	r3, [pc, #156]	; (14a28 <bt_enable+0x140>)
   1498c:	4927      	ldr	r1, [pc, #156]	; (14a2c <bt_enable+0x144>)
   1498e:	9404      	str	r4, [sp, #16]
   14990:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14994:	4826      	ldr	r0, [pc, #152]	; (14a30 <bt_enable+0x148>)
   14996:	f003 fe25 	bl	185e4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1499a:	4926      	ldr	r1, [pc, #152]	; (14a34 <bt_enable+0x14c>)
   1499c:	4824      	ldr	r0, [pc, #144]	; (14a30 <bt_enable+0x148>)
   1499e:	f009 f9c6 	bl	1dd2e <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   149a2:	4825      	ldr	r0, [pc, #148]	; (14a38 <bt_enable+0x150>)
   149a4:	f009 fb23 	bl	1dfee <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   149a8:	4924      	ldr	r1, [pc, #144]	; (14a3c <bt_enable+0x154>)
   149aa:	4823      	ldr	r0, [pc, #140]	; (14a38 <bt_enable+0x150>)
   149ac:	9400      	str	r4, [sp, #0]
   149ae:	f06f 0307 	mvn.w	r3, #7
   149b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   149b6:	f004 f8ed 	bl	18b94 <k_work_queue_start>
   149ba:	4921      	ldr	r1, [pc, #132]	; (14a40 <bt_enable+0x158>)
   149bc:	481e      	ldr	r0, [pc, #120]	; (14a38 <bt_enable+0x150>)
   149be:	f009 f9b6 	bl	1dd2e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   149c2:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   149c6:	68db      	ldr	r3, [r3, #12]
   149c8:	4798      	blx	r3
	if (err) {
   149ca:	4604      	mov	r4, r0
   149cc:	b188      	cbz	r0, 149f2 <bt_enable+0x10a>
		LOG_ERR("HCI driver open failed (%d)", err);
   149ce:	466d      	mov	r5, sp
   149d0:	462a      	mov	r2, r5
   149d2:	b088      	sub	sp, #32
   149d4:	4b1b      	ldr	r3, [pc, #108]	; (14a44 <bt_enable+0x15c>)
   149d6:	616b      	str	r3, [r5, #20]
   149d8:	4b10      	ldr	r3, [pc, #64]	; (14a1c <bt_enable+0x134>)
   149da:	e9c5 3006 	strd	r3, r0, [r5, #24]
   149de:	2304      	movs	r3, #4
   149e0:	f842 3f10 	str.w	r3, [r2, #16]!
   149e4:	480e      	ldr	r0, [pc, #56]	; (14a20 <bt_enable+0x138>)
   149e6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   149ea:	f008 fb37 	bl	1d05c <z_log_msg_static_create.constprop.0>
   149ee:	46ad      	mov	sp, r5
		return err;
   149f0:	e794      	b.n	1491c <bt_enable+0x34>
	if (!cb) {
   149f2:	b93e      	cbnz	r6, 14a04 <bt_enable+0x11c>
	err = hci_init();
   149f4:	f7ff faea 	bl	13fcc <hci_init>
	if (err) {
   149f8:	4604      	mov	r4, r0
   149fa:	2800      	cmp	r0, #0
   149fc:	d18e      	bne.n	1491c <bt_enable+0x34>
	bt_finalize_init();
   149fe:	f7ff fea1 	bl	14744 <bt_finalize_init>
	return 0;
   14a02:	e78b      	b.n	1491c <bt_enable+0x34>
	k_work_submit(&bt_dev.init);
   14a04:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14a08:	f004 f8be 	bl	18b88 <k_work_submit>
	return 0;
   14a0c:	e786      	b.n	1491c <bt_enable+0x34>
		return -EALREADY;
   14a0e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14a12:	e783      	b.n	1491c <bt_enable+0x34>
   14a14:	20000230 	.word	0x20000230
   14a18:	0001fca6 	.word	0x0001fca6
   14a1c:	0001fd3b 	.word	0x0001fd3b
   14a20:	0001e968 	.word	0x0001e968
   14a24:	20002730 	.word	0x20002730
   14a28:	00014439 	.word	0x00014439
   14a2c:	20003d00 	.word	0x20003d00
   14a30:	20001a70 	.word	0x20001a70
   14a34:	0001fcc3 	.word	0x0001fcc3
   14a38:	20001af0 	.word	0x20001af0
   14a3c:	20004340 	.word	0x20004340
   14a40:	0001fcc9 	.word	0x0001fcc9
   14a44:	0001fccf 	.word	0x0001fccf

00014a48 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a48:	4b04      	ldr	r3, [pc, #16]	; (14a5c <bt_is_ready+0x14>)
   14a4a:	f3bf 8f5b 	dmb	ish
   14a4e:	6818      	ldr	r0, [r3, #0]
   14a50:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   14a54:	f3c0 0080 	ubfx	r0, r0, #2, #1
   14a58:	4770      	bx	lr
   14a5a:	bf00      	nop
   14a5c:	200002fc 	.word	0x200002fc

00014a60 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14a60:	4800      	ldr	r0, [pc, #0]	; (14a64 <bt_get_name+0x4>)
   14a62:	4770      	bx	lr
   14a64:	0001fcef 	.word	0x0001fcef

00014a68 <bt_data_parse>:
#endif

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   14a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a6c:	b082      	sub	sp, #8
   14a6e:	4604      	mov	r4, r0
   14a70:	af00      	add	r7, sp, #0
   14a72:	460e      	mov	r6, r1
   14a74:	4690      	mov	r8, r2
	while (ad->len > 1) {
   14a76:	88a3      	ldrh	r3, [r4, #4]
   14a78:	2b01      	cmp	r3, #1
   14a7a:	d917      	bls.n	14aac <bt_data_parse+0x44>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   14a7c:	4620      	mov	r0, r4
   14a7e:	f008 fcaf 	bl	1d3e0 <net_buf_simple_pull_u8>
		if (len == 0U) {
   14a82:	4605      	mov	r5, r0
   14a84:	b190      	cbz	r0, 14aac <bt_data_parse+0x44>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   14a86:	88a3      	ldrh	r3, [r4, #4]
   14a88:	4283      	cmp	r3, r0
   14a8a:	d213      	bcs.n	14ab4 <bt_data_parse+0x4c>
			LOG_WRN("malformed advertising data");
   14a8c:	466c      	mov	r4, sp
   14a8e:	b088      	sub	sp, #32
   14a90:	466a      	mov	r2, sp
   14a92:	4b11      	ldr	r3, [pc, #68]	; (14ad8 <bt_data_parse+0x70>)
   14a94:	6153      	str	r3, [r2, #20]
   14a96:	4b11      	ldr	r3, [pc, #68]	; (14adc <bt_data_parse+0x74>)
   14a98:	6193      	str	r3, [r2, #24]
   14a9a:	2303      	movs	r3, #3
   14a9c:	f842 3f10 	str.w	r3, [r2, #16]!
   14aa0:	480f      	ldr	r0, [pc, #60]	; (14ae0 <bt_data_parse+0x78>)
   14aa2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14aa6:	f008 fad9 	bl	1d05c <z_log_msg_static_create.constprop.0>
   14aaa:	46a5      	mov	sp, r4
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   14aac:	3708      	adds	r7, #8
   14aae:	46bd      	mov	sp, r7
   14ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.type = net_buf_simple_pull_u8(ad);
   14ab4:	4620      	mov	r0, r4
   14ab6:	f008 fc93 	bl	1d3e0 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   14aba:	3d01      	subs	r5, #1
		data.data = ad->data;
   14abc:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   14abe:	7038      	strb	r0, [r7, #0]
		if (!func(&data, user_data)) {
   14ac0:	4641      	mov	r1, r8
   14ac2:	4638      	mov	r0, r7
		data.data_len = len - 1;
   14ac4:	707d      	strb	r5, [r7, #1]
		data.data = ad->data;
   14ac6:	607b      	str	r3, [r7, #4]
		if (!func(&data, user_data)) {
   14ac8:	47b0      	blx	r6
   14aca:	2800      	cmp	r0, #0
   14acc:	d0ee      	beq.n	14aac <bt_data_parse+0x44>
		net_buf_simple_pull(ad, len - 1);
   14ace:	4629      	mov	r1, r5
   14ad0:	4620      	mov	r0, r4
   14ad2:	f008 fc75 	bl	1d3c0 <net_buf_simple_pull>
   14ad6:	e7ce      	b.n	14a76 <bt_data_parse+0xe>
   14ad8:	0001fcf6 	.word	0x0001fcf6
   14adc:	0001fd15 	.word	0x0001fd15
   14ae0:	0001e968 	.word	0x0001e968

00014ae4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14ae6:	4f0a      	ldr	r7, [pc, #40]	; (14b10 <id_find+0x2c>)
{
   14ae8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14aea:	2500      	movs	r5, #0
   14aec:	79fb      	ldrb	r3, [r7, #7]
   14aee:	b2ec      	uxtb	r4, r5
   14af0:	42a3      	cmp	r3, r4
   14af2:	d802      	bhi.n	14afa <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14af4:	f06f 0001 	mvn.w	r0, #1
   14af8:	e009      	b.n	14b0e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   14afa:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   14afe:	4439      	add	r1, r7
   14b00:	4630      	mov	r0, r6
   14b02:	f008 faae 	bl	1d062 <bt_addr_le_eq>
   14b06:	3501      	adds	r5, #1
   14b08:	2800      	cmp	r0, #0
   14b0a:	d0ef      	beq.n	14aec <id_find+0x8>
   14b0c:	4620      	mov	r0, r4
}
   14b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b10:	20000230 	.word	0x20000230

00014b14 <set_random_address>:
{
   14b14:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   14b16:	4913      	ldr	r1, [pc, #76]	; (14b64 <set_random_address+0x50>)
   14b18:	2206      	movs	r2, #6
   14b1a:	4605      	mov	r5, r0
   14b1c:	f008 fa3f 	bl	1cf9e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14b20:	b1d8      	cbz	r0, 14b5a <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14b22:	2106      	movs	r1, #6
   14b24:	f242 0005 	movw	r0, #8197	; 0x2005
   14b28:	f7ff f996 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   14b2c:	4604      	mov	r4, r0
   14b2e:	b1b0      	cbz	r0, 14b5e <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14b30:	2206      	movs	r2, #6
   14b32:	4629      	mov	r1, r5
   14b34:	300c      	adds	r0, #12
   14b36:	f008 fc32 	bl	1d39e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14b3a:	2200      	movs	r2, #0
   14b3c:	4621      	mov	r1, r4
   14b3e:	f242 0005 	movw	r0, #8197	; 0x2005
   14b42:	f7ff f9c3 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   14b46:	b948      	cbnz	r0, 14b5c <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   14b48:	2206      	movs	r2, #6
   14b4a:	4806      	ldr	r0, [pc, #24]	; (14b64 <set_random_address+0x50>)
   14b4c:	4629      	mov	r1, r5
   14b4e:	f008 fa4d 	bl	1cfec <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14b52:	4b05      	ldr	r3, [pc, #20]	; (14b68 <set_random_address+0x54>)
   14b54:	2201      	movs	r2, #1
   14b56:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   14b5a:	2000      	movs	r0, #0
}
   14b5c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14b5e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14b62:	e7fb      	b.n	14b5c <set_random_address+0x48>
   14b64:	20000291 	.word	0x20000291
   14b68:	20000230 	.word	0x20000230

00014b6c <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b6e:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14b70:	460d      	mov	r5, r1
   14b72:	b179      	cbz	r1, 14b94 <id_create.constprop.0+0x28>
   14b74:	4914      	ldr	r1, [pc, #80]	; (14bc8 <id_create.constprop.0+0x5c>)
   14b76:	4628      	mov	r0, r5
   14b78:	f008 fa73 	bl	1d062 <bt_addr_le_eq>
   14b7c:	b950      	cbnz	r0, 14b94 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   14b7e:	4813      	ldr	r0, [pc, #76]	; (14bcc <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14b80:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14b84:	2207      	movs	r2, #7
   14b86:	4629      	mov	r1, r5
   14b88:	4420      	add	r0, r4
   14b8a:	f008 fa2f 	bl	1cfec <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14b8e:	2000      	movs	r0, #0
}
   14b90:	b003      	add	sp, #12
   14b92:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   14b94:	4668      	mov	r0, sp
   14b96:	f008 fa52 	bl	1d03e <bt_addr_le_create_static>
			if (err) {
   14b9a:	2800      	cmp	r0, #0
   14b9c:	d1f8      	bne.n	14b90 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   14b9e:	4668      	mov	r0, sp
   14ba0:	f7ff ffa0 	bl	14ae4 <id_find>
   14ba4:	2800      	cmp	r0, #0
   14ba6:	daf5      	bge.n	14b94 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14ba8:	4b08      	ldr	r3, [pc, #32]	; (14bcc <id_create.constprop.0+0x60>)
   14baa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14bae:	441c      	add	r4, r3
   14bb0:	2207      	movs	r2, #7
   14bb2:	4669      	mov	r1, sp
   14bb4:	4620      	mov	r0, r4
   14bb6:	f008 fa19 	bl	1cfec <memcpy>
		if (addr) {
   14bba:	2d00      	cmp	r5, #0
   14bbc:	d0e7      	beq.n	14b8e <id_create.constprop.0+0x22>
   14bbe:	2207      	movs	r2, #7
   14bc0:	4621      	mov	r1, r4
   14bc2:	4628      	mov	r0, r5
   14bc4:	e7e1      	b.n	14b8a <id_create.constprop.0+0x1e>
   14bc6:	bf00      	nop
   14bc8:	0001f836 	.word	0x0001f836
   14bcc:	20000230 	.word	0x20000230

00014bd0 <bt_id_adv_random_addr_check>:
{
   14bd0:	b508      	push	{r3, lr}
	CHECKIF(param == NULL) {
   14bd2:	b128      	cbz	r0, 14be0 <bt_id_adv_random_addr_check+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14bd4:	4805      	ldr	r0, [pc, #20]	; (14bec <bt_id_adv_random_addr_check+0x1c>)
   14bd6:	f008 fa4c 	bl	1d072 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   14bda:	04c3      	lsls	r3, r0, #19
   14bdc:	d501      	bpl.n	14be2 <bt_id_adv_random_addr_check+0x12>
	return true;
   14bde:	2001      	movs	r0, #1
}
   14be0:	bd08      	pop	{r3, pc}
   14be2:	4802      	ldr	r0, [pc, #8]	; (14bec <bt_id_adv_random_addr_check+0x1c>)
   14be4:	f008 fa45 	bl	1d072 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14be8:	e7f9      	b.n	14bde <bt_id_adv_random_addr_check+0xe>
   14bea:	bf00      	nop
   14bec:	200002fc 	.word	0x200002fc

00014bf0 <bt_id_get>:
{
   14bf0:	b538      	push	{r3, r4, r5, lr}
   14bf2:	460d      	mov	r5, r1
		size_t to_copy = MIN(*count, bt_dev.id_count);
   14bf4:	4906      	ldr	r1, [pc, #24]	; (14c10 <bt_id_get+0x20>)
   14bf6:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
   14bf8:	b138      	cbz	r0, 14c0a <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
   14bfa:	682b      	ldr	r3, [r5, #0]
   14bfc:	429c      	cmp	r4, r3
   14bfe:	bf28      	it	cs
   14c00:	461c      	movcs	r4, r3
		memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
   14c02:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   14c06:	f008 f9f1 	bl	1cfec <memcpy>
		*count = to_copy;
   14c0a:	602c      	str	r4, [r5, #0]
}
   14c0c:	bd38      	pop	{r3, r4, r5, pc}
   14c0e:	bf00      	nop
   14c10:	20000230 	.word	0x20000230

00014c14 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   14c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c16:	460d      	mov	r5, r1
   14c18:	af00      	add	r7, sp, #0
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14c1a:	4604      	mov	r4, r0
   14c1c:	b920      	cbnz	r0, 14c28 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14c1e:	b34d      	cbz	r5, 14c74 <bt_id_create+0x60>
			return -EINVAL;
   14c20:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   14c24:	46bd      	mov	sp, r7
   14c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14c28:	4923      	ldr	r1, [pc, #140]	; (14cb8 <bt_id_create+0xa4>)
   14c2a:	f008 fa1a 	bl	1d062 <bt_addr_le_eq>
   14c2e:	2800      	cmp	r0, #0
   14c30:	d1f5      	bne.n	14c1e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14c32:	7823      	ldrb	r3, [r4, #0]
   14c34:	2b01      	cmp	r3, #1
   14c36:	d104      	bne.n	14c42 <bt_id_create+0x2e>
   14c38:	79a3      	ldrb	r3, [r4, #6]
   14c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14c3e:	2bc0      	cmp	r3, #192	; 0xc0
   14c40:	d010      	beq.n	14c64 <bt_id_create+0x50>
			LOG_ERR("Only static random identity address supported");
   14c42:	466c      	mov	r4, sp
   14c44:	b088      	sub	sp, #32
   14c46:	466a      	mov	r2, sp
   14c48:	4b1c      	ldr	r3, [pc, #112]	; (14cbc <bt_id_create+0xa8>)
   14c4a:	6153      	str	r3, [r2, #20]
   14c4c:	4b1c      	ldr	r3, [pc, #112]	; (14cc0 <bt_id_create+0xac>)
   14c4e:	6193      	str	r3, [r2, #24]
   14c50:	2303      	movs	r3, #3
   14c52:	f842 3f10 	str.w	r3, [r2, #16]!
   14c56:	481b      	ldr	r0, [pc, #108]	; (14cc4 <bt_id_create+0xb0>)
   14c58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c5c:	f008 fa0f 	bl	1d07e <z_log_msg_static_create.constprop.0>
   14c60:	46a5      	mov	sp, r4
			return -EINVAL;
   14c62:	e7dd      	b.n	14c20 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   14c64:	4620      	mov	r0, r4
   14c66:	f7ff ff3d 	bl	14ae4 <id_find>
   14c6a:	2800      	cmp	r0, #0
   14c6c:	dbd7      	blt.n	14c1e <bt_id_create+0xa>
			return -EALREADY;
   14c6e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14c72:	e7d7      	b.n	14c24 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14c74:	4d14      	ldr	r5, [pc, #80]	; (14cc8 <bt_id_create+0xb4>)
   14c76:	79eb      	ldrb	r3, [r5, #7]
   14c78:	2b01      	cmp	r3, #1
   14c7a:	d01a      	beq.n	14cb2 <bt_id_create+0x9e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14c7c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   14c80:	f008 f9f7 	bl	1d072 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14c84:	07c3      	lsls	r3, r0, #31
   14c86:	d50b      	bpl.n	14ca0 <bt_id_create+0x8c>
	new_id = bt_dev.id_count;
   14c88:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   14c8a:	4621      	mov	r1, r4
   14c8c:	4630      	mov	r0, r6
   14c8e:	f7ff ff6d 	bl	14b6c <id_create.constprop.0>
	if (err) {
   14c92:	2800      	cmp	r0, #0
   14c94:	d1c6      	bne.n	14c24 <bt_id_create+0x10>
		bt_dev.id_count++;
   14c96:	79eb      	ldrb	r3, [r5, #7]
   14c98:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   14c9a:	4630      	mov	r0, r6
		bt_dev.id_count++;
   14c9c:	71eb      	strb	r3, [r5, #7]
	return new_id;
   14c9e:	e7c1      	b.n	14c24 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   14ca0:	2c00      	cmp	r4, #0
   14ca2:	d0bd      	beq.n	14c20 <bt_id_create+0xc>
   14ca4:	4904      	ldr	r1, [pc, #16]	; (14cb8 <bt_id_create+0xa4>)
   14ca6:	4620      	mov	r0, r4
   14ca8:	f008 f9db 	bl	1d062 <bt_addr_le_eq>
   14cac:	2800      	cmp	r0, #0
   14cae:	d0eb      	beq.n	14c88 <bt_id_create+0x74>
   14cb0:	e7b6      	b.n	14c20 <bt_id_create+0xc>
		return -ENOMEM;
   14cb2:	f06f 000b 	mvn.w	r0, #11
   14cb6:	e7b5      	b.n	14c24 <bt_id_create+0x10>
   14cb8:	0001f836 	.word	0x0001f836
   14cbc:	0001fed4 	.word	0x0001fed4
   14cc0:	00020092 	.word	0x00020092
   14cc4:	0001e970 	.word	0x0001e970
   14cc8:	20000230 	.word	0x20000230

00014ccc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cce:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   14cd0:	4604      	mov	r4, r0
{
   14cd2:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
   14cd4:	b998      	cbnz	r0, 14cfe <bt_id_read_public_addr+0x32>
		LOG_WRN("Invalid input parameters");
   14cd6:	466c      	mov	r4, sp
   14cd8:	b088      	sub	sp, #32
   14cda:	466a      	mov	r2, sp
   14cdc:	4b1e      	ldr	r3, [pc, #120]	; (14d58 <bt_id_read_public_addr+0x8c>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   14cde:	6153      	str	r3, [r2, #20]
   14ce0:	4b1e      	ldr	r3, [pc, #120]	; (14d5c <bt_id_read_public_addr+0x90>)
   14ce2:	6193      	str	r3, [r2, #24]
   14ce4:	2303      	movs	r3, #3
   14ce6:	f842 3f10 	str.w	r3, [r2, #16]!
   14cea:	481d      	ldr	r0, [pc, #116]	; (14d60 <bt_id_read_public_addr+0x94>)
   14cec:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14cf0:	f008 f9c5 	bl	1d07e <z_log_msg_static_create.constprop.0>
   14cf4:	46a5      	mov	sp, r4
		return 0U;
   14cf6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   14cf8:	370c      	adds	r7, #12
   14cfa:	46bd      	mov	sp, r7
   14cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14cfe:	1d3a      	adds	r2, r7, #4
   14d00:	2100      	movs	r1, #0
   14d02:	f241 0009 	movw	r0, #4105	; 0x1009
   14d06:	f7ff f8e1 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   14d0a:	4606      	mov	r6, r0
   14d0c:	b120      	cbz	r0, 14d18 <bt_id_read_public_addr+0x4c>
		LOG_WRN("Failed to read public address");
   14d0e:	466c      	mov	r4, sp
   14d10:	b088      	sub	sp, #32
   14d12:	466a      	mov	r2, sp
   14d14:	4b13      	ldr	r3, [pc, #76]	; (14d64 <bt_id_read_public_addr+0x98>)
   14d16:	e7e2      	b.n	14cde <bt_id_read_public_addr+0x12>
	rp = (void *)rsp->data;
   14d18:	687b      	ldr	r3, [r7, #4]
	return memcmp(a, b, sizeof(*a));
   14d1a:	4913      	ldr	r1, [pc, #76]	; (14d68 <bt_id_read_public_addr+0x9c>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14d1c:	68dd      	ldr	r5, [r3, #12]
   14d1e:	3501      	adds	r5, #1
   14d20:	2206      	movs	r2, #6
   14d22:	4628      	mov	r0, r5
   14d24:	f008 f93b 	bl	1cf9e <memcmp>
   14d28:	b918      	cbnz	r0, 14d32 <bt_id_read_public_addr+0x66>
		net_buf_unref(rsp);
   14d2a:	6878      	ldr	r0, [r7, #4]
   14d2c:	f000 feb8 	bl	15aa0 <net_buf_unref>
		return 0U;
   14d30:	e7e1      	b.n	14cf6 <bt_id_read_public_addr+0x2a>
   14d32:	490e      	ldr	r1, [pc, #56]	; (14d6c <bt_id_read_public_addr+0xa0>)
   14d34:	2206      	movs	r2, #6
   14d36:	4628      	mov	r0, r5
   14d38:	f008 f931 	bl	1cf9e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14d3c:	2800      	cmp	r0, #0
   14d3e:	d0f4      	beq.n	14d2a <bt_id_read_public_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
   14d40:	2206      	movs	r2, #6
   14d42:	4629      	mov	r1, r5
   14d44:	1c60      	adds	r0, r4, #1
   14d46:	f008 f951 	bl	1cfec <memcpy>
	net_buf_unref(rsp);
   14d4a:	6878      	ldr	r0, [r7, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   14d4c:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   14d4e:	f000 fea7 	bl	15aa0 <net_buf_unref>
	return 1U;
   14d52:	2001      	movs	r0, #1
   14d54:	e7d0      	b.n	14cf8 <bt_id_read_public_addr+0x2c>
   14d56:	bf00      	nop
   14d58:	0001ff06 	.word	0x0001ff06
   14d5c:	0002007b 	.word	0x0002007b
   14d60:	0001e970 	.word	0x0001e970
   14d64:	0001ff23 	.word	0x0001ff23
   14d68:	0001f843 	.word	0x0001f843
   14d6c:	0001f83d 	.word	0x0001f83d

00014d70 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14d70:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14d72:	4668      	mov	r0, sp
   14d74:	f7ff ffaa 	bl	14ccc <bt_id_read_public_addr>
   14d78:	4b04      	ldr	r3, [pc, #16]	; (14d8c <bt_setup_public_id_addr+0x1c>)
   14d7a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14d7c:	b118      	cbz	r0, 14d86 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   14d7e:	4669      	mov	r1, sp
   14d80:	2000      	movs	r0, #0
   14d82:	f7ff fef3 	bl	14b6c <id_create.constprop.0>
}
   14d86:	b003      	add	sp, #12
   14d88:	f85d fb04 	ldr.w	pc, [sp], #4
   14d8c:	20000230 	.word	0x20000230

00014d90 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14d94:	4b2a      	ldr	r3, [pc, #168]	; (14e40 <bt_read_static_addr+0xb0>)
{
   14d96:	b083      	sub	sp, #12
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14d98:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   14d9c:	07db      	lsls	r3, r3, #31
{
   14d9e:	af00      	add	r7, sp, #0
   14da0:	4680      	mov	r8, r0
   14da2:	4689      	mov	r9, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14da4:	d415      	bmi.n	14dd2 <bt_read_static_addr+0x42>
		LOG_WRN("Read Static Addresses command not available");
   14da6:	466c      	mov	r4, sp
   14da8:	b088      	sub	sp, #32
   14daa:	466a      	mov	r2, sp
   14dac:	4b25      	ldr	r3, [pc, #148]	; (14e44 <bt_read_static_addr+0xb4>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   14dae:	6153      	str	r3, [r2, #20]
   14db0:	4b25      	ldr	r3, [pc, #148]	; (14e48 <bt_read_static_addr+0xb8>)
   14db2:	6193      	str	r3, [r2, #24]
   14db4:	2303      	movs	r3, #3
   14db6:	f842 3f10 	str.w	r3, [r2, #16]!
   14dba:	4824      	ldr	r0, [pc, #144]	; (14e4c <bt_read_static_addr+0xbc>)
   14dbc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14dc0:	f008 f95d 	bl	1d07e <z_log_msg_static_create.constprop.0>
		return 0;
   14dc4:	2500      	movs	r5, #0
   14dc6:	46a5      	mov	sp, r4
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   14dc8:	4628      	mov	r0, r5
   14dca:	370c      	adds	r7, #12
   14dcc:	46bd      	mov	sp, r7
   14dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14dd2:	1d3a      	adds	r2, r7, #4
   14dd4:	2100      	movs	r1, #0
   14dd6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14dda:	f7ff f877 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   14dde:	4604      	mov	r4, r0
   14de0:	b120      	cbz	r0, 14dec <bt_read_static_addr+0x5c>
		LOG_WRN("Failed to read static addresses");
   14de2:	466c      	mov	r4, sp
   14de4:	b088      	sub	sp, #32
   14de6:	466a      	mov	r2, sp
   14de8:	4b19      	ldr	r3, [pc, #100]	; (14e50 <bt_read_static_addr+0xc0>)
   14dea:	e7e0      	b.n	14dae <bt_read_static_addr+0x1e>
	rp = (void *)rsp->data;
   14dec:	687b      	ldr	r3, [r7, #4]
   14dee:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   14df0:	7875      	ldrb	r5, [r6, #1]
   14df2:	454d      	cmp	r5, r9
   14df4:	bf28      	it	cs
   14df6:	464d      	movcs	r5, r9
	for (i = 0; i < cnt; i++) {
   14df8:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   14dfa:	f04f 0916 	mov.w	r9, #22
	for (i = 0; i < cnt; i++) {
   14dfe:	42a5      	cmp	r5, r4
   14e00:	dc15      	bgt.n	14e2e <bt_read_static_addr+0x9e>
	net_buf_unref(rsp);
   14e02:	6878      	ldr	r0, [r7, #4]
   14e04:	f000 fe4c 	bl	15aa0 <net_buf_unref>
	if (!cnt) {
   14e08:	2d00      	cmp	r5, #0
   14e0a:	d1dd      	bne.n	14dc8 <bt_read_static_addr+0x38>
		LOG_WRN("No static addresses stored in controller");
   14e0c:	466c      	mov	r4, sp
   14e0e:	b088      	sub	sp, #32
   14e10:	466a      	mov	r2, sp
   14e12:	4b10      	ldr	r3, [pc, #64]	; (14e54 <bt_read_static_addr+0xc4>)
   14e14:	6153      	str	r3, [r2, #20]
   14e16:	4b0c      	ldr	r3, [pc, #48]	; (14e48 <bt_read_static_addr+0xb8>)
   14e18:	6193      	str	r3, [r2, #24]
   14e1a:	2303      	movs	r3, #3
   14e1c:	f842 3f10 	str.w	r3, [r2, #16]!
   14e20:	480a      	ldr	r0, [pc, #40]	; (14e4c <bt_read_static_addr+0xbc>)
   14e22:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14e26:	f008 f92a 	bl	1d07e <z_log_msg_static_create.constprop.0>
   14e2a:	46a5      	mov	sp, r4
   14e2c:	e7cc      	b.n	14dc8 <bt_read_static_addr+0x38>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   14e2e:	4631      	mov	r1, r6
   14e30:	fb09 8004 	mla	r0, r9, r4, r8
   14e34:	2216      	movs	r2, #22
   14e36:	f008 f8d9 	bl	1cfec <memcpy>
	for (i = 0; i < cnt; i++) {
   14e3a:	3401      	adds	r4, #1
   14e3c:	3616      	adds	r6, #22
   14e3e:	e7de      	b.n	14dfe <bt_read_static_addr+0x6e>
   14e40:	20000230 	.word	0x20000230
   14e44:	0001ff45 	.word	0x0001ff45
   14e48:	00020067 	.word	0x00020067
   14e4c:	0001e970 	.word	0x0001e970
   14e50:	0001ff75 	.word	0x0001ff75
   14e54:	0001ff99 	.word	0x0001ff99

00014e58 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14e58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14e5a:	4e15      	ldr	r6, [pc, #84]	; (14eb0 <bt_setup_random_id_addr+0x58>)
   14e5c:	79f4      	ldrb	r4, [r6, #7]
{
   14e5e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   14e60:	b92c      	cbnz	r4, 14e6e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14e62:	2101      	movs	r1, #1
   14e64:	a802      	add	r0, sp, #8
   14e66:	f7ff ff93 	bl	14d90 <bt_read_static_addr>
   14e6a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   14e6c:	b9c8      	cbnz	r0, 14ea2 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   14e6e:	2100      	movs	r1, #0
   14e70:	4608      	mov	r0, r1
}
   14e72:	b009      	add	sp, #36	; 0x24
   14e74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   14e78:	f7ff becc 	b.w	14c14 <bt_id_create>
   14e7c:	ab02      	add	r3, sp, #8
   14e7e:	fb07 3105 	mla	r1, r7, r5, r3
   14e82:	2206      	movs	r2, #6
   14e84:	f10d 0001 	add.w	r0, sp, #1
   14e88:	f008 f8b0 	bl	1cfec <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   14e8c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   14e8e:	4669      	mov	r1, sp
   14e90:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   14e92:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14e96:	f7ff fe69 	bl	14b6c <id_create.constprop.0>
				if (err) {
   14e9a:	3401      	adds	r4, #1
   14e9c:	b110      	cbz	r0, 14ea4 <bt_setup_random_id_addr+0x4c>
}
   14e9e:	b009      	add	sp, #36	; 0x24
   14ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14ea2:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14ea4:	79f3      	ldrb	r3, [r6, #7]
   14ea6:	b2e5      	uxtb	r5, r4
   14ea8:	42ab      	cmp	r3, r5
   14eaa:	d8e7      	bhi.n	14e7c <bt_setup_random_id_addr+0x24>
			return 0;
   14eac:	2000      	movs	r0, #0
   14eae:	e7f6      	b.n	14e9e <bt_setup_random_id_addr+0x46>
   14eb0:	20000230 	.word	0x20000230

00014eb4 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   14eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14eb6:	4606      	mov	r6, r0
   14eb8:	af00      	add	r7, sp, #0
	int err;

	CHECKIF(own_addr_type == NULL) {
   14eba:	460d      	mov	r5, r1
   14ebc:	b339      	cbz	r1, 14f0e <bt_id_set_scan_own_addr+0x5a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   14ebe:	4b15      	ldr	r3, [pc, #84]	; (14f14 <bt_id_set_scan_own_addr+0x60>)
   14ec0:	781b      	ldrb	r3, [r3, #0]
   14ec2:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   14ec4:	f008 f8de 	bl	1d084 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   14ec8:	b118      	cbz	r0, 14ed2 <bt_id_set_scan_own_addr+0x1e>
				return err;
			}
		}
	}

	return 0;
   14eca:	2400      	movs	r4, #0
}
   14ecc:	4620      	mov	r0, r4
   14ece:	46bd      	mov	sp, r7
   14ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   14ed2:	f008 f8ee 	bl	1d0b2 <bt_id_set_private_addr>
			if (err) {
   14ed6:	4604      	mov	r4, r0
   14ed8:	b1b0      	cbz	r0, 14f08 <bt_id_set_scan_own_addr+0x54>
				if (active_scan || !is_adv_using_rand_addr()) {
   14eda:	2e00      	cmp	r6, #0
   14edc:	d1f6      	bne.n	14ecc <bt_id_set_scan_own_addr+0x18>
   14ede:	f008 f8d1 	bl	1d084 <is_adv_using_rand_addr>
   14ee2:	2800      	cmp	r0, #0
   14ee4:	d0f2      	beq.n	14ecc <bt_id_set_scan_own_addr+0x18>
				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
   14ee6:	466e      	mov	r6, sp
   14ee8:	b088      	sub	sp, #32
   14eea:	466a      	mov	r2, sp
   14eec:	4b0a      	ldr	r3, [pc, #40]	; (14f18 <bt_id_set_scan_own_addr+0x64>)
   14eee:	6153      	str	r3, [r2, #20]
   14ef0:	4b0a      	ldr	r3, [pc, #40]	; (14f1c <bt_id_set_scan_own_addr+0x68>)
   14ef2:	480b      	ldr	r0, [pc, #44]	; (14f20 <bt_id_set_scan_own_addr+0x6c>)
   14ef4:	e9c2 3406 	strd	r3, r4, [r2, #24]
   14ef8:	2304      	movs	r3, #4
   14efa:	f842 3f10 	str.w	r3, [r2, #16]!
   14efe:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14f02:	f008 f8bc 	bl	1d07e <z_log_msg_static_create.constprop.0>
   14f06:	46b5      	mov	sp, r6
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14f08:	2301      	movs	r3, #1
   14f0a:	702b      	strb	r3, [r5, #0]
   14f0c:	e7dd      	b.n	14eca <bt_id_set_scan_own_addr+0x16>
		return -EINVAL;
   14f0e:	f06f 0415 	mvn.w	r4, #21
   14f12:	e7db      	b.n	14ecc <bt_id_set_scan_own_addr+0x18>
   14f14:	20000230 	.word	0x20000230
   14f18:	0001ffc6 	.word	0x0001ffc6
   14f1c:	0002004f 	.word	0x0002004f
   14f20:	0001e970 	.word	0x0001e970

00014f24 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   14f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14f28:	460f      	mov	r7, r1
   14f2a:	4691      	mov	r9, r2
   14f2c:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   14f2e:	4604      	mov	r4, r0
   14f30:	2800      	cmp	r0, #0
   14f32:	d066      	beq.n	15002 <bt_id_set_adv_own_addr+0xde>
   14f34:	2b00      	cmp	r3, #0
   14f36:	d064      	beq.n	15002 <bt_id_set_adv_own_addr+0xde>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14f38:	07cb      	lsls	r3, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   14f3a:	7805      	ldrb	r5, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14f3c:	d535      	bpl.n	14faa <bt_id_set_adv_own_addr+0x86>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14f3e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 15008 <bt_id_set_adv_own_addr+0xe4>
   14f42:	b1a2      	cbz	r2, 14f6e <bt_id_set_adv_own_addr+0x4a>
   14f44:	0688      	lsls	r0, r1, #26
   14f46:	d40b      	bmi.n	14f60 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14f48:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14f4c:	f818 3003 	ldrb.w	r3, [r8, r3]
   14f50:	2b01      	cmp	r3, #1
   14f52:	d017      	beq.n	14f84 <bt_id_set_adv_own_addr+0x60>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14f54:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14f56:	06ba      	lsls	r2, r7, #26
   14f58:	d510      	bpl.n	14f7c <bt_id_set_adv_own_addr+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14f5a:	f043 0302 	orr.w	r3, r3, #2
   14f5e:	e00c      	b.n	14f7a <bt_id_set_adv_own_addr+0x56>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14f60:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   14f64:	0659      	lsls	r1, r3, #25
   14f66:	d4ef      	bmi.n	14f48 <bt_id_set_adv_own_addr+0x24>
			return -ENOTSUP;
   14f68:	f06f 0485 	mvn.w	r4, #133	; 0x85
   14f6c:	e007      	b.n	14f7e <bt_id_set_adv_own_addr+0x5a>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14f6e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14f72:	f818 3003 	ldrb.w	r3, [r8, r3]
   14f76:	2b01      	cmp	r3, #1
   14f78:	d004      	beq.n	14f84 <bt_id_set_adv_own_addr+0x60>
			*own_addr_type = id_addr->type;
   14f7a:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14f7c:	2400      	movs	r4, #0
}
   14f7e:	4620      	mov	r0, r4
   14f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14f84:	2107      	movs	r1, #7
   14f86:	fb01 8105 	mla	r1, r1, r5, r8
   14f8a:	4620      	mov	r0, r4
   14f8c:	3101      	adds	r1, #1
   14f8e:	f008 f888 	bl	1d0a2 <bt_id_set_adv_random_addr>
				if (err) {
   14f92:	4604      	mov	r4, r0
   14f94:	2800      	cmp	r0, #0
   14f96:	d1f2      	bne.n	14f7e <bt_id_set_adv_own_addr+0x5a>
			*own_addr_type = id_addr->type;
   14f98:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   14f9c:	f818 3005 	ldrb.w	r3, [r8, r5]
   14fa0:	7033      	strb	r3, [r6, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14fa2:	f1b9 0f00 	cmp.w	r9, #0
   14fa6:	d0e9      	beq.n	14f7c <bt_id_set_adv_own_addr+0x58>
   14fa8:	e7d5      	b.n	14f56 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14faa:	f011 0704 	ands.w	r7, r1, #4
   14fae:	d011      	beq.n	14fd4 <bt_id_set_adv_own_addr+0xb0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14fb0:	4f15      	ldr	r7, [pc, #84]	; (15008 <bt_id_set_adv_own_addr+0xe4>)
   14fb2:	ebc5 08c5 	rsb	r8, r5, r5, lsl #3
   14fb6:	f817 3008 	ldrb.w	r3, [r7, r8]
   14fba:	2b01      	cmp	r3, #1
   14fbc:	d1dd      	bne.n	14f7a <bt_id_set_adv_own_addr+0x56>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14fbe:	2107      	movs	r1, #7
   14fc0:	fb11 3105 	smlabb	r1, r1, r5, r3
   14fc4:	4439      	add	r1, r7
   14fc6:	f008 f86c 	bl	1d0a2 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   14fca:	f817 3008 	ldrb.w	r3, [r7, r8]
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14fce:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14fd0:	7033      	strb	r3, [r6, #0]
		if (err) {
   14fd2:	e7d4      	b.n	14f7e <bt_id_set_adv_own_addr+0x5a>
   14fd4:	480d      	ldr	r0, [pc, #52]	; (1500c <bt_id_set_adv_own_addr+0xe8>)
   14fd6:	f008 f84c 	bl	1d072 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   14fda:	0643      	lsls	r3, r0, #25
   14fdc:	d50b      	bpl.n	14ff6 <bt_id_set_adv_own_addr+0xd2>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   14fde:	4638      	mov	r0, r7
   14fe0:	f008 f996 	bl	1d310 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   14fe4:	4620      	mov	r0, r4
   14fe6:	f008 f87a 	bl	1d0de <bt_id_set_adv_private_addr>
   14fea:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14fec:	2001      	movs	r0, #1
   14fee:	7030      	strb	r0, [r6, #0]
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   14ff0:	f008 f98e 	bl	1d310 <bt_le_scan_set_enable>
   14ff4:	e7c3      	b.n	14f7e <bt_id_set_adv_own_addr+0x5a>
			err = bt_id_set_adv_private_addr(adv);
   14ff6:	4620      	mov	r0, r4
   14ff8:	f008 f871 	bl	1d0de <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14ffc:	2301      	movs	r3, #1
			err = bt_id_set_adv_private_addr(adv);
   14ffe:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15000:	e7e6      	b.n	14fd0 <bt_id_set_adv_own_addr+0xac>
		return -EINVAL;
   15002:	f06f 0415 	mvn.w	r4, #21
   15006:	e7ba      	b.n	14f7e <bt_id_set_adv_own_addr+0x5a>
   15008:	20000230 	.word	0x20000230
   1500c:	200002fc 	.word	0x200002fc

00015010 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   15010:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15012:	4d18      	ldr	r5, [pc, #96]	; (15074 <bt_id_init+0x64>)
   15014:	79eb      	ldrb	r3, [r5, #7]
{
   15016:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15018:	b11b      	cbz	r3, 15022 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1501a:	2400      	movs	r4, #0
}
   1501c:	4620      	mov	r0, r4
   1501e:	46bd      	mov	sp, r7
   15020:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_setup_public_id_addr();
   15022:	f7ff fea5 	bl	14d70 <bt_setup_public_id_addr>
		if (err) {
   15026:	4604      	mov	r4, r0
   15028:	b180      	cbz	r0, 1504c <bt_id_init+0x3c>
			LOG_ERR("Unable to set identity address");
   1502a:	466d      	mov	r5, sp
   1502c:	b088      	sub	sp, #32
   1502e:	466a      	mov	r2, sp
   15030:	4b11      	ldr	r3, [pc, #68]	; (15078 <bt_id_init+0x68>)
			LOG_ERR("Unable to set random address");
   15032:	6153      	str	r3, [r2, #20]
   15034:	4b11      	ldr	r3, [pc, #68]	; (1507c <bt_id_init+0x6c>)
   15036:	6193      	str	r3, [r2, #24]
   15038:	2303      	movs	r3, #3
   1503a:	f842 3f10 	str.w	r3, [r2, #16]!
   1503e:	4810      	ldr	r0, [pc, #64]	; (15080 <bt_id_init+0x70>)
   15040:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15044:	f008 f81b 	bl	1d07e <z_log_msg_static_create.constprop.0>
   15048:	46ad      	mov	sp, r5
			return err;
   1504a:	e7e7      	b.n	1501c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1504c:	79eb      	ldrb	r3, [r5, #7]
   1504e:	2b00      	cmp	r3, #0
   15050:	d1e3      	bne.n	1501a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   15052:	f7ff ff01 	bl	14e58 <bt_setup_random_id_addr>
		if (err) {
   15056:	4604      	mov	r4, r0
   15058:	2800      	cmp	r0, #0
   1505a:	d1e6      	bne.n	1502a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1505c:	1c68      	adds	r0, r5, #1
   1505e:	f7ff fd59 	bl	14b14 <set_random_address>
		if (err) {
   15062:	4604      	mov	r4, r0
   15064:	2800      	cmp	r0, #0
   15066:	d0d9      	beq.n	1501c <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   15068:	466d      	mov	r5, sp
   1506a:	b088      	sub	sp, #32
   1506c:	466a      	mov	r2, sp
   1506e:	4b05      	ldr	r3, [pc, #20]	; (15084 <bt_id_init+0x74>)
   15070:	e7df      	b.n	15032 <bt_id_init+0x22>
   15072:	bf00      	nop
   15074:	20000230 	.word	0x20000230
   15078:	00020000 	.word	0x00020000
   1507c:	00020044 	.word	0x00020044
   15080:	0001e970 	.word	0x0001e970
   15084:	00020023 	.word	0x00020023

00015088 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   15088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1508c:	b085      	sub	sp, #20
   1508e:	af00      	add	r7, sp, #0
   15090:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15092:	2120      	movs	r1, #32
{
   15094:	60b8      	str	r0, [r7, #8]
   15096:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15098:	f7fe fede 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   1509c:	4605      	mov	r5, r0
   1509e:	2800      	cmp	r0, #0
   150a0:	d066      	beq.n	15170 <hci_set_ad+0xe8>
	return net_buf_simple_add(&buf->b, len);
   150a2:	2120      	movs	r1, #32
   150a4:	300c      	adds	r0, #12
   150a6:	f008 f974 	bl	1d392 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   150aa:	2220      	movs	r2, #32
   150ac:	2100      	movs	r1, #0
   150ae:	4682      	mov	sl, r0
   150b0:	f007 ffa7 	bl	1d002 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   150b4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   150b8:	f10a 0b01 	add.w	fp, sl, #1
	for (size_t i = 0; i < ad_len; i++) {
   150bc:	60fb      	str	r3, [r7, #12]
	uint8_t set_data_len = 0;
   150be:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   150c0:	f8d4 9000 	ldr.w	r9, [r4]
   150c4:	2300      	movs	r3, #0
   150c6:	6862      	ldr	r2, [r4, #4]
   150c8:	4293      	cmp	r3, r2
   150ca:	d30b      	bcc.n	150e4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   150cc:	68fb      	ldr	r3, [r7, #12]
   150ce:	3408      	adds	r4, #8
   150d0:	42a3      	cmp	r3, r4
   150d2:	d1f5      	bne.n	150c0 <hci_set_ad+0x38>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   150d4:	68b8      	ldr	r0, [r7, #8]
	*data_len = set_data_len;
   150d6:	f88a 6000 	strb.w	r6, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   150da:	2200      	movs	r2, #0
   150dc:	4629      	mov	r1, r5
   150de:	f7fe fef5 	bl	13ecc <bt_hci_cmd_send_sync>
   150e2:	e024      	b.n	1512e <hci_set_ad+0xa6>
			size_t len = data[j].data_len;
   150e4:	f899 2001 	ldrb.w	r2, [r9, #1]
			uint8_t type = data[j].type;
   150e8:	f899 c000 	ldrb.w	ip, [r9]
			if ((set_data_len + len + 2) > set_data_len_max) {
   150ec:	1cb0      	adds	r0, r6, #2
   150ee:	1881      	adds	r1, r0, r2
   150f0:	291f      	cmp	r1, #31
   150f2:	d922      	bls.n	1513a <hci_set_ad+0xb2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   150f4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   150f8:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   150fc:	d101      	bne.n	15102 <hci_set_ad+0x7a>
   150fe:	2a00      	cmp	r2, #0
   15100:	dc19      	bgt.n	15136 <hci_set_ad+0xae>
					LOG_ERR("Too big advertising data");
   15102:	466c      	mov	r4, sp
   15104:	b088      	sub	sp, #32
   15106:	466a      	mov	r2, sp
   15108:	4b1b      	ldr	r3, [pc, #108]	; (15178 <hci_set_ad+0xf0>)
   1510a:	6153      	str	r3, [r2, #20]
   1510c:	4b1b      	ldr	r3, [pc, #108]	; (1517c <hci_set_ad+0xf4>)
   1510e:	6193      	str	r3, [r2, #24]
   15110:	2303      	movs	r3, #3
   15112:	f842 3f10 	str.w	r3, [r2, #16]!
   15116:	481a      	ldr	r0, [pc, #104]	; (15180 <hci_set_ad+0xf8>)
   15118:	2300      	movs	r3, #0
   1511a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1511e:	f7fc ff53 	bl	11fc8 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   15122:	4628      	mov	r0, r5
   15124:	46a5      	mov	sp, r4
   15126:	f000 fcbb 	bl	15aa0 <net_buf_unref>
					return -EINVAL;
   1512a:	f06f 0015 	mvn.w	r0, #21
}
   1512e:	3714      	adds	r7, #20
   15130:	46bd      	mov	sp, r7
   15132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   15136:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1513a:	fa5f f882 	uxtb.w	r8, r2
   1513e:	f108 0101 	add.w	r1, r8, #1
   15142:	f80b 1006 	strb.w	r1, [fp, r6]
   15146:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   15148:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1514a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1514e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   15152:	f8d9 1004 	ldr.w	r1, [r9, #4]
   15156:	607b      	str	r3, [r7, #4]
			set_data_len += len;
   15158:	f108 0802 	add.w	r8, r8, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1515c:	f007 ff46 	bl	1cfec <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   15160:	687b      	ldr	r3, [r7, #4]
			set_data_len += len;
   15162:	44b0      	add	r8, r6
   15164:	fa5f f688 	uxtb.w	r6, r8
		for (size_t j = 0; j < ad[i].len; j++) {
   15168:	3301      	adds	r3, #1
   1516a:	f109 0908 	add.w	r9, r9, #8
   1516e:	e7aa      	b.n	150c6 <hci_set_ad+0x3e>
		return -ENOBUFS;
   15170:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15174:	e7db      	b.n	1512e <hci_set_ad+0xa6>
   15176:	bf00      	nop
   15178:	000200a5 	.word	0x000200a5
   1517c:	00020127 	.word	0x00020127
   15180:	0001e960 	.word	0x0001e960

00015184 <valid_adv_param>:
{
   15184:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15186:	6843      	ldr	r3, [r0, #4]
{
   15188:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1518a:	0558      	lsls	r0, r3, #21
   1518c:	d501      	bpl.n	15192 <valid_adv_param+0xe>
		return false;
   1518e:	2000      	movs	r0, #0
}
   15190:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15192:	6922      	ldr	r2, [r4, #16]
   15194:	b10a      	cbz	r2, 1519a <valid_adv_param+0x16>
   15196:	07d9      	lsls	r1, r3, #31
   15198:	d5f9      	bpl.n	1518e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1519a:	4d19      	ldr	r5, [pc, #100]	; (15200 <valid_adv_param+0x7c>)
   1519c:	7820      	ldrb	r0, [r4, #0]
   1519e:	79eb      	ldrb	r3, [r5, #7]
   151a0:	4283      	cmp	r3, r0
   151a2:	d9f4      	bls.n	1518e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   151a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   151a8:	4916      	ldr	r1, [pc, #88]	; (15204 <valid_adv_param+0x80>)
   151aa:	2207      	movs	r2, #7
   151ac:	4428      	add	r0, r5
   151ae:	f007 fef6 	bl	1cf9e <memcmp>
	if (param->id >= bt_dev.id_count ||
   151b2:	2800      	cmp	r0, #0
   151b4:	d0eb      	beq.n	1518e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   151b6:	6860      	ldr	r0, [r4, #4]
   151b8:	07c2      	lsls	r2, r0, #31
   151ba:	d406      	bmi.n	151ca <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   151bc:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   151c0:	2b08      	cmp	r3, #8
   151c2:	d802      	bhi.n	151ca <valid_adv_param+0x46>
   151c4:	68a3      	ldr	r3, [r4, #8]
   151c6:	2b9f      	cmp	r3, #159	; 0x9f
   151c8:	d9e1      	bls.n	1518e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   151ca:	f010 0f30 	tst.w	r0, #48	; 0x30
   151ce:	d002      	beq.n	151d6 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   151d0:	6923      	ldr	r3, [r4, #16]
   151d2:	2b00      	cmp	r3, #0
   151d4:	d0db      	beq.n	1518e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   151d6:	06c3      	lsls	r3, r0, #27
   151d8:	d401      	bmi.n	151de <valid_adv_param+0x5a>
   151da:	6923      	ldr	r3, [r4, #16]
   151dc:	b943      	cbnz	r3, 151f0 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   151de:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   151e2:	429a      	cmp	r2, r3
   151e4:	d8d3      	bhi.n	1518e <valid_adv_param+0xa>
   151e6:	2a1f      	cmp	r2, #31
   151e8:	d9d1      	bls.n	1518e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   151ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   151ee:	d8ce      	bhi.n	1518e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   151f0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   151f4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   151f8:	bf18      	it	ne
   151fa:	2001      	movne	r0, #1
   151fc:	e7c8      	b.n	15190 <valid_adv_param+0xc>
   151fe:	bf00      	nop
   15200:	20000230 	.word	0x20000230
   15204:	0001f836 	.word	0x0001f836

00015208 <bt_le_adv_lookup_legacy>:
}
   15208:	4800      	ldr	r0, [pc, #0]	; (1520c <bt_le_adv_lookup_legacy+0x4>)
   1520a:	4770      	bx	lr
   1520c:	20000248 	.word	0x20000248

00015210 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   15210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15214:	b08b      	sub	sp, #44	; 0x2c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   15216:	f8d1 b010 	ldr.w	fp, [r1, #16]
{
   1521a:	af04      	add	r7, sp, #16
	bool dir_adv = (param->peer != NULL), scannable = false;
   1521c:	f1bb 0500 	subs.w	r5, fp, #0
{
   15220:	4606      	mov	r6, r0
   15222:	4884      	ldr	r0, [pc, #528]	; (15434 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable = false;
   15224:	bf18      	it	ne
   15226:	2501      	movne	r5, #1
{
   15228:	e9c7 3200 	strd	r3, r2, [r7]
   1522c:	f007 ff86 	bl	1d13c <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15230:	0740      	lsls	r0, r0, #29
{
   15232:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15234:	f140 80f2 	bpl.w	1541c <bt_le_adv_start_legacy+0x20c>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15238:	4608      	mov	r0, r1
   1523a:	f7ff ffa3 	bl	15184 <valid_adv_param>
   1523e:	b930      	cbnz	r0, 1524e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   15240:	f06f 0515 	mvn.w	r5, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   15244:	4628      	mov	r0, r5
   15246:	371c      	adds	r7, #28
   15248:	46bd      	mov	sp, r7
   1524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1524e:	4620      	mov	r0, r4
   15250:	f7ff fcbe 	bl	14bd0 <bt_id_adv_random_addr_check>
   15254:	4682      	mov	sl, r0
   15256:	2800      	cmp	r0, #0
   15258:	d0f2      	beq.n	15240 <bt_le_adv_start_legacy+0x30>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1525a:	f106 0910 	add.w	r9, r6, #16
   1525e:	4648      	mov	r0, r9
   15260:	f007 ff6c 	bl	1d13c <atomic_get>
   15264:	0601      	lsls	r1, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15266:	f3c0 18c0 	ubfx	r8, r0, #7, #1
   1526a:	f100 80da 	bmi.w	15422 <bt_le_adv_start_legacy+0x212>
	(void)memset(&set_param, 0, sizeof(set_param));
   1526e:	220f      	movs	r2, #15
   15270:	4641      	mov	r1, r8
   15272:	f107 0008 	add.w	r0, r7, #8
   15276:	f007 fec4 	bl	1d002 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1527a:	68a3      	ldr	r3, [r4, #8]
   1527c:	813b      	strh	r3, [r7, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1527e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15280:	68e3      	ldr	r3, [r4, #12]
   15282:	817b      	strh	r3, [r7, #10]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15284:	f007 ff4b 	bl	1d11e <get_adv_channel_map>
	if (adv->id != param->id) {
   15288:	7832      	ldrb	r2, [r6, #0]
   1528a:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1528c:	7578      	strb	r0, [r7, #21]
	if (adv->id != param->id) {
   1528e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   15290:	f887 8016 	strb.w	r8, [r7, #22]
	if (adv->id != param->id) {
   15294:	d004      	beq.n	152a0 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15296:	4867      	ldr	r0, [pc, #412]	; (15434 <bt_le_adv_start_legacy+0x224>)
   15298:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1529c:	f007 ff54 	bl	1d148 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   152a0:	4a65      	ldr	r2, [pc, #404]	; (15438 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   152a2:	7823      	ldrb	r3, [r4, #0]
   152a4:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   152a6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   152aa:	6861      	ldr	r1, [r4, #4]
   152ac:	462a      	mov	r2, r5
   152ae:	f107 030d 	add.w	r3, r7, #13
   152b2:	4630      	mov	r0, r6
   152b4:	f7ff fe36 	bl	14f24 <bt_id_set_adv_own_addr>
	if (err) {
   152b8:	4605      	mov	r5, r0
   152ba:	2800      	cmp	r0, #0
   152bc:	d1c2      	bne.n	15244 <bt_le_adv_start_legacy+0x34>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   152be:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   152c2:	2207      	movs	r2, #7
	if (dir_adv) {
   152c4:	f1bb 0f00 	cmp.w	fp, #0
   152c8:	d013      	beq.n	152f2 <bt_le_adv_start_legacy+0xe2>
   152ca:	6921      	ldr	r1, [r4, #16]
   152cc:	f007 fe8e 	bl	1cfec <memcpy>
	name_type = get_adv_name_type_param(param);
   152d0:	4620      	mov	r0, r4
   152d2:	f007 ffd6 	bl	1d282 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   152d6:	6863      	ldr	r3, [r4, #4]
   152d8:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   152da:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   152dc:	d416      	bmi.n	1530c <bt_le_adv_start_legacy+0xfc>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   152de:	0598      	lsls	r0, r3, #22
   152e0:	d404      	bmi.n	152ec <bt_le_adv_start_legacy+0xdc>
   152e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   152e4:	b913      	cbnz	r3, 152ec <bt_le_adv_start_legacy+0xdc>
   152e6:	f1b8 0f02 	cmp.w	r8, #2
   152ea:	d150      	bne.n	1538e <bt_le_adv_start_legacy+0x17e>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   152ec:	2302      	movs	r3, #2
   152ee:	733b      	strb	r3, [r7, #12]
   152f0:	e019      	b.n	15326 <bt_le_adv_start_legacy+0x116>
   152f2:	4952      	ldr	r1, [pc, #328]	; (1543c <bt_le_adv_start_legacy+0x22c>)
   152f4:	f007 fe7a 	bl	1cfec <memcpy>
	name_type = get_adv_name_type_param(param);
   152f8:	4620      	mov	r0, r4
   152fa:	f007 ffc2 	bl	1d282 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   152fe:	6863      	ldr	r3, [r4, #4]
   15300:	07dd      	lsls	r5, r3, #31
	name_type = get_adv_name_type_param(param);
   15302:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15304:	d5eb      	bpl.n	152de <bt_le_adv_start_legacy+0xce>
			set_param.type = BT_HCI_ADV_IND;
   15306:	f887 b00c 	strb.w	fp, [r7, #12]
   1530a:	e00c      	b.n	15326 <bt_le_adv_start_legacy+0x116>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1530c:	f013 0f10 	tst.w	r3, #16
   15310:	bf0c      	ite	eq
   15312:	2301      	moveq	r3, #1
   15314:	2304      	movne	r3, #4
   15316:	6921      	ldr	r1, [r4, #16]
   15318:	733b      	strb	r3, [r7, #12]
   1531a:	2207      	movs	r2, #7
   1531c:	f107 000e 	add.w	r0, r7, #14
   15320:	f007 fe64 	bl	1cfec <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   15324:	46aa      	mov	sl, r5
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15326:	210f      	movs	r1, #15
   15328:	f242 0006 	movw	r0, #8198	; 0x2006
   1532c:	f7fe fd94 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   15330:	4605      	mov	r5, r0
   15332:	2800      	cmp	r0, #0
   15334:	d078      	beq.n	15428 <bt_le_adv_start_legacy+0x218>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15336:	220f      	movs	r2, #15
   15338:	f107 0108 	add.w	r1, r7, #8
   1533c:	300c      	adds	r0, #12
   1533e:	f008 f82e 	bl	1d39e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   15342:	4629      	mov	r1, r5
   15344:	2200      	movs	r2, #0
   15346:	f242 0006 	movw	r0, #8198	; 0x2006
   1534a:	f7fe fdbf 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   1534e:	4605      	mov	r5, r0
   15350:	2800      	cmp	r0, #0
   15352:	f47f af77 	bne.w	15244 <bt_le_adv_start_legacy+0x34>
	if (!dir_adv) {
   15356:	f1bb 0f00 	cmp.w	fp, #0
   1535a:	d01d      	beq.n	15398 <bt_le_adv_start_legacy+0x188>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1535c:	4630      	mov	r0, r6
   1535e:	2101      	movs	r1, #1
   15360:	f007 ff9f 	bl	1d2a2 <bt_le_adv_set_enable_legacy>
	if (err) {
   15364:	4606      	mov	r6, r0
   15366:	b378      	cbz	r0, 153c8 <bt_le_adv_start_legacy+0x1b8>
		LOG_ERR("Failed to start advertiser");
   15368:	466c      	mov	r4, sp
   1536a:	b088      	sub	sp, #32
   1536c:	aa04      	add	r2, sp, #16
   1536e:	4b34      	ldr	r3, [pc, #208]	; (15440 <bt_le_adv_start_legacy+0x230>)
   15370:	6153      	str	r3, [r2, #20]
   15372:	4b34      	ldr	r3, [pc, #208]	; (15444 <bt_le_adv_start_legacy+0x234>)
   15374:	6193      	str	r3, [r2, #24]
   15376:	2303      	movs	r3, #3
   15378:	f842 3f10 	str.w	r3, [r2, #16]!
   1537c:	4832      	ldr	r0, [pc, #200]	; (15448 <bt_le_adv_start_legacy+0x238>)
   1537e:	2300      	movs	r3, #0
   15380:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15384:	f7fc fe20 	bl	11fc8 <z_impl_z_log_msg_static_create>
		return err;
   15388:	4635      	mov	r5, r6
   1538a:	46a5      	mov	sp, r4
   1538c:	e75a      	b.n	15244 <bt_le_adv_start_legacy+0x34>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1538e:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   15390:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15394:	733b      	strb	r3, [r7, #12]
   15396:	e7c6      	b.n	15326 <bt_le_adv_start_legacy+0x116>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15398:	e9cd a801 	strd	sl, r8, [sp, #4]
   1539c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1539e:	9300      	str	r3, [sp, #0]
   153a0:	e9d7 2100 	ldrd	r2, r1, [r7]
   153a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   153a6:	4630      	mov	r0, r6
   153a8:	f007 fef4 	bl	1d194 <le_adv_update.constprop.0>
		if (err) {
   153ac:	2800      	cmp	r0, #0
   153ae:	d13e      	bne.n	1542e <bt_le_adv_start_legacy+0x21e>
	return bt_le_adv_set_enable_legacy(adv, enable);
   153b0:	4630      	mov	r0, r6
   153b2:	2101      	movs	r1, #1
   153b4:	f007 ff75 	bl	1d2a2 <bt_le_adv_set_enable_legacy>
	if (err) {
   153b8:	4606      	mov	r6, r0
   153ba:	2800      	cmp	r0, #0
   153bc:	d1d4      	bne.n	15368 <bt_le_adv_start_legacy+0x158>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   153be:	6866      	ldr	r6, [r4, #4]
   153c0:	f086 0602 	eor.w	r6, r6, #2
   153c4:	f3c6 0640 	ubfx	r6, r6, #1, #1
   153c8:	f006 0201 	and.w	r2, r6, #1
   153cc:	4648      	mov	r0, r9
   153ce:	210e      	movs	r1, #14
   153d0:	f007 fec9 	bl	1d166 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   153d4:	f108 33ff 	add.w	r3, r8, #4294967295
   153d8:	425a      	negs	r2, r3
   153da:	415a      	adcs	r2, r3
   153dc:	4648      	mov	r0, r9
   153de:	2108      	movs	r1, #8
   153e0:	f007 fec1 	bl	1d166 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   153e4:	f1a8 0102 	sub.w	r1, r8, #2
   153e8:	424a      	negs	r2, r1
   153ea:	414a      	adcs	r2, r1
   153ec:	4648      	mov	r0, r9
   153ee:	2109      	movs	r1, #9
   153f0:	f007 feb9 	bl	1d166 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   153f4:	6862      	ldr	r2, [r4, #4]
   153f6:	4648      	mov	r0, r9
   153f8:	f002 0201 	and.w	r2, r2, #1
   153fc:	210a      	movs	r1, #10
   153fe:	f007 feb2 	bl	1d166 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   15402:	4652      	mov	r2, sl
   15404:	4648      	mov	r0, r9
   15406:	210b      	movs	r1, #11
   15408:	f007 fead 	bl	1d166 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1540c:	6862      	ldr	r2, [r4, #4]
   1540e:	210d      	movs	r1, #13
   15410:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15414:	4648      	mov	r0, r9
   15416:	f007 fea6 	bl	1d166 <atomic_set_bit_to>
	return 0;
   1541a:	e713      	b.n	15244 <bt_le_adv_start_legacy+0x34>
		return -EAGAIN;
   1541c:	f06f 050a 	mvn.w	r5, #10
   15420:	e710      	b.n	15244 <bt_le_adv_start_legacy+0x34>
		return -EALREADY;
   15422:	f06f 0577 	mvn.w	r5, #119	; 0x77
   15426:	e70d      	b.n	15244 <bt_le_adv_start_legacy+0x34>
		return -ENOBUFS;
   15428:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1542c:	e70a      	b.n	15244 <bt_le_adv_start_legacy+0x34>
   1542e:	4605      	mov	r5, r0
   15430:	e708      	b.n	15244 <bt_le_adv_start_legacy+0x34>
   15432:	bf00      	nop
   15434:	200002fc 	.word	0x200002fc
   15438:	20000230 	.word	0x20000230
   1543c:	0001f836 	.word	0x0001f836
   15440:	000200c2 	.word	0x000200c2
   15444:	00020110 	.word	0x00020110
   15448:	0001e960 	.word	0x0001e960

0001544c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1544c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1544e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15450:	9a06      	ldr	r2, [sp, #24]
{
   15452:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15454:	e9cd 3200 	strd	r3, r2, [sp]
   15458:	462b      	mov	r3, r5
   1545a:	460a      	mov	r2, r1
   1545c:	4601      	mov	r1, r0
   1545e:	4811      	ldr	r0, [pc, #68]	; (154a4 <bt_le_adv_start+0x58>)
   15460:	f7ff fed6 	bl	15210 <bt_le_adv_start_legacy>
   15464:	4621      	mov	r1, r4
   15466:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   15468:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1546a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1546e:	429d      	cmp	r5, r3
   15470:	d102      	bne.n	15478 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   15472:	4630      	mov	r0, r6
   15474:	b002      	add	sp, #8
   15476:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   15478:	880a      	ldrh	r2, [r1, #0]
   1547a:	4282      	cmp	r2, r0
   1547c:	d104      	bne.n	15488 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1547e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   15480:	b112      	cbz	r2, 15488 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   15482:	7812      	ldrb	r2, [r2, #0]
   15484:	07d2      	lsls	r2, r2, #31
   15486:	d402      	bmi.n	1548e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   15488:	3301      	adds	r3, #1
   1548a:	3108      	adds	r1, #8
   1548c:	e7ef      	b.n	1546e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1548e:	4906      	ldr	r1, [pc, #24]	; (154a8 <bt_le_adv_start+0x5c>)
   15490:	4806      	ldr	r0, [pc, #24]	; (154ac <bt_le_adv_start+0x60>)
   15492:	f008 fdb2 	bl	1dffa <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   15496:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1549a:	2300      	movs	r3, #0
   1549c:	4803      	ldr	r0, [pc, #12]	; (154ac <bt_le_adv_start+0x60>)
   1549e:	f003 fbdf 	bl	18c60 <k_work_reschedule>
   154a2:	e7e6      	b.n	15472 <bt_le_adv_start+0x26>
   154a4:	20000248 	.word	0x20000248
   154a8:	00015509 	.word	0x00015509
   154ac:	20000260 	.word	0x20000260

000154b0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   154b0:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   154b2:	4812      	ldr	r0, [pc, #72]	; (154fc <bt_le_adv_stop+0x4c>)
   154b4:	f007 ff1a 	bl	1d2ec <bt_le_lim_adv_cancel_timeout>
   154b8:	4811      	ldr	r0, [pc, #68]	; (15500 <bt_le_adv_stop+0x50>)
   154ba:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   154be:	f007 fe43 	bl	1d148 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   154c2:	480f      	ldr	r0, [pc, #60]	; (15500 <bt_le_adv_stop+0x50>)
   154c4:	f007 fe3a 	bl	1d13c <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   154c8:	0602      	lsls	r2, r0, #24
   154ca:	d513      	bpl.n	154f4 <bt_le_adv_stop+0x44>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   154cc:	480b      	ldr	r0, [pc, #44]	; (154fc <bt_le_adv_stop+0x4c>)
   154ce:	2100      	movs	r1, #0
   154d0:	f007 fee7 	bl	1d2a2 <bt_le_adv_set_enable_legacy>
		if (err) {
   154d4:	4604      	mov	r4, r0
   154d6:	b970      	cbnz	r0, 154f6 <bt_le_adv_stop+0x46>
   154d8:	480a      	ldr	r0, [pc, #40]	; (15504 <bt_le_adv_stop+0x54>)
   154da:	f007 fe2f 	bl	1d13c <atomic_get>
	if (!(IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	      BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) &&
	    !IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY)) {
		/* If scan is ongoing set back NRPA */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   154de:	0643      	lsls	r3, r0, #25
   154e0:	d508      	bpl.n	154f4 <bt_le_adv_stop+0x44>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   154e2:	4620      	mov	r0, r4
   154e4:	f007 ff14 	bl	1d310 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   154e8:	4620      	mov	r0, r4
   154ea:	f007 fde2 	bl	1d0b2 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   154ee:	2001      	movs	r0, #1
   154f0:	f007 ff0e 	bl	1d310 <bt_le_scan_set_enable>
		return 0;
   154f4:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   154f6:	4620      	mov	r0, r4
   154f8:	bd10      	pop	{r4, pc}
   154fa:	bf00      	nop
   154fc:	20000248 	.word	0x20000248
   15500:	20000258 	.word	0x20000258
   15504:	200002fc 	.word	0x200002fc

00015508 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   15508:	b580      	push	{r7, lr}
   1550a:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1550c:	f7ff ffd0 	bl	154b0 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   15510:	b088      	sub	sp, #32
   15512:	466a      	mov	r2, sp
   15514:	4b07      	ldr	r3, [pc, #28]	; (15534 <adv_timeout+0x2c>)
   15516:	6153      	str	r3, [r2, #20]
   15518:	4b07      	ldr	r3, [pc, #28]	; (15538 <adv_timeout+0x30>)
   1551a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1551e:	2304      	movs	r3, #4
   15520:	f842 3f10 	str.w	r3, [r2, #16]!
   15524:	4805      	ldr	r0, [pc, #20]	; (1553c <adv_timeout+0x34>)
   15526:	2300      	movs	r3, #0
   15528:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1552c:	f7fc fd4c 	bl	11fc8 <z_impl_z_log_msg_static_create>
}
   15530:	46bd      	mov	sp, r7
   15532:	bd80      	pop	{r7, pc}
   15534:	000200e1 	.word	0x000200e1
   15538:	00020104 	.word	0x00020104
   1553c:	0001e960 	.word	0x0001e960

00015540 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   15540:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15542:	2102      	movs	r1, #2
{
   15544:	b087      	sub	sp, #28
   15546:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15548:	f242 000c 	movw	r0, #8204	; 0x200c
   1554c:	f7fe fc84 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   15550:	4605      	mov	r5, r0
   15552:	b318      	cbz	r0, 1559c <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
   15554:	2102      	movs	r1, #2
   15556:	300c      	adds	r0, #12
   15558:	f007 ff1b 	bl	1d392 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   1555c:	2c01      	cmp	r4, #1
   1555e:	d11b      	bne.n	15598 <bt_le_scan_set_enable_legacy+0x58>
   15560:	f3bf 8f5b 	dmb	ish
   15564:	4b0f      	ldr	r3, [pc, #60]	; (155a4 <bt_le_scan_set_enable_legacy+0x64>)
   15566:	681b      	ldr	r3, [r3, #0]
   15568:	f3bf 8f5b 	dmb	ish
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   1556c:	f3c3 2340 	ubfx	r3, r3, #9, #1
   15570:	7043      	strb	r3, [r0, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15572:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   15574:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15576:	425c      	negs	r4, r3
   15578:	415c      	adcs	r4, r3
   1557a:	4a0a      	ldr	r2, [pc, #40]	; (155a4 <bt_le_scan_set_enable_legacy+0x64>)
   1557c:	9400      	str	r4, [sp, #0]
   1557e:	a903      	add	r1, sp, #12
   15580:	4628      	mov	r0, r5
   15582:	2306      	movs	r3, #6
   15584:	f7fe fc56 	bl	13e34 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   15588:	2200      	movs	r2, #0
   1558a:	4629      	mov	r1, r5
   1558c:	f242 000c 	movw	r0, #8204	; 0x200c
   15590:	f7fe fc9c 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   15594:	b007      	add	sp, #28
   15596:	bd30      	pop	{r4, r5, pc}
   15598:	2300      	movs	r3, #0
   1559a:	e7e9      	b.n	15570 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
   1559c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   155a0:	e7f8      	b.n	15594 <bt_le_scan_set_enable_legacy+0x54>
   155a2:	bf00      	nop
   155a4:	200002fc 	.word	0x200002fc

000155a8 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   155a8:	4b01      	ldr	r3, [pc, #4]	; (155b0 <bt_scan_reset+0x8>)
   155aa:	2200      	movs	r2, #0
   155ac:	601a      	str	r2, [r3, #0]
}
   155ae:	4770      	bx	lr
   155b0:	2000273c 	.word	0x2000273c

000155b4 <bt_le_scan_update>:
   155b4:	4b0a      	ldr	r3, [pc, #40]	; (155e0 <bt_le_scan_update+0x2c>)
   155b6:	f3bf 8f5b 	dmb	ish
   155ba:	681a      	ldr	r2, [r3, #0]
   155bc:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   155c0:	f3c2 10c0 	ubfx	r0, r2, #7, #1
   155c4:	0612      	lsls	r2, r2, #24
   155c6:	d408      	bmi.n	155da <bt_le_scan_update+0x26>
   155c8:	f3bf 8f5b 	dmb	ish
   155cc:	681b      	ldr	r3, [r3, #0]
   155ce:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   155d2:	065b      	lsls	r3, r3, #25
   155d4:	d501      	bpl.n	155da <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
   155d6:	f7ff bfb3 	b.w	15540 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   155da:	2000      	movs	r0, #0
   155dc:	4770      	bx	lr
   155de:	bf00      	nop
   155e0:	200002fc 	.word	0x200002fc

000155e4 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   155e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   155e8:	f100 080c 	add.w	r8, r0, #12
   155ec:	b08b      	sub	sp, #44	; 0x2c
   155ee:	4604      	mov	r4, r0
   155f0:	af00      	add	r7, sp, #0
   155f2:	4640      	mov	r0, r8
   155f4:	f007 fef4 	bl	1d3e0 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   155f8:	f8df a168 	ldr.w	sl, [pc, #360]	; 15764 <bt_hci_le_adv_report+0x180>
   155fc:	4681      	mov	r9, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   155fe:	f1b9 0f00 	cmp.w	r9, #0
   15602:	d013      	beq.n	1562c <bt_hci_le_adv_report+0x48>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   15604:	8a23      	ldrh	r3, [r4, #16]
   15606:	2b08      	cmp	r3, #8
   15608:	d814      	bhi.n	15634 <bt_hci_le_adv_report+0x50>
			LOG_ERR("Unexpected end of buffer");
   1560a:	466c      	mov	r4, sp
   1560c:	b088      	sub	sp, #32
   1560e:	466a      	mov	r2, sp
   15610:	4b55      	ldr	r3, [pc, #340]	; (15768 <bt_hci_le_adv_report+0x184>)
   15612:	6153      	str	r3, [r2, #20]
   15614:	4b55      	ldr	r3, [pc, #340]	; (1576c <bt_hci_le_adv_report+0x188>)
   15616:	6193      	str	r3, [r2, #24]
   15618:	2303      	movs	r3, #3
   1561a:	f842 3f10 	str.w	r3, [r2, #16]!
   1561e:	4854      	ldr	r0, [pc, #336]	; (15770 <bt_hci_le_adv_report+0x18c>)
   15620:	2300      	movs	r3, #0
   15622:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15626:	f7fc fccf 	bl	11fc8 <z_impl_z_log_msg_static_create>
   1562a:	46a5      	mov	sp, r4

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   1562c:	372c      	adds	r7, #44	; 0x2c
   1562e:	46bd      	mov	sp, r7
   15630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15634:	2109      	movs	r1, #9
   15636:	4640      	mov	r0, r8
   15638:	f007 feca 	bl	1d3d0 <net_buf_simple_pull_mem>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1563c:	2301      	movs	r3, #1
   1563e:	84bb      	strh	r3, [r7, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   15640:	237f      	movs	r3, #127	; 0x7f
   15642:	77bb      	strb	r3, [r7, #30]
		adv_info.rssi = evt->data[evt->length];
   15644:	7a03      	ldrb	r3, [r0, #8]
   15646:	4403      	add	r3, r0
   15648:	4605      	mov	r5, r0
   1564a:	7a5b      	ldrb	r3, [r3, #9]
   1564c:	777b      	strb	r3, [r7, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   1564e:	23ff      	movs	r3, #255	; 0xff
   15650:	773b      	strb	r3, [r7, #28]
		adv_info.interval = 0U;
   15652:	2300      	movs	r3, #0
   15654:	847b      	strh	r3, [r7, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   15656:	7802      	ldrb	r2, [r0, #0]
   15658:	77fa      	strb	r2, [r7, #31]
	switch (evt_type) {
   1565a:	2a04      	cmp	r2, #4
   1565c:	bf9c      	itt	ls
   1565e:	4b45      	ldrls	r3, [pc, #276]	; (15774 <bt_hci_le_adv_report+0x190>)
   15660:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   15662:	843b      	strh	r3, [r7, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   15664:	7a03      	ldrb	r3, [r0, #8]
   15666:	60fb      	str	r3, [r7, #12]
   15668:	4b43      	ldr	r3, [pc, #268]	; (15778 <bt_hci_le_adv_report+0x194>)
   1566a:	f3bf 8f5b 	dmb	ish
   1566e:	681b      	ldr	r3, [r3, #0]
   15670:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   15674:	061a      	lsls	r2, r3, #24
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   15676:	f100 0101 	add.w	r1, r0, #1
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1567a:	d502      	bpl.n	15682 <bt_hci_le_adv_report+0x9e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1567c:	8c3b      	ldrh	r3, [r7, #32]
   1567e:	075b      	lsls	r3, r3, #29
   15680:	d465      	bmi.n	1574e <bt_hci_le_adv_report+0x16a>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   15682:	786b      	ldrb	r3, [r5, #1]
   15684:	1e9a      	subs	r2, r3, #2
   15686:	2a01      	cmp	r2, #1
   15688:	d84e      	bhi.n	15728 <bt_hci_le_adv_report+0x144>
   1568a:	2207      	movs	r2, #7
   1568c:	f107 0010 	add.w	r0, r7, #16
   15690:	f007 fcac 	bl	1cfec <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15694:	7c3b      	ldrb	r3, [r7, #16]
   15696:	3b02      	subs	r3, #2
   15698:	743b      	strb	r3, [r7, #16]
	if (scan_dev_found_cb) {
   1569a:	f8da 3000 	ldr.w	r3, [sl]
   1569e:	b1a3      	cbz	r3, 156ca <bt_hci_le_adv_report+0xe6>
	state->offset = net_buf_simple_headroom(buf);
   156a0:	4640      	mov	r0, r8
   156a2:	f007 fea5 	bl	1d3f0 <net_buf_simple_headroom>
		buf->len = len;
   156a6:	68fb      	ldr	r3, [r7, #12]
	state->len = buf->len;
   156a8:	8a26      	ldrh	r6, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   156aa:	7ffa      	ldrb	r2, [r7, #31]
		buf->len = len;
   156ac:	8223      	strh	r3, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   156ae:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   156b0:	4643      	mov	r3, r8
   156b2:	f997 101d 	ldrsb.w	r1, [r7, #29]
   156b6:	f8da c000 	ldr.w	ip, [sl]
   156ba:	f107 0010 	add.w	r0, r7, #16
   156be:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   156c0:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   156c2:	8226      	strh	r6, [r4, #16]
	buf->data = buf->__buf + state->offset;
   156c4:	fa13 f38b 	uxtah	r3, r3, fp
   156c8:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   156ca:	f107 0310 	add.w	r3, r7, #16
   156ce:	61bb      	str	r3, [r7, #24]
   156d0:	4b2a      	ldr	r3, [pc, #168]	; (1577c <bt_hci_le_adv_report+0x198>)
   156d2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   156d4:	2b00      	cmp	r3, #0
   156d6:	d038      	beq.n	1574a <bt_hci_le_adv_report+0x166>
	return node->next;
   156d8:	681a      	ldr	r2, [r3, #0]
   156da:	b102      	cbz	r2, 156de <bt_hci_le_adv_report+0xfa>
   156dc:	3a08      	subs	r2, #8
		if (listener->recv) {
   156de:	f853 1c08 	ldr.w	r1, [r3, #-8]
   156e2:	b1c1      	cbz	r1, 15716 <bt_hci_le_adv_report+0x132>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   156e4:	4616      	mov	r6, r2
   156e6:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   156ea:	4640      	mov	r0, r8
   156ec:	607a      	str	r2, [r7, #4]
   156ee:	f007 fe7f 	bl	1d3f0 <net_buf_simple_headroom>
	state->len = buf->len;
   156f2:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   156f4:	687a      	ldr	r2, [r7, #4]
   156f6:	60bb      	str	r3, [r7, #8]
			buf->len = len;
   156f8:	68fb      	ldr	r3, [r7, #12]
   156fa:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   156fc:	6812      	ldr	r2, [r2, #0]
	state->offset = net_buf_simple_headroom(buf);
   156fe:	4683      	mov	fp, r0
   15700:	4641      	mov	r1, r8
   15702:	f107 0018 	add.w	r0, r7, #24
   15706:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   15708:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   1570a:	68bb      	ldr	r3, [r7, #8]
   1570c:	8223      	strh	r3, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1570e:	fa12 f28b 	uxtah	r2, r2, fp
   15712:	60e2      	str	r2, [r4, #12]
}
   15714:	4632      	mov	r2, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15716:	b1c2      	cbz	r2, 1574a <bt_hci_le_adv_report+0x166>
   15718:	6896      	ldr	r6, [r2, #8]
   1571a:	6813      	ldr	r3, [r2, #0]
   1571c:	b19e      	cbz	r6, 15746 <bt_hci_le_adv_report+0x162>
   1571e:	3e08      	subs	r6, #8
		if (listener->recv) {
   15720:	2b00      	cmp	r3, #0
   15722:	d1e2      	bne.n	156ea <bt_hci_le_adv_report+0x106>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15724:	4632      	mov	r2, r6
   15726:	e7f7      	b.n	15718 <bt_hci_le_adv_report+0x134>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   15728:	2bff      	cmp	r3, #255	; 0xff
   1572a:	d106      	bne.n	1573a <bt_hci_le_adv_report+0x156>
   1572c:	4914      	ldr	r1, [pc, #80]	; (15780 <bt_hci_le_adv_report+0x19c>)
   1572e:	2207      	movs	r2, #7
   15730:	f107 0010 	add.w	r0, r7, #16
   15734:	f007 fc5a 	bl	1cfec <memcpy>
}
   15738:	e7af      	b.n	1569a <bt_hci_le_adv_report+0xb6>
		bt_addr_le_copy(&id_addr,
   1573a:	2000      	movs	r0, #0
   1573c:	f007 fcac 	bl	1d098 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   15740:	2207      	movs	r2, #7
   15742:	4601      	mov	r1, r0
   15744:	e7f4      	b.n	15730 <bt_hci_le_adv_report+0x14c>
		if (listener->recv) {
   15746:	2b00      	cmp	r3, #0
   15748:	d1cf      	bne.n	156ea <bt_hci_le_adv_report+0x106>
	info->addr = NULL;
   1574a:	2300      	movs	r3, #0
   1574c:	61bb      	str	r3, [r7, #24]
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1574e:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   15750:	4640      	mov	r0, r8
   15752:	3101      	adds	r1, #1
   15754:	f109 39ff 	add.w	r9, r9, #4294967295
   15758:	f007 fe32 	bl	1d3c0 <net_buf_simple_pull>
   1575c:	fa5f f989 	uxtb.w	r9, r9
   15760:	e74d      	b.n	155fe <bt_hci_le_adv_report+0x1a>
   15762:	bf00      	nop
   15764:	2000273c 	.word	0x2000273c
   15768:	00020144 	.word	0x00020144
   1576c:	00020166 	.word	0x00020166
   15770:	0001e978 	.word	0x0001e978
   15774:	00020161 	.word	0x00020161
   15778:	200002fc 	.word	0x200002fc
   1577c:	20002734 	.word	0x20002734
   15780:	0001f836 	.word	0x0001f836

00015784 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   15784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15788:	4e62      	ldr	r6, [pc, #392]	; (15914 <bt_le_scan_start+0x190>)
   1578a:	f3bf 8f5b 	dmb	ish
   1578e:	6833      	ldr	r3, [r6, #0]
   15790:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15794:	f013 0f04 	tst.w	r3, #4
{
   15798:	4605      	mov	r5, r0
   1579a:	460f      	mov	r7, r1
   1579c:	4634      	mov	r4, r6
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1579e:	f000 80b5 	beq.w	1590c <bt_le_scan_start+0x188>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   157a2:	7802      	ldrb	r2, [r0, #0]
   157a4:	2a01      	cmp	r2, #1
   157a6:	d905      	bls.n	157b4 <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   157a8:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   157ac:	4620      	mov	r0, r4
   157ae:	b003      	add	sp, #12
   157b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   157b4:	6843      	ldr	r3, [r0, #4]
   157b6:	2b0f      	cmp	r3, #15
   157b8:	d8f6      	bhi.n	157a8 <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   157ba:	8900      	ldrh	r0, [r0, #8]
   157bc:	1f03      	subs	r3, r0, #4
   157be:	b29b      	uxth	r3, r3
   157c0:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
   157c4:	4563      	cmp	r3, ip
   157c6:	d8ef      	bhi.n	157a8 <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
   157c8:	8969      	ldrh	r1, [r5, #10]
   157ca:	1f0b      	subs	r3, r1, #4
   157cc:	b29b      	uxth	r3, r3
   157ce:	4563      	cmp	r3, ip
   157d0:	d8ea      	bhi.n	157a8 <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
   157d2:	4288      	cmp	r0, r1
   157d4:	d3e8      	bcc.n	157a8 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
   157d6:	b98a      	cbnz	r2, 157fc <bt_le_scan_start+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   157d8:	f3bf 8f5b 	dmb	ish
   157dc:	e854 0f00 	ldrex	r0, [r4]
   157e0:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   157e4:	e844 3200 	strex	r2, r3, [r4]
   157e8:	2a00      	cmp	r2, #0
   157ea:	d1f7      	bne.n	157dc <bt_le_scan_start+0x58>
   157ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   157f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   157f4:	d007      	beq.n	15806 <bt_le_scan_start+0x82>
		return -EALREADY;
   157f6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   157fa:	e7d7      	b.n	157ac <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
   157fc:	f007 fc86 	bl	1d10c <bt_id_scan_random_addr_check>
   15800:	2800      	cmp	r0, #0
   15802:	d1e9      	bne.n	157d8 <bt_le_scan_start+0x54>
   15804:	e7d0      	b.n	157a8 <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15806:	f3bf 8f5b 	dmb	ish
   1580a:	6833      	ldr	r3, [r6, #0]
   1580c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15810:	0659      	lsls	r1, r3, #25
   15812:	d509      	bpl.n	15828 <bt_le_scan_start+0xa4>
	return bt_le_scan_set_enable_legacy(enable);
   15814:	f7ff fe94 	bl	15540 <bt_le_scan_set_enable_legacy>
		if (err) {
   15818:	4604      	mov	r4, r0
   1581a:	b128      	cbz	r0, 15828 <bt_le_scan_start+0xa4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1581c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   15820:	483c      	ldr	r0, [pc, #240]	; (15914 <bt_le_scan_start+0x190>)
   15822:	f007 fd66 	bl	1d2f2 <atomic_and>
		return err;
   15826:	e7c1      	b.n	157ac <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   15828:	686b      	ldr	r3, [r5, #4]
	if (val) {
   1582a:	07da      	lsls	r2, r3, #31
   1582c:	d515      	bpl.n	1585a <bt_le_scan_start+0xd6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1582e:	f3bf 8f5b 	dmb	ish
   15832:	e856 3f00 	ldrex	r3, [r6]
   15836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1583a:	e846 3200 	strex	r2, r3, [r6]
   1583e:	2a00      	cmp	r2, #0
   15840:	d1f7      	bne.n	15832 <bt_le_scan_start+0xae>
   15842:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   15846:	89ac      	ldrh	r4, [r5, #12]
   15848:	b16c      	cbz	r4, 15866 <bt_le_scan_start+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1584a:	4832      	ldr	r0, [pc, #200]	; (15914 <bt_le_scan_start+0x190>)
   1584c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   15850:	f007 fd4f 	bl	1d2f2 <atomic_and>
			return -ENOTSUP;
   15854:	f06f 0485 	mvn.w	r4, #133	; 0x85
   15858:	e7a8      	b.n	157ac <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1585a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1585e:	482d      	ldr	r0, [pc, #180]	; (15914 <bt_le_scan_start+0x190>)
   15860:	f007 fd47 	bl	1d2f2 <atomic_and>
   15864:	e7ef      	b.n	15846 <bt_le_scan_start+0xc2>
		err = start_le_scan_legacy(param->type, param->interval,
   15866:	f895 8000 	ldrb.w	r8, [r5]
   1586a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
					   param->window);
   1586e:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
   15870:	4621      	mov	r1, r4
   15872:	2207      	movs	r2, #7
   15874:	4668      	mov	r0, sp
   15876:	f007 fbc4 	bl	1d002 <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1587a:	f108 33ff 	add.w	r3, r8, #4294967295
   1587e:	4258      	negs	r0, r3
   15880:	f10d 0105 	add.w	r1, sp, #5
   15884:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   15886:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
   1588a:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   1588e:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   15892:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15896:	f7ff fb0d 	bl	14eb4 <bt_id_set_scan_own_addr>
	if (err) {
   1589a:	4604      	mov	r4, r0
   1589c:	2800      	cmp	r0, #0
   1589e:	d1bd      	bne.n	1581c <bt_le_scan_start+0x98>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   158a0:	2107      	movs	r1, #7
   158a2:	f242 000b 	movw	r0, #8203	; 0x200b
   158a6:	f7fe fad7 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   158aa:	4605      	mov	r5, r0
   158ac:	b358      	cbz	r0, 15906 <bt_le_scan_start+0x182>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   158ae:	2207      	movs	r2, #7
   158b0:	4669      	mov	r1, sp
   158b2:	300c      	adds	r0, #12
   158b4:	f007 fd73 	bl	1d39e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   158b8:	4622      	mov	r2, r4
   158ba:	4629      	mov	r1, r5
   158bc:	f242 000b 	movw	r0, #8203	; 0x200b
   158c0:	f7fe fb04 	bl	13ecc <bt_hci_cmd_send_sync>
	if (err) {
   158c4:	4604      	mov	r4, r0
   158c6:	2800      	cmp	r0, #0
   158c8:	d1a8      	bne.n	1581c <bt_le_scan_start+0x98>
	return bt_le_scan_set_enable_legacy(enable);
   158ca:	2001      	movs	r0, #1
   158cc:	f7ff fe38 	bl	15540 <bt_le_scan_set_enable_legacy>
	if (err) {
   158d0:	4604      	mov	r4, r0
   158d2:	2800      	cmp	r0, #0
   158d4:	d1a2      	bne.n	1581c <bt_le_scan_start+0x98>
	if (val) {
   158d6:	f1b8 0f01 	cmp.w	r8, #1
   158da:	d10e      	bne.n	158fa <bt_le_scan_start+0x176>
   158dc:	f3bf 8f5b 	dmb	ish
   158e0:	e856 3f00 	ldrex	r3, [r6]
   158e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   158e8:	e846 3200 	strex	r2, r3, [r6]
   158ec:	2a00      	cmp	r2, #0
   158ee:	d1f7      	bne.n	158e0 <bt_le_scan_start+0x15c>
   158f0:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
   158f4:	4b08      	ldr	r3, [pc, #32]	; (15918 <bt_le_scan_start+0x194>)
   158f6:	601f      	str	r7, [r3, #0]
	return 0;
   158f8:	e758      	b.n	157ac <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   158fa:	f46f 7180 	mvn.w	r1, #256	; 0x100
   158fe:	4805      	ldr	r0, [pc, #20]	; (15914 <bt_le_scan_start+0x190>)
   15900:	f007 fcf7 	bl	1d2f2 <atomic_and>
	if (err) {
   15904:	e7f6      	b.n	158f4 <bt_le_scan_start+0x170>
		return -ENOBUFS;
   15906:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1590a:	e787      	b.n	1581c <bt_le_scan_start+0x98>
		return -EAGAIN;
   1590c:	f06f 040a 	mvn.w	r4, #10
   15910:	e74c      	b.n	157ac <bt_le_scan_start+0x28>
   15912:	bf00      	nop
   15914:	200002fc 	.word	0x200002fc
   15918:	2000273c 	.word	0x2000273c

0001591c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1591c:	4b02      	ldr	r3, [pc, #8]	; (15928 <net_buf_pool_get+0xc>)
   1591e:	222c      	movs	r2, #44	; 0x2c
   15920:	fb02 3000 	mla	r0, r2, r0, r3
   15924:	4770      	bx	lr
   15926:	bf00      	nop
   15928:	2000060c 	.word	0x2000060c

0001592c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1592c:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1592e:	4b06      	ldr	r3, [pc, #24]	; (15948 <net_buf_id+0x1c>)
   15930:	212c      	movs	r1, #44	; 0x2c
   15932:	fb01 3302 	mla	r3, r1, r2, r3
   15936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15938:	7f1b      	ldrb	r3, [r3, #28]
   1593a:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1593c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1593e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   15942:	fbb0 f0f3 	udiv	r0, r0, r3
   15946:	4770      	bx	lr
   15948:	2000060c 	.word	0x2000060c

0001594c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1594c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1594e:	4b0a      	ldr	r3, [pc, #40]	; (15978 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15950:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15952:	242c      	movs	r4, #44	; 0x2c
   15954:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   15958:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1595c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1595e:	681a      	ldr	r2, [r3, #0]
   15960:	4294      	cmp	r4, r2
   15962:	bf94      	ite	ls
   15964:	600c      	strls	r4, [r1, #0]
   15966:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15968:	e9d3 5400 	ldrd	r5, r4, [r3]
   1596c:	f7ff ffde 	bl	1592c <net_buf_id>
}
   15970:	fb05 4000 	mla	r0, r5, r0, r4
   15974:	bd38      	pop	{r3, r4, r5, pc}
   15976:	bf00      	nop
   15978:	2000060c 	.word	0x2000060c

0001597c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1597c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15980:	4605      	mov	r5, r0
   15982:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15984:	4610      	mov	r0, r2
   15986:	4619      	mov	r1, r3
{
   15988:	4691      	mov	r9, r2
   1598a:	4698      	mov	r8, r3
   1598c:	4617      	mov	r7, r2
   1598e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15990:	f008 fcb4 	bl	1e2fc <sys_clock_timeout_end_calc>
   15994:	4682      	mov	sl, r0
   15996:	468b      	mov	fp, r1
	__asm__ volatile(
   15998:	f04f 0340 	mov.w	r3, #64	; 0x40
   1599c:	f3ef 8111 	mrs	r1, BASEPRI
   159a0:	f383 8812 	msr	BASEPRI_MAX, r3
   159a4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   159a8:	8b6b      	ldrh	r3, [r5, #26]
   159aa:	2b00      	cmp	r3, #0
   159ac:	d058      	beq.n	15a60 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   159ae:	8b2a      	ldrh	r2, [r5, #24]
   159b0:	429a      	cmp	r2, r3
   159b2:	d93c      	bls.n	15a2e <net_buf_alloc_len+0xb2>
   159b4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   159b6:	2200      	movs	r2, #0
   159b8:	2300      	movs	r3, #0
   159ba:	4628      	mov	r0, r5
   159bc:	f002 ff6c 	bl	18898 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   159c0:	9900      	ldr	r1, [sp, #0]
   159c2:	4604      	mov	r4, r0
   159c4:	2800      	cmp	r0, #0
   159c6:	d032      	beq.n	15a2e <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   159c8:	f381 8811 	msr	BASEPRI, r1
   159cc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   159d0:	9b01      	ldr	r3, [sp, #4]
   159d2:	2b00      	cmp	r3, #0
   159d4:	d055      	beq.n	15a82 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   159d6:	ea58 0309 	orrs.w	r3, r8, r9
   159da:	d00f      	beq.n	159fc <net_buf_alloc_len+0x80>
   159dc:	f1b8 3fff 	cmp.w	r8, #4294967295
   159e0:	bf08      	it	eq
   159e2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   159e6:	d009      	beq.n	159fc <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   159e8:	f003 fdda 	bl	195a0 <sys_clock_tick_get>
   159ec:	ebba 0700 	subs.w	r7, sl, r0
   159f0:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   159f4:	2e00      	cmp	r6, #0
   159f6:	bfbc      	itt	lt
   159f8:	2700      	movlt	r7, #0
   159fa:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   159fc:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   159fe:	4d26      	ldr	r5, [pc, #152]	; (15a98 <net_buf_alloc_len+0x11c>)
   15a00:	f04f 082c 	mov.w	r8, #44	; 0x2c
   15a04:	fb08 5303 	mla	r3, r8, r3, r5
   15a08:	463a      	mov	r2, r7
   15a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a0c:	681b      	ldr	r3, [r3, #0]
   15a0e:	a901      	add	r1, sp, #4
   15a10:	f8d3 9000 	ldr.w	r9, [r3]
   15a14:	4620      	mov	r0, r4
   15a16:	4633      	mov	r3, r6
   15a18:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   15a1a:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   15a1c:	2800      	cmp	r0, #0
   15a1e:	d131      	bne.n	15a84 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   15a20:	7aa0      	ldrb	r0, [r4, #10]
   15a22:	4621      	mov	r1, r4
   15a24:	fb00 5008 	mla	r0, r0, r8, r5
   15a28:	f008 fa27 	bl	1de7a <k_queue_prepend>
}
   15a2c:	e024      	b.n	15a78 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   15a2e:	8b68      	ldrh	r0, [r5, #26]
   15a30:	1e43      	subs	r3, r0, #1
   15a32:	836b      	strh	r3, [r5, #26]
   15a34:	f381 8811 	msr	BASEPRI, r1
   15a38:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15a3c:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   15a3e:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   15a40:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15a42:	331b      	adds	r3, #27
   15a44:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   15a48:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   15a4a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   15a4e:	4b12      	ldr	r3, [pc, #72]	; (15a98 <net_buf_alloc_len+0x11c>)
   15a50:	4a12      	ldr	r2, [pc, #72]	; (15a9c <net_buf_alloc_len+0x120>)
   15a52:	1aeb      	subs	r3, r5, r3
   15a54:	109b      	asrs	r3, r3, #2
   15a56:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   15a58:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   15a5a:	7f2b      	ldrb	r3, [r5, #28]
   15a5c:	72e3      	strb	r3, [r4, #11]
		goto success;
   15a5e:	e7b7      	b.n	159d0 <net_buf_alloc_len+0x54>
   15a60:	f381 8811 	msr	BASEPRI, r1
   15a64:	f3bf 8f6f 	isb	sy
   15a68:	464a      	mov	r2, r9
   15a6a:	4643      	mov	r3, r8
   15a6c:	4628      	mov	r0, r5
   15a6e:	f002 ff13 	bl	18898 <z_impl_k_queue_get>
	if (!buf) {
   15a72:	4604      	mov	r4, r0
   15a74:	2800      	cmp	r0, #0
   15a76:	d1ab      	bne.n	159d0 <net_buf_alloc_len+0x54>
		return NULL;
   15a78:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15a7a:	4620      	mov	r0, r4
   15a7c:	b003      	add	sp, #12
   15a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   15a82:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   15a84:	2300      	movs	r3, #0
	buf->ref   = 1U;
   15a86:	2201      	movs	r2, #1
	buf->frags = NULL;
   15a88:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   15a8a:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   15a8c:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   15a8e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   15a90:	6963      	ldr	r3, [r4, #20]
   15a92:	8262      	strh	r2, [r4, #18]
   15a94:	60e3      	str	r3, [r4, #12]
	return buf;
   15a96:	e7f0      	b.n	15a7a <net_buf_alloc_len+0xfe>
   15a98:	2000060c 	.word	0x2000060c
   15a9c:	ba2e8ba3 	.word	0xba2e8ba3

00015aa0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   15aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15aa4:	4d16      	ldr	r5, [pc, #88]	; (15b00 <net_buf_unref+0x60>)
   15aa6:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   15aa8:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   15aaa:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   15aac:	b90c      	cbnz	r4, 15ab2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   15aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   15ab2:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   15ab4:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   15ab8:	3b01      	subs	r3, #1
   15aba:	b2db      	uxtb	r3, r3
   15abc:	7223      	strb	r3, [r4, #8]
   15abe:	2b00      	cmp	r3, #0
   15ac0:	d1f5      	bne.n	15aae <net_buf_unref+0xe>
		if (buf->__buf) {
   15ac2:	6961      	ldr	r1, [r4, #20]
   15ac4:	b159      	cbz	r1, 15ade <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15ac6:	7a63      	ldrb	r3, [r4, #9]
   15ac8:	07db      	lsls	r3, r3, #31
   15aca:	d407      	bmi.n	15adc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15acc:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   15ace:	fb07 5303 	mla	r3, r7, r3, r5
   15ad2:	4620      	mov	r0, r4
   15ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15ad6:	681b      	ldr	r3, [r3, #0]
   15ad8:	689b      	ldr	r3, [r3, #8]
   15ada:	4798      	blx	r3
			buf->__buf = NULL;
   15adc:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   15ade:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   15ae0:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   15ae2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   15ae6:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   15ae8:	6a1b      	ldr	r3, [r3, #32]
   15aea:	b11b      	cbz	r3, 15af4 <net_buf_unref+0x54>
			pool->destroy(buf);
   15aec:	4620      	mov	r0, r4
   15aee:	4798      	blx	r3
{
   15af0:	4644      	mov	r4, r8
   15af2:	e7db      	b.n	15aac <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   15af4:	4621      	mov	r1, r4
   15af6:	fb00 5007 	mla	r0, r0, r7, r5
   15afa:	f008 f9be 	bl	1de7a <k_queue_prepend>
}
   15afe:	e7f7      	b.n	15af0 <net_buf_unref+0x50>
   15b00:	2000060c 	.word	0x2000060c

00015b04 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   15b04:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   15b06:	4804      	ldr	r0, [pc, #16]	; (15b18 <xoshiro128_initialize+0x14>)
   15b08:	f008 f83d 	bl	1db86 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   15b0c:	2800      	cmp	r0, #0
}
   15b0e:	bf0c      	ite	eq
   15b10:	f06f 0012 	mvneq.w	r0, #18
   15b14:	2000      	movne	r0, #0
   15b16:	bd08      	pop	{r3, pc}
   15b18:	0001e758 	.word	0x0001e758

00015b1c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   15b1c:	4b08      	ldr	r3, [pc, #32]	; (15b40 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15b1e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15b20:	1ac3      	subs	r3, r0, r3
{
   15b22:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15b24:	4907      	ldr	r1, [pc, #28]	; (15b44 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   15b26:	109b      	asrs	r3, r3, #2
{
   15b28:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15b2a:	4359      	muls	r1, r3
   15b2c:	4806      	ldr	r0, [pc, #24]	; (15b48 <onoff_stop+0x2c>)
   15b2e:	2240      	movs	r2, #64	; 0x40
   15b30:	f007 fc7e 	bl	1d430 <stop>
	notify(mgr, res);
   15b34:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15b36:	4601      	mov	r1, r0
	notify(mgr, res);
   15b38:	4620      	mov	r0, r4
}
   15b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   15b3e:	4718      	bx	r3
   15b40:	20002754 	.word	0x20002754
   15b44:	b6db6db7 	.word	0xb6db6db7
   15b48:	0001e6e0 	.word	0x0001e6e0

00015b4c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15b4e:	4c0c      	ldr	r4, [pc, #48]	; (15b80 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15b50:	4a0c      	ldr	r2, [pc, #48]	; (15b84 <onoff_start+0x38>)
   15b52:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   15b54:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15b56:	9300      	str	r3, [sp, #0]
{
   15b58:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15b5a:	460b      	mov	r3, r1
   15b5c:	490a      	ldr	r1, [pc, #40]	; (15b88 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   15b5e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15b60:	4361      	muls	r1, r4
{
   15b62:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15b64:	4809      	ldr	r0, [pc, #36]	; (15b8c <onoff_start+0x40>)
   15b66:	f007 fc8f 	bl	1d488 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   15b6a:	1e01      	subs	r1, r0, #0
   15b6c:	da05      	bge.n	15b7a <onoff_start+0x2e>
		notify(mgr, err);
   15b6e:	4630      	mov	r0, r6
   15b70:	462b      	mov	r3, r5
	}
}
   15b72:	b002      	add	sp, #8
   15b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   15b78:	4718      	bx	r3
}
   15b7a:	b002      	add	sp, #8
   15b7c:	bd70      	pop	{r4, r5, r6, pc}
   15b7e:	bf00      	nop
   15b80:	20002754 	.word	0x20002754
   15b84:	0001d4f3 	.word	0x0001d4f3
   15b88:	b6db6db7 	.word	0xb6db6db7
   15b8c:	0001e6e0 	.word	0x0001e6e0

00015b90 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15b90:	2200      	movs	r2, #0
{
   15b92:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15b94:	2101      	movs	r1, #1
{
   15b96:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15b98:	4610      	mov	r0, r2
   15b9a:	f7fd f83d 	bl	12c18 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15b9e:	480f      	ldr	r0, [pc, #60]	; (15bdc <clk_init+0x4c>)
   15ba0:	f001 fde2 	bl	17768 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   15ba4:	4b0e      	ldr	r3, [pc, #56]	; (15be0 <clk_init+0x50>)
   15ba6:	4298      	cmp	r0, r3
   15ba8:	d115      	bne.n	15bd6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   15baa:	f007 ff7b 	bl	1daa4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   15bae:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   15bb0:	490c      	ldr	r1, [pc, #48]	; (15be4 <clk_init+0x54>)
   15bb2:	4630      	mov	r0, r6
   15bb4:	f006 fe02 	bl	1c7bc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   15bb8:	2800      	cmp	r0, #0
   15bba:	db0b      	blt.n	15bd4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15bbc:	2501      	movs	r5, #1
   15bbe:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   15bc0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   15bc2:	4908      	ldr	r1, [pc, #32]	; (15be4 <clk_init+0x54>)
   15bc4:	f104 001c 	add.w	r0, r4, #28
   15bc8:	f006 fdf8 	bl	1c7bc <onoff_manager_init>
		if (err < 0) {
   15bcc:	2800      	cmp	r0, #0
   15bce:	db01      	blt.n	15bd4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15bd0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   15bd2:	2000      	movs	r0, #0
}
   15bd4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   15bd6:	f06f 0004 	mvn.w	r0, #4
   15bda:	e7fb      	b.n	15bd4 <clk_init+0x44>
   15bdc:	00015c1d 	.word	0x00015c1d
   15be0:	0bad0000 	.word	0x0bad0000
   15be4:	0001ec28 	.word	0x0001ec28

00015be8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   15be8:	b570      	push	{r4, r5, r6, lr}
   15bea:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   15bec:	230c      	movs	r3, #12
   15bee:	4809      	ldr	r0, [pc, #36]	; (15c14 <clkstarted_handle.constprop.0+0x2c>)
   15bf0:	434b      	muls	r3, r1
   15bf2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   15bf4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   15bf8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   15bfa:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   15bfc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   15bfe:	4418      	add	r0, r3
   15c00:	f007 fc03 	bl	1d40a <set_on_state>
	if (callback) {
   15c04:	b12d      	cbz	r5, 15c12 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   15c06:	4632      	mov	r2, r6
   15c08:	462b      	mov	r3, r5
   15c0a:	4803      	ldr	r0, [pc, #12]	; (15c18 <clkstarted_handle.constprop.0+0x30>)
}
   15c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   15c10:	4718      	bx	r3
}
   15c12:	bd70      	pop	{r4, r5, r6, pc}
   15c14:	20002754 	.word	0x20002754
   15c18:	0001e6e0 	.word	0x0001e6e0

00015c1c <clock_event_handler>:
	switch (event) {
   15c1c:	b110      	cbz	r0, 15c24 <clock_event_handler+0x8>
   15c1e:	2801      	cmp	r0, #1
   15c20:	d004      	beq.n	15c2c <clock_event_handler+0x10>
   15c22:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   15c24:	4b03      	ldr	r3, [pc, #12]	; (15c34 <clock_event_handler+0x18>)
   15c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15c28:	075b      	lsls	r3, r3, #29
   15c2a:	d101      	bne.n	15c30 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   15c2c:	f7ff bfdc 	b.w	15be8 <clkstarted_handle.constprop.0>
}
   15c30:	4770      	bx	lr
   15c32:	bf00      	nop
   15c34:	20002754 	.word	0x20002754

00015c38 <generic_hfclk_start>:
{
   15c38:	b508      	push	{r3, lr}
	__asm__ volatile(
   15c3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15c3e:	f3ef 8111 	mrs	r1, BASEPRI
   15c42:	f383 8812 	msr	BASEPRI_MAX, r3
   15c46:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   15c4a:	4a12      	ldr	r2, [pc, #72]	; (15c94 <generic_hfclk_start+0x5c>)
   15c4c:	6813      	ldr	r3, [r2, #0]
   15c4e:	f043 0002 	orr.w	r0, r3, #2
   15c52:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   15c54:	07da      	lsls	r2, r3, #31
   15c56:	d408      	bmi.n	15c6a <generic_hfclk_start+0x32>
	__asm__ volatile(
   15c58:	f381 8811 	msr	BASEPRI, r1
   15c5c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   15c60:	2001      	movs	r0, #1
}
   15c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15c66:	f001 bd6f 	b.w	17748 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15c6e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15c72:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   15c76:	07d3      	lsls	r3, r2, #31
   15c78:	d5ee      	bpl.n	15c58 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   15c7a:	4807      	ldr	r0, [pc, #28]	; (15c98 <generic_hfclk_start+0x60>)
   15c7c:	f007 fbc5 	bl	1d40a <set_on_state>
   15c80:	f381 8811 	msr	BASEPRI, r1
   15c84:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   15c88:	2000      	movs	r0, #0
}
   15c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   15c8e:	f7ff bfab 	b.w	15be8 <clkstarted_handle.constprop.0>
   15c92:	bf00      	nop
   15c94:	200027a4 	.word	0x200027a4
   15c98:	20002794 	.word	0x20002794

00015c9c <api_blocking_start>:
{
   15c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15c9e:	2200      	movs	r2, #0
   15ca0:	2301      	movs	r3, #1
   15ca2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   15ca6:	ab04      	add	r3, sp, #16
   15ca8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15cac:	4a09      	ldr	r2, [pc, #36]	; (15cd4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15cae:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15cb2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15cb4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15cb8:	f007 fc14 	bl	1d4e4 <api_start>
	if (err < 0) {
   15cbc:	2800      	cmp	r0, #0
   15cbe:	db05      	blt.n	15ccc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   15cc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   15cc4:	2300      	movs	r3, #0
   15cc6:	4668      	mov	r0, sp
   15cc8:	f002 fe40 	bl	1894c <z_impl_k_sem_take>
}
   15ccc:	b007      	add	sp, #28
   15cce:	f85d fb04 	ldr.w	pc, [sp], #4
   15cd2:	bf00      	nop
   15cd4:	0001d511 	.word	0x0001d511

00015cd8 <generic_hfclk_stop>:
{
   15cd8:	b510      	push	{r4, lr}
	__asm__ volatile(
   15cda:	f04f 0340 	mov.w	r3, #64	; 0x40
   15cde:	f3ef 8411 	mrs	r4, BASEPRI
   15ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   15ce6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   15cea:	4a07      	ldr	r2, [pc, #28]	; (15d08 <generic_hfclk_stop+0x30>)
   15cec:	6813      	ldr	r3, [r2, #0]
   15cee:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   15cf2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   15cf4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   15cf6:	d402      	bmi.n	15cfe <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   15cf8:	2001      	movs	r0, #1
   15cfa:	f007 fece 	bl	1da9a <nrfx_clock_stop>
	__asm__ volatile(
   15cfe:	f384 8811 	msr	BASEPRI, r4
   15d02:	f3bf 8f6f 	isb	sy
}
   15d06:	bd10      	pop	{r4, pc}
   15d08:	200027a4 	.word	0x200027a4

00015d0c <z_nrf_clock_control_lf_on>:
{
   15d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15d10:	4938      	ldr	r1, [pc, #224]	; (15df4 <z_nrf_clock_control_lf_on+0xe8>)
   15d12:	f3bf 8f5b 	dmb	ish
   15d16:	4607      	mov	r7, r0
   15d18:	2201      	movs	r2, #1
   15d1a:	e851 3f00 	ldrex	r3, [r1]
   15d1e:	e841 2000 	strex	r0, r2, [r1]
   15d22:	2800      	cmp	r0, #0
   15d24:	d1f9      	bne.n	15d1a <z_nrf_clock_control_lf_on+0xe>
   15d26:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   15d2a:	b933      	cbnz	r3, 15d3a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   15d2c:	4932      	ldr	r1, [pc, #200]	; (15df8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   15d2e:	4833      	ldr	r0, [pc, #204]	; (15dfc <z_nrf_clock_control_lf_on+0xf0>)
   15d30:	604b      	str	r3, [r1, #4]
   15d32:	60cb      	str	r3, [r1, #12]
   15d34:	608a      	str	r2, [r1, #8]
   15d36:	f006 fd54 	bl	1c7e2 <onoff_request>
	switch (start_mode) {
   15d3a:	1e7b      	subs	r3, r7, #1
   15d3c:	2b01      	cmp	r3, #1
   15d3e:	d82b      	bhi.n	15d98 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   15d40:	2f01      	cmp	r7, #1
   15d42:	d107      	bne.n	15d54 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15d48:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   15d4c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   15d50:	2b01      	cmp	r3, #1
   15d52:	d021      	beq.n	15d98 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15d54:	f007 ffe5 	bl	1dd22 <k_is_in_isr>
   15d58:	4605      	mov	r5, r0
   15d5a:	b9f8      	cbnz	r0, 15d9c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   15d5c:	4b28      	ldr	r3, [pc, #160]	; (15e00 <z_nrf_clock_control_lf_on+0xf4>)
   15d5e:	781b      	ldrb	r3, [r3, #0]
   15d60:	b1e3      	cbz	r3, 15d9c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   15d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15d66:	2202      	movs	r2, #2
   15d68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   15d6c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15d6e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 15e04 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15d72:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   15d76:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15d7a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   15d7e:	03d2      	lsls	r2, r2, #15
   15d80:	d516      	bpl.n	15db0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   15d82:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   15d86:	2b01      	cmp	r3, #1
   15d88:	d001      	beq.n	15d8e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   15d8a:	2f01      	cmp	r7, #1
   15d8c:	d110      	bne.n	15db0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   15d8e:	b35d      	cbz	r5, 15de8 <z_nrf_clock_control_lf_on+0xdc>
   15d90:	f386 8811 	msr	BASEPRI, r6
   15d94:	f3bf 8f6f 	isb	sy
}
   15d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   15d9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   15da0:	f3ef 8611 	mrs	r6, BASEPRI
   15da4:	f383 8812 	msr	BASEPRI_MAX, r3
   15da8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15dac:	2501      	movs	r5, #1
   15dae:	e7de      	b.n	15d6e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   15db0:	b1ad      	cbz	r5, 15dde <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   15db2:	4630      	mov	r0, r6
   15db4:	f7fc fe86 	bl	12ac4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   15db8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   15dbc:	2b00      	cmp	r3, #0
   15dbe:	d1da      	bne.n	15d76 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15dc0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   15dc4:	2a00      	cmp	r2, #0
   15dc6:	d0d6      	beq.n	15d76 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15dc8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   15dcc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   15dd0:	2301      	movs	r3, #1
   15dd2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   15dd6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dda:	60a3      	str	r3, [r4, #8]
}
   15ddc:	e7cb      	b.n	15d76 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   15dde:	2100      	movs	r1, #0
   15de0:	2021      	movs	r0, #33	; 0x21
   15de2:	f003 fa0b 	bl	191fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15de6:	e7e7      	b.n	15db8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   15de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15dec:	2202      	movs	r2, #2
   15dee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   15df2:	e7d1      	b.n	15d98 <z_nrf_clock_control_lf_on+0x8c>
   15df4:	20002750 	.word	0x20002750
   15df8:	20002740 	.word	0x20002740
   15dfc:	20002770 	.word	0x20002770
   15e00:	20003991 	.word	0x20003991
   15e04:	e000e100 	.word	0xe000e100

00015e08 <uart_poll_out.constprop.0>:


extern void z_impl_uart_poll_out(const struct device * dev, unsigned char out_char);

__pinned_func
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
   15e08:	4601      	mov	r1, r0
   15e0a:	4802      	ldr	r0, [pc, #8]	; (15e14 <uart_poll_out.constprop.0+0xc>)
   15e0c:	6883      	ldr	r3, [r0, #8]
   15e0e:	685b      	ldr	r3, [r3, #4]
   15e10:	4718      	bx	r3
   15e12:	bf00      	nop
   15e14:	0001e788 	.word	0x0001e788

00015e18 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   15e18:	b538      	push	{r3, r4, r5, lr}
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   15e1a:	4b09      	ldr	r3, [pc, #36]	; (15e40 <console_out+0x28>)
   15e1c:	b2c5      	uxtb	r5, r0
   15e1e:	681b      	ldr	r3, [r3, #0]
{
   15e20:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   15e22:	4628      	mov	r0, r5
   15e24:	4798      	blx	r3

	if (handled_by_debug_server) {
   15e26:	2801      	cmp	r0, #1
   15e28:	d007      	beq.n	15e3a <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   15e2a:	2c0a      	cmp	r4, #10
   15e2c:	d102      	bne.n	15e34 <console_out+0x1c>
		uart_poll_out(uart_console_dev, '\r');
   15e2e:	200d      	movs	r0, #13
   15e30:	f7ff ffea 	bl	15e08 <uart_poll_out.constprop.0>
	}
	uart_poll_out(uart_console_dev, c);
   15e34:	4628      	mov	r0, r5
   15e36:	f7ff ffe7 	bl	15e08 <uart_poll_out.constprop.0>

	return c;
}
   15e3a:	4620      	mov	r0, r4
   15e3c:	bd38      	pop	{r3, r4, r5, pc}
   15e3e:	bf00      	nop
   15e40:	200003a4 	.word	0x200003a4

00015e44 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   15e44:	b508      	push	{r3, lr}
   15e46:	4807      	ldr	r0, [pc, #28]	; (15e64 <uart_console_init+0x20>)
   15e48:	f007 fe9d 	bl	1db86 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   15e4c:	b138      	cbz	r0, 15e5e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   15e4e:	4806      	ldr	r0, [pc, #24]	; (15e68 <uart_console_init+0x24>)
   15e50:	f7fd fce6 	bl	13820 <__stdout_hook_install>
	__printk_hook_install(console_out);
   15e54:	4804      	ldr	r0, [pc, #16]	; (15e68 <uart_console_init+0x24>)
   15e56:	f7fb f933 	bl	110c0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   15e5a:	2000      	movs	r0, #0
}
   15e5c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   15e5e:	f06f 0012 	mvn.w	r0, #18
   15e62:	e7fb      	b.n	15e5c <uart_console_init+0x18>
   15e64:	0001e788 	.word	0x0001e788
   15e68:	00015e19 	.word	0x00015e19

00015e6c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   15e6c:	b530      	push	{r4, r5, lr}
	return port->config;
   15e6e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15e70:	7b05      	ldrb	r5, [r0, #12]
   15e72:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   15e76:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   15e7a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15e7c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   15e80:	d105      	bne.n	15e8e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   15e82:	4620      	mov	r0, r4
   15e84:	f001 fff4 	bl	17e70 <nrfx_gpiote_trigger_disable>

		return 0;
   15e88:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   15e8a:	b005      	add	sp, #20
   15e8c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   15e8e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   15e90:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   15e94:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   15e98:	d114      	bne.n	15ec4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   15e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   15e9e:	bf0c      	ite	eq
   15ea0:	2304      	moveq	r3, #4
   15ea2:	2305      	movne	r3, #5
   15ea4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15ea8:	2300      	movs	r3, #0
   15eaa:	4619      	mov	r1, r3
   15eac:	aa02      	add	r2, sp, #8
   15eae:	4620      	mov	r0, r4
   15eb0:	f001 fe1c 	bl	17aec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15eb4:	4b1f      	ldr	r3, [pc, #124]	; (15f34 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   15eb6:	4298      	cmp	r0, r3
   15eb8:	d139      	bne.n	15f2e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   15eba:	2101      	movs	r1, #1
   15ebc:	4620      	mov	r0, r4
   15ebe:	f001 ff8f 	bl	17de0 <nrfx_gpiote_trigger_enable>
	return 0;
   15ec2:	e7e1      	b.n	15e88 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   15ec4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   15ec8:	d026      	beq.n	15f18 <gpio_nrfx_pin_interrupt_configure+0xac>
   15eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   15ece:	bf14      	ite	ne
   15ed0:	2301      	movne	r3, #1
   15ed2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   15ed4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   15ed8:	6883      	ldr	r3, [r0, #8]
   15eda:	40cb      	lsrs	r3, r1
   15edc:	07d9      	lsls	r1, r3, #31
   15ede:	d4e3      	bmi.n	15ea8 <gpio_nrfx_pin_interrupt_configure+0x3c>
   15ee0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   15ee4:	d1e0      	bne.n	15ea8 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   15ee6:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   15ee8:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   15eea:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   15eee:	4a12      	ldr	r2, [pc, #72]	; (15f38 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15ef0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   15ef4:	bf18      	it	ne
   15ef6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   15efe:	07db      	lsls	r3, r3, #31
   15f00:	d4d2      	bmi.n	15ea8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15f02:	f10d 0507 	add.w	r5, sp, #7
   15f06:	4629      	mov	r1, r5
   15f08:	4620      	mov	r0, r4
   15f0a:	f001 ff15 	bl	17d38 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   15f0e:	4b0b      	ldr	r3, [pc, #44]	; (15f3c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   15f10:	4298      	cmp	r0, r3
   15f12:	d003      	beq.n	15f1c <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   15f14:	9503      	str	r5, [sp, #12]
   15f16:	e7c7      	b.n	15ea8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   15f18:	2303      	movs	r3, #3
   15f1a:	e7db      	b.n	15ed4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   15f1c:	4628      	mov	r0, r5
   15f1e:	f001 ff59 	bl	17dd4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   15f22:	4b04      	ldr	r3, [pc, #16]	; (15f34 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   15f24:	4298      	cmp	r0, r3
   15f26:	d0f5      	beq.n	15f14 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   15f28:	f06f 000b 	mvn.w	r0, #11
   15f2c:	e7ad      	b.n	15e8a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   15f2e:	f06f 0015 	mvn.w	r0, #21
   15f32:	e7aa      	b.n	15e8a <gpio_nrfx_pin_interrupt_configure+0x1e>
   15f34:	0bad0000 	.word	0x0bad0000
   15f38:	50000300 	.word	0x50000300
   15f3c:	0bad0004 	.word	0x0bad0004

00015f40 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15f40:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   15f42:	f001 ff37 	bl	17db4 <nrfx_gpiote_is_init>
   15f46:	4604      	mov	r4, r0
   15f48:	b968      	cbnz	r0, 15f66 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   15f4a:	f001 ff0b 	bl	17d64 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   15f4e:	4b08      	ldr	r3, [pc, #32]	; (15f70 <gpio_nrfx_init+0x30>)
   15f50:	4298      	cmp	r0, r3
   15f52:	d10a      	bne.n	15f6a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   15f54:	4807      	ldr	r0, [pc, #28]	; (15f74 <gpio_nrfx_init+0x34>)
   15f56:	4621      	mov	r1, r4
   15f58:	f001 fee8 	bl	17d2c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15f5c:	4622      	mov	r2, r4
   15f5e:	2105      	movs	r1, #5
   15f60:	2006      	movs	r0, #6
   15f62:	f7fc fe59 	bl	12c18 <z_arm_irq_priority_set>
		return 0;
   15f66:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   15f68:	bd10      	pop	{r4, pc}
		return -EIO;
   15f6a:	f06f 0004 	mvn.w	r0, #4
   15f6e:	e7fb      	b.n	15f68 <gpio_nrfx_init+0x28>
   15f70:	0bad0000 	.word	0x0bad0000
   15f74:	00015f79 	.word	0x00015f79

00015f78 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15f78:	0942      	lsrs	r2, r0, #5
{
   15f7a:	b570      	push	{r4, r5, r6, lr}
   15f7c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15f7e:	d002      	beq.n	15f86 <nrfx_gpio_handler+0xe>
   15f80:	2a01      	cmp	r2, #1
   15f82:	d017      	beq.n	15fb4 <nrfx_gpio_handler+0x3c>
}
   15f84:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15f86:	4e0d      	ldr	r6, [pc, #52]	; (15fbc <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   15f88:	6932      	ldr	r2, [r6, #16]
   15f8a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f8c:	2900      	cmp	r1, #0
   15f8e:	d0f9      	beq.n	15f84 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   15f90:	f003 031f 	and.w	r3, r3, #31
   15f94:	2501      	movs	r5, #1
   15f96:	680c      	ldr	r4, [r1, #0]
   15f98:	409d      	lsls	r5, r3
   15f9a:	2900      	cmp	r1, #0
   15f9c:	d0f2      	beq.n	15f84 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   15f9e:	688a      	ldr	r2, [r1, #8]
   15fa0:	402a      	ands	r2, r5
   15fa2:	d002      	beq.n	15faa <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15fa4:	684b      	ldr	r3, [r1, #4]
   15fa6:	4630      	mov	r0, r6
   15fa8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15faa:	b12c      	cbz	r4, 15fb8 <nrfx_gpio_handler+0x40>
   15fac:	6823      	ldr	r3, [r4, #0]
   15fae:	4621      	mov	r1, r4
   15fb0:	461c      	mov	r4, r3
   15fb2:	e7f2      	b.n	15f9a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15fb4:	4e02      	ldr	r6, [pc, #8]	; (15fc0 <nrfx_gpio_handler+0x48>)
   15fb6:	e7e7      	b.n	15f88 <nrfx_gpio_handler+0x10>
   15fb8:	4623      	mov	r3, r4
   15fba:	e7f8      	b.n	15fae <nrfx_gpio_handler+0x36>
   15fbc:	0001e710 	.word	0x0001e710
   15fc0:	0001e6f8 	.word	0x0001e6f8

00015fc4 <gpio_nrfx_pin_configure>:
{
   15fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   15fc8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15fca:	7b3b      	ldrb	r3, [r7, #12]
   15fcc:	f001 051f 	and.w	r5, r1, #31
   15fd0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   15fd4:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15fd6:	4628      	mov	r0, r5
   15fd8:	f10d 0103 	add.w	r1, sp, #3
{
   15fdc:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15fde:	f001 feab 	bl	17d38 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   15fe2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15fe6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   15fe8:	d10b      	bne.n	16002 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   15fea:	4628      	mov	r0, r5
   15fec:	f001 ff68 	bl	17ec0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   15ff0:	4b3d      	ldr	r3, [pc, #244]	; (160e8 <gpio_nrfx_pin_configure+0x124>)
   15ff2:	4598      	cmp	r8, r3
   15ff4:	d103      	bne.n	15ffe <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   15ff6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15ffa:	f001 fee5 	bl	17dc8 <nrfx_gpiote_channel_free>
		return 0;
   15ffe:	2000      	movs	r0, #0
   16000:	e00c      	b.n	1601c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   16002:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16004:	4619      	mov	r1, r3
   16006:	aa02      	add	r2, sp, #8
   16008:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1600a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1600e:	f001 fd6d 	bl	17aec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   16012:	4b35      	ldr	r3, [pc, #212]	; (160e8 <gpio_nrfx_pin_configure+0x124>)
   16014:	4298      	cmp	r0, r3
   16016:	d004      	beq.n	16022 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   16018:	f06f 0015 	mvn.w	r0, #21
}
   1601c:	b004      	add	sp, #16
   1601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   16022:	4580      	cmp	r8, r0
   16024:	d103      	bne.n	1602e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   16026:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1602a:	f001 fecd 	bl	17dc8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1602e:	03a3      	lsls	r3, r4, #14
   16030:	d54b      	bpl.n	160ca <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16032:	f240 3306 	movw	r3, #774	; 0x306
   16036:	4023      	ands	r3, r4
   16038:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1603c:	d019      	beq.n	16072 <gpio_nrfx_pin_configure+0xae>
   1603e:	d80c      	bhi.n	1605a <gpio_nrfx_pin_configure+0x96>
   16040:	2b06      	cmp	r3, #6
   16042:	d017      	beq.n	16074 <gpio_nrfx_pin_configure+0xb0>
   16044:	d804      	bhi.n	16050 <gpio_nrfx_pin_configure+0x8c>
   16046:	b1ab      	cbz	r3, 16074 <gpio_nrfx_pin_configure+0xb0>
   16048:	2b02      	cmp	r3, #2
   1604a:	d1e5      	bne.n	16018 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1604c:	2304      	movs	r3, #4
   1604e:	e011      	b.n	16074 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   16050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16054:	d1e0      	bne.n	16018 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   16056:	2301      	movs	r3, #1
   16058:	e00c      	b.n	16074 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1605a:	f240 2202 	movw	r2, #514	; 0x202
   1605e:	4293      	cmp	r3, r2
   16060:	d027      	beq.n	160b2 <gpio_nrfx_pin_configure+0xee>
   16062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   16066:	d026      	beq.n	160b6 <gpio_nrfx_pin_configure+0xf2>
   16068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1606c:	d1d4      	bne.n	16018 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1606e:	2302      	movs	r3, #2
   16070:	e000      	b.n	16074 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   16072:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   16074:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   16078:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1607c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   16080:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   16082:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   16086:	bf54      	ite	pl
   16088:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1608c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1608e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   16090:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   16094:	d511      	bpl.n	160ba <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   16096:	687a      	ldr	r2, [r7, #4]
   16098:	2301      	movs	r3, #1
   1609a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1609c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   160a0:	2200      	movs	r2, #0
   160a2:	a901      	add	r1, sp, #4
   160a4:	4628      	mov	r0, r5
   160a6:	f001 fdcf 	bl	17c48 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   160aa:	4b0f      	ldr	r3, [pc, #60]	; (160e8 <gpio_nrfx_pin_configure+0x124>)
   160ac:	4298      	cmp	r0, r3
   160ae:	d0a6      	beq.n	15ffe <gpio_nrfx_pin_configure+0x3a>
   160b0:	e7b2      	b.n	16018 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   160b2:	2305      	movs	r3, #5
   160b4:	e7de      	b.n	16074 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   160b6:	2303      	movs	r3, #3
   160b8:	e7dc      	b.n	16074 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   160ba:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   160bc:	bf41      	itttt	mi
   160be:	2301      	movmi	r3, #1
   160c0:	687a      	ldrmi	r2, [r7, #4]
   160c2:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   160c4:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   160c8:	e7ea      	b.n	160a0 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   160ca:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   160cc:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   160d0:	bf54      	ite	pl
   160d2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   160d6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   160d8:	461a      	mov	r2, r3
   160da:	a901      	add	r1, sp, #4
   160dc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   160de:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   160e2:	f001 fd03 	bl	17aec <nrfx_gpiote_input_configure>
   160e6:	e7e0      	b.n	160aa <gpio_nrfx_pin_configure+0xe6>
   160e8:	0bad0000 	.word	0x0bad0000

000160ec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   160ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   160ee:	794b      	ldrb	r3, [r1, #5]
   160f0:	2b01      	cmp	r3, #1
   160f2:	d026      	beq.n	16142 <uarte_nrfx_configure+0x56>
   160f4:	2b03      	cmp	r3, #3
   160f6:	d121      	bne.n	1613c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   160f8:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   160fa:	798b      	ldrb	r3, [r1, #6]
   160fc:	2b03      	cmp	r3, #3
   160fe:	d11d      	bne.n	1613c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16100:	79ce      	ldrb	r6, [r1, #7]
   16102:	b10e      	cbz	r6, 16108 <uarte_nrfx_configure+0x1c>
   16104:	2e01      	cmp	r6, #1
   16106:	d119      	bne.n	1613c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16108:	790a      	ldrb	r2, [r1, #4]
   1610a:	b112      	cbz	r2, 16112 <uarte_nrfx_configure+0x26>
   1610c:	2a02      	cmp	r2, #2
   1610e:	d115      	bne.n	1613c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16110:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16112:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16114:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   16116:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1611a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1611c:	d067      	beq.n	161ee <uarte_nrfx_configure+0x102>
   1611e:	d82d      	bhi.n	1617c <uarte_nrfx_configure+0x90>
   16120:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16124:	d066      	beq.n	161f4 <uarte_nrfx_configure+0x108>
   16126:	d816      	bhi.n	16156 <uarte_nrfx_configure+0x6a>
   16128:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1612c:	d064      	beq.n	161f8 <uarte_nrfx_configure+0x10c>
   1612e:	d80a      	bhi.n	16146 <uarte_nrfx_configure+0x5a>
   16130:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16134:	d063      	beq.n	161fe <uarte_nrfx_configure+0x112>
   16136:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1613a:	d063      	beq.n	16204 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1613c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16140:	e054      	b.n	161ec <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   16142:	2500      	movs	r5, #0
   16144:	e7d9      	b.n	160fa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   16146:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1614a:	d05e      	beq.n	1620a <uarte_nrfx_configure+0x11e>
   1614c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16150:	d1f4      	bne.n	1613c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16152:	4b38      	ldr	r3, [pc, #224]	; (16234 <uarte_nrfx_configure+0x148>)
   16154:	e03c      	b.n	161d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   16156:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1615a:	d059      	beq.n	16210 <uarte_nrfx_configure+0x124>
   1615c:	d807      	bhi.n	1616e <uarte_nrfx_configure+0x82>
   1615e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16162:	d057      	beq.n	16214 <uarte_nrfx_configure+0x128>
   16164:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16168:	d1e8      	bne.n	1613c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1616a:	4b33      	ldr	r3, [pc, #204]	; (16238 <uarte_nrfx_configure+0x14c>)
   1616c:	e030      	b.n	161d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1616e:	f647 2412 	movw	r4, #31250	; 0x7a12
   16172:	42a3      	cmp	r3, r4
   16174:	d1e2      	bne.n	1613c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16176:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1617a:	e029      	b.n	161d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1617c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16180:	d04a      	beq.n	16218 <uarte_nrfx_configure+0x12c>
   16182:	d813      	bhi.n	161ac <uarte_nrfx_configure+0xc0>
   16184:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16188:	d049      	beq.n	1621e <uarte_nrfx_configure+0x132>
   1618a:	d809      	bhi.n	161a0 <uarte_nrfx_configure+0xb4>
   1618c:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   16190:	42a3      	cmp	r3, r4
   16192:	d046      	beq.n	16222 <uarte_nrfx_configure+0x136>
   16194:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16198:	d1d0      	bne.n	1613c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1619a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1619e:	e017      	b.n	161d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   161a0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   161a4:	d1ca      	bne.n	1613c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   161a6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   161aa:	e011      	b.n	161d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   161ac:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   161b0:	d03a      	beq.n	16228 <uarte_nrfx_configure+0x13c>
   161b2:	d808      	bhi.n	161c6 <uarte_nrfx_configure+0xda>
   161b4:	4c21      	ldr	r4, [pc, #132]	; (1623c <uarte_nrfx_configure+0x150>)
   161b6:	42a3      	cmp	r3, r4
   161b8:	d039      	beq.n	1622e <uarte_nrfx_configure+0x142>
   161ba:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   161be:	d1bd      	bne.n	1613c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   161c0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   161c4:	e004      	b.n	161d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   161c6:	4c1e      	ldr	r4, [pc, #120]	; (16240 <uarte_nrfx_configure+0x154>)
   161c8:	42a3      	cmp	r3, r4
   161ca:	d1b7      	bne.n	1613c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   161cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   161d0:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   161d2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   161d6:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   161d8:	4335      	orrs	r5, r6
   161da:	681b      	ldr	r3, [r3, #0]
   161dc:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   161de:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   161e2:	c903      	ldmia	r1, {r0, r1}
   161e4:	1d23      	adds	r3, r4, #4
   161e6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   161ea:	2000      	movs	r0, #0
}
   161ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   161ee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   161f2:	e7ed      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   161f4:	4b13      	ldr	r3, [pc, #76]	; (16244 <uarte_nrfx_configure+0x158>)
   161f6:	e7eb      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   161f8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   161fc:	e7e8      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   161fe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16202:	e7e5      	b.n	161d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   16204:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16208:	e7e2      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1620a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1620e:	e7df      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16210:	4b0d      	ldr	r3, [pc, #52]	; (16248 <uarte_nrfx_configure+0x15c>)
   16212:	e7dd      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16214:	4b0d      	ldr	r3, [pc, #52]	; (1624c <uarte_nrfx_configure+0x160>)
   16216:	e7db      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16218:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1621c:	e7d8      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1621e:	4b0c      	ldr	r3, [pc, #48]	; (16250 <uarte_nrfx_configure+0x164>)
   16220:	e7d6      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16222:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16226:	e7d3      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16228:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1622c:	e7d0      	b.n	161d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1622e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16232:	e7cd      	b.n	161d0 <uarte_nrfx_configure+0xe4>
   16234:	0013b000 	.word	0x0013b000
   16238:	004ea000 	.word	0x004ea000
   1623c:	0003d090 	.word	0x0003d090
   16240:	000f4240 	.word	0x000f4240
   16244:	00275000 	.word	0x00275000
   16248:	0075c000 	.word	0x0075c000
   1624c:	003af000 	.word	0x003af000
   16250:	013a9000 	.word	0x013a9000

00016254 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   16254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16258:	b082      	sub	sp, #8
	const struct uarte_nrfx_config *config = dev->config;
   1625a:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1625e:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   16260:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   16264:	2100      	movs	r1, #0
   16266:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1626a:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1626c:	f8d8 a00c 	ldr.w	sl, [r8, #12]
static int uarte_instance_init(const struct device *dev,
   16270:	af00      	add	r7, sp, #0
   16272:	4681      	mov	r9, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   16274:	1d3a      	adds	r2, r7, #4
   16276:	4650      	mov	r0, sl
   16278:	f007 fb8c 	bl	1d994 <pinctrl_lookup_state>
	if (ret < 0) {
   1627c:	1e05      	subs	r5, r0, #0
   1627e:	db2c      	blt.n	162da <uarte_instance_init.constprop.0+0x86>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   16280:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   16282:	f8da 2000 	ldr.w	r2, [sl]
   16286:	7919      	ldrb	r1, [r3, #4]
   16288:	6818      	ldr	r0, [r3, #0]
   1628a:	f000 fc1d 	bl	16ac8 <pinctrl_configure_pins>
	if (err < 0) {
   1628e:	1e05      	subs	r5, r0, #0
   16290:	db23      	blt.n	162da <uarte_instance_init.constprop.0+0x86>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   16292:	1d31      	adds	r1, r6, #4
   16294:	4648      	mov	r0, r9
   16296:	f7ff ff29 	bl	160ec <uarte_nrfx_configure>
	if (err) {
   1629a:	4605      	mov	r5, r0
   1629c:	b9e8      	cbnz	r0, 162da <uarte_instance_init.constprop.0+0x86>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1629e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   162a2:	0799      	lsls	r1, r3, #30
   162a4:	d532      	bpl.n	1630c <uarte_instance_init.constprop.0+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   162a6:	f106 001c 	add.w	r0, r6, #28
   162aa:	f001 ff0b 	bl	180c4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   162ae:	4b2d      	ldr	r3, [pc, #180]	; (16364 <uarte_instance_init.constprop.0+0x110>)
   162b0:	4298      	cmp	r0, r3
   162b2:	d017      	beq.n	162e4 <uarte_instance_init.constprop.0+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   162b4:	466c      	mov	r4, sp
   162b6:	b088      	sub	sp, #32
   162b8:	466a      	mov	r2, sp
   162ba:	4b2b      	ldr	r3, [pc, #172]	; (16368 <uarte_instance_init.constprop.0+0x114>)
   162bc:	6153      	str	r3, [r2, #20]
   162be:	4b2b      	ldr	r3, [pc, #172]	; (1636c <uarte_instance_init.constprop.0+0x118>)
   162c0:	6193      	str	r3, [r2, #24]
   162c2:	2303      	movs	r3, #3
   162c4:	f842 3f10 	str.w	r3, [r2, #16]!
   162c8:	4829      	ldr	r0, [pc, #164]	; (16370 <uarte_instance_init.constprop.0+0x11c>)
   162ca:	462b      	mov	r3, r5
   162cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   162d0:	f7fb fe7a 	bl	11fc8 <z_impl_z_log_msg_static_create>
		return -EIO;
   162d4:	f06f 0504 	mvn.w	r5, #4
   162d8:	46a5      	mov	sp, r4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   162da:	4628      	mov	r0, r5
   162dc:	3708      	adds	r7, #8
   162de:	46bd      	mov	sp, r7
   162e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   162e4:	7f33      	ldrb	r3, [r6, #28]
   162e6:	00db      	lsls	r3, r3, #3
   162e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   162ec:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   162f0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   162f4:	f504 7190 	add.w	r1, r4, #288	; 0x120
   162f8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   162fc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   16300:	7f32      	ldrb	r2, [r6, #28]
   16302:	2301      	movs	r3, #1
   16304:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   16306:	4a1b      	ldr	r2, [pc, #108]	; (16374 <uarte_instance_init.constprop.0+0x120>)
   16308:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1630c:	2308      	movs	r3, #8
   1630e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   16312:	f898 3008 	ldrb.w	r3, [r8, #8]
   16316:	b953      	cbnz	r3, 1632e <uarte_instance_init.constprop.0+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16318:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1631c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16320:	69b3      	ldr	r3, [r6, #24]
   16322:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16326:	2301      	movs	r3, #1
   16328:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1632c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1632e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16332:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   16334:	bf5c      	itt	pl
   16336:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1633a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1633e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16342:	06db      	lsls	r3, r3, #27
   16344:	bf44      	itt	mi
   16346:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1634a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1634e:	6973      	ldr	r3, [r6, #20]
   16350:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16354:	2300      	movs	r3, #0
   16356:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1635a:	2301      	movs	r3, #1
   1635c:	60a3      	str	r3, [r4, #8]
   1635e:	60e3      	str	r3, [r4, #12]
	return 0;
   16360:	e7bb      	b.n	162da <uarte_instance_init.constprop.0+0x86>
   16362:	bf00      	nop
   16364:	0bad0000 	.word	0x0bad0000
   16368:	000201d0 	.word	0x000201d0
   1636c:	000201f3 	.word	0x000201f3
   16370:	0001e9f0 	.word	0x0001e9f0
   16374:	4001f000 	.word	0x4001f000

00016378 <uarte_nrfx_poll_out>:
{
   16378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1637a:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1637c:	6907      	ldr	r7, [r0, #16]
{
   1637e:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16380:	f007 fccf 	bl	1dd22 <k_is_in_isr>
   16384:	b9b0      	cbnz	r0, 163b4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   16386:	4b21      	ldr	r3, [pc, #132]	; (1640c <uarte_nrfx_poll_out+0x94>)
   16388:	781b      	ldrb	r3, [r3, #0]
   1638a:	b19b      	cbz	r3, 163b4 <uarte_nrfx_poll_out+0x3c>
{
   1638c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1638e:	6860      	ldr	r0, [r4, #4]
   16390:	f007 f9e7 	bl	1d762 <is_tx_ready.isra.0>
   16394:	bb00      	cbnz	r0, 163d8 <uarte_nrfx_poll_out+0x60>
   16396:	2001      	movs	r0, #1
   16398:	f007 fb93 	bl	1dac2 <nrfx_busy_wait>
   1639c:	3e01      	subs	r6, #1
   1639e:	d1f6      	bne.n	1638e <uarte_nrfx_poll_out+0x16>
   163a0:	2100      	movs	r1, #0
   163a2:	2021      	movs	r0, #33	; 0x21
   163a4:	f002 ff2a 	bl	191fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   163a8:	e7f0      	b.n	1638c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   163aa:	f381 8811 	msr	BASEPRI, r1
   163ae:	f3bf 8f6f 	isb	sy
}
   163b2:	e7f5      	b.n	163a0 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   163b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   163b8:	f3ef 8111 	mrs	r1, BASEPRI
   163bc:	f383 8812 	msr	BASEPRI_MAX, r3
   163c0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   163c4:	6860      	ldr	r0, [r4, #4]
   163c6:	460e      	mov	r6, r1
   163c8:	f007 f9cb 	bl	1d762 <is_tx_ready.isra.0>
   163cc:	b990      	cbnz	r0, 163f4 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   163ce:	f381 8811 	msr	BASEPRI, r1
   163d2:	f3bf 8f6f 	isb	sy
}
   163d6:	e7ed      	b.n	163b4 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   163d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   163dc:	f3ef 8111 	mrs	r1, BASEPRI
   163e0:	f383 8812 	msr	BASEPRI_MAX, r3
   163e4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   163e8:	6860      	ldr	r0, [r4, #4]
   163ea:	460e      	mov	r6, r1
   163ec:	f007 f9b9 	bl	1d762 <is_tx_ready.isra.0>
   163f0:	2800      	cmp	r0, #0
   163f2:	d0da      	beq.n	163aa <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   163f4:	697b      	ldr	r3, [r7, #20]
   163f6:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   163f8:	6979      	ldr	r1, [r7, #20]
   163fa:	2201      	movs	r2, #1
   163fc:	4620      	mov	r0, r4
   163fe:	f007 f8f0 	bl	1d5e2 <tx_start>
	__asm__ volatile(
   16402:	f386 8811 	msr	BASEPRI, r6
   16406:	f3bf 8f6f 	isb	sy
}
   1640a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1640c:	20003991 	.word	0x20003991

00016410 <random_byte_get>:
	__asm__ volatile(
   16410:	f04f 0340 	mov.w	r3, #64	; 0x40
   16414:	f3ef 8211 	mrs	r2, BASEPRI
   16418:	f383 8812 	msr	BASEPRI_MAX, r3
   1641c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16420:	4b09      	ldr	r3, [pc, #36]	; (16448 <random_byte_get+0x38>)
   16422:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   16426:	b161      	cbz	r1, 16442 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16428:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1642a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1642e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   16432:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   16436:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   16438:	f382 8811 	msr	BASEPRI, r2
   1643c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   16440:	4770      	bx	lr
	int retval = -EAGAIN;
   16442:	f06f 000a 	mvn.w	r0, #10
   16446:	e7f7      	b.n	16438 <random_byte_get+0x28>
   16448:	4000d000 	.word	0x4000d000

0001644c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1644c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1644e:	4603      	mov	r3, r0
   16450:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   16452:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   16454:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   16458:	f04f 0540 	mov.w	r5, #64	; 0x40
   1645c:	f3ef 8211 	mrs	r2, BASEPRI
   16460:	f385 8812 	msr	BASEPRI_MAX, r5
   16464:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   16468:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1646a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1646e:	1be4      	subs	r4, r4, r7
   16470:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   16474:	42a0      	cmp	r0, r4
		len = available;
   16476:	bf88      	it	hi
   16478:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1647a:	183e      	adds	r6, r7, r0
   1647c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   16480:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   16482:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   16484:	f382 8811 	msr	BASEPRI, r2
   16488:	f3bf 8f6f 	isb	sy
   1648c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1648e:	428a      	cmp	r2, r1
   16490:	d117      	bne.n	164c2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   16492:	4577      	cmp	r7, lr
   16494:	d10d      	bne.n	164b2 <rng_pool_get+0x66>
	__asm__ volatile(
   16496:	f04f 0140 	mov.w	r1, #64	; 0x40
   1649a:	f3ef 8211 	mrs	r2, BASEPRI
   1649e:	f381 8812 	msr	BASEPRI_MAX, r1
   164a2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   164a6:	7819      	ldrb	r1, [r3, #0]
   164a8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   164aa:	f382 8811 	msr	BASEPRI, r2
   164ae:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   164b2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   164b4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   164b6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   164b8:	bf22      	ittt	cs
   164ba:	4b06      	ldrcs	r3, [pc, #24]	; (164d4 <rng_pool_get+0x88>)
   164bc:	2201      	movcs	r2, #1
   164be:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   164c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   164c2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   164c4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   164c6:	7976      	ldrb	r6, [r6, #5]
   164c8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   164cc:	ea05 050c 	and.w	r5, r5, ip
   164d0:	e7dd      	b.n	1648e <rng_pool_get+0x42>
   164d2:	bf00      	nop
   164d4:	4000d000 	.word	0x4000d000

000164d8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   164d8:	43db      	mvns	r3, r3
{
   164da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   164de:	f013 0501 	ands.w	r5, r3, #1
{
   164e2:	460e      	mov	r6, r1
   164e4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   164e6:	d004      	beq.n	164f2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   164e8:	4823      	ldr	r0, [pc, #140]	; (16578 <entropy_nrf5_get_entropy_isr+0xa0>)
   164ea:	f7ff ffaf 	bl	1644c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   164ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   164f2:	b3a2      	cbz	r2, 1655e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   164f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   164f8:	f3ef 8811 	mrs	r8, BASEPRI
   164fc:	f383 8812 	msr	BASEPRI_MAX, r3
   16500:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   16504:	200d      	movs	r0, #13
   16506:	f7fc fb79 	bl	12bfc <arch_irq_is_enabled>
   1650a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1650c:	200d      	movs	r0, #13
   1650e:	f7fc fb61 	bl	12bd4 <arch_irq_disable>
	__asm__ volatile(
   16512:	f388 8811 	msr	BASEPRI, r8
   16516:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1651a:	f8df a060 	ldr.w	sl, [pc, #96]	; 1657c <entropy_nrf5_get_entropy_isr+0xa4>
   1651e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 16580 <entropy_nrf5_get_entropy_isr+0xa8>
   16522:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   16526:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1652a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1652e:	2301      	movs	r3, #1
   16530:	f8ca 3000 	str.w	r3, [sl]
   16534:	4625      	mov	r5, r4
   16536:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1653a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1653e:	b183      	cbz	r3, 16562 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   16540:	f7ff ff66 	bl	16410 <random_byte_get>
			if (byte < 0) {
   16544:	1e03      	subs	r3, r0, #0
   16546:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1654a:	dbf6      	blt.n	1653a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1654c:	3d01      	subs	r5, #1
   1654e:	b2ad      	uxth	r5, r5
   16550:	5573      	strb	r3, [r6, r5]
		} while (len);
   16552:	2d00      	cmp	r5, #0
   16554:	d1f1      	bne.n	1653a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   16556:	b117      	cbz	r7, 1655e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   16558:	200d      	movs	r0, #13
   1655a:	f7fc fb2d 	bl	12bb8 <arch_irq_enable>
	return cnt;
   1655e:	4620      	mov	r0, r4
   16560:	e7c5      	b.n	164ee <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   16562:	f04f 0340 	mov.w	r3, #64	; 0x40
   16566:	f3ef 8011 	mrs	r0, BASEPRI
   1656a:	f383 8812 	msr	BASEPRI_MAX, r3
   1656e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   16572:	f7fc faa7 	bl	12ac4 <arch_cpu_atomic_idle>
}
   16576:	e7e0      	b.n	1653a <entropy_nrf5_get_entropy_isr+0x62>
   16578:	200027f0 	.word	0x200027f0
   1657c:	4000d000 	.word	0x4000d000
   16580:	e000e100 	.word	0xe000e100

00016584 <entropy_nrf5_get_entropy>:
{
   16584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   16588:	4f12      	ldr	r7, [pc, #72]	; (165d4 <entropy_nrf5_get_entropy+0x50>)
   1658a:	460d      	mov	r5, r1
   1658c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1658e:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   16592:	b914      	cbnz	r4, 1659a <entropy_nrf5_get_entropy+0x16>
}
   16594:	4620      	mov	r0, r4
   16596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1659a:	f04f 33ff 	mov.w	r3, #4294967295
   1659e:	f04f 32ff 	mov.w	r2, #4294967295
   165a2:	4638      	mov	r0, r7
   165a4:	f002 f9d2 	bl	1894c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   165a8:	4622      	mov	r2, r4
   165aa:	4629      	mov	r1, r5
   165ac:	4640      	mov	r0, r8
   165ae:	f7ff ff4d 	bl	1644c <rng_pool_get>
   165b2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   165b4:	4638      	mov	r0, r7
   165b6:	f002 f9a3 	bl	18900 <z_impl_k_sem_give>
		if (bytes == 0U) {
   165ba:	b93e      	cbnz	r6, 165cc <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   165bc:	f04f 32ff 	mov.w	r2, #4294967295
   165c0:	f04f 33ff 	mov.w	r3, #4294967295
   165c4:	4804      	ldr	r0, [pc, #16]	; (165d8 <entropy_nrf5_get_entropy+0x54>)
   165c6:	f002 f9c1 	bl	1894c <z_impl_k_sem_take>
	while (len) {
   165ca:	e7e6      	b.n	1659a <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   165cc:	1ba4      	subs	r4, r4, r6
   165ce:	b2a4      	uxth	r4, r4
		buf += bytes;
   165d0:	4435      	add	r5, r6
   165d2:	e7de      	b.n	16592 <entropy_nrf5_get_entropy+0xe>
   165d4:	200027c0 	.word	0x200027c0
   165d8:	200027d8 	.word	0x200027d8

000165dc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   165dc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   165de:	4c19      	ldr	r4, [pc, #100]	; (16644 <entropy_nrf5_init+0x68>)
   165e0:	2201      	movs	r2, #1
   165e2:	4611      	mov	r1, r2
   165e4:	4620      	mov	r0, r4
   165e6:	f007 fc52 	bl	1de8e <z_impl_k_sem_init>
   165ea:	2201      	movs	r2, #1
   165ec:	2100      	movs	r1, #0
   165ee:	f104 0018 	add.w	r0, r4, #24
   165f2:	f007 fc4c 	bl	1de8e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   165f6:	f240 4307 	movw	r3, #1031	; 0x407
   165fa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   165fe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16602:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   16604:	230c      	movs	r3, #12
   16606:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1660a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1660c:	4b0e      	ldr	r3, [pc, #56]	; (16648 <entropy_nrf5_init+0x6c>)
   1660e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   16612:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   16616:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1661a:	f022 0201 	bic.w	r2, r2, #1
   1661e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   16622:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16624:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   16628:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1662c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   16630:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16632:	6019      	str	r1, [r3, #0]
   16634:	200d      	movs	r0, #13
   16636:	f7fc faef 	bl	12c18 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1663a:	200d      	movs	r0, #13
   1663c:	f7fc fabc 	bl	12bb8 <arch_irq_enable>

	return 0;
}
   16640:	4628      	mov	r0, r5
   16642:	bd38      	pop	{r3, r4, r5, pc}
   16644:	200027c0 	.word	0x200027c0
   16648:	4000d000 	.word	0x4000d000

0001664c <isr>:
{
   1664c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1664e:	f7ff fedf 	bl	16410 <random_byte_get>
	if (byte < 0) {
   16652:	2800      	cmp	r0, #0
   16654:	db20      	blt.n	16698 <isr+0x4c>
	uint8_t last  = rngp->last;
   16656:	4b17      	ldr	r3, [pc, #92]	; (166b4 <isr+0x68>)
   16658:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1665c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   16660:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   16664:	1b14      	subs	r4, r2, r4
   16666:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1666a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1666c:	d10d      	bne.n	1668a <isr+0x3e>
	uint8_t last  = rngp->last;
   1666e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   16672:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   16676:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1667a:	1b14      	subs	r4, r2, r4
   1667c:	ea31 0404 	bics.w	r4, r1, r4
   16680:	d10b      	bne.n	1669a <isr+0x4e>
   16682:	4b0d      	ldr	r3, [pc, #52]	; (166b8 <isr+0x6c>)
   16684:	2201      	movs	r2, #1
   16686:	605a      	str	r2, [r3, #4]
}
   16688:	e00e      	b.n	166a8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1668a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1668c:	3201      	adds	r2, #1
   1668e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   16690:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   16694:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   16698:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1669a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1669c:	3201      	adds	r2, #1
   1669e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   166a0:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   166a4:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   166a8:	4804      	ldr	r0, [pc, #16]	; (166bc <isr+0x70>)
}
   166aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   166ae:	f002 b927 	b.w	18900 <z_impl_k_sem_give>
   166b2:	bf00      	nop
   166b4:	200027c0 	.word	0x200027c0
   166b8:	4000d000 	.word	0x4000d000
   166bc:	200027d8 	.word	0x200027d8

000166c0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   166c0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   166c2:	2301      	movs	r3, #1
   166c4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   166c6:	4a0e      	ldr	r2, [pc, #56]	; (16700 <compare_int_lock+0x40>)
   166c8:	f3bf 8f5b 	dmb	ish
   166cc:	43dc      	mvns	r4, r3
   166ce:	e852 1f00 	ldrex	r1, [r2]
   166d2:	ea01 0504 	and.w	r5, r1, r4
   166d6:	e842 5600 	strex	r6, r5, [r2]
   166da:	2e00      	cmp	r6, #0
   166dc:	d1f7      	bne.n	166ce <compare_int_lock+0xe>
   166de:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   166e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   166e6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   166e8:	4806      	ldr	r0, [pc, #24]	; (16704 <compare_int_lock+0x44>)
   166ea:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   166ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   166f2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   166f6:	420b      	tst	r3, r1
}
   166f8:	bf14      	ite	ne
   166fa:	2001      	movne	r0, #1
   166fc:	2000      	moveq	r0, #0
   166fe:	bd70      	pop	{r4, r5, r6, pc}
   16700:	20002818 	.word	0x20002818
   16704:	40011000 	.word	0x40011000

00016708 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   16708:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1670a:	490e      	ldr	r1, [pc, #56]	; (16744 <sys_clock_timeout_handler+0x3c>)
   1670c:	e9d1 3400 	ldrd	r3, r4, [r1]
   16710:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   16712:	18c3      	adds	r3, r0, r3
   16714:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   16718:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1671c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   16720:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   16724:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   16728:	d209      	bcs.n	1673e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1672a:	4b07      	ldr	r3, [pc, #28]	; (16748 <sys_clock_timeout_handler+0x40>)
   1672c:	681b      	ldr	r3, [r3, #0]
   1672e:	0a1a      	lsrs	r2, r3, #8
   16730:	061b      	lsls	r3, r3, #24
   16732:	199c      	adds	r4, r3, r6
   16734:	4b05      	ldr	r3, [pc, #20]	; (1674c <sys_clock_timeout_handler+0x44>)
   16736:	f142 0500 	adc.w	r5, r2, #0
   1673a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1673e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   16740:	f002 bed4 	b.w	194ec <sys_clock_announce>
   16744:	20001ba0 	.word	0x20001ba0
   16748:	2000281c 	.word	0x2000281c
   1674c:	20001ba8 	.word	0x20001ba8

00016750 <compare_int_unlock>:
	if (key) {
   16750:	b311      	cbz	r1, 16798 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16752:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   16756:	2301      	movs	r3, #1
   16758:	4a10      	ldr	r2, [pc, #64]	; (1679c <compare_int_unlock+0x4c>)
   1675a:	4083      	lsls	r3, r0
   1675c:	e852 cf00 	ldrex	ip, [r2]
   16760:	ea4c 0c03 	orr.w	ip, ip, r3
   16764:	e842 c100 	strex	r1, ip, [r2]
   16768:	2900      	cmp	r1, #0
   1676a:	d1f7      	bne.n	1675c <compare_int_unlock+0xc>
   1676c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   16770:	4a0b      	ldr	r2, [pc, #44]	; (167a0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16776:	4083      	lsls	r3, r0
   16778:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1677c:	4b09      	ldr	r3, [pc, #36]	; (167a4 <compare_int_unlock+0x54>)
   1677e:	f3bf 8f5b 	dmb	ish
   16782:	681b      	ldr	r3, [r3, #0]
   16784:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   16788:	40c3      	lsrs	r3, r0
   1678a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1678c:	bf42      	ittt	mi
   1678e:	4b06      	ldrmi	r3, [pc, #24]	; (167a8 <compare_int_unlock+0x58>)
   16790:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   16794:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   16798:	4770      	bx	lr
   1679a:	bf00      	nop
   1679c:	20002818 	.word	0x20002818
   167a0:	40011000 	.word	0x40011000
   167a4:	20002814 	.word	0x20002814
   167a8:	e000e100 	.word	0xe000e100

000167ac <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   167ac:	4b0d      	ldr	r3, [pc, #52]	; (167e4 <z_nrf_rtc_timer_read+0x38>)
   167ae:	6818      	ldr	r0, [r3, #0]
   167b0:	0a01      	lsrs	r1, r0, #8
   167b2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   167b4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   167b8:	4b0b      	ldr	r3, [pc, #44]	; (167e8 <z_nrf_rtc_timer_read+0x3c>)
   167ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   167be:	1818      	adds	r0, r3, r0
   167c0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   167c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   167c8:	d20a      	bcs.n	167e0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   167ca:	4b08      	ldr	r3, [pc, #32]	; (167ec <z_nrf_rtc_timer_read+0x40>)
   167cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   167d0:	4290      	cmp	r0, r2
   167d2:	eb71 0303 	sbcs.w	r3, r1, r3
   167d6:	d203      	bcs.n	167e0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   167d8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   167dc:	f141 0100 	adc.w	r1, r1, #0
}
   167e0:	4770      	bx	lr
   167e2:	bf00      	nop
   167e4:	2000281c 	.word	0x2000281c
   167e8:	40011000 	.word	0x40011000
   167ec:	20001ba8 	.word	0x20001ba8

000167f0 <compare_set>:
{
   167f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f4:	4616      	mov	r6, r2
   167f6:	461f      	mov	r7, r3
   167f8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   167fa:	f7ff ff61 	bl	166c0 <compare_int_lock>
   167fe:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   16800:	f7ff ffd4 	bl	167ac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   16804:	42b0      	cmp	r0, r6
   16806:	eb71 0307 	sbcs.w	r3, r1, r7
   1680a:	d251      	bcs.n	168b0 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1680c:	4b3a      	ldr	r3, [pc, #232]	; (168f8 <compare_set+0x108>)
   1680e:	1a30      	subs	r0, r6, r0
   16810:	eb67 0101 	sbc.w	r1, r7, r1
   16814:	4298      	cmp	r0, r3
   16816:	f171 0100 	sbcs.w	r1, r1, #0
   1681a:	d26a      	bcs.n	168f2 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   1681c:	4b37      	ldr	r3, [pc, #220]	; (168fc <compare_set+0x10c>)
   1681e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   16822:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   16826:	429f      	cmp	r7, r3
   16828:	bf08      	it	eq
   1682a:	4296      	cmpeq	r6, r2
   1682c:	d04e      	beq.n	168cc <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1682e:	4934      	ldr	r1, [pc, #208]	; (16900 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16830:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   16834:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16838:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1683c:	00ad      	lsls	r5, r5, #2
   1683e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   16842:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16844:	b2ad      	uxth	r5, r5
   16846:	f007 f895 	bl	1d974 <event_clear>
	return absolute_time & COUNTER_MAX;
   1684a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1684e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   16852:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   16856:	4a2b      	ldr	r2, [pc, #172]	; (16904 <compare_set+0x114>)
   16858:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1685a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   1685e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   16860:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   16864:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16866:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   1686a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   1686e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   16872:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   16876:	f06f 0002 	mvn.w	r0, #2
   1687a:	eba0 0008 	sub.w	r0, r0, r8
   1687e:	4460      	add	r0, ip
   16880:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   16884:	4290      	cmp	r0, r2
   16886:	d921      	bls.n	168cc <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16888:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1688a:	b160      	cbz	r0, 168a6 <compare_set+0xb6>
     return p_reg->COUNTER;
   1688c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   16890:	eba8 000b 	sub.w	r0, r8, fp
   16894:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   16898:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1689c:	d916      	bls.n	168cc <compare_set+0xdc>
					event_clear(chan);
   1689e:	4620      	mov	r0, r4
   168a0:	f007 f868 	bl	1d974 <event_clear>
   168a4:	4a17      	ldr	r2, [pc, #92]	; (16904 <compare_set+0x114>)
			cc_val = now + cc_inc;
   168a6:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   168aa:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   168ae:	e7d9      	b.n	16864 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   168b0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   168b2:	4a15      	ldr	r2, [pc, #84]	; (16908 <compare_set+0x118>)
   168b4:	f3bf 8f5b 	dmb	ish
   168b8:	40a3      	lsls	r3, r4
   168ba:	e852 0f00 	ldrex	r0, [r2]
   168be:	4318      	orrs	r0, r3
   168c0:	e842 0100 	strex	r1, r0, [r2]
   168c4:	2900      	cmp	r1, #0
   168c6:	d1f8      	bne.n	168ba <compare_set+0xca>
   168c8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   168cc:	490b      	ldr	r1, [pc, #44]	; (168fc <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   168ce:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   168d0:	0123      	lsls	r3, r4, #4
   168d2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   168d6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   168da:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   168dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168de:	6053      	str	r3, [r2, #4]
	return ret;
   168e0:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   168e2:	4620      	mov	r0, r4
   168e4:	9900      	ldr	r1, [sp, #0]
   168e6:	f7ff ff33 	bl	16750 <compare_int_unlock>
}
   168ea:	4628      	mov	r0, r5
   168ec:	b003      	add	sp, #12
   168ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   168f2:	f06f 0515 	mvn.w	r5, #21
   168f6:	e7f4      	b.n	168e2 <compare_set+0xf2>
   168f8:	00800001 	.word	0x00800001
   168fc:	20001b90 	.word	0x20001b90
   16900:	40011000 	.word	0x40011000
   16904:	007ffffd 	.word	0x007ffffd
   16908:	20002814 	.word	0x20002814

0001690c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1690c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1690e:	4b19      	ldr	r3, [pc, #100]	; (16974 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   16910:	4d19      	ldr	r5, [pc, #100]	; (16978 <sys_clock_driver_init+0x6c>)
   16912:	2400      	movs	r4, #0
   16914:	f04f 30ff 	mov.w	r0, #4294967295
   16918:	f04f 31ff 	mov.w	r1, #4294967295
   1691c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   16920:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   16924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16928:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1692c:	4b13      	ldr	r3, [pc, #76]	; (1697c <sys_clock_driver_init+0x70>)
   1692e:	2602      	movs	r6, #2
   16930:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   16934:	2101      	movs	r1, #1
   16936:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1693a:	2011      	movs	r0, #17
   1693c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   16940:	4622      	mov	r2, r4
   16942:	f7fc f969 	bl	12c18 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16946:	2011      	movs	r0, #17
   16948:	f7fc f936 	bl	12bb8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1694c:	4a0c      	ldr	r2, [pc, #48]	; (16980 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1694e:	2301      	movs	r3, #1
   16950:	60ab      	str	r3, [r5, #8]
   16952:	602b      	str	r3, [r5, #0]
   16954:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   16956:	4b0b      	ldr	r3, [pc, #44]	; (16984 <sys_clock_driver_init+0x78>)
   16958:	4a0b      	ldr	r2, [pc, #44]	; (16988 <sys_clock_driver_init+0x7c>)
   1695a:	9300      	str	r3, [sp, #0]
   1695c:	9401      	str	r4, [sp, #4]
   1695e:	2300      	movs	r3, #0
   16960:	4620      	mov	r0, r4
   16962:	f7ff ff45 	bl	167f0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   16966:	4630      	mov	r0, r6
   16968:	f7ff f9d0 	bl	15d0c <z_nrf_clock_control_lf_on>

	return 0;
}
   1696c:	4620      	mov	r0, r4
   1696e:	b002      	add	sp, #8
   16970:	bd70      	pop	{r4, r5, r6, pc}
   16972:	bf00      	nop
   16974:	20001b90 	.word	0x20001b90
   16978:	40011000 	.word	0x40011000
   1697c:	e000e100 	.word	0xe000e100
   16980:	20002818 	.word	0x20002818
   16984:	00016709 	.word	0x00016709
   16988:	007fffff 	.word	0x007fffff

0001698c <rtc_nrf_isr>:
{
   1698c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   16990:	4c2b      	ldr	r4, [pc, #172]	; (16a40 <rtc_nrf_isr+0xb4>)
   16992:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   16996:	0799      	lsls	r1, r3, #30
   16998:	d50b      	bpl.n	169b2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1699a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1699e:	b143      	cbz	r3, 169b2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   169a0:	4a28      	ldr	r2, [pc, #160]	; (16a44 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   169a2:	2300      	movs	r3, #0
   169a4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   169a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   169ac:	6813      	ldr	r3, [r2, #0]
   169ae:	3301      	adds	r3, #1
   169b0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   169b2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   169b6:	03da      	lsls	r2, r3, #15
   169b8:	d523      	bpl.n	16a02 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   169ba:	f3bf 8f5b 	dmb	ish
   169be:	4b22      	ldr	r3, [pc, #136]	; (16a48 <rtc_nrf_isr+0xbc>)
   169c0:	e853 2f00 	ldrex	r2, [r3]
   169c4:	f022 0101 	bic.w	r1, r2, #1
   169c8:	e843 1000 	strex	r0, r1, [r3]
   169cc:	2800      	cmp	r0, #0
   169ce:	d1f7      	bne.n	169c0 <rtc_nrf_isr+0x34>
   169d0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   169d4:	07d3      	lsls	r3, r2, #31
   169d6:	d402      	bmi.n	169de <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   169d8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   169dc:	b18b      	cbz	r3, 16a02 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   169de:	2500      	movs	r5, #0
   169e0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   169e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   169e8:	f7ff fee0 	bl	167ac <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   169ec:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   169f0:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   169f2:	4b16      	ldr	r3, [pc, #88]	; (16a4c <rtc_nrf_isr+0xc0>)
   169f4:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   169f8:	42b0      	cmp	r0, r6
   169fa:	41b9      	sbcs	r1, r7
   169fc:	d204      	bcs.n	16a08 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   169fe:	f382 8810 	msr	PRIMASK, r2
}
   16a02:	b003      	add	sp, #12
   16a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16a08:	f04f 38ff 	mov.w	r8, #4294967295
   16a0c:	f04f 39ff 	mov.w	r9, #4294967295
   16a10:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   16a14:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   16a18:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   16a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16a1e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16a22:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   16a26:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   16a2a:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   16a2e:	2900      	cmp	r1, #0
   16a30:	d0e7      	beq.n	16a02 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   16a32:	9000      	str	r0, [sp, #0]
   16a34:	4632      	mov	r2, r6
   16a36:	463b      	mov	r3, r7
   16a38:	4628      	mov	r0, r5
   16a3a:	4788      	blx	r1
   16a3c:	e7e1      	b.n	16a02 <rtc_nrf_isr+0x76>
   16a3e:	bf00      	nop
   16a40:	40011000 	.word	0x40011000
   16a44:	2000281c 	.word	0x2000281c
   16a48:	20002814 	.word	0x20002814
   16a4c:	20001b90 	.word	0x20001b90

00016a50 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   16a50:	1c43      	adds	r3, r0, #1
{
   16a52:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   16a54:	d022      	beq.n	16a9c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   16a56:	2801      	cmp	r0, #1
   16a58:	dd22      	ble.n	16aa0 <sys_clock_set_timeout+0x50>
   16a5a:	4a12      	ldr	r2, [pc, #72]	; (16aa4 <sys_clock_set_timeout+0x54>)
   16a5c:	4b12      	ldr	r3, [pc, #72]	; (16aa8 <sys_clock_set_timeout+0x58>)
   16a5e:	4290      	cmp	r0, r2
   16a60:	bfd4      	ite	le
   16a62:	4604      	movle	r4, r0
   16a64:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   16a66:	f7ff fea1 	bl	167ac <z_nrf_rtc_timer_read>
   16a6a:	4b10      	ldr	r3, [pc, #64]	; (16aac <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   16a6c:	490e      	ldr	r1, [pc, #56]	; (16aa8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   16a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a72:	1a80      	subs	r0, r0, r2
		cyc = 0;
   16a74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16a78:	bf28      	it	cs
   16a7a:	2400      	movcs	r4, #0
	cyc += unannounced;
   16a7c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   16a7e:	428c      	cmp	r4, r1
   16a80:	bf28      	it	cs
   16a82:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   16a84:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   16a86:	490a      	ldr	r1, [pc, #40]	; (16ab0 <sys_clock_set_timeout+0x60>)
   16a88:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   16a8a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   16a8e:	9001      	str	r0, [sp, #4]
   16a90:	f143 0300 	adc.w	r3, r3, #0
   16a94:	f7ff feac 	bl	167f0 <compare_set>
}
   16a98:	b002      	add	sp, #8
   16a9a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   16a9c:	4c02      	ldr	r4, [pc, #8]	; (16aa8 <sys_clock_set_timeout+0x58>)
   16a9e:	e7e2      	b.n	16a66 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   16aa0:	2401      	movs	r4, #1
   16aa2:	e7e0      	b.n	16a66 <sys_clock_set_timeout+0x16>
   16aa4:	007ffffe 	.word	0x007ffffe
   16aa8:	007fffff 	.word	0x007fffff
   16aac:	20001ba0 	.word	0x20001ba0
   16ab0:	00016709 	.word	0x00016709

00016ab4 <sys_clock_elapsed>:
{
   16ab4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   16ab6:	f7ff fe79 	bl	167ac <z_nrf_rtc_timer_read>
   16aba:	4b02      	ldr	r3, [pc, #8]	; (16ac4 <sys_clock_elapsed+0x10>)
   16abc:	681b      	ldr	r3, [r3, #0]
}
   16abe:	1ac0      	subs	r0, r0, r3
   16ac0:	bd08      	pop	{r3, pc}
   16ac2:	bf00      	nop
   16ac4:	20001ba0 	.word	0x20001ba0

00016ac8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   16ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   16acc:	4e5a      	ldr	r6, [pc, #360]	; (16c38 <pinctrl_configure_pins+0x170>)
   16ace:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16ad2:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   16ad4:	4281      	cmp	r1, r0
   16ad6:	d102      	bne.n	16ade <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   16ad8:	2000      	movs	r0, #0
}
   16ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   16ade:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   16ae0:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   16ae4:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   16ae8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   16aea:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   16aee:	bf08      	it	eq
   16af0:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   16af4:	2c22      	cmp	r4, #34	; 0x22
   16af6:	f200 809b 	bhi.w	16c30 <pinctrl_configure_pins+0x168>
   16afa:	e8df f004 	tbb	[pc, r4]
   16afe:	2412      	.short	0x2412
   16b00:	402c4429 	.word	0x402c4429
   16b04:	99999944 	.word	0x99999944
   16b08:	99704799 	.word	0x99704799
   16b0c:	99999999 	.word	0x99999999
   16b10:	99999999 	.word	0x99999999
   16b14:	817e7b73 	.word	0x817e7b73
   16b18:	84999999 	.word	0x84999999
   16b1c:	93908d8a 	.word	0x93908d8a
   16b20:	96          	.byte	0x96
   16b21:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   16b22:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   16b26:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   16b2a:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   16b2e:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   16b32:	bf14      	ite	ne
   16b34:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   16b38:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16b3a:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   16b3e:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   16b42:	2401      	movs	r4, #1
   16b44:	e002      	b.n	16b4c <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   16b46:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16b4a:	2400      	movs	r4, #0
   16b4c:	46a6      	mov	lr, r4
   16b4e:	e024      	b.n	16b9a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   16b50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   16b54:	e7e7      	b.n	16b26 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   16b56:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16b5a:	2400      	movs	r4, #0
    return pin_number >> 5;
   16b5c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   16b60:	f1be 0f01 	cmp.w	lr, #1
   16b64:	bf14      	ite	ne
   16b66:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   16b6a:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   16b6c:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16b70:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   16b74:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   16b78:	f04f 0e01 	mov.w	lr, #1
   16b7c:	e00d      	b.n	16b9a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   16b7e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   16b82:	2401      	movs	r4, #1
   16b84:	e7ea      	b.n	16b5c <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   16b86:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   16b8a:	e7de      	b.n	16b4a <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   16b8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   16b90:	2d00      	cmp	r5, #0
   16b92:	d1da      	bne.n	16b4a <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16b94:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   16b96:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   16b98:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   16b9a:	f850 cb04 	ldr.w	ip, [r0], #4
   16b9e:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16ba2:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   16ba6:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   16baa:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   16bae:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   16bb2:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16bb6:	bf1c      	itt	ne
   16bb8:	2401      	movne	r4, #1
   16bba:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16bbe:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   16bc2:	2b01      	cmp	r3, #1
   16bc4:	bf0c      	ite	eq
   16bc6:	4633      	moveq	r3, r6
   16bc8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16bcc:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   16bd0:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16bd4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   16bd8:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   16bdc:	e77a      	b.n	16ad4 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   16bde:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   16be2:	e7d5      	b.n	16b90 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   16be4:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   16be8:	6804      	ldr	r4, [r0, #0]
   16bea:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   16bee:	2c00      	cmp	r4, #0
   16bf0:	d0c7      	beq.n	16b82 <pinctrl_configure_pins+0xba>
   16bf2:	e798      	b.n	16b26 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   16bf4:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   16bf8:	e7f6      	b.n	16be8 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   16bfa:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   16bfe:	e7f3      	b.n	16be8 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   16c00:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   16c04:	e7f0      	b.n	16be8 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   16c06:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16c0a:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   16c0c:	f04f 0e00 	mov.w	lr, #0
   16c10:	e7c3      	b.n	16b9a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   16c12:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   16c16:	e786      	b.n	16b26 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   16c18:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   16c1c:	e7f5      	b.n	16c0a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   16c1e:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   16c22:	e7f2      	b.n	16c0a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   16c24:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   16c28:	e7ef      	b.n	16c0a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   16c2a:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   16c2e:	e7ec      	b.n	16c0a <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   16c30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16c34:	e751      	b.n	16ada <pinctrl_configure_pins+0x12>
   16c36:	bf00      	nop
   16c38:	50000300 	.word	0x50000300

00016c3c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   16c3c:	4602      	mov	r2, r0
   16c3e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   16c40:	4801      	ldr	r0, [pc, #4]	; (16c48 <multithreading_lock_acquire+0xc>)
   16c42:	f001 bd73 	b.w	1872c <z_impl_k_mutex_lock>
   16c46:	bf00      	nop
   16c48:	20000590 	.word	0x20000590

00016c4c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   16c4c:	4801      	ldr	r0, [pc, #4]	; (16c54 <multithreading_lock_release+0x8>)
   16c4e:	f001 bde7 	b.w	18820 <z_impl_k_mutex_unlock>
   16c52:	bf00      	nop
   16c54:	20000590 	.word	0x20000590

00016c58 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   16c58:	b598      	push	{r3, r4, r7, lr}
   16c5a:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   16c5c:	f7fb f8d4 	bl	11e08 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   16c60:	466c      	mov	r4, sp
   16c62:	b088      	sub	sp, #32
   16c64:	466a      	mov	r2, sp
   16c66:	4b08      	ldr	r3, [pc, #32]	; (16c88 <k_sys_fatal_error_handler+0x30>)
   16c68:	6153      	str	r3, [r2, #20]
   16c6a:	4b08      	ldr	r3, [pc, #32]	; (16c8c <k_sys_fatal_error_handler+0x34>)
   16c6c:	6193      	str	r3, [r2, #24]
   16c6e:	2303      	movs	r3, #3
   16c70:	f842 3f10 	str.w	r3, [r2, #16]!
   16c74:	4806      	ldr	r0, [pc, #24]	; (16c90 <k_sys_fatal_error_handler+0x38>)
   16c76:	2300      	movs	r3, #0
   16c78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16c7c:	f7fb f9a4 	bl	11fc8 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   16c80:	2000      	movs	r0, #0
   16c82:	46a5      	mov	sp, r4
   16c84:	f7fc fe02 	bl	1388c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   16c88:	00020264 	.word	0x00020264
   16c8c:	00020279 	.word	0x00020279
   16c90:	0001e9a0 	.word	0x0001e9a0

00016c94 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   16c94:	b598      	push	{r3, r4, r7, lr}
   16c96:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   16c98:	466c      	mov	r4, sp
   16c9a:	b08a      	sub	sp, #40	; 0x28
   16c9c:	466a      	mov	r2, sp
   16c9e:	4b0d      	ldr	r3, [pc, #52]	; (16cd4 <sdc_assertion_handler+0x40>)
   16ca0:	6153      	str	r3, [r2, #20]
   16ca2:	4b0d      	ldr	r3, [pc, #52]	; (16cd8 <sdc_assertion_handler+0x44>)
   16ca4:	6211      	str	r1, [r2, #32]
   16ca6:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16caa:	f240 3301 	movw	r3, #769	; 0x301
   16cae:	8493      	strh	r3, [r2, #36]	; 0x24
   16cb0:	4b0a      	ldr	r3, [pc, #40]	; (16cdc <sdc_assertion_handler+0x48>)
   16cb2:	f842 3f10 	str.w	r3, [r2, #16]!
   16cb6:	480a      	ldr	r0, [pc, #40]	; (16ce0 <sdc_assertion_handler+0x4c>)
   16cb8:	2300      	movs	r3, #0
   16cba:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   16cbe:	f7fb f983 	bl	11fc8 <z_impl_z_log_msg_static_create>
   16cc2:	46a5      	mov	sp, r4
	k_oops();
   16cc4:	4040      	eors	r0, r0
   16cc6:	f380 8811 	msr	BASEPRI, r0
   16cca:	f04f 0003 	mov.w	r0, #3
   16cce:	df02      	svc	2
}
   16cd0:	46bd      	mov	sp, r7
   16cd2:	bd98      	pop	{r3, r4, r7, pc}
   16cd4:	0002029f 	.word	0x0002029f
   16cd8:	00020443 	.word	0x00020443
   16cdc:	01000005 	.word	0x01000005
   16ce0:	0001e988 	.word	0x0001e988

00016ce4 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   16ce4:	b538      	push	{r3, r4, r5, lr}
   16ce6:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   16ce8:	4807      	ldr	r0, [pc, #28]	; (16d08 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   16cea:	6883      	ldr	r3, [r0, #8]
   16cec:	685d      	ldr	r5, [r3, #4]
   16cee:	460a      	mov	r2, r1
   16cf0:	b135      	cbz	r5, 16d00 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   16cf2:	2300      	movs	r3, #0
   16cf4:	4621      	mov	r1, r4
   16cf6:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   16cf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   16cfc:	b2c0      	uxtb	r0, r0
   16cfe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   16d00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16d04:	e7f8      	b.n	16cf8 <rand_prio_low_vector_get+0x14>
   16d06:	bf00      	nop
   16d08:	0001e728 	.word	0x0001e728

00016d0c <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   16d0c:	4901      	ldr	r1, [pc, #4]	; (16d14 <receive_signal_raise+0x8>)
   16d0e:	4802      	ldr	r0, [pc, #8]	; (16d18 <receive_signal_raise+0xc>)
   16d10:	f007 b95c 	b.w	1dfcc <k_work_submit_to_queue>
   16d14:	20002820 	.word	0x20002820
   16d18:	20001f38 	.word	0x20001f38

00016d1c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   16d1c:	b410      	push	{r4}
   16d1e:	4603      	mov	r3, r0
   16d20:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   16d22:	4803      	ldr	r0, [pc, #12]	; (16d30 <rand_prio_low_vector_get_blocking+0x14>)
   16d24:	6881      	ldr	r1, [r0, #8]
   16d26:	680c      	ldr	r4, [r1, #0]
   16d28:	4619      	mov	r1, r3
   16d2a:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   16d2c:	bc10      	pop	{r4}
   16d2e:	4718      	bx	r3
   16d30:	0001e728 	.word	0x0001e728

00016d34 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   16d34:	b590      	push	{r4, r7, lr}
   16d36:	b083      	sub	sp, #12
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   16d38:	4839      	ldr	r0, [pc, #228]	; (16e20 <hci_driver_init+0xec>)
{
   16d3a:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   16d3c:	f7fd fcee 	bl	1471c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   16d40:	4838      	ldr	r0, [pc, #224]	; (16e24 <hci_driver_init+0xf0>)
   16d42:	f7e9 fc15 	bl	570 <sdc_init>
		err = sdc_support_adv();
   16d46:	f7e9 fc91 	bl	66c <sdc_support_adv>
		if (err) {
   16d4a:	b120      	cbz	r0, 16d56 <hci_driver_init+0x22>
			return -ENOTSUP;
   16d4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   16d50:	370c      	adds	r7, #12
   16d52:	46bd      	mov	sp, r7
   16d54:	bd90      	pop	{r4, r7, pc}
				err = sdc_support_scan();
   16d56:	f7e9 fc99 	bl	68c <sdc_support_scan>
				if (err) {
   16d5a:	4604      	mov	r4, r0
   16d5c:	2800      	cmp	r0, #0
   16d5e:	d1f5      	bne.n	16d4c <hci_driver_init+0x18>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16d60:	1d3a      	adds	r2, r7, #4
   16d62:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   16d64:	7138      	strb	r0, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16d66:	f7e9 fb45 	bl	3f4 <sdc_cfg_set>
	if (required_memory < 0) {
   16d6a:	2800      	cmp	r0, #0
   16d6c:	dbf0      	blt.n	16d50 <hci_driver_init+0x1c>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16d6e:	1d3a      	adds	r2, r7, #4
   16d70:	2102      	movs	r1, #2
   16d72:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   16d74:	713c      	strb	r4, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16d76:	f7e9 fb3d 	bl	3f4 <sdc_cfg_set>
	if (required_memory < 0) {
   16d7a:	2800      	cmp	r0, #0
   16d7c:	dbe8      	blt.n	16d50 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   16d7e:	4b2a      	ldr	r3, [pc, #168]	; (16e28 <hci_driver_init+0xf4>)
   16d80:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16d82:	1d3a      	adds	r2, r7, #4
   16d84:	2103      	movs	r1, #3
   16d86:	4620      	mov	r0, r4
   16d88:	f7e9 fb34 	bl	3f4 <sdc_cfg_set>
	if (required_memory < 0) {
   16d8c:	2800      	cmp	r0, #0
   16d8e:	dbdf      	blt.n	16d50 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   16d90:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16d94:	1d3a      	adds	r2, r7, #4
   16d96:	2104      	movs	r1, #4
   16d98:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   16d9a:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16d9c:	f7e9 fb2a 	bl	3f4 <sdc_cfg_set>
	if (required_memory < 0) {
   16da0:	2800      	cmp	r0, #0
   16da2:	dbd5      	blt.n	16d50 <hci_driver_init+0x1c>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   16da4:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16da6:	1d3a      	adds	r2, r7, #4
   16da8:	2105      	movs	r1, #5
   16daa:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   16dac:	713b      	strb	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16dae:	f7e9 fb21 	bl	3f4 <sdc_cfg_set>
	if (required_memory < 0) {
   16db2:	2800      	cmp	r0, #0
   16db4:	dbcc      	blt.n	16d50 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   16db6:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16db8:	1d3a      	adds	r2, r7, #4
   16dba:	2107      	movs	r1, #7
   16dbc:	4620      	mov	r0, r4
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   16dbe:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16dc0:	f7e9 fb18 	bl	3f4 <sdc_cfg_set>
	if (required_memory < 0) {
   16dc4:	2800      	cmp	r0, #0
   16dc6:	dbc3      	blt.n	16d50 <hci_driver_init+0x1c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   16dc8:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16dca:	1d3a      	adds	r2, r7, #4
   16dcc:	2106      	movs	r1, #6
   16dce:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   16dd0:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16dd2:	f7e9 fb0f 	bl	3f4 <sdc_cfg_set>
		if (required_memory < 0) {
   16dd6:	2800      	cmp	r0, #0
   16dd8:	dbba      	blt.n	16d50 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   16dda:	f5b0 7f62 	cmp.w	r0, #904	; 0x388
   16dde:	dd1d      	ble.n	16e1c <hci_driver_init+0xe8>
		LOG_ERR("Allocated memory too low: %u < %u",
   16de0:	466c      	mov	r4, sp
   16de2:	b08a      	sub	sp, #40	; 0x28
   16de4:	466a      	mov	r2, sp
   16de6:	4b11      	ldr	r3, [pc, #68]	; (16e2c <hci_driver_init+0xf8>)
   16de8:	6153      	str	r3, [r2, #20]
   16dea:	4b11      	ldr	r3, [pc, #68]	; (16e30 <hci_driver_init+0xfc>)
   16dec:	6193      	str	r3, [r2, #24]
   16dee:	f44f 7362 	mov.w	r3, #904	; 0x388
   16df2:	e9c2 3007 	strd	r3, r0, [r2, #28]
   16df6:	2305      	movs	r3, #5
   16df8:	f842 3f10 	str.w	r3, [r2, #16]!
   16dfc:	480d      	ldr	r0, [pc, #52]	; (16e34 <hci_driver_init+0x100>)
   16dfe:	2300      	movs	r3, #0
   16e00:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16e04:	f7fb f8e0 	bl	11fc8 <z_impl_z_log_msg_static_create>
   16e08:	46a5      	mov	sp, r4
		k_panic();
   16e0a:	4040      	eors	r0, r0
   16e0c:	f380 8811 	msr	BASEPRI, r0
   16e10:	f04f 0004 	mov.w	r0, #4
   16e14:	df02      	svc	2
		return -ENOMEM;
   16e16:	f06f 000b 	mvn.w	r0, #11
   16e1a:	e799      	b.n	16d50 <hci_driver_init+0x1c>
	return 0;
   16e1c:	2000      	movs	r0, #0
	if (err) {
   16e1e:	e797      	b.n	16d50 <hci_driver_init+0x1c>
   16e20:	0001ed70 	.word	0x0001ed70
   16e24:	00016c95 	.word	0x00016c95
   16e28:	02031b1b 	.word	0x02031b1b
   16e2c:	000202c8 	.word	0x000202c8
   16e30:	000203d9 	.word	0x000203d9
   16e34:	0001e988 	.word	0x0001e988

00016e38 <hci_driver_open>:
{
   16e38:	b5b0      	push	{r4, r5, r7, lr}
   16e3a:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   16e3c:	4931      	ldr	r1, [pc, #196]	; (16f04 <hci_driver_open+0xcc>)
   16e3e:	4832      	ldr	r0, [pc, #200]	; (16f08 <hci_driver_open+0xd0>)
{
   16e40:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   16e42:	f007 f8a6 	bl	1df92 <k_work_init>
	sdc_build_revision_get(build_revision);
   16e46:	f107 000c 	add.w	r0, r7, #12
   16e4a:	f7e9 fac5 	bl	3d8 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   16e4e:	466c      	mov	r4, sp
   16e50:	b08a      	sub	sp, #40	; 0x28
   16e52:	466a      	mov	r2, sp
   16e54:	4b2d      	ldr	r3, [pc, #180]	; (16f0c <hci_driver_open+0xd4>)
   16e56:	6153      	str	r3, [r2, #20]
   16e58:	4b2d      	ldr	r3, [pc, #180]	; (16f10 <hci_driver_open+0xd8>)
   16e5a:	61d3      	str	r3, [r2, #28]
   16e5c:	f240 3301 	movw	r3, #769	; 0x301
   16e60:	8413      	strh	r3, [r2, #32]
   16e62:	4d2c      	ldr	r5, [pc, #176]	; (16f14 <hci_driver_open+0xdc>)
   16e64:	4b2c      	ldr	r3, [pc, #176]	; (16f18 <hci_driver_open+0xe0>)
   16e66:	6195      	str	r5, [r2, #24]
   16e68:	f842 3f10 	str.w	r3, [r2, #16]!
   16e6c:	492b      	ldr	r1, [pc, #172]	; (16f1c <hci_driver_open+0xe4>)
   16e6e:	482c      	ldr	r0, [pc, #176]	; (16f20 <hci_driver_open+0xe8>)
   16e70:	f107 030c 	add.w	r3, r7, #12
   16e74:	f7fb f8a8 	bl	11fc8 <z_impl_z_log_msg_static_create>
   16e78:	46a5      	mov	sp, r4
   16e7a:	482a      	ldr	r0, [pc, #168]	; (16f24 <hci_driver_open+0xec>)
   16e7c:	f006 fe83 	bl	1db86 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   16e80:	4603      	mov	r3, r0
   16e82:	b998      	cbnz	r0, 16eac <hci_driver_open+0x74>
		LOG_ERR("Entropy source device not ready");
   16e84:	b088      	sub	sp, #32
   16e86:	466a      	mov	r2, sp
   16e88:	4927      	ldr	r1, [pc, #156]	; (16f28 <hci_driver_open+0xf0>)
   16e8a:	e9c2 1505 	strd	r1, r5, [r2, #20]
   16e8e:	2103      	movs	r1, #3
   16e90:	f842 1f10 	str.w	r1, [r2, #16]!
   16e94:	4822      	ldr	r0, [pc, #136]	; (16f20 <hci_driver_open+0xe8>)
   16e96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16e9a:	f7fb f895 	bl	11fc8 <z_impl_z_log_msg_static_create>
   16e9e:	46a5      	mov	sp, r4
		return -ENODEV;
   16ea0:	f06f 0412 	mvn.w	r4, #18
}
   16ea4:	4620      	mov	r0, r4
   16ea6:	3720      	adds	r7, #32
   16ea8:	46bd      	mov	sp, r7
   16eaa:	bdb0      	pop	{r4, r5, r7, pc}
	sdc_rand_source_t rand_functions = {
   16eac:	4a1f      	ldr	r2, [pc, #124]	; (16f2c <hci_driver_open+0xf4>)
   16eae:	ca07      	ldmia	r2, {r0, r1, r2}
   16eb0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   16eb4:	4638      	mov	r0, r7
   16eb6:	f7e9 fc4f 	bl	758 <sdc_rand_source_register>
	if (err) {
   16eba:	b190      	cbz	r0, 16ee2 <hci_driver_open+0xaa>
		LOG_ERR("Failed to register rand source (%d)", err);
   16ebc:	b088      	sub	sp, #32
   16ebe:	466a      	mov	r2, sp
   16ec0:	4b1b      	ldr	r3, [pc, #108]	; (16f30 <hci_driver_open+0xf8>)
   16ec2:	61d0      	str	r0, [r2, #28]
   16ec4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   16ec8:	2304      	movs	r3, #4
   16eca:	f842 3f10 	str.w	r3, [r2, #16]!
   16ece:	4814      	ldr	r0, [pc, #80]	; (16f20 <hci_driver_open+0xe8>)
   16ed0:	2300      	movs	r3, #0
   16ed2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16ed6:	f7fb f877 	bl	11fc8 <z_impl_z_log_msg_static_create>
   16eda:	46a5      	mov	sp, r4
		return -EINVAL;
   16edc:	f06f 0415 	mvn.w	r4, #21
   16ee0:	e7e0      	b.n	16ea4 <hci_driver_open+0x6c>
	err = MULTITHREADING_LOCK_ACQUIRE();
   16ee2:	f04f 30ff 	mov.w	r0, #4294967295
   16ee6:	f04f 31ff 	mov.w	r1, #4294967295
   16eea:	f7ff fea7 	bl	16c3c <multithreading_lock_acquire>
	if (err) {
   16eee:	4604      	mov	r4, r0
   16ef0:	2800      	cmp	r0, #0
   16ef2:	d1d7      	bne.n	16ea4 <hci_driver_open+0x6c>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   16ef4:	490f      	ldr	r1, [pc, #60]	; (16f34 <hci_driver_open+0xfc>)
   16ef6:	4810      	ldr	r0, [pc, #64]	; (16f38 <hci_driver_open+0x100>)
   16ef8:	f7e9 fb10 	bl	51c <sdc_enable>
	if (err) {
   16efc:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   16efe:	f7ff fea5 	bl	16c4c <multithreading_lock_release>
	return 0;
   16f02:	e7cf      	b.n	16ea4 <hci_driver_open+0x6c>
   16f04:	0001da1d 	.word	0x0001da1d
   16f08:	20002820 	.word	0x20002820
   16f0c:	0001fc1d 	.word	0x0001fc1d
   16f10:	000202ee 	.word	0x000202ee
   16f14:	000203f0 	.word	0x000203f0
   16f18:	01000004 	.word	0x01000004
   16f1c:	00a024c0 	.word	0x00a024c0
   16f20:	0001e988 	.word	0x0001e988
   16f24:	0001e728 	.word	0x0001e728
   16f28:	00020315 	.word	0x00020315
   16f2c:	0001ea68 	.word	0x0001ea68
   16f30:	00020339 	.word	0x00020339
   16f34:	20001bb0 	.word	0x20001bb0
   16f38:	00016d0d 	.word	0x00016d0d

00016f3c <hci_driver_receive_process>:
{
   16f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f3e:	b083      	sub	sp, #12
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   16f40:	f04f 30ff 	mov.w	r0, #4294967295
{
   16f44:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   16f46:	f04f 31ff 	mov.w	r1, #4294967295
   16f4a:	f7ff fe77 	bl	16c3c <multithreading_lock_acquire>
	if (!errcode) {
   16f4e:	2800      	cmp	r0, #0
   16f50:	d142      	bne.n	16fd8 <hci_driver_receive_process+0x9c>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   16f52:	4d37      	ldr	r5, [pc, #220]	; (17030 <hci_driver_receive_process+0xf4>)
   16f54:	1df9      	adds	r1, r7, #7
   16f56:	4628      	mov	r0, r5
   16f58:	f000 fb46 	bl	175e8 <hci_internal_msg_get>
   16f5c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   16f5e:	f7ff fe75 	bl	16c4c <multithreading_lock_release>
	if (errcode) {
   16f62:	2c00      	cmp	r4, #0
   16f64:	d138      	bne.n	16fd8 <hci_driver_receive_process+0x9c>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   16f66:	79fb      	ldrb	r3, [r7, #7]
   16f68:	2b04      	cmp	r3, #4
   16f6a:	d138      	bne.n	16fde <hci_driver_receive_process+0xa2>
	switch (hdr->evt) {
   16f6c:	7828      	ldrb	r0, [r5, #0]
   16f6e:	283e      	cmp	r0, #62	; 0x3e
   16f70:	d01d      	beq.n	16fae <hci_driver_receive_process+0x72>
   16f72:	28ff      	cmp	r0, #255	; 0xff
   16f74:	d022      	beq.n	16fbc <hci_driver_receive_process+0x80>
		switch (subevent) {
   16f76:	f04f 32ff 	mov.w	r2, #4294967295
   16f7a:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   16f7e:	4621      	mov	r1, r4
   16f80:	f7fc fd2e 	bl	139e0 <bt_buf_get_evt>
	if (!evt_buf) {
   16f84:	4606      	mov	r6, r0
   16f86:	b9e0      	cbnz	r0, 16fc2 <hci_driver_receive_process+0x86>
		if (discardable) {
   16f88:	bb24      	cbnz	r4, 16fd4 <hci_driver_receive_process+0x98>
		LOG_ERR("No event buffer available");
   16f8a:	466d      	mov	r5, sp
   16f8c:	b088      	sub	sp, #32
   16f8e:	466a      	mov	r2, sp
   16f90:	4b28      	ldr	r3, [pc, #160]	; (17034 <hci_driver_receive_process+0xf8>)
   16f92:	6153      	str	r3, [r2, #20]
   16f94:	4b28      	ldr	r3, [pc, #160]	; (17038 <hci_driver_receive_process+0xfc>)
		LOG_ERR("No data buffer available");
   16f96:	6193      	str	r3, [r2, #24]
   16f98:	2303      	movs	r3, #3
   16f9a:	f842 3f10 	str.w	r3, [r2, #16]!
   16f9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16fa2:	4623      	mov	r3, r4
   16fa4:	4825      	ldr	r0, [pc, #148]	; (1703c <hci_driver_receive_process+0x100>)
   16fa6:	f7fb f80f 	bl	11fc8 <z_impl_z_log_msg_static_create>
   16faa:	46ad      	mov	sp, r5
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   16fac:	e012      	b.n	16fd4 <hci_driver_receive_process+0x98>
		switch (me->subevent) {
   16fae:	78ab      	ldrb	r3, [r5, #2]
   16fb0:	2b02      	cmp	r3, #2
		switch (subevent) {
   16fb2:	d1e0      	bne.n	16f76 <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   16fb4:	2200      	movs	r2, #0
   16fb6:	2300      	movs	r3, #0
			return true;
   16fb8:	2401      	movs	r4, #1
   16fba:	e7e0      	b.n	16f7e <hci_driver_receive_process+0x42>
		switch (subevent) {
   16fbc:	78ab      	ldrb	r3, [r5, #2]
   16fbe:	2b80      	cmp	r3, #128	; 0x80
   16fc0:	e7f7      	b.n	16fb2 <hci_driver_receive_process+0x76>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   16fc2:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16fc4:	491a      	ldr	r1, [pc, #104]	; (17030 <hci_driver_receive_process+0xf4>)
   16fc6:	3202      	adds	r2, #2
   16fc8:	300c      	adds	r0, #12
   16fca:	f006 f9e8 	bl	1d39e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   16fce:	4630      	mov	r0, r6
	bt_recv(data_buf);
   16fd0:	f7fd fb4c 	bl	1466c <bt_recv>
		receive_signal_raise();
   16fd4:	f7ff fe9a 	bl	16d0c <receive_signal_raise>
}
   16fd8:	370c      	adds	r7, #12
   16fda:	46bd      	mov	sp, r7
   16fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   16fde:	2b02      	cmp	r3, #2
   16fe0:	d117      	bne.n	17012 <hci_driver_receive_process+0xd6>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   16fe2:	f04f 32ff 	mov.w	r2, #4294967295
   16fe6:	f04f 33ff 	mov.w	r3, #4294967295
   16fea:	2003      	movs	r0, #3
   16fec:	f7fc fcce 	bl	1398c <bt_buf_get_rx>
	if (!data_buf) {
   16ff0:	4604      	mov	r4, r0
   16ff2:	b930      	cbnz	r0, 17002 <hci_driver_receive_process+0xc6>
		LOG_ERR("No data buffer available");
   16ff4:	466d      	mov	r5, sp
   16ff6:	b088      	sub	sp, #32
   16ff8:	466a      	mov	r2, sp
   16ffa:	4b11      	ldr	r3, [pc, #68]	; (17040 <hci_driver_receive_process+0x104>)
   16ffc:	6153      	str	r3, [r2, #20]
   16ffe:	4b11      	ldr	r3, [pc, #68]	; (17044 <hci_driver_receive_process+0x108>)
   17000:	e7c9      	b.n	16f96 <hci_driver_receive_process+0x5a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   17002:	886a      	ldrh	r2, [r5, #2]
   17004:	4629      	mov	r1, r5
   17006:	3204      	adds	r2, #4
   17008:	300c      	adds	r0, #12
   1700a:	f006 f9c8 	bl	1d39e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1700e:	4620      	mov	r0, r4
   17010:	e7de      	b.n	16fd0 <hci_driver_receive_process+0x94>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   17012:	466d      	mov	r5, sp
   17014:	b088      	sub	sp, #32
   17016:	466a      	mov	r2, sp
   17018:	490b      	ldr	r1, [pc, #44]	; (17048 <hci_driver_receive_process+0x10c>)
   1701a:	6151      	str	r1, [r2, #20]
   1701c:	490b      	ldr	r1, [pc, #44]	; (1704c <hci_driver_receive_process+0x110>)
   1701e:	e9c2 1306 	strd	r1, r3, [r2, #24]
   17022:	2304      	movs	r3, #4
   17024:	f842 3f10 	str.w	r3, [r2, #16]!
   17028:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1702c:	4623      	mov	r3, r4
   1702e:	e7b9      	b.n	16fa4 <hci_driver_receive_process+0x68>
   17030:	200034f4 	.word	0x200034f4
   17034:	00020361 	.word	0x00020361
   17038:	00020414 	.word	0x00020414
   1703c:	0001e988 	.word	0x0001e988
   17040:	0002037f 	.word	0x0002037f
   17044:	00020400 	.word	0x00020400
   17048:	0002039c 	.word	0x0002039c
   1704c:	00020429 	.word	0x00020429

00017050 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   17050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   17052:	4cd1      	ldr	r4, [pc, #836]	; (17398 <hci_internal_cmd_put+0x348>)
   17054:	7823      	ldrb	r3, [r4, #0]
{
   17056:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   17058:	2b00      	cmp	r3, #0
   1705a:	f040 82bd 	bne.w	175d8 <hci_internal_cmd_put+0x588>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1705e:	2304      	movs	r3, #4
   17060:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   17064:	4bcd      	ldr	r3, [pc, #820]	; (1739c <hci_internal_cmd_put+0x34c>)
   17066:	8806      	ldrh	r6, [r0, #0]
   17068:	681f      	ldr	r7, [r3, #0]
   1706a:	b1b7      	cbz	r7, 1709a <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   1706c:	f10d 0306 	add.w	r3, sp, #6
   17070:	f10d 0207 	add.w	r2, sp, #7
   17074:	1c61      	adds	r1, r4, #1
   17076:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   17078:	2801      	cmp	r0, #1
   1707a:	d00e      	beq.n	1709a <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   1707c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   17080:	2b00      	cmp	r3, #0
   17082:	f040 8177 	bne.w	17374 <hci_internal_cmd_put+0x324>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   17086:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1708a:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1708c:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1708e:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17090:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   17092:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   17094:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   17096:	71a0      	strb	r0, [r4, #6]
}
   17098:	e175      	b.n	17386 <hci_internal_cmd_put+0x336>
		switch (BT_OGF(opcode)) {
   1709a:	0ab3      	lsrs	r3, r6, #10
   1709c:	2b08      	cmp	r3, #8
   1709e:	f000 80b0 	beq.w	17202 <hci_internal_cmd_put+0x1b2>
   170a2:	d80a      	bhi.n	170ba <hci_internal_cmd_put+0x6a>
   170a4:	2b03      	cmp	r3, #3
   170a6:	d00f      	beq.n	170c8 <hci_internal_cmd_put+0x78>
   170a8:	2b04      	cmp	r3, #4
   170aa:	d020      	beq.n	170ee <hci_internal_cmd_put+0x9e>
   170ac:	2001      	movs	r0, #1
	switch (hci_opcode) {
   170ae:	f240 4306 	movw	r3, #1030	; 0x406
   170b2:	429e      	cmp	r6, r3
   170b4:	f040 80c2 	bne.w	1723c <hci_internal_cmd_put+0x1ec>
   170b8:	e15c      	b.n	17374 <hci_internal_cmd_put+0x324>
		switch (BT_OGF(opcode)) {
   170ba:	2b3f      	cmp	r3, #63	; 0x3f
   170bc:	f000 81c9 	beq.w	17452 <hci_internal_cmd_put+0x402>
   170c0:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   170c2:	2801      	cmp	r0, #1
   170c4:	d00a      	beq.n	170dc <hci_internal_cmd_put+0x8c>
   170c6:	e7de      	b.n	17086 <hci_internal_cmd_put+0x36>
	return ((uint16_t)src[1] << 8) | src[0];
   170c8:	f9b5 3000 	ldrsh.w	r3, [r5]
	switch (opcode)	{
   170cc:	f640 4201 	movw	r2, #3073	; 0xc01
   170d0:	4293      	cmp	r3, r2
   170d2:	d005      	beq.n	170e0 <hci_internal_cmd_put+0x90>
   170d4:	f640 4203 	movw	r2, #3075	; 0xc03
   170d8:	4293      	cmp	r3, r2
   170da:	d005      	beq.n	170e8 <hci_internal_cmd_put+0x98>
		switch (BT_OGF(opcode)) {
   170dc:	2001      	movs	r0, #1
   170de:	e149      	b.n	17374 <hci_internal_cmd_put+0x324>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   170e0:	1ce8      	adds	r0, r5, #3
   170e2:	f7f6 fa38 	bl	d556 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   170e6:	e7ec      	b.n	170c2 <hci_internal_cmd_put+0x72>
		return sdc_hci_cmd_cb_reset();
   170e8:	f7e9 fc56 	bl	998 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   170ec:	e7e9      	b.n	170c2 <hci_internal_cmd_put+0x72>
	switch (opcode)	{
   170ee:	882b      	ldrh	r3, [r5, #0]
   170f0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   170f4:	3b01      	subs	r3, #1
   170f6:	2b08      	cmp	r3, #8
   170f8:	d8f0      	bhi.n	170dc <hci_internal_cmd_put+0x8c>
   170fa:	a201      	add	r2, pc, #4	; (adr r2, 17100 <hci_internal_cmd_put+0xb0>)
   170fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17100:	00017125 	.word	0x00017125
   17104:	00017137 	.word	0x00017137
   17108:	000171cf 	.word	0x000171cf
   1710c:	000170dd 	.word	0x000170dd
   17110:	000170dd 	.word	0x000170dd
   17114:	000170dd 	.word	0x000170dd
   17118:	000170dd 	.word	0x000170dd
   1711c:	000170dd 	.word	0x000170dd
   17120:	000171f1 	.word	0x000171f1
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   17124:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   17128:	489d      	ldr	r0, [pc, #628]	; (173a0 <hci_internal_cmd_put+0x350>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1712a:	3308      	adds	r3, #8
   1712c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   17130:	f7f6 fb0d 	bl	d74e <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   17134:	e7c5      	b.n	170c2 <hci_internal_cmd_put+0x72>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   17136:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1713a:	4899      	ldr	r0, [pc, #612]	; (173a0 <hci_internal_cmd_put+0x350>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1713c:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1713e:	2230      	movs	r2, #48	; 0x30
   17140:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   17142:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   17146:	f005 ff5c 	bl	1d002 <memset>
	cmds->hci_set_event_mask = 1;
   1714a:	7b23      	ldrb	r3, [r4, #12]
   1714c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17150:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_local_version_information = 1;
   17152:	7d63      	ldrb	r3, [r4, #21]
   17154:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   17158:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1715c:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1715e:	7da3      	ldrb	r3, [r4, #22]
   17160:	f043 0302 	orr.w	r3, r3, #2
   17164:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   17166:	f894 3020 	ldrb.w	r3, [r4, #32]
   1716a:	f063 0308 	orn	r3, r3, #8
   1716e:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   17172:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   17176:	f063 0330 	orn	r3, r3, #48	; 0x30
   1717a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1717e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   17182:	f063 033c 	orn	r3, r3, #60	; 0x3c
   17186:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
   1718a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1718e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   17192:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   17196:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   1719a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1719e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   171a2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   171a6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   171aa:	f043 0301 	orr.w	r3, r3, #1
   171ae:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   171b2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   171b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   171ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_data_related_address_changes = 1;
   171be:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   171c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   171c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return 0;
   171ca:	2000      	movs	r0, #0
   171cc:	e75b      	b.n	17086 <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   171ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   171d2:	4873      	ldr	r0, [pc, #460]	; (173a0 <hci_internal_cmd_put+0x350>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   171d4:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   171d6:	2208      	movs	r2, #8
   171d8:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   171da:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   171de:	f005 ff10 	bl	1d002 <memset>
	features->bdedr_not_supported = 1;
   171e2:	7ae3      	ldrb	r3, [r4, #11]
   171e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   171e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   171ec:	72e3      	strb	r3, [r4, #11]
	if (generate_command_status_event ||
   171ee:	e7ec      	b.n	171ca <hci_internal_cmd_put+0x17a>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   171f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   171f4:	486a      	ldr	r0, [pc, #424]	; (173a0 <hci_internal_cmd_put+0x350>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   171f6:	3306      	adds	r3, #6
   171f8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   171fc:	f7f6 faa5 	bl	d74a <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   17200:	e75f      	b.n	170c2 <hci_internal_cmd_put+0x72>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17202:	4628      	mov	r0, r5
	switch (opcode)	{
   17204:	f242 011c 	movw	r1, #8220	; 0x201c
   17208:	f830 3b03 	ldrh.w	r3, [r0], #3
   1720c:	b21a      	sxth	r2, r3
   1720e:	428a      	cmp	r2, r1
   17210:	dc5a      	bgt.n	172c8 <hci_internal_cmd_put+0x278>
   17212:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   17216:	f242 0232 	movw	r2, #8242	; 0x2032
   1721a:	dc15      	bgt.n	17248 <hci_internal_cmd_put+0x1f8>
	switch (hci_opcode) {
   1721c:	4296      	cmp	r6, r2
   1721e:	f43f af5d 	beq.w	170dc <hci_internal_cmd_put+0x8c>
   17222:	f200 81d7 	bhi.w	175d4 <hci_internal_cmd_put+0x584>
   17226:	f242 0326 	movw	r3, #8230	; 0x2026
   1722a:	429e      	cmp	r6, r3
   1722c:	f63f af56 	bhi.w	170dc <hci_internal_cmd_put+0x8c>
   17230:	f242 030c 	movw	r3, #8204	; 0x200c
   17234:	429e      	cmp	r6, r3
   17236:	f04f 0001 	mov.w	r0, #1
   1723a:	d867      	bhi.n	1730c <hci_internal_cmd_put+0x2bc>
   1723c:	f240 431d 	movw	r3, #1053	; 0x41d
   17240:	429e      	cmp	r6, r3
   17242:	f000 8097 	beq.w	17374 <hci_internal_cmd_put+0x324>
   17246:	e73c      	b.n	170c2 <hci_internal_cmd_put+0x72>
	switch (opcode)	{
   17248:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1724c:	3b01      	subs	r3, #1
   1724e:	2b1b      	cmp	r3, #27
   17250:	d8e4      	bhi.n	1721c <hci_internal_cmd_put+0x1cc>
   17252:	a101      	add	r1, pc, #4	; (adr r1, 17258 <hci_internal_cmd_put+0x208>)
   17254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17258:	000172e3 	.word	0x000172e3
   1725c:	00017319 	.word	0x00017319
   17260:	0001732b 	.word	0x0001732b
   17264:	0001721d 	.word	0x0001721d
   17268:	00017391 	.word	0x00017391
   1726c:	000173a9 	.word	0x000173a9
   17270:	000173af 	.word	0x000173af
   17274:	000173c1 	.word	0x000173c1
   17278:	000173c7 	.word	0x000173c7
   1727c:	000173cd 	.word	0x000173cd
   17280:	000173d9 	.word	0x000173d9
   17284:	000173df 	.word	0x000173df
   17288:	0001721d 	.word	0x0001721d
   1728c:	0001721d 	.word	0x0001721d
   17290:	000173e5 	.word	0x000173e5
   17294:	000173f7 	.word	0x000173f7
   17298:	000173fd 	.word	0x000173fd
   1729c:	00017403 	.word	0x00017403
   172a0:	0001721d 	.word	0x0001721d
   172a4:	0001721d 	.word	0x0001721d
   172a8:	0001721d 	.word	0x0001721d
   172ac:	0001721d 	.word	0x0001721d
   172b0:	00017409 	.word	0x00017409
   172b4:	0001741b 	.word	0x0001741b
   172b8:	0001721d 	.word	0x0001721d
   172bc:	0001721d 	.word	0x0001721d
   172c0:	0001721d 	.word	0x0001721d
   172c4:	0001742d 	.word	0x0001742d
   172c8:	f242 034b 	movw	r3, #8267	; 0x204b
   172cc:	429a      	cmp	r2, r3
   172ce:	f000 80b7 	beq.w	17440 <hci_internal_cmd_put+0x3f0>
   172d2:	f242 037c 	movw	r3, #8316	; 0x207c
   172d6:	429a      	cmp	r2, r3
   172d8:	d07b      	beq.n	173d2 <hci_internal_cmd_put+0x382>
	switch (hci_opcode) {
   172da:	f242 0332 	movw	r3, #8242	; 0x2032
   172de:	429e      	cmp	r6, r3
   172e0:	e79d      	b.n	1721e <hci_internal_cmd_put+0x1ce>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   172e2:	f7f6 fa54 	bl	d78e <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   172e6:	f242 0332 	movw	r3, #8242	; 0x2032
   172ea:	429e      	cmp	r6, r3
   172ec:	d042      	beq.n	17374 <hci_internal_cmd_put+0x324>
   172ee:	f242 0332 	movw	r3, #8242	; 0x2032
   172f2:	429e      	cmp	r6, r3
   172f4:	f200 80f2 	bhi.w	174dc <hci_internal_cmd_put+0x48c>
   172f8:	f242 0326 	movw	r3, #8230	; 0x2026
   172fc:	429e      	cmp	r6, r3
   172fe:	f63f aee0 	bhi.w	170c2 <hci_internal_cmd_put+0x72>
   17302:	f242 030c 	movw	r3, #8204	; 0x200c
   17306:	429e      	cmp	r6, r3
   17308:	f67f aed1 	bls.w	170ae <hci_internal_cmd_put+0x5e>
   1730c:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   17310:	3b0d      	subs	r3, #13
   17312:	4a24      	ldr	r2, [pc, #144]	; (173a4 <hci_internal_cmd_put+0x354>)
   17314:	b29b      	uxth	r3, r3
   17316:	e155      	b.n	175c4 <hci_internal_cmd_put+0x574>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   17318:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1731c:	4820      	ldr	r0, [pc, #128]	; (173a0 <hci_internal_cmd_put+0x350>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1731e:	3303      	adds	r3, #3
   17320:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17324:	f7f6 fa23 	bl	d76e <sdc_hci_cmd_le_read_buffer_size>
   17328:	e7dd      	b.n	172e6 <hci_internal_cmd_put+0x296>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1732a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1732e:	481c      	ldr	r0, [pc, #112]	; (173a0 <hci_internal_cmd_put+0x350>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   17330:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   17332:	2208      	movs	r2, #8
   17334:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   17336:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1733a:	f005 fe62 	bl	1d002 <memset>
	features->params.le_encryption = 1;
   1733e:	79e3      	ldrb	r3, [r4, #7]
   17340:	f063 0362 	orn	r3, r3, #98	; 0x62
   17344:	71e3      	strb	r3, [r4, #7]
	features->params.channel_selection_algorithm_2 = 1;
   17346:	7a23      	ldrb	r3, [r4, #8]
   17348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1734c:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1734e:	f242 0332 	movw	r3, #8242	; 0x2032
   17352:	429e      	cmp	r6, r3
   17354:	d00d      	beq.n	17372 <hci_internal_cmd_put+0x322>
   17356:	f200 80e7 	bhi.w	17528 <hci_internal_cmd_put+0x4d8>
   1735a:	f242 0326 	movw	r3, #8230	; 0x2026
   1735e:	429e      	cmp	r6, r3
   17360:	f63f af33 	bhi.w	171ca <hci_internal_cmd_put+0x17a>
   17364:	f242 030c 	movw	r3, #8204	; 0x200c
   17368:	429e      	cmp	r6, r3
   1736a:	f200 8131 	bhi.w	175d0 <hci_internal_cmd_put+0x580>
		return 0;
   1736e:	2000      	movs	r0, #0
   17370:	e764      	b.n	1723c <hci_internal_cmd_put+0x1ec>
   17372:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   17374:	230f      	movs	r3, #15
   17376:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   17378:	2304      	movs	r3, #4
   1737a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1737c:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1737e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   17380:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   17382:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   17386:	2301      	movs	r3, #1
   17388:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1738a:	2000      	movs	r0, #0
}
   1738c:	b003      	add	sp, #12
   1738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   17390:	f7f6 fa02 	bl	d798 <sdc_hci_cmd_le_set_random_address>
   17394:	e7a7      	b.n	172e6 <hci_internal_cmd_put+0x296>
   17396:	bf00      	nop
   17398:	2000353a 	.word	0x2000353a
   1739c:	20002830 	.word	0x20002830
   173a0:	20003541 	.word	0x20003541
   173a4:	03001241 	.word	0x03001241
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   173a8:	f7f6 f9ed 	bl	d786 <sdc_hci_cmd_le_set_adv_params>
   173ac:	e79b      	b.n	172e6 <hci_internal_cmd_put+0x296>
		*param_length_out +=
   173ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   173b2:	488b      	ldr	r0, [pc, #556]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out +=
   173b4:	3301      	adds	r3, #1
   173b6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   173ba:	f7f6 f9d6 	bl	d76a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   173be:	e792      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   173c0:	f7f6 f9dd 	bl	d77e <sdc_hci_cmd_le_set_adv_data>
   173c4:	e78f      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   173c6:	f7f6 f9ed 	bl	d7a4 <sdc_hci_cmd_le_set_scan_response_data>
   173ca:	e78c      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   173cc:	f7f6 f9d9 	bl	d782 <sdc_hci_cmd_le_set_adv_enable>
   173d0:	e789      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   173d2:	f7f6 f9da 	bl	d78a <sdc_hci_cmd_le_set_data_related_address_changes>
   173d6:	e786      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   173d8:	f7f6 f9e2 	bl	d7a0 <sdc_hci_cmd_le_set_scan_params>
   173dc:	e783      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   173de:	f7f6 f9dd 	bl	d79c <sdc_hci_cmd_le_set_scan_enable>
   173e2:	e780      	b.n	172e6 <hci_internal_cmd_put+0x296>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   173e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   173e8:	487d      	ldr	r0, [pc, #500]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   173ea:	3301      	adds	r3, #1
   173ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   173f0:	f7f6 f9bf 	bl	d772 <sdc_hci_cmd_le_read_filter_accept_list_size>
   173f4:	e777      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   173f6:	f7f6 f9ae 	bl	d756 <sdc_hci_cmd_le_clear_filter_accept_list>
   173fa:	e774      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   173fc:	f7f6 f9a9 	bl	d752 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   17400:	e771      	b.n	172e6 <hci_internal_cmd_put+0x296>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   17402:	f7f6 f9ba 	bl	d77a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   17406:	e76e      	b.n	172e6 <hci_internal_cmd_put+0x296>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   17408:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1740c:	4974      	ldr	r1, [pc, #464]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1740e:	3310      	adds	r3, #16
   17410:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17414:	f7f6 f9a1 	bl	d75a <sdc_hci_cmd_le_encrypt>
   17418:	e765      	b.n	172e6 <hci_internal_cmd_put+0x296>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1741a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1741e:	4870      	ldr	r0, [pc, #448]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   17420:	3308      	adds	r3, #8
   17422:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   17426:	f7f6 f99e 	bl	d766 <sdc_hci_cmd_le_rand>
   1742a:	e75c      	b.n	172e6 <hci_internal_cmd_put+0x296>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1742c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17430:	3308      	adds	r3, #8
   17432:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   17436:	2333      	movs	r3, #51	; 0x33
   17438:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1743a:	2300      	movs	r3, #0
   1743c:	72e3      	strb	r3, [r4, #11]
   1743e:	e786      	b.n	1734e <hci_internal_cmd_put+0x2fe>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   17440:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   17444:	4866      	ldr	r0, [pc, #408]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   17446:	3302      	adds	r3, #2
   17448:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1744c:	f7f6 f993 	bl	d776 <sdc_hci_cmd_le_read_transmit_power>
   17450:	e749      	b.n	172e6 <hci_internal_cmd_put+0x296>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17452:	4628      	mov	r0, r5
	switch (opcode)	{
   17454:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   17458:	f830 3b03 	ldrh.w	r3, [r0], #3
   1745c:	4293      	cmp	r3, r2
   1745e:	d823      	bhi.n	174a8 <hci_internal_cmd_put+0x458>
   17460:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   17464:	d801      	bhi.n	1746a <hci_internal_cmd_put+0x41a>
   17466:	2001      	movs	r0, #1
   17468:	e08f      	b.n	1758a <hci_internal_cmd_put+0x53a>
   1746a:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1746e:	3b01      	subs	r3, #1
   17470:	2b0a      	cmp	r3, #10
   17472:	d8f8      	bhi.n	17466 <hci_internal_cmd_put+0x416>
   17474:	a201      	add	r2, pc, #4	; (adr r2, 1747c <hci_internal_cmd_put+0x42c>)
   17476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1747a:	bf00      	nop
   1747c:	000174cd 	.word	0x000174cd
   17480:	000174fd 	.word	0x000174fd
   17484:	00017467 	.word	0x00017467
   17488:	00017467 	.word	0x00017467
   1748c:	00017467 	.word	0x00017467
   17490:	00017551 	.word	0x00017551
   17494:	00017467 	.word	0x00017467
   17498:	00017467 	.word	0x00017467
   1749c:	0001752d 	.word	0x0001752d
   174a0:	0001753f 	.word	0x0001753f
   174a4:	00017557 	.word	0x00017557
   174a8:	f503 7240 	add.w	r2, r3, #768	; 0x300
   174ac:	b292      	uxth	r2, r2
   174ae:	2a0c      	cmp	r2, #12
   174b0:	d8d9      	bhi.n	17466 <hci_internal_cmd_put+0x416>
   174b2:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   174b6:	2b0c      	cmp	r3, #12
   174b8:	d87f      	bhi.n	175ba <hci_internal_cmd_put+0x56a>
   174ba:	e8df f003 	tbb	[pc, r3]
   174be:	6c55      	.short	0x6c55
   174c0:	7875726f 	.word	0x7875726f
   174c4:	7e7e7e7e 	.word	0x7e7e7e7e
   174c8:	7e7e      	.short	0x7e7e
   174ca:	7b          	.byte	0x7b
   174cb:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   174cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   174d0:	4843      	ldr	r0, [pc, #268]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   174d2:	330c      	adds	r3, #12
   174d4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   174d8:	f7e9 fa76 	bl	9c8 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   174dc:	f242 0385 	movw	r3, #8325	; 0x2085
   174e0:	429e      	cmp	r6, r3
   174e2:	d852      	bhi.n	1758a <hci_internal_cmd_put+0x53a>
   174e4:	f242 036c 	movw	r3, #8300	; 0x206c
   174e8:	429e      	cmp	r6, r3
   174ea:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   174ee:	d866      	bhi.n	175be <hci_internal_cmd_put+0x56e>
   174f0:	3b03      	subs	r3, #3
   174f2:	b29b      	uxth	r3, r3
   174f4:	2b01      	cmp	r3, #1
   174f6:	f67f af3d 	bls.w	17374 <hci_internal_cmd_put+0x324>
   174fa:	e5e2      	b.n	170c2 <hci_internal_cmd_put+0x72>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   174fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   17500:	4837      	ldr	r0, [pc, #220]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   17502:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   17504:	2202      	movs	r2, #2
   17506:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   17508:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1750c:	f005 fd79 	bl	1d002 <memset>
	cmds->read_version_info = 1;
   17510:	79e3      	ldrb	r3, [r4, #7]
   17512:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   17516:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1751a:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1751c:	7a23      	ldrb	r3, [r4, #8]
   1751e:	f023 0307 	bic.w	r3, r3, #7
   17522:	f043 0307 	orr.w	r3, r3, #7
   17526:	7223      	strb	r3, [r4, #8]
		return 0;
   17528:	2000      	movs	r0, #0
   1752a:	e7d7      	b.n	174dc <hci_internal_cmd_put+0x48c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1752c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17530:	482b      	ldr	r0, [pc, #172]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   17532:	3317      	adds	r3, #23
   17534:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17538:	f7f6 f8b6 	bl	d6a8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1753c:	e7ce      	b.n	174dc <hci_internal_cmd_put+0x48c>
		*param_length_out +=
   1753e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   17542:	4827      	ldr	r0, [pc, #156]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out +=
   17544:	3320      	adds	r3, #32
   17546:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1754a:	f7f6 f860 	bl	d60e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1754e:	e7c5      	b.n	174dc <hci_internal_cmd_put+0x48c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17550:	f7f6 f8f9 	bl	d746 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   17554:	e7c2      	b.n	174dc <hci_internal_cmd_put+0x48c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   17556:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1755a:	4821      	ldr	r0, [pc, #132]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1755c:	3301      	adds	r3, #1
   1755e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   17562:	f7f6 f840 	bl	d5e6 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   17566:	e7b9      	b.n	174dc <hci_internal_cmd_put+0x48c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   17568:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1756c:	481c      	ldr	r0, [pc, #112]	; (175e0 <hci_internal_cmd_put+0x590>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1756e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   17570:	2202      	movs	r2, #2
   17572:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   17574:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   17578:	f005 fd43 	bl	1d002 <memset>
	cmds->read_supported_vs_commands = 1;
   1757c:	79e3      	ldrb	r3, [r4, #7]
   1757e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   17582:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   17586:	71e3      	strb	r3, [r4, #7]
		return 0;
   17588:	2000      	movs	r0, #0
	switch (hci_opcode) {
   1758a:	f026 0308 	bic.w	r3, r6, #8
   1758e:	f64f 5202 	movw	r2, #64770	; 0xfd02
   17592:	4293      	cmp	r3, r2
   17594:	e655      	b.n	17242 <hci_internal_cmd_put+0x1f2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   17596:	f7f6 f817 	bl	d5c8 <sdc_hci_cmd_vs_llpm_mode_set>
   1759a:	e79f      	b.n	174dc <hci_internal_cmd_put+0x48c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1759c:	f7f5 ffe8 	bl	d570 <sdc_hci_cmd_vs_conn_update>
   175a0:	e79c      	b.n	174dc <hci_internal_cmd_put+0x48c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   175a2:	f7f5 ffdd 	bl	d560 <sdc_hci_cmd_vs_conn_event_extend>
   175a6:	e799      	b.n	174dc <hci_internal_cmd_put+0x48c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   175a8:	f7f6 f816 	bl	d5d8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   175ac:	e796      	b.n	174dc <hci_internal_cmd_put+0x48c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   175ae:	f7f6 f809 	bl	d5c4 <sdc_hci_cmd_vs_event_length_set>
   175b2:	e793      	b.n	174dc <hci_internal_cmd_put+0x48c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   175b4:	f7f6 f815 	bl	d5e2 <sdc_hci_cmd_vs_set_adv_randomness>
   175b8:	e790      	b.n	174dc <hci_internal_cmd_put+0x48c>
	switch (opcode)	{
   175ba:	2001      	movs	r0, #1
   175bc:	e697      	b.n	172ee <hci_internal_cmd_put+0x29e>
	switch (hci_opcode) {
   175be:	3b2d      	subs	r3, #45	; 0x2d
   175c0:	4a08      	ldr	r2, [pc, #32]	; (175e4 <hci_internal_cmd_put+0x594>)
   175c2:	b29b      	uxth	r3, r3
   175c4:	fa22 f303 	lsr.w	r3, r2, r3
   175c8:	07db      	lsls	r3, r3, #31
   175ca:	f57f ad7a 	bpl.w	170c2 <hci_internal_cmd_put+0x72>
   175ce:	e6d1      	b.n	17374 <hci_internal_cmd_put+0x324>
		return 0;
   175d0:	2000      	movs	r0, #0
   175d2:	e69b      	b.n	1730c <hci_internal_cmd_put+0x2bc>
	switch (hci_opcode) {
   175d4:	2001      	movs	r0, #1
   175d6:	e781      	b.n	174dc <hci_internal_cmd_put+0x48c>
		return -NRF_EPERM;
   175d8:	f04f 30ff 	mov.w	r0, #4294967295
   175dc:	e6d6      	b.n	1738c <hci_internal_cmd_put+0x33c>
   175de:	bf00      	nop
   175e0:	20003541 	.word	0x20003541
   175e4:	01000401 	.word	0x01000401

000175e8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   175e8:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   175ea:	4c09      	ldr	r4, [pc, #36]	; (17610 <hci_internal_msg_get+0x28>)
   175ec:	7823      	ldrb	r3, [r4, #0]
{
   175ee:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   175f0:	b91b      	cbnz	r3, 175fa <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   175f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   175f6:	f7f5 bf9e 	b.w	d536 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   175fa:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   175fc:	1c61      	adds	r1, r4, #1
   175fe:	3202      	adds	r2, #2
   17600:	f005 fcf4 	bl	1cfec <memcpy>
		cmd_complete_or_status.occurred = false;
   17604:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   17606:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   17608:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1760a:	702b      	strb	r3, [r5, #0]
}
   1760c:	bd38      	pop	{r3, r4, r5, pc}
   1760e:	bf00      	nop
   17610:	2000353a 	.word	0x2000353a

00017614 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   17614:	b570      	push	{r4, r5, r6, lr}
   17616:	4605      	mov	r5, r0
   17618:	460e      	mov	r6, r1
   1761a:	4c08      	ldr	r4, [pc, #32]	; (1763c <bt_rand+0x28>)
   1761c:	4620      	mov	r0, r4
   1761e:	f006 fab2 	bl	1db86 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   17622:	b138      	cbz	r0, 17634 <bt_rand+0x20>
   17624:	68a3      	ldr	r3, [r4, #8]
   17626:	b2b2      	uxth	r2, r6
   17628:	4629      	mov	r1, r5
   1762a:	4620      	mov	r0, r4
   1762c:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1762e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17632:	4718      	bx	r3
   17634:	f06f 0012 	mvn.w	r0, #18
   17638:	bd70      	pop	{r4, r5, r6, pc}
   1763a:	bf00      	nop
   1763c:	0001e728 	.word	0x0001e728

00017640 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   17640:	4901      	ldr	r1, [pc, #4]	; (17648 <mpsl_low_prio_irq_handler+0x8>)
   17642:	4802      	ldr	r0, [pc, #8]	; (1764c <mpsl_low_prio_irq_handler+0xc>)
   17644:	f006 bcc2 	b.w	1dfcc <k_work_submit_to_queue>
   17648:	20002834 	.word	0x20002834
   1764c:	20001f38 	.word	0x20001f38

00017650 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   17650:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   17652:	2332      	movs	r3, #50	; 0x32
   17654:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17658:	4a10      	ldr	r2, [pc, #64]	; (1769c <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1765a:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1765c:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1765e:	2119      	movs	r1, #25
   17660:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   17662:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   17666:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1766a:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1766e:	f7f4 ffc5 	bl	c5fc <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   17672:	4604      	mov	r4, r0
   17674:	b970      	cbnz	r0, 17694 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17676:	4601      	mov	r1, r0
   17678:	462a      	mov	r2, r5
   1767a:	2008      	movs	r0, #8
   1767c:	f7fb facc 	bl	12c18 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17680:	462a      	mov	r2, r5
   17682:	4621      	mov	r1, r4
   17684:	200b      	movs	r0, #11
   17686:	f7fb fac7 	bl	12c18 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1768a:	462a      	mov	r2, r5
   1768c:	4621      	mov	r1, r4
   1768e:	4628      	mov	r0, r5
   17690:	f7fb fac2 	bl	12c18 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   17694:	4620      	mov	r0, r4
   17696:	b003      	add	sp, #12
   17698:	bd30      	pop	{r4, r5, pc}
   1769a:	bf00      	nop
   1769c:	000176a1 	.word	0x000176a1

000176a0 <m_assert_handler>:
{
   176a0:	b598      	push	{r3, r4, r7, lr}
   176a2:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   176a4:	466c      	mov	r4, sp
   176a6:	b08a      	sub	sp, #40	; 0x28
   176a8:	466a      	mov	r2, sp
   176aa:	4b0d      	ldr	r3, [pc, #52]	; (176e0 <m_assert_handler+0x40>)
   176ac:	6153      	str	r3, [r2, #20]
   176ae:	4b0d      	ldr	r3, [pc, #52]	; (176e4 <m_assert_handler+0x44>)
   176b0:	6211      	str	r1, [r2, #32]
   176b2:	e9c2 3006 	strd	r3, r0, [r2, #24]
   176b6:	f240 3301 	movw	r3, #769	; 0x301
   176ba:	8493      	strh	r3, [r2, #36]	; 0x24
   176bc:	4b0a      	ldr	r3, [pc, #40]	; (176e8 <m_assert_handler+0x48>)
   176be:	f842 3f10 	str.w	r3, [r2, #16]!
   176c2:	480a      	ldr	r0, [pc, #40]	; (176ec <m_assert_handler+0x4c>)
   176c4:	2300      	movs	r3, #0
   176c6:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   176ca:	f7fa fc7d 	bl	11fc8 <z_impl_z_log_msg_static_create>
   176ce:	46a5      	mov	sp, r4
	k_oops();
   176d0:	4040      	eors	r0, r0
   176d2:	f380 8811 	msr	BASEPRI, r0
   176d6:	f04f 0003 	mov.w	r0, #3
   176da:	df02      	svc	2
}
   176dc:	46bd      	mov	sp, r7
   176de:	bd98      	pop	{r3, r4, r7, pc}
   176e0:	0002048f 	.word	0x0002048f
   176e4:	000204b1 	.word	0x000204b1
   176e8:	01000005 	.word	0x01000005
   176ec:	0001e9c0 	.word	0x0001e9c0

000176f0 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   176f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   176f2:	4d0d      	ldr	r5, [pc, #52]	; (17728 <mpsl_low_prio_init+0x38>)
   176f4:	490d      	ldr	r1, [pc, #52]	; (1772c <mpsl_low_prio_init+0x3c>)
   176f6:	2400      	movs	r4, #0
   176f8:	9400      	str	r4, [sp, #0]
   176fa:	f06f 0309 	mvn.w	r3, #9
   176fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17702:	4628      	mov	r0, r5
   17704:	f001 fa46 	bl	18b94 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   17708:	4909      	ldr	r1, [pc, #36]	; (17730 <mpsl_low_prio_init+0x40>)
   1770a:	4628      	mov	r0, r5
   1770c:	f006 fb0f 	bl	1dd2e <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   17710:	4908      	ldr	r1, [pc, #32]	; (17734 <mpsl_low_prio_init+0x44>)
   17712:	4809      	ldr	r0, [pc, #36]	; (17738 <mpsl_low_prio_init+0x48>)
   17714:	f006 fc3d 	bl	1df92 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   17718:	4622      	mov	r2, r4
   1771a:	2104      	movs	r1, #4
   1771c:	2019      	movs	r0, #25
   1771e:	f7fb fa7b 	bl	12c18 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   17722:	4620      	mov	r0, r4
   17724:	b003      	add	sp, #12
   17726:	bd30      	pop	{r4, r5, pc}
   17728:	20001f38 	.word	0x20001f38
   1772c:	20004780 	.word	0x20004780
   17730:	000204a7 	.word	0x000204a7
   17734:	0001da3f 	.word	0x0001da3f
   17738:	20002834 	.word	0x20002834

0001773c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1773c:	4b01      	ldr	r3, [pc, #4]	; (17744 <mpsl_hfclk_callback+0x8>)
   1773e:	2000      	movs	r0, #0
   17740:	681b      	ldr	r3, [r3, #0]
   17742:	4718      	bx	r3
   17744:	20002844 	.word	0x20002844

00017748 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   17748:	b120      	cbz	r0, 17754 <nrfx_clock_start+0xc>
   1774a:	2801      	cmp	r0, #1
   1774c:	d106      	bne.n	1775c <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1774e:	4804      	ldr	r0, [pc, #16]	; (17760 <nrfx_clock_start+0x18>)
   17750:	f7f4 bdd4 	b.w	c2fc <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   17754:	4b03      	ldr	r3, [pc, #12]	; (17764 <nrfx_clock_start+0x1c>)
   17756:	2001      	movs	r0, #1
   17758:	681b      	ldr	r3, [r3, #0]
   1775a:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1775c:	4770      	bx	lr
   1775e:	bf00      	nop
   17760:	0001773d 	.word	0x0001773d
   17764:	20002844 	.word	0x20002844

00017768 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   17768:	4b01      	ldr	r3, [pc, #4]	; (17770 <nrfx_clock_init+0x8>)
   1776a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1776c:	4801      	ldr	r0, [pc, #4]	; (17774 <nrfx_clock_init+0xc>)
   1776e:	4770      	bx	lr
   17770:	20002844 	.word	0x20002844
   17774:	0bad0000 	.word	0x0bad0000

00017778 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1777c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   17780:	2a08      	cmp	r2, #8
   17782:	d106      	bne.n	17792 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17784:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   17788:	2b05      	cmp	r3, #5
   1778a:	d802      	bhi.n	17792 <nrf52_errata_103+0x1a>
   1778c:	4a02      	ldr	r2, [pc, #8]	; (17798 <nrf52_errata_103+0x20>)
   1778e:	5cd0      	ldrb	r0, [r2, r3]
   17790:	4770      	bx	lr
                        return false;
   17792:	2000      	movs	r0, #0
}
   17794:	4770      	bx	lr
   17796:	bf00      	nop
   17798:	000204d2 	.word	0x000204d2

0001779c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1779c:	4a02      	ldr	r2, [pc, #8]	; (177a8 <nvmc_wait+0xc>)
   1779e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   177a2:	2b00      	cmp	r3, #0
   177a4:	d0fb      	beq.n	1779e <nvmc_wait+0x2>
}
   177a6:	4770      	bx	lr
   177a8:	4001e000 	.word	0x4001e000

000177ac <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   177ac:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   177ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   177b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   177b6:	2a08      	cmp	r2, #8
   177b8:	d14e      	bne.n	17858 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   177ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   177be:	2100      	movs	r1, #0
   177c0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   177c4:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   177c8:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   177cc:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   177d0:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   177d4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   177d8:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   177dc:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   177e0:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   177e4:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   177e8:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   177ec:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   177f0:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   177f4:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   177f8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   177fc:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   17800:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   17804:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   17808:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1780c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   17810:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   17814:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   17818:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1781c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   17820:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   17824:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   17828:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1782c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   17830:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   17834:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   17838:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1783c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   17840:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   17844:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   17848:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1784c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   17850:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   17854:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   17858:	f7ff ff8e 	bl	17778 <nrf52_errata_103>
   1785c:	b118      	cbz	r0, 17866 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1785e:	4b3b      	ldr	r3, [pc, #236]	; (1794c <SystemInit+0x1a0>)
   17860:	4a3b      	ldr	r2, [pc, #236]	; (17950 <SystemInit+0x1a4>)
   17862:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   17866:	f7ff ff87 	bl	17778 <nrf52_errata_103>
   1786a:	b118      	cbz	r0, 17874 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1786c:	4b39      	ldr	r3, [pc, #228]	; (17954 <SystemInit+0x1a8>)
   1786e:	22fb      	movs	r2, #251	; 0xfb
   17870:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   17874:	f7ff ff80 	bl	17778 <nrf52_errata_103>
   17878:	b170      	cbz	r0, 17898 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1787a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1787e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17882:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   17886:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1788a:	f022 020f 	bic.w	r2, r2, #15
   1788e:	f003 030f 	and.w	r3, r3, #15
   17892:	4313      	orrs	r3, r2
   17894:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   17898:	f7ff ff6e 	bl	17778 <nrf52_errata_103>
   1789c:	b120      	cbz	r0, 178a8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1789e:	4b2e      	ldr	r3, [pc, #184]	; (17958 <SystemInit+0x1ac>)
   178a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   178a4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   178a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   178ac:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   178b0:	2b08      	cmp	r3, #8
   178b2:	d11a      	bne.n	178ea <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   178b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   178b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   178bc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   178be:	bf44      	itt	mi
   178c0:	f06f 0201 	mvnmi.w	r2, #1
   178c4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   178c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   178cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   178d0:	2b05      	cmp	r3, #5
   178d2:	d802      	bhi.n	178da <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   178d4:	4a21      	ldr	r2, [pc, #132]	; (1795c <SystemInit+0x1b0>)
   178d6:	5cd3      	ldrb	r3, [r2, r3]
   178d8:	b13b      	cbz	r3, 178ea <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   178da:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   178de:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   178e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   178e6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   178ea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   178ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   178f2:	2a00      	cmp	r2, #0
   178f4:	db03      	blt.n	178fe <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   178f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   178fa:	2b00      	cmp	r3, #0
   178fc:	da22      	bge.n	17944 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   178fe:	4918      	ldr	r1, [pc, #96]	; (17960 <SystemInit+0x1b4>)
   17900:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   17902:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   17906:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1790a:	2412      	movs	r4, #18
    nvmc_wait();
   1790c:	f7ff ff46 	bl	1779c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   17910:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   17914:	f7ff ff42 	bl	1779c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   17918:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1791c:	f7ff ff3e 	bl	1779c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   17920:	2300      	movs	r3, #0
   17922:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   17926:	f7ff ff39 	bl	1779c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1792a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1792e:	490d      	ldr	r1, [pc, #52]	; (17964 <SystemInit+0x1b8>)
   17930:	4b0d      	ldr	r3, [pc, #52]	; (17968 <SystemInit+0x1bc>)
   17932:	68ca      	ldr	r2, [r1, #12]
   17934:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17938:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1793a:	60cb      	str	r3, [r1, #12]
   1793c:	f3bf 8f4f 	dsb	sy
    __NOP();
   17940:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17942:	e7fd      	b.n	17940 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   17944:	4b09      	ldr	r3, [pc, #36]	; (1796c <SystemInit+0x1c0>)
   17946:	4a0a      	ldr	r2, [pc, #40]	; (17970 <SystemInit+0x1c4>)
   17948:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1794a:	bd10      	pop	{r4, pc}
   1794c:	40005000 	.word	0x40005000
   17950:	00038148 	.word	0x00038148
   17954:	4000f000 	.word	0x4000f000
   17958:	40029000 	.word	0x40029000
   1795c:	000204cc 	.word	0x000204cc
   17960:	4001e000 	.word	0x4001e000
   17964:	e000ed00 	.word	0xe000ed00
   17968:	05fa0004 	.word	0x05fa0004
   1796c:	20000410 	.word	0x20000410
   17970:	03d09000 	.word	0x03d09000

00017974 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   17974:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   17976:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   17978:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1797a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1797e:	fab2 f382 	clz	r3, r2
   17982:	f1c3 031f 	rsb	r3, r3, #31
   17986:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   17988:	fa05 f403 	lsl.w	r4, r5, r3
   1798c:	ea22 0404 	bic.w	r4, r2, r4
   17990:	e850 6f00 	ldrex	r6, [r0]
   17994:	4296      	cmp	r6, r2
   17996:	d104      	bne.n	179a2 <nrfx_flag32_alloc+0x2e>
   17998:	e840 4c00 	strex	ip, r4, [r0]
   1799c:	f1bc 0f00 	cmp.w	ip, #0
   179a0:	d1f6      	bne.n	17990 <nrfx_flag32_alloc+0x1c>
   179a2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   179a6:	d1e7      	bne.n	17978 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   179a8:	4801      	ldr	r0, [pc, #4]	; (179b0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   179aa:	700b      	strb	r3, [r1, #0]
}
   179ac:	bd70      	pop	{r4, r5, r6, pc}
   179ae:	bf00      	nop
   179b0:	0bad0000 	.word	0x0bad0000

000179b4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   179b4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   179b6:	6803      	ldr	r3, [r0, #0]
   179b8:	40cb      	lsrs	r3, r1
   179ba:	07db      	lsls	r3, r3, #31
   179bc:	d414      	bmi.n	179e8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   179be:	2301      	movs	r3, #1
   179c0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   179c2:	6802      	ldr	r2, [r0, #0]
   179c4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   179c8:	ea43 0102 	orr.w	r1, r3, r2
   179cc:	e850 4f00 	ldrex	r4, [r0]
   179d0:	4294      	cmp	r4, r2
   179d2:	d104      	bne.n	179de <nrfx_flag32_free+0x2a>
   179d4:	e840 1c00 	strex	ip, r1, [r0]
   179d8:	f1bc 0f00 	cmp.w	ip, #0
   179dc:	d1f6      	bne.n	179cc <nrfx_flag32_free+0x18>
   179de:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   179e2:	d1ee      	bne.n	179c2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   179e4:	4801      	ldr	r0, [pc, #4]	; (179ec <nrfx_flag32_free+0x38>)
}
   179e6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   179e8:	4801      	ldr	r0, [pc, #4]	; (179f0 <nrfx_flag32_free+0x3c>)
   179ea:	e7fc      	b.n	179e6 <nrfx_flag32_free+0x32>
   179ec:	0bad0000 	.word	0x0bad0000
   179f0:	0bad0004 	.word	0x0bad0004

000179f4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   179f4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   179f6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   179fa:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   179fc:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   179fe:	6002      	str	r2, [r0, #0]
}
   17a00:	4802      	ldr	r0, [pc, #8]	; (17a0c <nrf_gpio_pin_port_decode+0x18>)
   17a02:	bf18      	it	ne
   17a04:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   17a08:	4770      	bx	lr
   17a0a:	bf00      	nop
   17a0c:	50000300 	.word	0x50000300

00017a10 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   17a10:	4b03      	ldr	r3, [pc, #12]	; (17a20 <pin_in_use_by_te+0x10>)
   17a12:	3008      	adds	r0, #8
   17a14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   17a18:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17a1c:	4770      	bx	lr
   17a1e:	bf00      	nop
   17a20:	20000414 	.word	0x20000414

00017a24 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   17a24:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   17a26:	f100 0308 	add.w	r3, r0, #8
   17a2a:	4c0c      	ldr	r4, [pc, #48]	; (17a5c <call_handler+0x38>)
   17a2c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   17a30:	05da      	lsls	r2, r3, #23
{
   17a32:	4605      	mov	r5, r0
   17a34:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   17a36:	d507      	bpl.n	17a48 <call_handler+0x24>
   17a38:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   17a3c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   17a40:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   17a44:	6852      	ldr	r2, [r2, #4]
   17a46:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   17a48:	68a3      	ldr	r3, [r4, #8]
   17a4a:	b12b      	cbz	r3, 17a58 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   17a4c:	68e2      	ldr	r2, [r4, #12]
   17a4e:	4631      	mov	r1, r6
   17a50:	4628      	mov	r0, r5
    }
}
   17a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   17a56:	4718      	bx	r3
}
   17a58:	bd70      	pop	{r4, r5, r6, pc}
   17a5a:	bf00      	nop
   17a5c:	20000414 	.word	0x20000414

00017a60 <release_handler>:
{
   17a60:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   17a62:	4a12      	ldr	r2, [pc, #72]	; (17aac <release_handler+0x4c>)
   17a64:	3008      	adds	r0, #8
   17a66:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   17a6a:	05d9      	lsls	r1, r3, #23
   17a6c:	d51b      	bpl.n	17aa6 <release_handler+0x46>
   17a6e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   17a72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   17a76:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   17a7a:	f102 040e 	add.w	r4, r2, #14
   17a7e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   17a80:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   17a84:	f413 7f80 	tst.w	r3, #256	; 0x100
   17a88:	d003      	beq.n	17a92 <release_handler+0x32>
   17a8a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   17a8e:	4299      	cmp	r1, r3
   17a90:	d009      	beq.n	17aa6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   17a92:	3001      	adds	r0, #1
   17a94:	2830      	cmp	r0, #48	; 0x30
   17a96:	d1f3      	bne.n	17a80 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   17a98:	2300      	movs	r3, #0
   17a9a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   17a9e:	4804      	ldr	r0, [pc, #16]	; (17ab0 <release_handler+0x50>)
}
   17aa0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   17aa2:	f7ff bf87 	b.w	179b4 <nrfx_flag32_free>
}
   17aa6:	bc10      	pop	{r4}
   17aa8:	4770      	bx	lr
   17aaa:	bf00      	nop
   17aac:	20000414 	.word	0x20000414
   17ab0:	20000488 	.word	0x20000488

00017ab4 <pin_handler_trigger_uninit>:
{
   17ab4:	b538      	push	{r3, r4, r5, lr}
   17ab6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   17ab8:	f7ff ffaa 	bl	17a10 <pin_in_use_by_te>
   17abc:	4c09      	ldr	r4, [pc, #36]	; (17ae4 <pin_handler_trigger_uninit+0x30>)
   17abe:	f102 0508 	add.w	r5, r2, #8
   17ac2:	b140      	cbz	r0, 17ad6 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17ac4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   17ac8:	4907      	ldr	r1, [pc, #28]	; (17ae8 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   17aca:	0b5b      	lsrs	r3, r3, #13
   17acc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   17ad0:	2000      	movs	r0, #0
   17ad2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   17ad6:	4610      	mov	r0, r2
   17ad8:	f7ff ffc2 	bl	17a60 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   17adc:	2300      	movs	r3, #0
   17ade:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   17ae2:	bd38      	pop	{r3, r4, r5, pc}
   17ae4:	20000414 	.word	0x20000414
   17ae8:	40006000 	.word	0x40006000

00017aec <nrfx_gpiote_input_configure>:
{
   17aec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17af0:	4604      	mov	r4, r0
   17af2:	4616      	mov	r6, r2
   17af4:	461d      	mov	r5, r3
    if (p_input_config)
   17af6:	b301      	cbz	r1, 17b3a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17af8:	4f4e      	ldr	r7, [pc, #312]	; (17c34 <nrfx_gpiote_input_configure+0x148>)
   17afa:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   17afe:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   17b02:	079b      	lsls	r3, r3, #30
   17b04:	d502      	bpl.n	17b0c <nrfx_gpiote_input_configure+0x20>
   17b06:	f7ff ff83 	bl	17a10 <pin_in_use_by_te>
   17b0a:	bb10      	cbnz	r0, 17b52 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   17b0c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   17b0e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   17b12:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   17b16:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   17b1a:	f10d 020f 	add.w	r2, sp, #15
   17b1e:	460b      	mov	r3, r1
   17b20:	4620      	mov	r0, r4
   17b22:	f10d 010e 	add.w	r1, sp, #14
   17b26:	f005 ffce 	bl	1dac6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   17b2a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   17b2e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   17b32:	f043 0301 	orr.w	r3, r3, #1
   17b36:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   17b3a:	b346      	cbz	r6, 17b8e <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17b3c:	4b3d      	ldr	r3, [pc, #244]	; (17c34 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   17b3e:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   17b42:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17b44:	f104 0708 	add.w	r7, r4, #8
   17b48:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   17b4c:	0788      	lsls	r0, r1, #30
   17b4e:	d502      	bpl.n	17b56 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   17b50:	b1aa      	cbz	r2, 17b7e <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   17b52:	4839      	ldr	r0, [pc, #228]	; (17c38 <nrfx_gpiote_input_configure+0x14c>)
   17b54:	e01d      	b.n	17b92 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   17b56:	f021 0120 	bic.w	r1, r1, #32
   17b5a:	04c9      	lsls	r1, r1, #19
   17b5c:	0cc9      	lsrs	r1, r1, #19
   17b5e:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   17b62:	b162      	cbz	r2, 17b7e <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   17b64:	f1bc 0f03 	cmp.w	ip, #3
   17b68:	d8f3      	bhi.n	17b52 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   17b6a:	6872      	ldr	r2, [r6, #4]
   17b6c:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   17b6e:	f1bc 0f00 	cmp.w	ip, #0
   17b72:	d111      	bne.n	17b98 <nrfx_gpiote_input_configure+0xac>
   17b74:	4a31      	ldr	r2, [pc, #196]	; (17c3c <nrfx_gpiote_input_configure+0x150>)
   17b76:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   17b7a:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   17b7e:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   17b82:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   17b86:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   17b8a:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   17b8e:	bb45      	cbnz	r5, 17be2 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   17b90:	482b      	ldr	r0, [pc, #172]	; (17c40 <nrfx_gpiote_input_configure+0x154>)
}
   17b92:	b004      	add	sp, #16
   17b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   17b98:	00b2      	lsls	r2, r6, #2
   17b9a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17b9e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   17ba2:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   17ba6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17baa:	f020 0003 	bic.w	r0, r0, #3
   17bae:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17bb2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17bb6:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   17bba:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   17bbe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17bc2:	0220      	lsls	r0, r4, #8
   17bc4:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   17bc8:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   17bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17bd0:	ea40 000e 	orr.w	r0, r0, lr
   17bd4:	f041 0120 	orr.w	r1, r1, #32
   17bd8:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   17bdc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   17be0:	e7cd      	b.n	17b7e <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   17be2:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   17be6:	4620      	mov	r0, r4
   17be8:	f7ff ff3a 	bl	17a60 <release_handler>
    if (!handler)
   17bec:	2e00      	cmp	r6, #0
   17bee:	d0cf      	beq.n	17b90 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   17bf0:	4d10      	ldr	r5, [pc, #64]	; (17c34 <nrfx_gpiote_input_configure+0x148>)
   17bf2:	e9d5 2300 	ldrd	r2, r3, [r5]
   17bf6:	4296      	cmp	r6, r2
   17bf8:	d101      	bne.n	17bfe <nrfx_gpiote_input_configure+0x112>
   17bfa:	429f      	cmp	r7, r3
   17bfc:	d018      	beq.n	17c30 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   17bfe:	4811      	ldr	r0, [pc, #68]	; (17c44 <nrfx_gpiote_input_configure+0x158>)
   17c00:	f10d 010f 	add.w	r1, sp, #15
   17c04:	f7ff feb6 	bl	17974 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   17c08:	4b0d      	ldr	r3, [pc, #52]	; (17c40 <nrfx_gpiote_input_configure+0x154>)
   17c0a:	4298      	cmp	r0, r3
   17c0c:	d1c1      	bne.n	17b92 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   17c0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   17c12:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   17c16:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   17c1a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   17c1c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   17c1e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   17c22:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   17c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17c2a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   17c2e:	e7af      	b.n	17b90 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   17c30:	2200      	movs	r2, #0
   17c32:	e7ee      	b.n	17c12 <nrfx_gpiote_input_configure+0x126>
   17c34:	20000414 	.word	0x20000414
   17c38:	0bad0004 	.word	0x0bad0004
   17c3c:	40006000 	.word	0x40006000
   17c40:	0bad0000 	.word	0x0bad0000
   17c44:	20000488 	.word	0x20000488

00017c48 <nrfx_gpiote_output_configure>:
{
   17c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c4a:	4604      	mov	r4, r0
   17c4c:	b085      	sub	sp, #20
   17c4e:	4615      	mov	r5, r2
    if (p_config)
   17c50:	b319      	cbz	r1, 17c9a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17c52:	4e33      	ldr	r6, [pc, #204]	; (17d20 <nrfx_gpiote_output_configure+0xd8>)
   17c54:	f100 0708 	add.w	r7, r0, #8
   17c58:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   17c5c:	0793      	lsls	r3, r2, #30
   17c5e:	d403      	bmi.n	17c68 <nrfx_gpiote_output_configure+0x20>
   17c60:	f7ff fed6 	bl	17a10 <pin_in_use_by_te>
   17c64:	2800      	cmp	r0, #0
   17c66:	d158      	bne.n	17d1a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   17c68:	f012 0f1c 	tst.w	r2, #28
   17c6c:	d002      	beq.n	17c74 <nrfx_gpiote_output_configure+0x2c>
   17c6e:	784b      	ldrb	r3, [r1, #1]
   17c70:	2b01      	cmp	r3, #1
   17c72:	d052      	beq.n	17d1a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   17c74:	2301      	movs	r3, #1
   17c76:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   17c7a:	2300      	movs	r3, #0
   17c7c:	e9cd 1300 	strd	r1, r3, [sp]
   17c80:	1c4a      	adds	r2, r1, #1
   17c82:	1c8b      	adds	r3, r1, #2
   17c84:	4620      	mov	r0, r4
   17c86:	f10d 010f 	add.w	r1, sp, #15
   17c8a:	f005 ff1c 	bl	1dac6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   17c8e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   17c92:	f043 0303 	orr.w	r3, r3, #3
   17c96:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   17c9a:	b915      	cbnz	r5, 17ca2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   17c9c:	4821      	ldr	r0, [pc, #132]	; (17d24 <nrfx_gpiote_output_configure+0xdc>)
}
   17c9e:	b005      	add	sp, #20
   17ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17ca2:	4e1f      	ldr	r6, [pc, #124]	; (17d20 <nrfx_gpiote_output_configure+0xd8>)
   17ca4:	f104 0708 	add.w	r7, r4, #8
   17ca8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   17cac:	0783      	lsls	r3, r0, #30
   17cae:	d534      	bpl.n	17d1a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   17cb0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   17cb4:	4661      	mov	r1, ip
   17cb6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   17cb8:	f020 0020 	bic.w	r0, r0, #32
   17cbc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   17cc0:	04c0      	lsls	r0, r0, #19
   17cc2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   17cc6:	0cc0      	lsrs	r0, r0, #19
   17cc8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   17ccc:	2300      	movs	r3, #0
   17cce:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   17cd2:	786a      	ldrb	r2, [r5, #1]
   17cd4:	2a00      	cmp	r2, #0
   17cd6:	d0e1      	beq.n	17c9c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   17cd8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   17cdc:	78ad      	ldrb	r5, [r5, #2]
   17cde:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   17ce2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   17ce6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17cea:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   17cee:	0223      	lsls	r3, r4, #8
   17cf0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   17cf4:	0412      	lsls	r2, r2, #16
   17cf6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17cfa:	ea43 030e 	orr.w	r3, r3, lr
   17cfe:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   17d00:	052a      	lsls	r2, r5, #20
   17d02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   17d06:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17d0a:	4313      	orrs	r3, r2
   17d0c:	f040 0020 	orr.w	r0, r0, #32
   17d10:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   17d14:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   17d18:	e7c0      	b.n	17c9c <nrfx_gpiote_output_configure+0x54>
{
   17d1a:	4803      	ldr	r0, [pc, #12]	; (17d28 <nrfx_gpiote_output_configure+0xe0>)
   17d1c:	e7bf      	b.n	17c9e <nrfx_gpiote_output_configure+0x56>
   17d1e:	bf00      	nop
   17d20:	20000414 	.word	0x20000414
   17d24:	0bad0000 	.word	0x0bad0000
   17d28:	0bad0004 	.word	0x0bad0004

00017d2c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   17d2c:	4b01      	ldr	r3, [pc, #4]	; (17d34 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   17d2e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   17d32:	4770      	bx	lr
   17d34:	20000414 	.word	0x20000414

00017d38 <nrfx_gpiote_channel_get>:
{
   17d38:	b508      	push	{r3, lr}
   17d3a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   17d3c:	f7ff fe68 	bl	17a10 <pin_in_use_by_te>
   17d40:	b138      	cbz	r0, 17d52 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17d42:	4b05      	ldr	r3, [pc, #20]	; (17d58 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   17d44:	4805      	ldr	r0, [pc, #20]	; (17d5c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17d46:	3208      	adds	r2, #8
   17d48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   17d4c:	0b5b      	lsrs	r3, r3, #13
   17d4e:	700b      	strb	r3, [r1, #0]
}
   17d50:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   17d52:	4803      	ldr	r0, [pc, #12]	; (17d60 <nrfx_gpiote_channel_get+0x28>)
   17d54:	e7fc      	b.n	17d50 <nrfx_gpiote_channel_get+0x18>
   17d56:	bf00      	nop
   17d58:	20000414 	.word	0x20000414
   17d5c:	0bad0000 	.word	0x0bad0000
   17d60:	0bad0004 	.word	0x0bad0004

00017d64 <nrfx_gpiote_init>:
{
   17d64:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17d66:	4c0f      	ldr	r4, [pc, #60]	; (17da4 <nrfx_gpiote_init+0x40>)
   17d68:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   17d6c:	b9bd      	cbnz	r5, 17d9e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   17d6e:	2260      	movs	r2, #96	; 0x60
   17d70:	4629      	mov	r1, r5
   17d72:	f104 0010 	add.w	r0, r4, #16
   17d76:	f005 f944 	bl	1d002 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   17d7a:	2006      	movs	r0, #6
   17d7c:	f7fa ff1c 	bl	12bb8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17d80:	4b09      	ldr	r3, [pc, #36]	; (17da8 <nrfx_gpiote_init+0x44>)
    return err_code;
   17d82:	480a      	ldr	r0, [pc, #40]	; (17dac <nrfx_gpiote_init+0x48>)
   17d84:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   17d88:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   17d8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17d90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17d94:	2301      	movs	r3, #1
   17d96:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   17d9a:	6763      	str	r3, [r4, #116]	; 0x74
}
   17d9c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   17d9e:	4804      	ldr	r0, [pc, #16]	; (17db0 <nrfx_gpiote_init+0x4c>)
   17da0:	e7fc      	b.n	17d9c <nrfx_gpiote_init+0x38>
   17da2:	bf00      	nop
   17da4:	20000414 	.word	0x20000414
   17da8:	40006000 	.word	0x40006000
   17dac:	0bad0000 	.word	0x0bad0000
   17db0:	0bad0005 	.word	0x0bad0005

00017db4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   17db4:	4b03      	ldr	r3, [pc, #12]	; (17dc4 <nrfx_gpiote_is_init+0x10>)
   17db6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   17dba:	3800      	subs	r0, #0
   17dbc:	bf18      	it	ne
   17dbe:	2001      	movne	r0, #1
   17dc0:	4770      	bx	lr
   17dc2:	bf00      	nop
   17dc4:	20000414 	.word	0x20000414

00017dc8 <nrfx_gpiote_channel_free>:
{
   17dc8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   17dca:	4801      	ldr	r0, [pc, #4]	; (17dd0 <nrfx_gpiote_channel_free+0x8>)
   17dcc:	f7ff bdf2 	b.w	179b4 <nrfx_flag32_free>
   17dd0:	20000484 	.word	0x20000484

00017dd4 <nrfx_gpiote_channel_alloc>:
{
   17dd4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   17dd6:	4801      	ldr	r0, [pc, #4]	; (17ddc <nrfx_gpiote_channel_alloc+0x8>)
   17dd8:	f7ff bdcc 	b.w	17974 <nrfx_flag32_alloc>
   17ddc:	20000484 	.word	0x20000484

00017de0 <nrfx_gpiote_trigger_enable>:
{
   17de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17de2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17de4:	f7ff fe14 	bl	17a10 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17de8:	f104 0208 	add.w	r2, r4, #8
   17dec:	4b1e      	ldr	r3, [pc, #120]	; (17e68 <nrfx_gpiote_trigger_enable+0x88>)
   17dee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17df2:	b1e8      	cbz	r0, 17e30 <nrfx_gpiote_trigger_enable+0x50>
   17df4:	f013 0502 	ands.w	r5, r3, #2
   17df8:	d11a      	bne.n	17e30 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17dfa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   17dfc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   17dfe:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   17e02:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   17e06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17e0a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17e0e:	6005      	str	r5, [r0, #0]
   17e10:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   17e12:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17e16:	f040 0001 	orr.w	r0, r0, #1
   17e1a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   17e1e:	b129      	cbz	r1, 17e2c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   17e20:	2201      	movs	r2, #1
   17e22:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   17e26:	4a11      	ldr	r2, [pc, #68]	; (17e6c <nrfx_gpiote_trigger_enable+0x8c>)
   17e28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17e2c:	b003      	add	sp, #12
   17e2e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17e30:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   17e34:	2b04      	cmp	r3, #4
   17e36:	d012      	beq.n	17e5e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   17e38:	2b05      	cmp	r3, #5
   17e3a:	d012      	beq.n	17e62 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17e3c:	a801      	add	r0, sp, #4
   17e3e:	9401      	str	r4, [sp, #4]
   17e40:	f7ff fdd8 	bl	179f4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17e44:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   17e46:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17e4a:	40d9      	lsrs	r1, r3
   17e4c:	f001 0101 	and.w	r1, r1, #1
   17e50:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   17e52:	4620      	mov	r0, r4
}
   17e54:	b003      	add	sp, #12
   17e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   17e5a:	f005 be7d 	b.w	1db58 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   17e5e:	2103      	movs	r1, #3
   17e60:	e7f7      	b.n	17e52 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   17e62:	2102      	movs	r1, #2
   17e64:	e7f5      	b.n	17e52 <nrfx_gpiote_trigger_enable+0x72>
   17e66:	bf00      	nop
   17e68:	20000414 	.word	0x20000414
   17e6c:	40006000 	.word	0x40006000

00017e70 <nrfx_gpiote_trigger_disable>:
{
   17e70:	b508      	push	{r3, lr}
   17e72:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17e74:	f7ff fdcc 	bl	17a10 <pin_in_use_by_te>
   17e78:	b1c0      	cbz	r0, 17eac <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17e7a:	f102 0108 	add.w	r1, r2, #8
   17e7e:	4b0e      	ldr	r3, [pc, #56]	; (17eb8 <nrfx_gpiote_trigger_disable+0x48>)
   17e80:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17e84:	0799      	lsls	r1, r3, #30
   17e86:	d411      	bmi.n	17eac <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17e88:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   17e8a:	2201      	movs	r2, #1
   17e8c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   17e8e:	009b      	lsls	r3, r3, #2
   17e90:	490a      	ldr	r1, [pc, #40]	; (17ebc <nrfx_gpiote_trigger_disable+0x4c>)
   17e92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17e96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   17e9a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   17e9e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17ea2:	f022 0203 	bic.w	r2, r2, #3
   17ea6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   17eaa:	bd08      	pop	{r3, pc}
   17eac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17eb0:	2100      	movs	r1, #0
   17eb2:	4610      	mov	r0, r2
   17eb4:	f005 be50 	b.w	1db58 <nrf_gpio_cfg_sense_set>
   17eb8:	20000414 	.word	0x20000414
   17ebc:	40006000 	.word	0x40006000

00017ec0 <nrfx_gpiote_pin_uninit>:
{
   17ec0:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   17ec2:	4b0e      	ldr	r3, [pc, #56]	; (17efc <nrfx_gpiote_pin_uninit+0x3c>)
   17ec4:	f100 0208 	add.w	r2, r0, #8
{
   17ec8:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   17eca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   17ece:	07db      	lsls	r3, r3, #31
   17ed0:	d511      	bpl.n	17ef6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   17ed2:	f7ff ffcd 	bl	17e70 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   17ed6:	4620      	mov	r0, r4
   17ed8:	f7ff fdec 	bl	17ab4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17edc:	a801      	add	r0, sp, #4
   17ede:	9401      	str	r4, [sp, #4]
   17ee0:	f7ff fd88 	bl	179f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17ee4:	9b01      	ldr	r3, [sp, #4]
   17ee6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17eea:	2202      	movs	r2, #2
   17eec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   17ef0:	4803      	ldr	r0, [pc, #12]	; (17f00 <nrfx_gpiote_pin_uninit+0x40>)
}
   17ef2:	b002      	add	sp, #8
   17ef4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   17ef6:	4803      	ldr	r0, [pc, #12]	; (17f04 <nrfx_gpiote_pin_uninit+0x44>)
   17ef8:	e7fb      	b.n	17ef2 <nrfx_gpiote_pin_uninit+0x32>
   17efa:	bf00      	nop
   17efc:	20000414 	.word	0x20000414
   17f00:	0bad0000 	.word	0x0bad0000
   17f04:	0bad0004 	.word	0x0bad0004

00017f08 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   17f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f0c:	4b68      	ldr	r3, [pc, #416]	; (180b0 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   17f0e:	4869      	ldr	r0, [pc, #420]	; (180b4 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17f10:	4969      	ldr	r1, [pc, #420]	; (180b8 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   17f12:	2600      	movs	r6, #0
{
   17f14:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   17f16:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17f18:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17f1a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   17f1c:	b135      	cbz	r5, 17f2c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   17f1e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   17f22:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17f24:	bf1e      	ittt	ne
   17f26:	601c      	strne	r4, [r3, #0]
   17f28:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   17f2a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17f2c:	3304      	adds	r3, #4
   17f2e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   17f30:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17f34:	d1f1      	bne.n	17f1a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17f36:	f8df 917c 	ldr.w	r9, [pc, #380]	; 180b4 <nrfx_gpiote_irq_handler+0x1ac>
   17f3a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   17f3e:	2b00      	cmp	r3, #0
   17f40:	f000 8099 	beq.w	18076 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   17f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17f48:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   17f4c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   17f4e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   17f52:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   17f56:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   17f58:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   17f5c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   17f60:	f10d 0a10 	add.w	sl, sp, #16
   17f64:	ea4f 1348 	mov.w	r3, r8, lsl #5
   17f68:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   17f6a:	f04f 0b01 	mov.w	fp, #1
   17f6e:	e049      	b.n	18004 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   17f70:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17f72:	4a52      	ldr	r2, [pc, #328]	; (180bc <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   17f74:	fa94 f4a4 	rbit	r4, r4
   17f78:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   17f7c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   17f7e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17f80:	f104 0308 	add.w	r3, r4, #8
   17f84:	9403      	str	r4, [sp, #12]
   17f86:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   17f8a:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   17f8e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   17f92:	fa0b f202 	lsl.w	r2, fp, r2
   17f96:	ea23 0302 	bic.w	r3, r3, r2
   17f9a:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17f9e:	a803      	add	r0, sp, #12
   17fa0:	f7ff fd28 	bl	179f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17fa4:	9b03      	ldr	r3, [sp, #12]
   17fa6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17faa:	08b9      	lsrs	r1, r7, #2
   17fac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   17fb0:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   17fb4:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17fb6:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   17fb8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   17fbc:	d52c      	bpl.n	18018 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   17fbe:	4620      	mov	r0, r4
   17fc0:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17fc2:	b2dd      	uxtb	r5, r3
   17fc4:	f7ff fd2e 	bl	17a24 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17fc8:	a803      	add	r0, sp, #12
   17fca:	9403      	str	r4, [sp, #12]
   17fcc:	f7ff fd12 	bl	179f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17fd0:	9b03      	ldr	r3, [sp, #12]
   17fd2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17fd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   17fda:	f3c3 4301 	ubfx	r3, r3, #16, #2
   17fde:	429d      	cmp	r5, r3
   17fe0:	d107      	bne.n	17ff2 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17fe2:	2100      	movs	r1, #0
   17fe4:	4620      	mov	r0, r4
   17fe6:	f005 fdb7 	bl	1db58 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   17fea:	4629      	mov	r1, r5
   17fec:	4620      	mov	r0, r4
   17fee:	f005 fdb3 	bl	1db58 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17ff2:	a803      	add	r0, sp, #12
   17ff4:	9403      	str	r4, [sp, #12]
   17ff6:	f7ff fcfd 	bl	179f4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   17ffa:	9b03      	ldr	r3, [sp, #12]
   17ffc:	fa0b f303 	lsl.w	r3, fp, r3
   18000:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   18004:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   18008:	2c00      	cmp	r4, #0
   1800a:	d1b1      	bne.n	17f70 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1800c:	f1b8 0f00 	cmp.w	r8, #0
   18010:	d11d      	bne.n	1804e <nrfx_gpiote_irq_handler+0x146>
   18012:	f04f 0801 	mov.w	r8, #1
   18016:	e7a5      	b.n	17f64 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   18018:	2b02      	cmp	r3, #2
   1801a:	d10c      	bne.n	18036 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1801c:	2103      	movs	r1, #3
   1801e:	4620      	mov	r0, r4
   18020:	f005 fd9a 	bl	1db58 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   18024:	f005 0305 	and.w	r3, r5, #5
   18028:	2b01      	cmp	r3, #1
   1802a:	d1e2      	bne.n	17ff2 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1802c:	4639      	mov	r1, r7
   1802e:	4620      	mov	r0, r4
   18030:	f7ff fcf8 	bl	17a24 <call_handler>
   18034:	e7dd      	b.n	17ff2 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   18036:	2102      	movs	r1, #2
   18038:	4620      	mov	r0, r4
   1803a:	9301      	str	r3, [sp, #4]
   1803c:	f005 fd8c 	bl	1db58 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   18040:	2d03      	cmp	r5, #3
   18042:	d0f3      	beq.n	1802c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   18044:	9b01      	ldr	r3, [sp, #4]
   18046:	2b03      	cmp	r3, #3
   18048:	d1d3      	bne.n	17ff2 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1804a:	2d02      	cmp	r5, #2
   1804c:	e7ed      	b.n	1802a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1804e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18052:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   18056:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1805a:	4919      	ldr	r1, [pc, #100]	; (180c0 <nrfx_gpiote_irq_handler+0x1b8>)
   1805c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   18060:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   18062:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   18066:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1806a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1806c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1806e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   18072:	f47f af73 	bne.w	17f5c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   18076:	2401      	movs	r4, #1
    while (mask)
   18078:	b916      	cbnz	r6, 18080 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1807a:	b007      	add	sp, #28
   1807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   18080:	fa96 f3a6 	rbit	r3, r6
   18084:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   18088:	fa04 f203 	lsl.w	r2, r4, r3
   1808c:	009b      	lsls	r3, r3, #2
   1808e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18092:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   18096:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1809a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1809e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   180a2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   180a6:	f3c1 4101 	ubfx	r1, r1, #16, #2
   180aa:	f7ff fcbb 	bl	17a24 <call_handler>
   180ae:	e7e3      	b.n	18078 <nrfx_gpiote_irq_handler+0x170>
   180b0:	40006100 	.word	0x40006100
   180b4:	40006000 	.word	0x40006000
   180b8:	40006120 	.word	0x40006120
   180bc:	20000414 	.word	0x20000414
   180c0:	50000300 	.word	0x50000300

000180c4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   180c4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   180c6:	4801      	ldr	r0, [pc, #4]	; (180cc <nrfx_ppi_channel_alloc+0x8>)
   180c8:	f7ff bc54 	b.w	17974 <nrfx_flag32_alloc>
   180cc:	20000490 	.word	0x20000490

000180d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   180d0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   180d2:	4c11      	ldr	r4, [pc, #68]	; (18118 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   180d4:	4a11      	ldr	r2, [pc, #68]	; (1811c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   180d6:	4912      	ldr	r1, [pc, #72]	; (18120 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   180d8:	2303      	movs	r3, #3
   180da:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   180dc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   180de:	4b11      	ldr	r3, [pc, #68]	; (18124 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   180e0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   180e2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   180e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   180e8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   180ea:	2300      	movs	r3, #0
   180ec:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   180ee:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   180f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   180f2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   180f4:	4a0c      	ldr	r2, [pc, #48]	; (18128 <_DoInit+0x58>)
   180f6:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   180f8:	2210      	movs	r2, #16
   180fa:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   180fc:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   180fe:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   18100:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18102:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   18104:	f004 ff1d 	bl	1cf42 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   18108:	4908      	ldr	r1, [pc, #32]	; (1812c <_DoInit+0x5c>)
   1810a:	4620      	mov	r0, r4
   1810c:	f004 ff19 	bl	1cf42 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   18110:	2320      	movs	r3, #32
   18112:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   18114:	bd10      	pop	{r4, pc}
   18116:	bf00      	nop
   18118:	20002848 	.word	0x20002848
   1811c:	000204ed 	.word	0x000204ed
   18120:	000204f6 	.word	0x000204f6
   18124:	20003591 	.word	0x20003591
   18128:	20003581 	.word	0x20003581
   1812c:	000204fa 	.word	0x000204fa

00018130 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   18130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   18134:	4f21      	ldr	r7, [pc, #132]	; (181bc <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   18136:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1813a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1813c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   18140:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   18142:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   18144:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   18146:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   18148:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1814a:	d831      	bhi.n	181b0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1814c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   18150:	ebaa 0905 	sub.w	r9, sl, r5
   18154:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   18158:	4294      	cmp	r4, r2
   1815a:	d811      	bhi.n	18180 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1815c:	2318      	movs	r3, #24
   1815e:	fb06 3303 	mla	r3, r6, r3, r3
   18162:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   18164:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   18166:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   18168:	4641      	mov	r1, r8
   1816a:	4428      	add	r0, r5
   1816c:	f004 ff3e 	bl	1cfec <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   18170:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   18172:	2318      	movs	r3, #24
   18174:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   18178:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1817a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1817c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   18180:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   18182:	429c      	cmp	r4, r3
   18184:	d818      	bhi.n	181b8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   18186:	fb00 bb0b 	mla	fp, r0, fp, fp
   1818a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1818c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1818e:	f8db 0004 	ldr.w	r0, [fp, #4]
   18192:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   18194:	4428      	add	r0, r5
   18196:	f004 ff29 	bl	1cfec <memcpy>
      if (NumBytes) {
   1819a:	ebb4 040a 	subs.w	r4, r4, sl
   1819e:	d0e8      	beq.n	18172 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   181a0:	f8db 0004 	ldr.w	r0, [fp, #4]
   181a4:	4622      	mov	r2, r4
   181a6:	eb08 0109 	add.w	r1, r8, r9
   181aa:	f004 ff1f 	bl	1cfec <memcpy>
      return 1;
   181ae:	e7e0      	b.n	18172 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   181b0:	3b01      	subs	r3, #1
   181b2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   181b4:	42a3      	cmp	r3, r4
   181b6:	d2d1      	bcs.n	1815c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   181b8:	2000      	movs	r0, #0
   181ba:	e7df      	b.n	1817c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   181bc:	20002848 	.word	0x20002848

000181c0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   181c0:	4b03      	ldr	r3, [pc, #12]	; (181d0 <SEGGER_RTT_HasDataUp+0x10>)
   181c2:	2218      	movs	r2, #24
   181c4:	fb02 3300 	mla	r3, r2, r0, r3
   181c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   181ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   181cc:	1a80      	subs	r0, r0, r2
   181ce:	4770      	bx	lr
   181d0:	20002848 	.word	0x20002848

000181d4 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   181d4:	4803      	ldr	r0, [pc, #12]	; (181e4 <zephyr_rtt_mutex_lock+0x10>)
   181d6:	f04f 32ff 	mov.w	r2, #4294967295
   181da:	f04f 33ff 	mov.w	r3, #4294967295
   181de:	f000 baa5 	b.w	1872c <z_impl_k_mutex_lock>
   181e2:	bf00      	nop
   181e4:	200005cc 	.word	0x200005cc

000181e8 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   181e8:	4801      	ldr	r0, [pc, #4]	; (181f0 <zephyr_rtt_mutex_unlock+0x8>)
   181ea:	f000 bb19 	b.w	18820 <z_impl_k_mutex_unlock>
   181ee:	bf00      	nop
   181f0:	200005cc 	.word	0x200005cc

000181f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   181f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181f8:	4605      	mov	r5, r0
   181fa:	af00      	add	r7, sp, #0
   181fc:	460e      	mov	r6, r1
   181fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   18202:	f3ef 8a11 	mrs	sl, BASEPRI
   18206:	f383 8812 	msr	BASEPRI_MAX, r3
   1820a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1820e:	f001 f80f 	bl	19230 <z_impl_z_current_get>
   18212:	2d04      	cmp	r5, #4
   18214:	bf96      	itet	ls
   18216:	4b2f      	ldrls	r3, [pc, #188]	; (182d4 <z_fatal_error+0xe0>)
   18218:	4b2f      	ldrhi	r3, [pc, #188]	; (182d8 <z_fatal_error+0xe4>)
   1821a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1821e:	46e9      	mov	r9, sp
   18220:	b08c      	sub	sp, #48	; 0x30
   18222:	4604      	mov	r4, r0
   18224:	466a      	mov	r2, sp
   18226:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 182dc <z_fatal_error+0xe8>
   1822a:	6213      	str	r3, [r2, #32]
   1822c:	f240 4302 	movw	r3, #1026	; 0x402
   18230:	8513      	strh	r3, [r2, #40]	; 0x28
   18232:	492b      	ldr	r1, [pc, #172]	; (182e0 <z_fatal_error+0xec>)
   18234:	4b2b      	ldr	r3, [pc, #172]	; (182e4 <z_fatal_error+0xf0>)
   18236:	6151      	str	r1, [r2, #20]
   18238:	f04f 0b00 	mov.w	fp, #0
   1823c:	e9c2 8506 	strd	r8, r5, [r2, #24]
   18240:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
   18244:	f842 3f10 	str.w	r3, [r2, #16]!
   18248:	4827      	ldr	r0, [pc, #156]	; (182e8 <z_fatal_error+0xf4>)
   1824a:	465b      	mov	r3, fp
   1824c:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   18250:	f7f9 feba 	bl	11fc8 <z_impl_z_log_msg_static_create>
   18254:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   18256:	b196      	cbz	r6, 1827e <z_fatal_error+0x8a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   18258:	69f3      	ldr	r3, [r6, #28]
   1825a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1825e:	b173      	cbz	r3, 1827e <z_fatal_error+0x8a>
		LOG_ERR("Fault during interrupt handling\n");
   18260:	b088      	sub	sp, #32
   18262:	466a      	mov	r2, sp
   18264:	4b21      	ldr	r3, [pc, #132]	; (182ec <z_fatal_error+0xf8>)
   18266:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1826a:	2303      	movs	r3, #3
   1826c:	f842 3f10 	str.w	r3, [r2, #16]!
   18270:	481d      	ldr	r0, [pc, #116]	; (182e8 <z_fatal_error+0xf4>)
   18272:	465b      	mov	r3, fp
   18274:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18278:	f7f9 fea6 	bl	11fc8 <z_impl_z_log_msg_static_create>
   1827c:	46cd      	mov	sp, r9
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1827e:	b12c      	cbz	r4, 1828c <z_fatal_error+0x98>
   18280:	4620      	mov	r0, r4
   18282:	f005 fd57 	bl	1dd34 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   18286:	b108      	cbz	r0, 1828c <z_fatal_error+0x98>
   18288:	7803      	ldrb	r3, [r0, #0]
   1828a:	b903      	cbnz	r3, 1828e <z_fatal_error+0x9a>
		thread_name = "unknown";
   1828c:	4818      	ldr	r0, [pc, #96]	; (182f0 <z_fatal_error+0xfc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1828e:	46e9      	mov	r9, sp
   18290:	b08a      	sub	sp, #40	; 0x28
   18292:	466a      	mov	r2, sp
   18294:	4b17      	ldr	r3, [pc, #92]	; (182f4 <z_fatal_error+0x100>)
   18296:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1829a:	f240 4302 	movw	r3, #1026	; 0x402
   1829e:	8493      	strh	r3, [r2, #36]	; 0x24
   182a0:	4b15      	ldr	r3, [pc, #84]	; (182f8 <z_fatal_error+0x104>)
   182a2:	e9c2 4007 	strd	r4, r0, [r2, #28]
   182a6:	f842 3f10 	str.w	r3, [r2, #16]!
   182aa:	2300      	movs	r3, #0
   182ac:	480e      	ldr	r0, [pc, #56]	; (182e8 <z_fatal_error+0xf4>)
   182ae:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   182b2:	f7f9 fe89 	bl	11fc8 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   182b6:	4631      	mov	r1, r6
   182b8:	46cd      	mov	sp, r9
   182ba:	4628      	mov	r0, r5
   182bc:	f7fe fccc 	bl	16c58 <k_sys_fatal_error_handler>
	__asm__ volatile(
   182c0:	f38a 8811 	msr	BASEPRI, sl
   182c4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   182c8:	4620      	mov	r0, r4
   182ca:	f7fb f9a1 	bl	13610 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   182ce:	46bd      	mov	sp, r7
   182d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182d4:	0001ed8c 	.word	0x0001ed8c
   182d8:	00020501 	.word	0x00020501
   182dc:	000205c6 	.word	0x000205c6
   182e0:	0002050f 	.word	0x0002050f
   182e4:	01000006 	.word	0x01000006
   182e8:	0001e9d8 	.word	0x0001e9d8
   182ec:	0002053b 	.word	0x0002053b
   182f0:	0001f85a 	.word	0x0001f85a
   182f4:	00020560 	.word	0x00020560
   182f8:	01000005 	.word	0x01000005

000182fc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   182fc:	4b0f      	ldr	r3, [pc, #60]	; (1833c <z_sys_init_run_level+0x40>)
{
   182fe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18300:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18304:	3001      	adds	r0, #1
   18306:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1830a:	42a6      	cmp	r6, r4
   1830c:	d800      	bhi.n	18310 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1830e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   18310:	e9d4 3500 	ldrd	r3, r5, [r4]
   18314:	4628      	mov	r0, r5
   18316:	4798      	blx	r3
		if (dev != NULL) {
   18318:	b16d      	cbz	r5, 18336 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1831a:	b138      	cbz	r0, 1832c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1831c:	2800      	cmp	r0, #0
   1831e:	bfb8      	it	lt
   18320:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   18322:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   18324:	28ff      	cmp	r0, #255	; 0xff
   18326:	bfa8      	it	ge
   18328:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1832a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1832c:	68ea      	ldr	r2, [r5, #12]
   1832e:	7853      	ldrb	r3, [r2, #1]
   18330:	f043 0301 	orr.w	r3, r3, #1
   18334:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18336:	3408      	adds	r4, #8
   18338:	e7e7      	b.n	1830a <z_sys_init_run_level+0xe>
   1833a:	bf00      	nop
   1833c:	0001eda0 	.word	0x0001eda0

00018340 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   18340:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   18342:	4b0a      	ldr	r3, [pc, #40]	; (1836c <bg_thread_main+0x2c>)
   18344:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   18346:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   18348:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1834a:	f7ff ffd7 	bl	182fc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1834e:	f001 fa9b 	bl	19888 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   18352:	2004      	movs	r0, #4
   18354:	f7ff ffd2 	bl	182fc <z_sys_init_run_level>

	z_init_static_threads();
   18358:	f000 f970 	bl	1863c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1835c:	f7f8 fa8c 	bl	10878 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   18360:	4a03      	ldr	r2, [pc, #12]	; (18370 <bg_thread_main+0x30>)
   18362:	7b13      	ldrb	r3, [r2, #12]
   18364:	f023 0301 	bic.w	r3, r3, #1
   18368:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1836a:	bd08      	pop	{r3, pc}
   1836c:	20003991 	.word	0x20003991
   18370:	20002058 	.word	0x20002058

00018374 <z_bss_zero>:
{
   18374:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   18376:	4803      	ldr	r0, [pc, #12]	; (18384 <z_bss_zero+0x10>)
   18378:	4a03      	ldr	r2, [pc, #12]	; (18388 <z_bss_zero+0x14>)
   1837a:	2100      	movs	r1, #0
   1837c:	1a12      	subs	r2, r2, r0
   1837e:	f005 fc0d 	bl	1db9c <z_early_memset>
}
   18382:	bd08      	pop	{r3, pc}
   18384:	20000690 	.word	0x20000690
   18388:	20003994 	.word	0x20003994

0001838c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1838c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1838e:	2300      	movs	r3, #0
{
   18390:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   18392:	2201      	movs	r2, #1
   18394:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   18398:	4e13      	ldr	r6, [pc, #76]	; (183e8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1839a:	4d14      	ldr	r5, [pc, #80]	; (183ec <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1839c:	9301      	str	r3, [sp, #4]
   1839e:	220f      	movs	r2, #15
   183a0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   183a4:	4912      	ldr	r1, [pc, #72]	; (183f0 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   183a6:	2318      	movs	r3, #24
   183a8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   183ac:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   183b0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   183b2:	f44f 70c0 	mov.w	r0, #384	; 0x180
   183b6:	fb00 1104 	mla	r1, r0, r4, r1
   183ba:	4b0e      	ldr	r3, [pc, #56]	; (183f4 <z_init_cpu+0x68>)
   183bc:	9500      	str	r5, [sp, #0]
   183be:	f44f 72a0 	mov.w	r2, #320	; 0x140
   183c2:	4630      	mov	r0, r6
   183c4:	f000 f8dc 	bl	18580 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   183c8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   183ca:	4a0b      	ldr	r2, [pc, #44]	; (183f8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   183cc:	60ee      	str	r6, [r5, #12]
   183ce:	f023 0304 	bic.w	r3, r3, #4
   183d2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   183d4:	f44f 6304 	mov.w	r3, #2112	; 0x840
   183d8:	fb04 3303 	mla	r3, r4, r3, r3
   183dc:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   183de:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   183e0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   183e2:	b006      	add	sp, #24
   183e4:	bd70      	pop	{r4, r5, r6, pc}
   183e6:	bf00      	nop
   183e8:	20001fd8 	.word	0x20001fd8
   183ec:	200028f0 	.word	0x200028f0
   183f0:	20005400 	.word	0x20005400
   183f4:	000186f5 	.word	0x000186f5
   183f8:	20004bc0 	.word	0x20004bc0

000183fc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   183fc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   183fe:	2000      	movs	r0, #0
{
   18400:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   18402:	f7ff ff7b 	bl	182fc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   18406:	4b2e      	ldr	r3, [pc, #184]	; (184c0 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   18408:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1840c:	4d2d      	ldr	r5, [pc, #180]	; (184c4 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1840e:	4e2e      	ldr	r6, [pc, #184]	; (184c8 <z_cstart+0xcc>)
   18410:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18412:	4f2e      	ldr	r7, [pc, #184]	; (184cc <z_cstart+0xd0>)
   18414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18418:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1841a:	23e0      	movs	r3, #224	; 0xe0
   1841c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   18420:	2400      	movs	r4, #0
   18422:	2320      	movs	r3, #32
   18424:	77eb      	strb	r3, [r5, #31]
   18426:	762c      	strb	r4, [r5, #24]
   18428:	766c      	strb	r4, [r5, #25]
   1842a:	76ac      	strb	r4, [r5, #26]
   1842c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18430:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18432:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18436:	626b      	str	r3, [r5, #36]	; 0x24
   18438:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1843c:	f7fb f85c 	bl	134f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18440:	f7fa fb2c 	bl	12a9c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18444:	f04f 33ff 	mov.w	r3, #4294967295
   18448:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1844a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1844c:	f7fb f9b8 	bl	137c0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18450:	f7fb f8f4 	bl	1363c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   18454:	f7f9 fc48 	bl	11ce8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   18458:	f240 1301 	movw	r3, #257	; 0x101
   1845c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   18460:	ab06      	add	r3, sp, #24
   18462:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   18464:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   18468:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1846a:	f005 fb8b 	bl	1db84 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1846e:	2001      	movs	r0, #1
   18470:	f7ff ff44 	bl	182fc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   18474:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   18476:	4d16      	ldr	r5, [pc, #88]	; (184d0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   18478:	f7ff ff40 	bl	182fc <z_sys_init_run_level>
	z_sched_init();
   1847c:	f000 fe30 	bl	190e0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18480:	4b14      	ldr	r3, [pc, #80]	; (184d4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   18482:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18484:	9305      	str	r3, [sp, #20]
   18486:	2301      	movs	r3, #1
   18488:	4913      	ldr	r1, [pc, #76]	; (184d8 <z_cstart+0xdc>)
   1848a:	9400      	str	r4, [sp, #0]
   1848c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   18490:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18494:	463b      	mov	r3, r7
   18496:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1849a:	4628      	mov	r0, r5
   1849c:	f000 f870 	bl	18580 <z_setup_new_thread>
   184a0:	7b6a      	ldrb	r2, [r5, #13]
   184a2:	4606      	mov	r6, r0
   184a4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   184a8:	4628      	mov	r0, r5
   184aa:	736a      	strb	r2, [r5, #13]
   184ac:	f005 fe2a 	bl	1e104 <z_ready_thread>
	z_init_cpu(0);
   184b0:	4620      	mov	r0, r4
   184b2:	f7ff ff6b 	bl	1838c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   184b6:	463a      	mov	r2, r7
   184b8:	4631      	mov	r1, r6
   184ba:	4628      	mov	r0, r5
   184bc:	f7fa fc7a 	bl	12db4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   184c0:	20005400 	.word	0x20005400
   184c4:	e000ed00 	.word	0xe000ed00
   184c8:	200028f0 	.word	0x200028f0
   184cc:	00018341 	.word	0x00018341
   184d0:	20002058 	.word	0x20002058
   184d4:	000205d4 	.word	0x000205d4
   184d8:	20005580 	.word	0x20005580

000184dc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   184dc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   184de:	4c06      	ldr	r4, [pc, #24]	; (184f8 <statics_init+0x1c>)
   184e0:	4d06      	ldr	r5, [pc, #24]	; (184fc <statics_init+0x20>)
   184e2:	42ac      	cmp	r4, r5
   184e4:	d301      	bcc.n	184ea <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   184e6:	2000      	movs	r0, #0
   184e8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   184ea:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   184ee:	4620      	mov	r0, r4
   184f0:	f005 fb58 	bl	1dba4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   184f4:	3414      	adds	r4, #20
   184f6:	e7f4      	b.n	184e2 <statics_init+0x6>
   184f8:	2000057c 	.word	0x2000057c
   184fc:	2000057c 	.word	0x2000057c

00018500 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   18500:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18502:	4c06      	ldr	r4, [pc, #24]	; (1851c <init_mem_slab_module+0x1c>)
   18504:	4d06      	ldr	r5, [pc, #24]	; (18520 <init_mem_slab_module+0x20>)
	int rc = 0;
   18506:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18508:	42ac      	cmp	r4, r5
   1850a:	d300      	bcc.n	1850e <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1850c:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1850e:	4620      	mov	r0, r4
   18510:	f005 fbba 	bl	1dc88 <create_free_list>
		if (rc < 0) {
   18514:	2800      	cmp	r0, #0
   18516:	dbf9      	blt.n	1850c <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18518:	341c      	adds	r4, #28
   1851a:	e7f5      	b.n	18508 <init_mem_slab_module+0x8>
   1851c:	2000057c 	.word	0x2000057c
   18520:	2000057c 	.word	0x2000057c

00018524 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18524:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18526:	460c      	mov	r4, r1
	__asm__ volatile(
   18528:	f04f 0540 	mov.w	r5, #64	; 0x40
   1852c:	f3ef 8111 	mrs	r1, BASEPRI
   18530:	f385 8812 	msr	BASEPRI_MAX, r5
   18534:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   18538:	6945      	ldr	r5, [r0, #20]
   1853a:	b15d      	cbz	r5, 18554 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1853c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1853e:	682b      	ldr	r3, [r5, #0]
   18540:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   18542:	6983      	ldr	r3, [r0, #24]
   18544:	3301      	adds	r3, #1
   18546:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18548:	2000      	movs	r0, #0
	__asm__ volatile(
   1854a:	f381 8811 	msr	BASEPRI, r1
   1854e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   18552:	e011      	b.n	18578 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   18554:	ea52 0603 	orrs.w	r6, r2, r3
   18558:	d103      	bne.n	18562 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1855a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1855c:	f06f 000b 	mvn.w	r0, #11
   18560:	e7f3      	b.n	1854a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   18562:	e9cd 2300 	strd	r2, r3, [sp]
   18566:	4602      	mov	r2, r0
   18568:	3008      	adds	r0, #8
   1856a:	f000 fcc3 	bl	18ef4 <z_pend_curr>
		if (result == 0) {
   1856e:	b918      	cbnz	r0, 18578 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   18570:	4b02      	ldr	r3, [pc, #8]	; (1857c <k_mem_slab_alloc+0x58>)
   18572:	689b      	ldr	r3, [r3, #8]
   18574:	695b      	ldr	r3, [r3, #20]
   18576:	6023      	str	r3, [r4, #0]
}
   18578:	b002      	add	sp, #8
   1857a:	bd70      	pop	{r4, r5, r6, pc}
   1857c:	200028f0 	.word	0x200028f0

00018580 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   18580:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   18584:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   18586:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18588:	2604      	movs	r6, #4
   1858a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1858c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1858e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   18590:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   18594:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18596:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   18598:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1859c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1859e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   185a0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   185a4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   185a6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   185aa:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   185ae:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   185b0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   185b2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   185b4:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   185b8:	9202      	str	r2, [sp, #8]
   185ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   185bc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   185be:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   185c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   185c2:	9200      	str	r2, [sp, #0]
   185c4:	4642      	mov	r2, r8
{
   185c6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   185c8:	f7fa fbc2 	bl	12d50 <arch_new_thread>
	if (!_current) {
   185cc:	4b04      	ldr	r3, [pc, #16]	; (185e0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   185ce:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   185d0:	689b      	ldr	r3, [r3, #8]
   185d2:	b103      	cbz	r3, 185d6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   185d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   185d6:	6763      	str	r3, [r4, #116]	; 0x74
}
   185d8:	4640      	mov	r0, r8
   185da:	b004      	add	sp, #16
   185dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   185e0:	200028f0 	.word	0x200028f0

000185e4 <z_impl_k_thread_create>:
{
   185e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   185e6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   185e8:	2500      	movs	r5, #0
   185ea:	9505      	str	r5, [sp, #20]
   185ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
   185ee:	9504      	str	r5, [sp, #16]
   185f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   185f2:	9503      	str	r5, [sp, #12]
   185f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   185f6:	9502      	str	r5, [sp, #8]
{
   185f8:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   185fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   185fe:	9501      	str	r5, [sp, #4]
   18600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18602:	9500      	str	r5, [sp, #0]
{
   18604:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18606:	f7ff ffbb 	bl	18580 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1860a:	f1b6 3fff 	cmp.w	r6, #4294967295
   1860e:	bf08      	it	eq
   18610:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   18614:	d005      	beq.n	18622 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18616:	ea56 0307 	orrs.w	r3, r6, r7
   1861a:	d105      	bne.n	18628 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1861c:	4620      	mov	r0, r4
   1861e:	f000 fcdf 	bl	18fe0 <z_sched_start>
}
   18622:	4620      	mov	r0, r4
   18624:	b007      	add	sp, #28
   18626:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18628:	4903      	ldr	r1, [pc, #12]	; (18638 <z_impl_k_thread_create+0x54>)
   1862a:	463a      	mov	r2, r7
   1862c:	4633      	mov	r3, r6
   1862e:	f104 0018 	add.w	r0, r4, #24
   18632:	f000 fedd 	bl	193f0 <z_add_timeout>
   18636:	e7f4      	b.n	18622 <z_impl_k_thread_create+0x3e>
   18638:	0001e071 	.word	0x0001e071

0001863c <z_init_static_threads>:
{
   1863c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18640:	4c29      	ldr	r4, [pc, #164]	; (186e8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   18642:	4d2a      	ldr	r5, [pc, #168]	; (186ec <z_init_static_threads+0xb0>)
{
   18644:	b087      	sub	sp, #28
   18646:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   18648:	42ae      	cmp	r6, r5
   1864a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1864e:	d30f      	bcc.n	18670 <z_init_static_threads+0x34>
	k_sched_lock();
   18650:	f000 fd16 	bl	19080 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18654:	4c24      	ldr	r4, [pc, #144]	; (186e8 <z_init_static_threads+0xac>)
   18656:	f8df 9098 	ldr.w	r9, [pc, #152]	; 186f0 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
   1865a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1865e:	f240 37e7 	movw	r7, #999	; 0x3e7
   18662:	42ac      	cmp	r4, r5
   18664:	d320      	bcc.n	186a8 <z_init_static_threads+0x6c>
}
   18666:	b007      	add	sp, #28
   18668:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1866c:	f000 bd1c 	b.w	190a8 <k_sched_unlock>
		z_setup_new_thread(
   18670:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18674:	9305      	str	r3, [sp, #20]
   18676:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1867a:	9304      	str	r3, [sp, #16]
   1867c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18680:	9303      	str	r3, [sp, #12]
   18682:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18686:	9302      	str	r3, [sp, #8]
   18688:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1868c:	9301      	str	r3, [sp, #4]
   1868e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18692:	9300      	str	r3, [sp, #0]
   18694:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18698:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1869c:	f7ff ff70 	bl	18580 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   186a0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   186a4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   186a6:	e7ce      	b.n	18646 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   186a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   186aa:	1c5a      	adds	r2, r3, #1
   186ac:	d00d      	beq.n	186ca <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   186ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   186b2:	2100      	movs	r1, #0
   186b4:	4638      	mov	r0, r7
   186b6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   186ba:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   186be:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   186c2:	d104      	bne.n	186ce <z_init_static_threads+0x92>
	z_sched_start(thread);
   186c4:	4640      	mov	r0, r8
   186c6:	f000 fc8b 	bl	18fe0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   186ca:	3430      	adds	r4, #48	; 0x30
   186cc:	e7c9      	b.n	18662 <z_init_static_threads+0x26>
   186ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   186d2:	2300      	movs	r3, #0
   186d4:	f7e7 fd14 	bl	100 <__aeabi_uldivmod>
   186d8:	4602      	mov	r2, r0
   186da:	460b      	mov	r3, r1
   186dc:	f108 0018 	add.w	r0, r8, #24
   186e0:	4649      	mov	r1, r9
   186e2:	f000 fe85 	bl	193f0 <z_add_timeout>
   186e6:	e7f0      	b.n	186ca <z_init_static_threads+0x8e>
   186e8:	0001e920 	.word	0x0001e920
   186ec:	0001e920 	.word	0x0001e920
   186f0:	0001e071 	.word	0x0001e071

000186f4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   186f4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   186f6:	4c0b      	ldr	r4, [pc, #44]	; (18724 <idle+0x30>)
	return !z_sys_post_kernel;
   186f8:	4d0b      	ldr	r5, [pc, #44]	; (18728 <idle+0x34>)
	__asm__ volatile(
   186fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   186fe:	f3ef 8311 	mrs	r3, BASEPRI
   18702:	f382 8812 	msr	BASEPRI_MAX, r2
   18706:	f3bf 8f6f 	isb	sy
   1870a:	f005 fdc1 	bl	1e290 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1870e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   18710:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18712:	b913      	cbnz	r3, 1871a <idle+0x26>
	arch_cpu_idle();
   18714:	f7fa f9c8 	bl	12aa8 <arch_cpu_idle>
}
   18718:	e7ef      	b.n	186fa <idle+0x6>
   1871a:	f7fa f805 	bl	12728 <pm_system_suspend>
   1871e:	2800      	cmp	r0, #0
   18720:	d1eb      	bne.n	186fa <idle+0x6>
   18722:	e7f7      	b.n	18714 <idle+0x20>
   18724:	200028f0 	.word	0x200028f0
   18728:	20003991 	.word	0x20003991

0001872c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1872c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18730:	4604      	mov	r4, r0
   18732:	4617      	mov	r7, r2
   18734:	461e      	mov	r6, r3
   18736:	f04f 0340 	mov.w	r3, #64	; 0x40
   1873a:	f3ef 8811 	mrs	r8, BASEPRI
   1873e:	f383 8812 	msr	BASEPRI_MAX, r3
   18742:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18746:	68c3      	ldr	r3, [r0, #12]
   18748:	4a33      	ldr	r2, [pc, #204]	; (18818 <z_impl_k_mutex_lock+0xec>)
   1874a:	b17b      	cbz	r3, 1876c <z_impl_k_mutex_lock+0x40>
   1874c:	6880      	ldr	r0, [r0, #8]
   1874e:	6891      	ldr	r1, [r2, #8]
   18750:	4288      	cmp	r0, r1
   18752:	d019      	beq.n	18788 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18754:	ea57 0306 	orrs.w	r3, r7, r6
   18758:	d118      	bne.n	1878c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1875a:	f388 8811 	msr	BASEPRI, r8
   1875e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   18762:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   18766:	b002      	add	sp, #8
   18768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1876c:	6891      	ldr	r1, [r2, #8]
   1876e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18772:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   18774:	3301      	adds	r3, #1
   18776:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18778:	6893      	ldr	r3, [r2, #8]
   1877a:	60a3      	str	r3, [r4, #8]
   1877c:	f388 8811 	msr	BASEPRI, r8
   18780:	f3bf 8f6f 	isb	sy
		return 0;
   18784:	2000      	movs	r0, #0
   18786:	e7ee      	b.n	18766 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   18788:	6921      	ldr	r1, [r4, #16]
   1878a:	e7f2      	b.n	18772 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1878c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18790:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   18794:	4299      	cmp	r1, r3
   18796:	bfa8      	it	ge
   18798:	4619      	movge	r1, r3
   1879a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1879e:	4291      	cmp	r1, r2
   187a0:	bfb8      	it	lt
   187a2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   187a4:	428b      	cmp	r3, r1
   187a6:	dd2e      	ble.n	18806 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   187a8:	f005 facf 	bl	1dd4a <adjust_owner_prio.isra.0>
   187ac:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   187ae:	e9cd 7600 	strd	r7, r6, [sp]
   187b2:	481a      	ldr	r0, [pc, #104]	; (1881c <z_impl_k_mutex_lock+0xf0>)
   187b4:	4622      	mov	r2, r4
   187b6:	4641      	mov	r1, r8
   187b8:	f000 fb9c 	bl	18ef4 <z_pend_curr>
	if (got_mutex == 0) {
   187bc:	2800      	cmp	r0, #0
   187be:	d0e1      	beq.n	18784 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   187c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   187c4:	f3ef 8611 	mrs	r6, BASEPRI
   187c8:	f383 8812 	msr	BASEPRI_MAX, r3
   187cc:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   187d0:	68a0      	ldr	r0, [r4, #8]
   187d2:	b1d0      	cbz	r0, 1880a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   187d4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   187d6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   187d8:	429c      	cmp	r4, r3
   187da:	d00a      	beq.n	187f2 <z_impl_k_mutex_lock+0xc6>
   187dc:	b14b      	cbz	r3, 187f2 <z_impl_k_mutex_lock+0xc6>
   187de:	f993 300e 	ldrsb.w	r3, [r3, #14]
   187e2:	4299      	cmp	r1, r3
   187e4:	bfa8      	it	ge
   187e6:	4619      	movge	r1, r3
   187e8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   187ec:	4299      	cmp	r1, r3
   187ee:	bfb8      	it	lt
   187f0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   187f2:	f005 faaa 	bl	1dd4a <adjust_owner_prio.isra.0>
   187f6:	b140      	cbz	r0, 1880a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   187f8:	4808      	ldr	r0, [pc, #32]	; (1881c <z_impl_k_mutex_lock+0xf0>)
   187fa:	4631      	mov	r1, r6
   187fc:	f000 fbde 	bl	18fbc <z_reschedule>
	return -EAGAIN;
   18800:	f06f 000a 	mvn.w	r0, #10
   18804:	e7af      	b.n	18766 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   18806:	2500      	movs	r5, #0
   18808:	e7d1      	b.n	187ae <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1880a:	2d00      	cmp	r5, #0
   1880c:	d1f4      	bne.n	187f8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1880e:	f386 8811 	msr	BASEPRI, r6
   18812:	f3bf 8f6f 	isb	sy
   18816:	e7f3      	b.n	18800 <z_impl_k_mutex_lock+0xd4>
   18818:	200028f0 	.word	0x200028f0
   1881c:	20003992 	.word	0x20003992

00018820 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18820:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   18822:	6883      	ldr	r3, [r0, #8]
{
   18824:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   18826:	b36b      	cbz	r3, 18884 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18828:	4a19      	ldr	r2, [pc, #100]	; (18890 <z_impl_k_mutex_unlock+0x70>)
   1882a:	6892      	ldr	r2, [r2, #8]
   1882c:	4293      	cmp	r3, r2
   1882e:	d12c      	bne.n	1888a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   18830:	68c3      	ldr	r3, [r0, #12]
   18832:	2b01      	cmp	r3, #1
   18834:	d903      	bls.n	1883e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   18836:	3b01      	subs	r3, #1
   18838:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1883a:	2000      	movs	r0, #0
}
   1883c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1883e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18842:	f3ef 8511 	mrs	r5, BASEPRI
   18846:	f383 8812 	msr	BASEPRI_MAX, r3
   1884a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1884e:	6901      	ldr	r1, [r0, #16]
   18850:	6880      	ldr	r0, [r0, #8]
   18852:	f005 fa7a 	bl	1dd4a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18856:	4620      	mov	r0, r4
   18858:	f005 fc8b 	bl	1e172 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1885c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1885e:	b158      	cbz	r0, 18878 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   18860:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18864:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18866:	2200      	movs	r2, #0
   18868:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1886a:	f005 fc4b 	bl	1e104 <z_ready_thread>
		z_reschedule(&lock, key);
   1886e:	4809      	ldr	r0, [pc, #36]	; (18894 <z_impl_k_mutex_unlock+0x74>)
   18870:	4629      	mov	r1, r5
   18872:	f000 fba3 	bl	18fbc <z_reschedule>
   18876:	e7e0      	b.n	1883a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   18878:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1887a:	f385 8811 	msr	BASEPRI, r5
   1887e:	f3bf 8f6f 	isb	sy
   18882:	e7da      	b.n	1883a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   18884:	f06f 0015 	mvn.w	r0, #21
   18888:	e7d8      	b.n	1883c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1888a:	f04f 30ff 	mov.w	r0, #4294967295
   1888e:	e7d5      	b.n	1883c <z_impl_k_mutex_unlock+0x1c>
   18890:	200028f0 	.word	0x200028f0
   18894:	20003992 	.word	0x20003992

00018898 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18898:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1889a:	4611      	mov	r1, r2
	__asm__ volatile(
   1889c:	f04f 0240 	mov.w	r2, #64	; 0x40
   188a0:	f3ef 8511 	mrs	r5, BASEPRI
   188a4:	f382 8812 	msr	BASEPRI_MAX, r2
   188a8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   188ac:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   188ae:	b19c      	cbz	r4, 188d8 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   188b0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   188b2:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   188b4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   188b8:	4294      	cmp	r4, r2
	list->head = node;
   188ba:	6003      	str	r3, [r0, #0]
	list->tail = node;
   188bc:	bf08      	it	eq
   188be:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   188c0:	2101      	movs	r1, #1
   188c2:	4620      	mov	r0, r4
   188c4:	f005 fab6 	bl	1de34 <z_queue_node_peek>
   188c8:	4604      	mov	r4, r0
	__asm__ volatile(
   188ca:	f385 8811 	msr	BASEPRI, r5
   188ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   188d2:	4620      	mov	r0, r4
   188d4:	b003      	add	sp, #12
   188d6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   188d8:	ea51 0203 	orrs.w	r2, r1, r3
   188dc:	d0f5      	beq.n	188ca <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   188de:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   188e2:	e9cd 1300 	strd	r1, r3, [sp]
   188e6:	4610      	mov	r0, r2
   188e8:	4629      	mov	r1, r5
   188ea:	f000 fb03 	bl	18ef4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   188ee:	2800      	cmp	r0, #0
   188f0:	d1ef      	bne.n	188d2 <z_impl_k_queue_get+0x3a>
   188f2:	4b02      	ldr	r3, [pc, #8]	; (188fc <z_impl_k_queue_get+0x64>)
   188f4:	689b      	ldr	r3, [r3, #8]
   188f6:	695c      	ldr	r4, [r3, #20]
   188f8:	e7eb      	b.n	188d2 <z_impl_k_queue_get+0x3a>
   188fa:	bf00      	nop
   188fc:	200028f0 	.word	0x200028f0

00018900 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18900:	b538      	push	{r3, r4, r5, lr}
   18902:	4604      	mov	r4, r0
	__asm__ volatile(
   18904:	f04f 0340 	mov.w	r3, #64	; 0x40
   18908:	f3ef 8511 	mrs	r5, BASEPRI
   1890c:	f383 8812 	msr	BASEPRI_MAX, r3
   18910:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   18914:	f005 fc2d 	bl	1e172 <z_unpend_first_thread>

	if (thread != NULL) {
   18918:	b148      	cbz	r0, 1892e <z_impl_k_sem_give+0x2e>
   1891a:	2200      	movs	r2, #0
   1891c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1891e:	f005 fbf1 	bl	1e104 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18922:	4629      	mov	r1, r5
   18924:	4808      	ldr	r0, [pc, #32]	; (18948 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1892a:	f000 bb47 	b.w	18fbc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1892e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18932:	429a      	cmp	r2, r3
   18934:	bf18      	it	ne
   18936:	3301      	addne	r3, #1
   18938:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1893a:	2102      	movs	r1, #2
   1893c:	f104 0010 	add.w	r0, r4, #16
   18940:	f005 fe58 	bl	1e5f4 <z_handle_obj_poll_events>
}
   18944:	e7ed      	b.n	18922 <z_impl_k_sem_give+0x22>
   18946:	bf00      	nop
   18948:	20003992 	.word	0x20003992

0001894c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1894c:	b513      	push	{r0, r1, r4, lr}
   1894e:	f04f 0440 	mov.w	r4, #64	; 0x40
   18952:	f3ef 8111 	mrs	r1, BASEPRI
   18956:	f384 8812 	msr	BASEPRI_MAX, r4
   1895a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1895e:	6884      	ldr	r4, [r0, #8]
   18960:	b144      	cbz	r4, 18974 <z_impl_k_sem_take+0x28>
		sem->count--;
   18962:	3c01      	subs	r4, #1
   18964:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   18966:	f381 8811 	msr	BASEPRI, r1
   1896a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1896e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18970:	b002      	add	sp, #8
   18972:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18974:	ea52 0403 	orrs.w	r4, r2, r3
   18978:	d106      	bne.n	18988 <z_impl_k_sem_take+0x3c>
   1897a:	f381 8811 	msr	BASEPRI, r1
   1897e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18982:	f06f 000f 	mvn.w	r0, #15
   18986:	e7f3      	b.n	18970 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18988:	e9cd 2300 	strd	r2, r3, [sp]
   1898c:	4602      	mov	r2, r0
   1898e:	4802      	ldr	r0, [pc, #8]	; (18998 <z_impl_k_sem_take+0x4c>)
   18990:	f000 fab0 	bl	18ef4 <z_pend_curr>
	return ret;
   18994:	e7ec      	b.n	18970 <z_impl_k_sem_take+0x24>
   18996:	bf00      	nop
   18998:	20003992 	.word	0x20003992

0001899c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   189a0:	4e4a      	ldr	r6, [pc, #296]	; (18acc <work_queue_main+0x130>)
   189a2:	b085      	sub	sp, #20
   189a4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   189a6:	f04f 38ff 	mov.w	r8, #4294967295
   189aa:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   189ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   189b2:	f3ef 8711 	mrs	r7, BASEPRI
   189b6:	f383 8812 	msr	BASEPRI_MAX, r3
   189ba:	f3bf 8f6f 	isb	sy
   189be:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   189c2:	b98d      	cbnz	r5, 189e8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   189c4:	2102      	movs	r1, #2
   189c6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   189ca:	f005 fa70 	bl	1deae <flag_test_and_clear>
   189ce:	2800      	cmp	r0, #0
   189d0:	d143      	bne.n	18a5a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   189d2:	2300      	movs	r3, #0
   189d4:	e9cd 8900 	strd	r8, r9, [sp]
   189d8:	9302      	str	r3, [sp, #8]
   189da:	f104 0288 	add.w	r2, r4, #136	; 0x88
   189de:	4639      	mov	r1, r7
   189e0:	483b      	ldr	r0, [pc, #236]	; (18ad0 <work_queue_main+0x134>)
   189e2:	f000 fc8b 	bl	192fc <z_sched_wait>
			continue;
   189e6:	e7e2      	b.n	189ae <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   189e8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   189ec:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   189ee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   189f2:	4295      	cmp	r5, r2
	list->tail = node;
   189f4:	bf08      	it	eq
   189f6:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   189fa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   189fe:	f043 0302 	orr.w	r3, r3, #2
   18a02:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   18a06:	68eb      	ldr	r3, [r5, #12]
   18a08:	f023 0304 	bic.w	r3, r3, #4
   18a0c:	f043 0301 	orr.w	r3, r3, #1
   18a10:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   18a12:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   18a14:	f387 8811 	msr	BASEPRI, r7
   18a18:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   18a1c:	4628      	mov	r0, r5
   18a1e:	4798      	blx	r3
	__asm__ volatile(
   18a20:	f04f 0340 	mov.w	r3, #64	; 0x40
   18a24:	f3ef 8b11 	mrs	fp, BASEPRI
   18a28:	f383 8812 	msr	BASEPRI_MAX, r3
   18a2c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18a30:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18a32:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   18a34:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18a38:	d419      	bmi.n	18a6e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   18a3a:	60ea      	str	r2, [r5, #12]
   18a3c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18a40:	f023 0302 	bic.w	r3, r3, #2
   18a44:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   18a48:	f38b 8811 	msr	BASEPRI, fp
   18a4c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   18a50:	05db      	lsls	r3, r3, #23
   18a52:	d4ac      	bmi.n	189ae <work_queue_main+0x12>
	z_impl_k_yield();
   18a54:	f000 fb50 	bl	190f8 <z_impl_k_yield>
}
   18a58:	e7a9      	b.n	189ae <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   18a5a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18a5e:	2200      	movs	r2, #0
   18a60:	2101      	movs	r1, #1
   18a62:	4628      	mov	r0, r5
   18a64:	f005 fbdb 	bl	1e21e <z_sched_wake>
   18a68:	2800      	cmp	r0, #0
   18a6a:	d1f8      	bne.n	18a5e <work_queue_main+0xc2>
   18a6c:	e7b1      	b.n	189d2 <work_queue_main+0x36>
	return list->head;
   18a6e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   18a70:	f023 0303 	bic.w	r3, r3, #3
   18a74:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18a76:	2800      	cmp	r0, #0
   18a78:	d0e0      	beq.n	18a3c <work_queue_main+0xa0>
	return node->next;
   18a7a:	2700      	movs	r7, #0
   18a7c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   18a80:	463b      	mov	r3, r7
   18a82:	2800      	cmp	r0, #0
   18a84:	d0da      	beq.n	18a3c <work_queue_main+0xa0>
		if (wc->work == work) {
   18a86:	6842      	ldr	r2, [r0, #4]
   18a88:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   18a8a:	4601      	mov	r1, r0
		if (wc->work == work) {
   18a8c:	d10c      	bne.n	18aa8 <work_queue_main+0x10c>
	return node->next;
   18a8e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   18a90:	b99f      	cbnz	r7, 18aba <work_queue_main+0x11e>
   18a92:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   18a94:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   18a96:	4282      	cmp	r2, r0
   18a98:	d100      	bne.n	18a9c <work_queue_main+0x100>
	list->tail = node;
   18a9a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   18a9c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   18aa0:	f7ff ff2e 	bl	18900 <z_impl_k_sem_give>
}
   18aa4:	4639      	mov	r1, r7
   18aa6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18aa8:	f1ba 0f00 	cmp.w	sl, #0
   18aac:	d00b      	beq.n	18ac6 <work_queue_main+0x12a>
	return node->next;
   18aae:	f8da 2000 	ldr.w	r2, [sl]
   18ab2:	4650      	mov	r0, sl
   18ab4:	460f      	mov	r7, r1
   18ab6:	4692      	mov	sl, r2
   18ab8:	e7e3      	b.n	18a82 <work_queue_main+0xe6>
	parent->next = child;
   18aba:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   18abc:	6872      	ldr	r2, [r6, #4]
   18abe:	4282      	cmp	r2, r0
	list->tail = node;
   18ac0:	bf08      	it	eq
   18ac2:	6077      	streq	r7, [r6, #4]
}
   18ac4:	e7ea      	b.n	18a9c <work_queue_main+0x100>
   18ac6:	4652      	mov	r2, sl
   18ac8:	e7f3      	b.n	18ab2 <work_queue_main+0x116>
   18aca:	bf00      	nop
   18acc:	20002918 	.word	0x20002918
   18ad0:	20003992 	.word	0x20003992

00018ad4 <submit_to_queue_locked>:
{
   18ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   18ad6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18ad8:	079a      	lsls	r2, r3, #30
{
   18ada:	4604      	mov	r4, r0
   18adc:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18ade:	f3c3 0640 	ubfx	r6, r3, #1, #1
   18ae2:	d42c      	bmi.n	18b3e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   18ae4:	075b      	lsls	r3, r3, #29
   18ae6:	d41a      	bmi.n	18b1e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   18ae8:	680b      	ldr	r3, [r1, #0]
   18aea:	b90b      	cbnz	r3, 18af0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18aec:	6883      	ldr	r3, [r0, #8]
   18aee:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   18af0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18af2:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   18af4:	bf44      	itt	mi
   18af6:	68a3      	ldrmi	r3, [r4, #8]
   18af8:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   18afa:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   18afc:	bf4c      	ite	mi
   18afe:	2602      	movmi	r6, #2
		ret = 1;
   18b00:	2601      	movpl	r6, #1
	if (queue == NULL) {
   18b02:	2d00      	cmp	r5, #0
   18b04:	d03a      	beq.n	18b7c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18b06:	4b1f      	ldr	r3, [pc, #124]	; (18b84 <submit_to_queue_locked+0xb0>)
   18b08:	689b      	ldr	r3, [r3, #8]
   18b0a:	42ab      	cmp	r3, r5
   18b0c:	d00a      	beq.n	18b24 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   18b0e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18b12:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18b14:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18b18:	d414      	bmi.n	18b44 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   18b1a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   18b1e:	2300      	movs	r3, #0
   18b20:	603b      	str	r3, [r7, #0]
	return ret;
   18b22:	e025      	b.n	18b70 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18b24:	f005 f8fd 	bl	1dd22 <k_is_in_isr>
   18b28:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   18b2c:	2800      	cmp	r0, #0
   18b2e:	d1f0      	bne.n	18b12 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18b30:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18b32:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18b36:	d5f0      	bpl.n	18b1a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   18b38:	b152      	cbz	r2, 18b50 <submit_to_queue_locked+0x7c>
   18b3a:	075b      	lsls	r3, r3, #29
   18b3c:	d408      	bmi.n	18b50 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   18b3e:	f06f 060f 	mvn.w	r6, #15
   18b42:	e7ec      	b.n	18b1e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   18b44:	2a00      	cmp	r2, #0
   18b46:	d1fa      	bne.n	18b3e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   18b48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   18b4c:	2b00      	cmp	r3, #0
   18b4e:	d1f6      	bne.n	18b3e <submit_to_queue_locked+0x6a>
	parent->next = child;
   18b50:	2300      	movs	r3, #0
   18b52:	6023      	str	r3, [r4, #0]
	return list->tail;
   18b54:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   18b58:	b963      	cbnz	r3, 18b74 <submit_to_queue_locked+0xa0>
	list->head = node;
   18b5a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   18b5e:	4628      	mov	r0, r5
   18b60:	f005 f9be 	bl	1dee0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18b64:	68e3      	ldr	r3, [r4, #12]
   18b66:	f043 0304 	orr.w	r3, r3, #4
   18b6a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18b6c:	683b      	ldr	r3, [r7, #0]
   18b6e:	60a3      	str	r3, [r4, #8]
}
   18b70:	4630      	mov	r0, r6
   18b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18b74:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18b76:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   18b7a:	e7f0      	b.n	18b5e <submit_to_queue_locked+0x8a>
		return -EINVAL;
   18b7c:	f06f 0615 	mvn.w	r6, #21
   18b80:	e7cd      	b.n	18b1e <submit_to_queue_locked+0x4a>
   18b82:	bf00      	nop
   18b84:	200028f0 	.word	0x200028f0

00018b88 <k_work_submit>:
{
   18b88:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   18b8a:	4801      	ldr	r0, [pc, #4]	; (18b90 <k_work_submit+0x8>)
   18b8c:	f005 ba1e 	b.w	1dfcc <k_work_submit_to_queue>
   18b90:	200020e0 	.word	0x200020e0

00018b94 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   18b94:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b96:	b089      	sub	sp, #36	; 0x24
   18b98:	4604      	mov	r4, r0
	list->head = NULL;
   18b9a:	2000      	movs	r0, #0
	list->tail = NULL;
   18b9c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   18ba0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18ba2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   18ba6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   18baa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18bae:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   18bb2:	b31d      	cbz	r5, 18bfc <k_work_queue_start+0x68>
   18bb4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   18bb6:	2800      	cmp	r0, #0
   18bb8:	f240 1001 	movw	r0, #257	; 0x101
   18bbc:	bf08      	it	eq
   18bbe:	2001      	moveq	r0, #1
	*flagp = flags;
   18bc0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18bc4:	2000      	movs	r0, #0
   18bc6:	f04f 36ff 	mov.w	r6, #4294967295
   18bca:	f04f 37ff 	mov.w	r7, #4294967295
   18bce:	e9cd 3003 	strd	r3, r0, [sp, #12]
   18bd2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18bd6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18bda:	4b09      	ldr	r3, [pc, #36]	; (18c00 <k_work_queue_start+0x6c>)
   18bdc:	9400      	str	r4, [sp, #0]
   18bde:	4620      	mov	r0, r4
   18be0:	f7ff fd00 	bl	185e4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   18be4:	b125      	cbz	r5, 18bf0 <k_work_queue_start+0x5c>
   18be6:	6829      	ldr	r1, [r5, #0]
   18be8:	b111      	cbz	r1, 18bf0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   18bea:	4620      	mov	r0, r4
   18bec:	f005 f89f 	bl	1dd2e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18bf0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   18bf2:	b009      	add	sp, #36	; 0x24
   18bf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18bf8:	f005 b89e 	b.w	1dd38 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   18bfc:	2001      	movs	r0, #1
   18bfe:	e7df      	b.n	18bc0 <k_work_queue_start+0x2c>
   18c00:	0001899d 	.word	0x0001899d

00018c04 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   18c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c06:	460c      	mov	r4, r1
   18c08:	9001      	str	r0, [sp, #4]
   18c0a:	4616      	mov	r6, r2
   18c0c:	461d      	mov	r5, r3
	__asm__ volatile(
   18c0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c12:	f3ef 8711 	mrs	r7, BASEPRI
   18c16:	f383 8812 	msr	BASEPRI_MAX, r3
   18c1a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   18c1e:	4608      	mov	r0, r1
   18c20:	f005 f950 	bl	1dec4 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18c24:	ea55 0306 	orrs.w	r3, r5, r6
   18c28:	d109      	bne.n	18c3e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   18c2a:	a901      	add	r1, sp, #4
   18c2c:	4620      	mov	r0, r4
   18c2e:	f7ff ff51 	bl	18ad4 <submit_to_queue_locked>
	__asm__ volatile(
   18c32:	f387 8811 	msr	BASEPRI, r7
   18c36:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   18c3a:	b003      	add	sp, #12
   18c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   18c3e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18c40:	4906      	ldr	r1, [pc, #24]	; (18c5c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   18c42:	f043 0308 	orr.w	r3, r3, #8
   18c46:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   18c48:	9b01      	ldr	r3, [sp, #4]
   18c4a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18c4c:	f104 0010 	add.w	r0, r4, #16
   18c50:	4632      	mov	r2, r6
   18c52:	462b      	mov	r3, r5
   18c54:	f000 fbcc 	bl	193f0 <z_add_timeout>
	return ret;
   18c58:	2001      	movs	r0, #1
   18c5a:	e7ea      	b.n	18c32 <k_work_reschedule_for_queue+0x2e>
   18c5c:	0001df55 	.word	0x0001df55

00018c60 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   18c60:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   18c62:	4801      	ldr	r0, [pc, #4]	; (18c68 <k_work_reschedule+0x8>)
   18c64:	f7ff bfce 	b.w	18c04 <k_work_reschedule_for_queue>
   18c68:	200020e0 	.word	0x200020e0

00018c6c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   18c6c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   18c6e:	4d07      	ldr	r5, [pc, #28]	; (18c8c <z_reset_time_slice+0x20>)
   18c70:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   18c72:	b154      	cbz	r4, 18c8a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   18c74:	f7fd ff1e 	bl	16ab4 <sys_clock_elapsed>
   18c78:	4b05      	ldr	r3, [pc, #20]	; (18c90 <z_reset_time_slice+0x24>)
   18c7a:	4404      	add	r4, r0
   18c7c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   18c7e:	6828      	ldr	r0, [r5, #0]
   18c80:	2100      	movs	r1, #0
	}
}
   18c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   18c86:	f005 bb13 	b.w	1e2b0 <z_set_timeout_expiry>
}
   18c8a:	bd38      	pop	{r3, r4, r5, pc}
   18c8c:	20002928 	.word	0x20002928
   18c90:	200028f0 	.word	0x200028f0

00018c94 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   18c94:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   18c96:	4d0d      	ldr	r5, [pc, #52]	; (18ccc <update_cache+0x38>)
   18c98:	462b      	mov	r3, r5
   18c9a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c9e:	429c      	cmp	r4, r3
   18ca0:	d000      	beq.n	18ca4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   18ca2:	b904      	cbnz	r4, 18ca6 <update_cache+0x12>
   18ca4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   18ca6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   18ca8:	b938      	cbnz	r0, 18cba <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   18caa:	7b5a      	ldrb	r2, [r3, #13]
   18cac:	06d2      	lsls	r2, r2, #27
   18cae:	d104      	bne.n	18cba <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18cb0:	69a2      	ldr	r2, [r4, #24]
   18cb2:	b912      	cbnz	r2, 18cba <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   18cb4:	89da      	ldrh	r2, [r3, #14]
   18cb6:	2a7f      	cmp	r2, #127	; 0x7f
   18cb8:	d805      	bhi.n	18cc6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   18cba:	429c      	cmp	r4, r3
   18cbc:	d002      	beq.n	18cc4 <update_cache+0x30>
			z_reset_time_slice(thread);
   18cbe:	4620      	mov	r0, r4
   18cc0:	f7ff ffd4 	bl	18c6c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   18cc4:	4623      	mov	r3, r4
   18cc6:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   18cc8:	bd38      	pop	{r3, r4, r5, pc}
   18cca:	bf00      	nop
   18ccc:	200028f0 	.word	0x200028f0

00018cd0 <move_thread_to_end_of_prio_q>:
{
   18cd0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18cd2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18cd6:	7b43      	ldrb	r3, [r0, #13]
   18cd8:	2a00      	cmp	r2, #0
{
   18cda:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18cdc:	da04      	bge.n	18ce8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18ce2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   18ce4:	f005 f9a9 	bl	1e03a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   18ce8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   18cea:	4a15      	ldr	r2, [pc, #84]	; (18d40 <move_thread_to_end_of_prio_q+0x70>)
   18cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18cf0:	4610      	mov	r0, r2
   18cf2:	734b      	strb	r3, [r1, #13]
   18cf4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   18cf8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18cfa:	4283      	cmp	r3, r0
   18cfc:	bf08      	it	eq
   18cfe:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d00:	b923      	cbnz	r3, 18d0c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   18d02:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   18d06:	6021      	str	r1, [r4, #0]
	list->tail = node;
   18d08:	6251      	str	r1, [r2, #36]	; 0x24
}
   18d0a:	e00c      	b.n	18d26 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   18d0c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   18d10:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   18d14:	42b5      	cmp	r5, r6
   18d16:	d00e      	beq.n	18d36 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18d18:	42ae      	cmp	r6, r5
   18d1a:	dd0c      	ble.n	18d36 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   18d1c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   18d1e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   18d22:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   18d24:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   18d26:	6890      	ldr	r0, [r2, #8]
   18d28:	1a43      	subs	r3, r0, r1
   18d2a:	4258      	negs	r0, r3
}
   18d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18d30:	4158      	adcs	r0, r3
   18d32:	f7ff bfaf 	b.w	18c94 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18d36:	429c      	cmp	r4, r3
   18d38:	d0e3      	beq.n	18d02 <move_thread_to_end_of_prio_q+0x32>
   18d3a:	681b      	ldr	r3, [r3, #0]
   18d3c:	e7e0      	b.n	18d00 <move_thread_to_end_of_prio_q+0x30>
   18d3e:	bf00      	nop
   18d40:	200028f0 	.word	0x200028f0

00018d44 <ready_thread>:
{
   18d44:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18d46:	f990 300d 	ldrsb.w	r3, [r0, #13]
   18d4a:	7b42      	ldrb	r2, [r0, #13]
   18d4c:	2b00      	cmp	r3, #0
   18d4e:	db29      	blt.n	18da4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18d50:	06d3      	lsls	r3, r2, #27
   18d52:	d127      	bne.n	18da4 <ready_thread+0x60>
	return node->next != NULL;
   18d54:	6983      	ldr	r3, [r0, #24]
   18d56:	bb2b      	cbnz	r3, 18da4 <ready_thread+0x60>
	return list->head == list;
   18d58:	4913      	ldr	r1, [pc, #76]	; (18da8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   18d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   18d5e:	7342      	strb	r2, [r0, #13]
   18d60:	460a      	mov	r2, r1
   18d62:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d66:	4294      	cmp	r4, r2
   18d68:	bf18      	it	ne
   18d6a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   18d6c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d6e:	b923      	cbnz	r3, 18d7a <ready_thread+0x36>
	node->prev = tail;
   18d70:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   18d74:	6020      	str	r0, [r4, #0]
	list->tail = node;
   18d76:	6248      	str	r0, [r1, #36]	; 0x24
}
   18d78:	e00c      	b.n	18d94 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   18d7a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18d7e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   18d82:	42b5      	cmp	r5, r6
   18d84:	d00a      	beq.n	18d9c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18d86:	42ae      	cmp	r6, r5
   18d88:	dd08      	ble.n	18d9c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   18d8a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18d8c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   18d90:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18d92:	6058      	str	r0, [r3, #4]
}
   18d94:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   18d96:	2000      	movs	r0, #0
   18d98:	f7ff bf7c 	b.w	18c94 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18d9c:	42a3      	cmp	r3, r4
   18d9e:	d0e7      	beq.n	18d70 <ready_thread+0x2c>
   18da0:	681b      	ldr	r3, [r3, #0]
   18da2:	e7e4      	b.n	18d6e <ready_thread+0x2a>
}
   18da4:	bc70      	pop	{r4, r5, r6}
   18da6:	4770      	bx	lr
   18da8:	200028f0 	.word	0x200028f0

00018dac <unready_thread>:
{
   18dac:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   18dae:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18db2:	7b43      	ldrb	r3, [r0, #13]
   18db4:	2a00      	cmp	r2, #0
{
   18db6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18db8:	da04      	bge.n	18dc4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18dbe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18dc0:	f005 f93b 	bl	1e03a <sys_dlist_remove>
	update_cache(thread == _current);
   18dc4:	4b04      	ldr	r3, [pc, #16]	; (18dd8 <unready_thread+0x2c>)
   18dc6:	6898      	ldr	r0, [r3, #8]
   18dc8:	1a43      	subs	r3, r0, r1
   18dca:	4258      	negs	r0, r3
   18dcc:	4158      	adcs	r0, r3
}
   18dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   18dd2:	f7ff bf5f 	b.w	18c94 <update_cache>
   18dd6:	bf00      	nop
   18dd8:	200028f0 	.word	0x200028f0

00018ddc <pend_locked>:
{
   18ddc:	b570      	push	{r4, r5, r6, lr}
   18dde:	4615      	mov	r5, r2
   18de0:	461c      	mov	r4, r3
   18de2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   18de4:	f005 f966 	bl	1e0b4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18de8:	f1b4 3fff 	cmp.w	r4, #4294967295
   18dec:	bf08      	it	eq
   18dee:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   18df2:	d008      	beq.n	18e06 <pend_locked+0x2a>
   18df4:	462a      	mov	r2, r5
   18df6:	4623      	mov	r3, r4
   18df8:	f106 0018 	add.w	r0, r6, #24
   18dfc:	4902      	ldr	r1, [pc, #8]	; (18e08 <pend_locked+0x2c>)
}
   18dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18e02:	f000 baf5 	b.w	193f0 <z_add_timeout>
   18e06:	bd70      	pop	{r4, r5, r6, pc}
   18e08:	0001e071 	.word	0x0001e071

00018e0c <k_sched_time_slice_set>:
{
   18e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e0e:	4604      	mov	r4, r0
   18e10:	460d      	mov	r5, r1
	__asm__ volatile(
   18e12:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e16:	f3ef 8711 	mrs	r7, BASEPRI
   18e1a:	f383 8812 	msr	BASEPRI_MAX, r3
   18e1e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   18e22:	2600      	movs	r6, #0
   18e24:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   18e28:	f240 30e7 	movw	r0, #999	; 0x3e7
   18e2c:	4631      	mov	r1, r6
   18e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18e32:	2300      	movs	r3, #0
   18e34:	fbe4 010c 	umlal	r0, r1, r4, ip
   18e38:	f7e7 f962 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   18e3c:	42b4      	cmp	r4, r6
   18e3e:	dd02      	ble.n	18e46 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   18e40:	2802      	cmp	r0, #2
   18e42:	bfb8      	it	lt
   18e44:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   18e46:	4a07      	ldr	r2, [pc, #28]	; (18e64 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   18e48:	4b07      	ldr	r3, [pc, #28]	; (18e68 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   18e4a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   18e4c:	4a07      	ldr	r2, [pc, #28]	; (18e6c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   18e4e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   18e50:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   18e52:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   18e54:	f7ff ff0a 	bl	18c6c <z_reset_time_slice>
	__asm__ volatile(
   18e58:	f387 8811 	msr	BASEPRI, r7
   18e5c:	f3bf 8f6f 	isb	sy
}
   18e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18e62:	bf00      	nop
   18e64:	20002928 	.word	0x20002928
   18e68:	200028f0 	.word	0x200028f0
   18e6c:	20002924 	.word	0x20002924

00018e70 <z_time_slice>:
{
   18e70:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18e72:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e76:	f3ef 8511 	mrs	r5, BASEPRI
   18e7a:	f383 8812 	msr	BASEPRI_MAX, r3
   18e7e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   18e82:	4b17      	ldr	r3, [pc, #92]	; (18ee0 <z_time_slice+0x70>)
   18e84:	4a17      	ldr	r2, [pc, #92]	; (18ee4 <z_time_slice+0x74>)
   18e86:	689c      	ldr	r4, [r3, #8]
   18e88:	6811      	ldr	r1, [r2, #0]
   18e8a:	428c      	cmp	r4, r1
   18e8c:	d107      	bne.n	18e9e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   18e8e:	4620      	mov	r0, r4
   18e90:	f7ff feec 	bl	18c6c <z_reset_time_slice>
	__asm__ volatile(
   18e94:	f385 8811 	msr	BASEPRI, r5
   18e98:	f3bf 8f6f 	isb	sy
}
   18e9c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   18e9e:	2100      	movs	r1, #0
   18ea0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   18ea2:	4a11      	ldr	r2, [pc, #68]	; (18ee8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   18ea4:	6812      	ldr	r2, [r2, #0]
   18ea6:	b1c2      	cbz	r2, 18eda <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18ea8:	89e2      	ldrh	r2, [r4, #14]
   18eaa:	2a7f      	cmp	r2, #127	; 0x7f
   18eac:	d815      	bhi.n	18eda <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   18eae:	7b62      	ldrb	r2, [r4, #13]
   18eb0:	06d2      	lsls	r2, r2, #27
   18eb2:	d112      	bne.n	18eda <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18eb4:	4a0d      	ldr	r2, [pc, #52]	; (18eec <z_time_slice+0x7c>)
   18eb6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   18eba:	6812      	ldr	r2, [r2, #0]
   18ebc:	4291      	cmp	r1, r2
   18ebe:	db0c      	blt.n	18eda <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18ec0:	4a0b      	ldr	r2, [pc, #44]	; (18ef0 <z_time_slice+0x80>)
   18ec2:	4294      	cmp	r4, r2
   18ec4:	d009      	beq.n	18eda <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   18ec6:	691a      	ldr	r2, [r3, #16]
   18ec8:	4282      	cmp	r2, r0
   18eca:	dc03      	bgt.n	18ed4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   18ecc:	4620      	mov	r0, r4
   18ece:	f7ff feff 	bl	18cd0 <move_thread_to_end_of_prio_q>
   18ed2:	e7dc      	b.n	18e8e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   18ed4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   18ed6:	611a      	str	r2, [r3, #16]
   18ed8:	e7dc      	b.n	18e94 <z_time_slice+0x24>
   18eda:	2200      	movs	r2, #0
   18edc:	e7fb      	b.n	18ed6 <z_time_slice+0x66>
   18ede:	bf00      	nop
   18ee0:	200028f0 	.word	0x200028f0
   18ee4:	20002920 	.word	0x20002920
   18ee8:	20002928 	.word	0x20002928
   18eec:	20002924 	.word	0x20002924
   18ef0:	20001fd8 	.word	0x20001fd8

00018ef4 <z_pend_curr>:
{
   18ef4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   18ef6:	480c      	ldr	r0, [pc, #48]	; (18f28 <z_pend_curr+0x34>)
   18ef8:	4d0c      	ldr	r5, [pc, #48]	; (18f2c <z_pend_curr+0x38>)
   18efa:	6886      	ldr	r6, [r0, #8]
   18efc:	602e      	str	r6, [r5, #0]
{
   18efe:	460c      	mov	r4, r1
   18f00:	4611      	mov	r1, r2
   18f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   18f06:	f04f 0640 	mov.w	r6, #64	; 0x40
   18f0a:	f3ef 8511 	mrs	r5, BASEPRI
   18f0e:	f386 8812 	msr	BASEPRI_MAX, r6
   18f12:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   18f16:	6880      	ldr	r0, [r0, #8]
   18f18:	f7ff ff60 	bl	18ddc <pend_locked>
	ret = arch_swap(key);
   18f1c:	4620      	mov	r0, r4
}
   18f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18f22:	f7f9 bec1 	b.w	12ca8 <arch_swap>
   18f26:	bf00      	nop
   18f28:	200028f0 	.word	0x200028f0
   18f2c:	20002920 	.word	0x20002920

00018f30 <z_set_prio>:
{
   18f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f32:	4604      	mov	r4, r0
   18f34:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f38:	f3ef 8611 	mrs	r6, BASEPRI
   18f3c:	f383 8812 	msr	BASEPRI_MAX, r3
   18f40:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   18f44:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18f46:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   18f48:	b249      	sxtb	r1, r1
   18f4a:	d119      	bne.n	18f80 <z_set_prio+0x50>
	return node->next != NULL;
   18f4c:	6985      	ldr	r5, [r0, #24]
   18f4e:	b9bd      	cbnz	r5, 18f80 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18f54:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18f56:	f005 f870 	bl	1e03a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   18f5a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   18f5c:	4a16      	ldr	r2, [pc, #88]	; (18fb8 <z_set_prio+0x88>)
				thread->base.prio = prio;
   18f5e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   18f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18f64:	7343      	strb	r3, [r0, #13]
   18f66:	4613      	mov	r3, r2
   18f68:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f6c:	4298      	cmp	r0, r3
   18f6e:	bf18      	it	ne
   18f70:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   18f72:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18f74:	b95d      	cbnz	r5, 18f8e <z_set_prio+0x5e>
	node->prev = tail;
   18f76:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   18f7a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   18f7c:	6254      	str	r4, [r2, #36]	; 0x24
}
   18f7e:	e011      	b.n	18fa4 <z_set_prio+0x74>
			thread->base.prio = prio;
   18f80:	73a1      	strb	r1, [r4, #14]
   18f82:	2000      	movs	r0, #0
	__asm__ volatile(
   18f84:	f386 8811 	msr	BASEPRI, r6
   18f88:	f3bf 8f6f 	isb	sy
}
   18f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   18f8e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   18f92:	42b9      	cmp	r1, r7
   18f94:	d00b      	beq.n	18fae <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18f96:	428f      	cmp	r7, r1
   18f98:	dd09      	ble.n	18fae <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   18f9a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   18f9c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   18fa0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   18fa2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   18fa4:	2001      	movs	r0, #1
   18fa6:	f7ff fe75 	bl	18c94 <update_cache>
   18faa:	2001      	movs	r0, #1
   18fac:	e7ea      	b.n	18f84 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   18fae:	42a8      	cmp	r0, r5
   18fb0:	d0e1      	beq.n	18f76 <z_set_prio+0x46>
   18fb2:	682d      	ldr	r5, [r5, #0]
   18fb4:	e7de      	b.n	18f74 <z_set_prio+0x44>
   18fb6:	bf00      	nop
   18fb8:	200028f0 	.word	0x200028f0

00018fbc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18fbc:	b949      	cbnz	r1, 18fd2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18fbe:	f3ef 8005 	mrs	r0, IPSR
   18fc2:	b930      	cbnz	r0, 18fd2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   18fc4:	4b05      	ldr	r3, [pc, #20]	; (18fdc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   18fc6:	69da      	ldr	r2, [r3, #28]
   18fc8:	689b      	ldr	r3, [r3, #8]
   18fca:	429a      	cmp	r2, r3
   18fcc:	d001      	beq.n	18fd2 <z_reschedule+0x16>
   18fce:	f7f9 be6b 	b.w	12ca8 <arch_swap>
   18fd2:	f381 8811 	msr	BASEPRI, r1
   18fd6:	f3bf 8f6f 	isb	sy
}
   18fda:	4770      	bx	lr
   18fdc:	200028f0 	.word	0x200028f0

00018fe0 <z_sched_start>:
{
   18fe0:	b510      	push	{r4, lr}
	__asm__ volatile(
   18fe2:	f04f 0240 	mov.w	r2, #64	; 0x40
   18fe6:	f3ef 8411 	mrs	r4, BASEPRI
   18fea:	f382 8812 	msr	BASEPRI_MAX, r2
   18fee:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18ff2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   18ff4:	0751      	lsls	r1, r2, #29
   18ff6:	d404      	bmi.n	19002 <z_sched_start+0x22>
	__asm__ volatile(
   18ff8:	f384 8811 	msr	BASEPRI, r4
   18ffc:	f3bf 8f6f 	isb	sy
}
   19000:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19002:	f022 0204 	bic.w	r2, r2, #4
   19006:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   19008:	f7ff fe9c 	bl	18d44 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1900c:	4621      	mov	r1, r4
   1900e:	4802      	ldr	r0, [pc, #8]	; (19018 <z_sched_start+0x38>)
}
   19010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19014:	f7ff bfd2 	b.w	18fbc <z_reschedule>
   19018:	20003992 	.word	0x20003992

0001901c <z_impl_k_thread_suspend>:
{
   1901c:	b570      	push	{r4, r5, r6, lr}
   1901e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   19020:	3018      	adds	r0, #24
   19022:	f005 f91f 	bl	1e264 <z_abort_timeout>
	__asm__ volatile(
   19026:	f04f 0340 	mov.w	r3, #64	; 0x40
   1902a:	f3ef 8611 	mrs	r6, BASEPRI
   1902e:	f383 8812 	msr	BASEPRI_MAX, r3
   19032:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19036:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1903a:	7b63      	ldrb	r3, [r4, #13]
   1903c:	2a00      	cmp	r2, #0
   1903e:	da05      	bge.n	1904c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19044:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19046:	4620      	mov	r0, r4
   19048:	f004 fff7 	bl	1e03a <sys_dlist_remove>
		update_cache(thread == _current);
   1904c:	4d0b      	ldr	r5, [pc, #44]	; (1907c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1904e:	7b63      	ldrb	r3, [r4, #13]
   19050:	68a8      	ldr	r0, [r5, #8]
   19052:	f043 0310 	orr.w	r3, r3, #16
   19056:	7363      	strb	r3, [r4, #13]
   19058:	1b03      	subs	r3, r0, r4
   1905a:	4258      	negs	r0, r3
   1905c:	4158      	adcs	r0, r3
   1905e:	f7ff fe19 	bl	18c94 <update_cache>
	__asm__ volatile(
   19062:	f386 8811 	msr	BASEPRI, r6
   19066:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1906a:	68ab      	ldr	r3, [r5, #8]
   1906c:	42a3      	cmp	r3, r4
   1906e:	d103      	bne.n	19078 <z_impl_k_thread_suspend+0x5c>
}
   19070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19074:	f005 b8b9 	b.w	1e1ea <z_reschedule_unlocked>
}
   19078:	bd70      	pop	{r4, r5, r6, pc}
   1907a:	bf00      	nop
   1907c:	200028f0 	.word	0x200028f0

00019080 <k_sched_lock>:
	__asm__ volatile(
   19080:	f04f 0340 	mov.w	r3, #64	; 0x40
   19084:	f3ef 8111 	mrs	r1, BASEPRI
   19088:	f383 8812 	msr	BASEPRI_MAX, r3
   1908c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   19090:	4b04      	ldr	r3, [pc, #16]	; (190a4 <k_sched_lock+0x24>)
   19092:	689a      	ldr	r2, [r3, #8]
   19094:	7bd3      	ldrb	r3, [r2, #15]
   19096:	3b01      	subs	r3, #1
   19098:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1909a:	f381 8811 	msr	BASEPRI, r1
   1909e:	f3bf 8f6f 	isb	sy
}
   190a2:	4770      	bx	lr
   190a4:	200028f0 	.word	0x200028f0

000190a8 <k_sched_unlock>:
{
   190a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   190aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   190ae:	f3ef 8411 	mrs	r4, BASEPRI
   190b2:	f383 8812 	msr	BASEPRI_MAX, r3
   190b6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   190ba:	4b08      	ldr	r3, [pc, #32]	; (190dc <k_sched_unlock+0x34>)
   190bc:	689a      	ldr	r2, [r3, #8]
   190be:	7bd3      	ldrb	r3, [r2, #15]
   190c0:	3301      	adds	r3, #1
   190c2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   190c4:	2000      	movs	r0, #0
   190c6:	f7ff fde5 	bl	18c94 <update_cache>
	__asm__ volatile(
   190ca:	f384 8811 	msr	BASEPRI, r4
   190ce:	f3bf 8f6f 	isb	sy
}
   190d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   190d6:	f005 b888 	b.w	1e1ea <z_reschedule_unlocked>
   190da:	bf00      	nop
   190dc:	200028f0 	.word	0x200028f0

000190e0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   190e0:	4b04      	ldr	r3, [pc, #16]	; (190f4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   190e2:	2100      	movs	r1, #0
   190e4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   190e8:	e9c3 2208 	strd	r2, r2, [r3, #32]
   190ec:	4608      	mov	r0, r1
   190ee:	f7ff be8d 	b.w	18e0c <k_sched_time_slice_set>
   190f2:	bf00      	nop
   190f4:	200028f0 	.word	0x200028f0

000190f8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   190f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   190fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   190fe:	f3ef 8511 	mrs	r5, BASEPRI
   19102:	f383 8812 	msr	BASEPRI_MAX, r3
   19106:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1910a:	4919      	ldr	r1, [pc, #100]	; (19170 <z_impl_k_yield+0x78>)
   1910c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1910e:	7b43      	ldrb	r3, [r0, #13]
   19110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19114:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19116:	f004 ff90 	bl	1e03a <sys_dlist_remove>
	}
	queue_thread(_current);
   1911a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1911c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1911e:	4608      	mov	r0, r1
   19120:	f062 027f 	orn	r2, r2, #127	; 0x7f
   19124:	735a      	strb	r2, [r3, #13]
   19126:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   1912a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1912c:	4282      	cmp	r2, r0
   1912e:	bf08      	it	eq
   19130:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19132:	b922      	cbnz	r2, 1913e <z_impl_k_yield+0x46>
	node->prev = tail;
   19134:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   19138:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1913a:	624b      	str	r3, [r1, #36]	; 0x24
}
   1913c:	e00c      	b.n	19158 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1913e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   19142:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   19146:	42be      	cmp	r6, r7
   19148:	d00e      	beq.n	19168 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1914a:	42b7      	cmp	r7, r6
   1914c:	dd0c      	ble.n	19168 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1914e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   19150:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   19154:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   19156:	6053      	str	r3, [r2, #4]
	update_cache(1);
   19158:	2001      	movs	r0, #1
   1915a:	f7ff fd9b 	bl	18c94 <update_cache>
   1915e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   19160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19164:	f7f9 bda0 	b.w	12ca8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   19168:	42a2      	cmp	r2, r4
   1916a:	d0e3      	beq.n	19134 <z_impl_k_yield+0x3c>
   1916c:	6812      	ldr	r2, [r2, #0]
   1916e:	e7e0      	b.n	19132 <z_impl_k_yield+0x3a>
   19170:	200028f0 	.word	0x200028f0

00019174 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   19174:	ea50 0301 	orrs.w	r3, r0, r1
{
   19178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1917c:	4605      	mov	r5, r0
   1917e:	460e      	mov	r6, r1
	if (ticks == 0) {
   19180:	d103      	bne.n	1918a <z_tick_sleep+0x16>
	z_impl_k_yield();
   19182:	f7ff ffb9 	bl	190f8 <z_impl_k_yield>
		k_yield();
		return 0;
   19186:	2000      	movs	r0, #0
   19188:	e02c      	b.n	191e4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1918a:	1c83      	adds	r3, r0, #2
   1918c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   19190:	db2a      	blt.n	191e8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   19192:	f005 f8a9 	bl	1e2e8 <sys_clock_tick_get_32>
   19196:	182c      	adds	r4, r5, r0
   19198:	f04f 0340 	mov.w	r3, #64	; 0x40
   1919c:	f3ef 8811 	mrs	r8, BASEPRI
   191a0:	f383 8812 	msr	BASEPRI_MAX, r3
   191a4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   191a8:	4f11      	ldr	r7, [pc, #68]	; (191f0 <z_tick_sleep+0x7c>)
   191aa:	4b12      	ldr	r3, [pc, #72]	; (191f4 <z_tick_sleep+0x80>)
   191ac:	68b8      	ldr	r0, [r7, #8]
   191ae:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   191b0:	f7ff fdfc 	bl	18dac <unready_thread>
	z_add_thread_timeout(_current, timeout);
   191b4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   191b6:	4910      	ldr	r1, [pc, #64]	; (191f8 <z_tick_sleep+0x84>)
   191b8:	462a      	mov	r2, r5
   191ba:	4633      	mov	r3, r6
   191bc:	3018      	adds	r0, #24
   191be:	f000 f917 	bl	193f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   191c2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   191c4:	7b53      	ldrb	r3, [r2, #13]
   191c6:	f043 0310 	orr.w	r3, r3, #16
   191ca:	7353      	strb	r3, [r2, #13]
   191cc:	4640      	mov	r0, r8
   191ce:	f7f9 fd6b 	bl	12ca8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   191d2:	f005 f889 	bl	1e2e8 <sys_clock_tick_get_32>
   191d6:	1a20      	subs	r0, r4, r0
   191d8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   191dc:	2801      	cmp	r0, #1
   191de:	f173 0300 	sbcs.w	r3, r3, #0
   191e2:	dbd0      	blt.n	19186 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   191e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   191e8:	f06f 0401 	mvn.w	r4, #1
   191ec:	1a24      	subs	r4, r4, r0
   191ee:	e7d3      	b.n	19198 <z_tick_sleep+0x24>
   191f0:	200028f0 	.word	0x200028f0
   191f4:	20002920 	.word	0x20002920
   191f8:	0001e071 	.word	0x0001e071

000191fc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   191fc:	f1b1 3fff 	cmp.w	r1, #4294967295
   19200:	bf08      	it	eq
   19202:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   19206:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19208:	d106      	bne.n	19218 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1920a:	4b08      	ldr	r3, [pc, #32]	; (1922c <z_impl_k_sleep+0x30>)
   1920c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1920e:	f7ff ff05 	bl	1901c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   19212:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   19216:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   19218:	f7ff ffac 	bl	19174 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1921c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19220:	fb80 0303 	smull	r0, r3, r0, r3
   19224:	0bc0      	lsrs	r0, r0, #15
   19226:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1922a:	e7f4      	b.n	19216 <z_impl_k_sleep+0x1a>
   1922c:	200028f0 	.word	0x200028f0

00019230 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   19230:	4b01      	ldr	r3, [pc, #4]	; (19238 <z_impl_z_current_get+0x8>)
   19232:	6898      	ldr	r0, [r3, #8]
   19234:	4770      	bx	lr
   19236:	bf00      	nop
   19238:	200028f0 	.word	0x200028f0

0001923c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19240:	4604      	mov	r4, r0
   19242:	f04f 0340 	mov.w	r3, #64	; 0x40
   19246:	f3ef 8611 	mrs	r6, BASEPRI
   1924a:	f383 8812 	msr	BASEPRI_MAX, r3
   1924e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   19252:	7b03      	ldrb	r3, [r0, #12]
   19254:	07d9      	lsls	r1, r3, #31
   19256:	d50b      	bpl.n	19270 <z_thread_abort+0x34>
	__asm__ volatile(
   19258:	f386 8811 	msr	BASEPRI, r6
   1925c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   19260:	4040      	eors	r0, r0
   19262:	f380 8811 	msr	BASEPRI, r0
   19266:	f04f 0004 	mov.w	r0, #4
   1926a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   19270:	7b43      	ldrb	r3, [r0, #13]
   19272:	071a      	lsls	r2, r3, #28
   19274:	d504      	bpl.n	19280 <z_thread_abort+0x44>
   19276:	f386 8811 	msr	BASEPRI, r6
   1927a:	f3bf 8f6f 	isb	sy
   1927e:	e7f5      	b.n	1926c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   19280:	f023 0220 	bic.w	r2, r3, #32
   19284:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   19288:	09d2      	lsrs	r2, r2, #7
   1928a:	d120      	bne.n	192ce <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1928c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1928e:	68a3      	ldr	r3, [r4, #8]
   19290:	b113      	cbz	r3, 19298 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   19292:	4620      	mov	r0, r4
   19294:	f004 fed9 	bl	1e04a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   19298:	f104 0018 	add.w	r0, r4, #24
   1929c:	f004 ffe2 	bl	1e264 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   192a0:	f104 0758 	add.w	r7, r4, #88	; 0x58
   192a4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   192a8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   192aa:	42bd      	cmp	r5, r7
   192ac:	d000      	beq.n	192b0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   192ae:	b9b5      	cbnz	r5, 192de <z_thread_abort+0xa2>
		update_cache(1);
   192b0:	2001      	movs	r0, #1
   192b2:	f7ff fcef 	bl	18c94 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   192b6:	4b10      	ldr	r3, [pc, #64]	; (192f8 <z_thread_abort+0xbc>)
   192b8:	689b      	ldr	r3, [r3, #8]
   192ba:	42a3      	cmp	r3, r4
   192bc:	d1db      	bne.n	19276 <z_thread_abort+0x3a>
   192be:	f3ef 8305 	mrs	r3, IPSR
   192c2:	2b00      	cmp	r3, #0
   192c4:	d1d7      	bne.n	19276 <z_thread_abort+0x3a>
   192c6:	4630      	mov	r0, r6
   192c8:	f7f9 fcee 	bl	12ca8 <arch_swap>
	return ret;
   192cc:	e7d3      	b.n	19276 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   192ce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   192d2:	f043 0308 	orr.w	r3, r3, #8
   192d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   192d8:	f004 feaf 	bl	1e03a <sys_dlist_remove>
}
   192dc:	e7d7      	b.n	1928e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   192de:	4628      	mov	r0, r5
   192e0:	f004 feb3 	bl	1e04a <unpend_thread_no_timeout>
   192e4:	f105 0018 	add.w	r0, r5, #24
   192e8:	f004 ffbc 	bl	1e264 <z_abort_timeout>
   192ec:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   192f0:	4628      	mov	r0, r5
   192f2:	f7ff fd27 	bl	18d44 <ready_thread>
   192f6:	e7d7      	b.n	192a8 <z_thread_abort+0x6c>
   192f8:	200028f0 	.word	0x200028f0

000192fc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   192fc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   192fe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   19302:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19304:	e9cd 6700 	strd	r6, r7, [sp]
   19308:	f7ff fdf4 	bl	18ef4 <z_pend_curr>

	if (data != NULL) {
   1930c:	b11c      	cbz	r4, 19316 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1930e:	4b03      	ldr	r3, [pc, #12]	; (1931c <z_sched_wait+0x20>)
   19310:	689b      	ldr	r3, [r3, #8]
   19312:	695b      	ldr	r3, [r3, #20]
   19314:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   19316:	b002      	add	sp, #8
   19318:	bdd0      	pop	{r4, r6, r7, pc}
   1931a:	bf00      	nop
   1931c:	200028f0 	.word	0x200028f0

00019320 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   19320:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   19322:	4806      	ldr	r0, [pc, #24]	; (1933c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   19324:	4a06      	ldr	r2, [pc, #24]	; (19340 <z_data_copy+0x20>)
   19326:	4907      	ldr	r1, [pc, #28]	; (19344 <z_data_copy+0x24>)
   19328:	1a12      	subs	r2, r2, r0
   1932a:	f004 fc39 	bl	1dba0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1932e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   19332:	4a05      	ldr	r2, [pc, #20]	; (19348 <z_data_copy+0x28>)
   19334:	4905      	ldr	r1, [pc, #20]	; (1934c <z_data_copy+0x2c>)
   19336:	4806      	ldr	r0, [pc, #24]	; (19350 <z_data_copy+0x30>)
   19338:	f004 bc32 	b.w	1dba0 <z_early_memcpy>
   1933c:	20000000 	.word	0x20000000
   19340:	20000690 	.word	0x20000690
   19344:	00020614 	.word	0x00020614
   19348:	00000000 	.word	0x00000000
   1934c:	00020614 	.word	0x00020614
   19350:	20000000 	.word	0x20000000

00019354 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   19354:	4b03      	ldr	r3, [pc, #12]	; (19364 <elapsed+0x10>)
   19356:	681b      	ldr	r3, [r3, #0]
   19358:	b90b      	cbnz	r3, 1935e <elapsed+0xa>
   1935a:	f7fd bbab 	b.w	16ab4 <sys_clock_elapsed>
}
   1935e:	2000      	movs	r0, #0
   19360:	4770      	bx	lr
   19362:	bf00      	nop
   19364:	2000292c 	.word	0x2000292c

00019368 <next_timeout>:

static int32_t next_timeout(void)
{
   19368:	b510      	push	{r4, lr}
	return list->head == list;
   1936a:	4b11      	ldr	r3, [pc, #68]	; (193b0 <next_timeout+0x48>)
   1936c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1936e:	429c      	cmp	r4, r3
   19370:	d10a      	bne.n	19388 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19372:	f7ff ffef 	bl	19354 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   19376:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1937a:	4b0e      	ldr	r3, [pc, #56]	; (193b4 <next_timeout+0x4c>)
   1937c:	691b      	ldr	r3, [r3, #16]
   1937e:	b113      	cbz	r3, 19386 <next_timeout+0x1e>
   19380:	4298      	cmp	r0, r3
   19382:	bfa8      	it	ge
   19384:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19386:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   19388:	f7ff ffe4 	bl	19354 <elapsed>
	if ((to == NULL) ||
   1938c:	2c00      	cmp	r4, #0
   1938e:	d0f2      	beq.n	19376 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   19390:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   19394:	1a1b      	subs	r3, r3, r0
   19396:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1939a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1939e:	f172 0100 	sbcs.w	r1, r2, #0
   193a2:	dae8      	bge.n	19376 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   193a4:	2a00      	cmp	r2, #0
   193a6:	bfac      	ite	ge
   193a8:	4618      	movge	r0, r3
   193aa:	2000      	movlt	r0, #0
   193ac:	e7e5      	b.n	1937a <next_timeout+0x12>
   193ae:	bf00      	nop
   193b0:	20000494 	.word	0x20000494
   193b4:	200028f0 	.word	0x200028f0

000193b8 <remove_timeout>:
{
   193b8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   193ba:	b170      	cbz	r0, 193da <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   193bc:	4b0b      	ldr	r3, [pc, #44]	; (193ec <remove_timeout+0x34>)
   193be:	685b      	ldr	r3, [r3, #4]
   193c0:	4298      	cmp	r0, r3
   193c2:	d00a      	beq.n	193da <remove_timeout+0x22>
   193c4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   193c6:	b143      	cbz	r3, 193da <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   193c8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   193cc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   193d0:	1912      	adds	r2, r2, r4
   193d2:	eb41 0105 	adc.w	r1, r1, r5
   193d6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   193da:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   193de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   193e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   193e2:	2300      	movs	r3, #0
	node->prev = NULL;
   193e4:	e9c0 3300 	strd	r3, r3, [r0]
}
   193e8:	bd30      	pop	{r4, r5, pc}
   193ea:	bf00      	nop
   193ec:	20000494 	.word	0x20000494

000193f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   193f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   193f4:	bf08      	it	eq
   193f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   193fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193fc:	4604      	mov	r4, r0
   193fe:	461d      	mov	r5, r3
   19400:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19402:	d061      	beq.n	194c8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   19404:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   19406:	f04f 0340 	mov.w	r3, #64	; 0x40
   1940a:	f3ef 8711 	mrs	r7, BASEPRI
   1940e:	f383 8812 	msr	BASEPRI_MAX, r3
   19412:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   19416:	3201      	adds	r2, #1
   19418:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1941c:	da24      	bge.n	19468 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1941e:	4930      	ldr	r1, [pc, #192]	; (194e0 <z_add_timeout+0xf0>)
   19420:	e9d1 2000 	ldrd	r2, r0, [r1]
   19424:	f06f 0301 	mvn.w	r3, #1
   19428:	1a9b      	subs	r3, r3, r2
   1942a:	f04f 32ff 	mov.w	r2, #4294967295
   1942e:	eb62 0000 	sbc.w	r0, r2, r0
   19432:	1b9e      	subs	r6, r3, r6
   19434:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   19438:	2e01      	cmp	r6, #1
   1943a:	f170 0300 	sbcs.w	r3, r0, #0
   1943e:	da01      	bge.n	19444 <z_add_timeout+0x54>
   19440:	2601      	movs	r6, #1
   19442:	2000      	movs	r0, #0
   19444:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   19448:	4e26      	ldr	r6, [pc, #152]	; (194e4 <z_add_timeout+0xf4>)
   1944a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1944e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19450:	45b4      	cmp	ip, r6
   19452:	bf08      	it	eq
   19454:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   19458:	f1bc 0f00 	cmp.w	ip, #0
   1945c:	d10d      	bne.n	1947a <z_add_timeout+0x8a>
	node->prev = tail;
   1945e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   19462:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19464:	6074      	str	r4, [r6, #4]
}
   19466:	e01c      	b.n	194a2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   19468:	f7ff ff74 	bl	19354 <elapsed>
   1946c:	3601      	adds	r6, #1
   1946e:	f145 0500 	adc.w	r5, r5, #0
   19472:	1836      	adds	r6, r6, r0
   19474:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   19478:	e7e4      	b.n	19444 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1947a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1947e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   19482:	4293      	cmp	r3, r2
   19484:	eb71 0e00 	sbcs.w	lr, r1, r0
   19488:	da1f      	bge.n	194ca <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1948a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1948c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   19490:	eb60 0001 	sbc.w	r0, r0, r1
   19494:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   19498:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1949c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1949e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   194a2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   194a4:	42b3      	cmp	r3, r6
   194a6:	d00b      	beq.n	194c0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   194a8:	429c      	cmp	r4, r3
   194aa:	d109      	bne.n	194c0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   194ac:	f7ff ff5c 	bl	19368 <next_timeout>

			if (next_time == 0 ||
   194b0:	b118      	cbz	r0, 194ba <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   194b2:	4b0d      	ldr	r3, [pc, #52]	; (194e8 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   194b4:	691b      	ldr	r3, [r3, #16]
   194b6:	4283      	cmp	r3, r0
   194b8:	d002      	beq.n	194c0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   194ba:	2100      	movs	r1, #0
   194bc:	f7fd fac8 	bl	16a50 <sys_clock_set_timeout>
	__asm__ volatile(
   194c0:	f387 8811 	msr	BASEPRI, r7
   194c4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   194c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   194ca:	1a9b      	subs	r3, r3, r2
   194cc:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   194d0:	45ac      	cmp	ip, r5
   194d2:	e9c4 3104 	strd	r3, r1, [r4, #16]
   194d6:	d0c2      	beq.n	1945e <z_add_timeout+0x6e>
   194d8:	f8dc c000 	ldr.w	ip, [ip]
   194dc:	e7bc      	b.n	19458 <z_add_timeout+0x68>
   194de:	bf00      	nop
   194e0:	200020d8 	.word	0x200020d8
   194e4:	20000494 	.word	0x20000494
   194e8:	200028f0 	.word	0x200028f0

000194ec <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   194ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194f0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   194f2:	f7ff fcbd 	bl	18e70 <z_time_slice>
	__asm__ volatile(
   194f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   194fa:	f3ef 8611 	mrs	r6, BASEPRI
   194fe:	f383 8812 	msr	BASEPRI_MAX, r3
   19502:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   19506:	4f23      	ldr	r7, [pc, #140]	; (19594 <sys_clock_announce+0xa8>)
	return list->head == list;
   19508:	f8df 808c 	ldr.w	r8, [pc, #140]	; 19598 <sys_clock_announce+0xac>
   1950c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   19510:	4a22      	ldr	r2, [pc, #136]	; (1959c <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   19512:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19514:	4540      	cmp	r0, r8
		curr_tick += dt;
   19516:	e9d2 3e00 	ldrd	r3, lr, [r2]
   1951a:	ea4f 71e4 	mov.w	r1, r4, asr #31
   1951e:	d00b      	beq.n	19538 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19520:	b150      	cbz	r0, 19538 <sys_clock_announce+0x4c>
   19522:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   19526:	42ac      	cmp	r4, r5
   19528:	eb71 090c 	sbcs.w	r9, r1, ip
   1952c:	da16      	bge.n	1955c <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1952e:	1b2d      	subs	r5, r5, r4
   19530:	eb6c 0c01 	sbc.w	ip, ip, r1
   19534:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   19538:	18e3      	adds	r3, r4, r3
   1953a:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   1953e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   19540:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   19544:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   19546:	f7ff ff0f 	bl	19368 <next_timeout>
   1954a:	4621      	mov	r1, r4
   1954c:	f7fd fa80 	bl	16a50 <sys_clock_set_timeout>
	__asm__ volatile(
   19550:	f386 8811 	msr	BASEPRI, r6
   19554:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1955c:	18eb      	adds	r3, r5, r3
   1955e:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   19562:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   19566:	2200      	movs	r2, #0
   19568:	2300      	movs	r3, #0
   1956a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1956e:	f7ff ff23 	bl	193b8 <remove_timeout>
   19572:	f386 8811 	msr	BASEPRI, r6
   19576:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1957a:	6883      	ldr	r3, [r0, #8]
   1957c:	4798      	blx	r3
	__asm__ volatile(
   1957e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19582:	f3ef 8611 	mrs	r6, BASEPRI
   19586:	f383 8812 	msr	BASEPRI_MAX, r3
   1958a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1958e:	683c      	ldr	r4, [r7, #0]
   19590:	1b64      	subs	r4, r4, r5
   19592:	e7bb      	b.n	1950c <sys_clock_announce+0x20>
   19594:	2000292c 	.word	0x2000292c
   19598:	20000494 	.word	0x20000494
   1959c:	200020d8 	.word	0x200020d8

000195a0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   195a0:	b510      	push	{r4, lr}
   195a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   195a6:	f3ef 8411 	mrs	r4, BASEPRI
   195aa:	f383 8812 	msr	BASEPRI_MAX, r3
   195ae:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   195b2:	f7ff fecf 	bl	19354 <elapsed>
   195b6:	4a06      	ldr	r2, [pc, #24]	; (195d0 <sys_clock_tick_get+0x30>)
   195b8:	4603      	mov	r3, r0
   195ba:	e9d2 0100 	ldrd	r0, r1, [r2]
   195be:	1818      	adds	r0, r3, r0
   195c0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   195c4:	f384 8811 	msr	BASEPRI, r4
   195c8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   195cc:	bd10      	pop	{r4, pc}
   195ce:	bf00      	nop
   195d0:	200020d8 	.word	0x200020d8

000195d4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   195d4:	b570      	push	{r4, r5, r6, lr}
   195d6:	4604      	mov	r4, r0
	__asm__ volatile(
   195d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   195dc:	f3ef 8511 	mrs	r5, BASEPRI
   195e0:	f383 8812 	msr	BASEPRI_MAX, r3
   195e4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   195e8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   195ec:	3301      	adds	r3, #1
   195ee:	f142 0200 	adc.w	r2, r2, #0
   195f2:	2b02      	cmp	r3, #2
   195f4:	f172 0200 	sbcs.w	r2, r2, #0
   195f8:	d322      	bcc.n	19640 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   195fa:	f004 fe79 	bl	1e2f0 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   195fe:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   19602:	3001      	adds	r0, #1
   19604:	f141 0100 	adc.w	r1, r1, #0
   19608:	18c0      	adds	r0, r0, r3
   1960a:	eb41 0102 	adc.w	r1, r1, r2
   1960e:	2801      	cmp	r0, #1
   19610:	f171 0100 	sbcs.w	r1, r1, #0
   19614:	db32      	blt.n	1967c <z_timer_expiration_handler+0xa8>
   19616:	f004 fe6b 	bl	1e2f0 <z_impl_k_uptime_ticks>
   1961a:	3001      	adds	r0, #1
   1961c:	f141 0300 	adc.w	r3, r1, #0
   19620:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   19624:	1880      	adds	r0, r0, r2
   19626:	f06f 0201 	mvn.w	r2, #1
   1962a:	eb43 0301 	adc.w	r3, r3, r1
   1962e:	1a12      	subs	r2, r2, r0
   19630:	f04f 31ff 	mov.w	r1, #4294967295
   19634:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19638:	491a      	ldr	r1, [pc, #104]	; (196a4 <z_timer_expiration_handler+0xd0>)
   1963a:	4620      	mov	r0, r4
   1963c:	f7ff fed8 	bl	193f0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   19640:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19642:	3301      	adds	r3, #1
   19644:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   19646:	6a23      	ldr	r3, [r4, #32]
   19648:	b173      	cbz	r3, 19668 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   1964a:	f385 8811 	msr	BASEPRI, r5
   1964e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   19652:	6a23      	ldr	r3, [r4, #32]
   19654:	4620      	mov	r0, r4
   19656:	4798      	blx	r3
	__asm__ volatile(
   19658:	f04f 0340 	mov.w	r3, #64	; 0x40
   1965c:	f3ef 8511 	mrs	r5, BASEPRI
   19660:	f383 8812 	msr	BASEPRI_MAX, r3
   19664:	f3bf 8f6f 	isb	sy
	return list->head == list;
   19668:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1966c:	42a6      	cmp	r6, r4
   1966e:	d000      	beq.n	19672 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   19670:	b94e      	cbnz	r6, 19686 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   19672:	f385 8811 	msr	BASEPRI, r5
   19676:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1967a:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1967c:	f06f 0201 	mvn.w	r2, #1
   19680:	f04f 33ff 	mov.w	r3, #4294967295
   19684:	e7d8      	b.n	19638 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   19686:	4630      	mov	r0, r6
   19688:	f004 fd4c 	bl	1e124 <z_unpend_thread_no_timeout>
   1968c:	2300      	movs	r3, #0
   1968e:	67f3      	str	r3, [r6, #124]	; 0x7c
   19690:	f385 8811 	msr	BASEPRI, r5
   19694:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   19698:	4630      	mov	r0, r6
}
   1969a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1969e:	f004 bd31 	b.w	1e104 <z_ready_thread>
   196a2:	bf00      	nop
   196a4:	000195d5 	.word	0x000195d5

000196a8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   196a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   196ac:	f1b3 3fff 	cmp.w	r3, #4294967295
   196b0:	bf08      	it	eq
   196b2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   196b6:	4605      	mov	r5, r0
   196b8:	4614      	mov	r4, r2
   196ba:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   196be:	4619      	mov	r1, r3
   196c0:	4691      	mov	r9, r2
   196c2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   196c4:	d037      	beq.n	19736 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   196c6:	f1b0 3fff 	cmp.w	r0, #4294967295
   196ca:	bf08      	it	eq
   196cc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   196d0:	4637      	mov	r7, r6
   196d2:	4682      	mov	sl, r0
   196d4:	d011      	beq.n	196fa <z_impl_k_timer_start+0x52>
   196d6:	ea50 0306 	orrs.w	r3, r0, r6
   196da:	d00e      	beq.n	196fa <z_impl_k_timer_start+0x52>
   196dc:	1c72      	adds	r2, r6, #1
   196de:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   196e2:	db0a      	blt.n	196fa <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   196e4:	2e02      	cmp	r6, #2
   196e6:	4684      	mov	ip, r0
   196e8:	f170 0000 	sbcs.w	r0, r0, #0
   196ec:	bfbc      	itt	lt
   196ee:	2702      	movlt	r7, #2
   196f0:	f04f 0c00 	movlt.w	ip, #0
   196f4:	3f01      	subs	r7, #1
   196f6:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   196fa:	1c63      	adds	r3, r4, #1
   196fc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   19700:	db0a      	blt.n	19718 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   19702:	2c01      	cmp	r4, #1
   19704:	f171 0300 	sbcs.w	r3, r1, #0
   19708:	4622      	mov	r2, r4
   1970a:	bfbc      	itt	lt
   1970c:	2201      	movlt	r2, #1
   1970e:	2100      	movlt	r1, #0
   19710:	f112 39ff 	adds.w	r9, r2, #4294967295
   19714:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   19718:	4628      	mov	r0, r5
   1971a:	f004 fda3 	bl	1e264 <z_abort_timeout>
	timer->period = period;
   1971e:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   19722:	2300      	movs	r3, #0
   19724:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19726:	464a      	mov	r2, r9
   19728:	4643      	mov	r3, r8
   1972a:	4628      	mov	r0, r5
   1972c:	4903      	ldr	r1, [pc, #12]	; (1973c <z_impl_k_timer_start+0x94>)
		     duration);
}
   1972e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19732:	f7ff be5d 	b.w	193f0 <z_add_timeout>
}
   19736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1973a:	bf00      	nop
   1973c:	000195d5 	.word	0x000195d5

00019740 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   19740:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19744:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   19746:	4b29      	ldr	r3, [pc, #164]	; (197ec <z_impl_k_poll+0xac>)
   19748:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1974a:	2301      	movs	r3, #1
   1974c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   19750:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   19754:	ea52 0305 	orrs.w	r3, r2, r5
{
   19758:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1975a:	bf0c      	ite	eq
   1975c:	2301      	moveq	r3, #1
   1975e:	2300      	movne	r3, #0
   19760:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   19764:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   19766:	f004 fe45 	bl	1e3f4 <register_events>
   1976a:	4681      	mov	r9, r0
	__asm__ volatile(
   1976c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19770:	f3ef 8a11 	mrs	sl, BASEPRI
   19774:	f383 8812 	msr	BASEPRI_MAX, r3
   19778:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1977c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   19780:	b964      	cbnz	r4, 1979c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   19782:	4601      	mov	r1, r0
   19784:	4652      	mov	r2, sl
   19786:	4640      	mov	r0, r8
   19788:	f004 ff05 	bl	1e596 <clear_event_registrations>
	__asm__ volatile(
   1978c:	f38a 8811 	msr	BASEPRI, sl
   19790:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   19794:	4620      	mov	r0, r4
   19796:	b002      	add	sp, #8
   19798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1979c:	2300      	movs	r3, #0
   1979e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   197a2:	ea56 0305 	orrs.w	r3, r6, r5
   197a6:	d106      	bne.n	197b6 <z_impl_k_poll+0x76>
   197a8:	f38a 8811 	msr	BASEPRI, sl
   197ac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   197b0:	f06f 040a 	mvn.w	r4, #10
   197b4:	e7ee      	b.n	19794 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   197b6:	e9cd 6500 	strd	r6, r5, [sp]
   197ba:	4a0d      	ldr	r2, [pc, #52]	; (197f0 <z_impl_k_poll+0xb0>)
   197bc:	480d      	ldr	r0, [pc, #52]	; (197f4 <z_impl_k_poll+0xb4>)
   197be:	4651      	mov	r1, sl
   197c0:	f7ff fb98 	bl	18ef4 <z_pend_curr>
   197c4:	4604      	mov	r4, r0
	__asm__ volatile(
   197c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   197ca:	f3ef 8511 	mrs	r5, BASEPRI
   197ce:	f383 8812 	msr	BASEPRI_MAX, r3
   197d2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   197d6:	462a      	mov	r2, r5
   197d8:	4649      	mov	r1, r9
   197da:	4640      	mov	r0, r8
   197dc:	f004 fedb 	bl	1e596 <clear_event_registrations>
	__asm__ volatile(
   197e0:	f385 8811 	msr	BASEPRI, r5
   197e4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   197e8:	e7d4      	b.n	19794 <z_impl_k_poll+0x54>
   197ea:	bf00      	nop
   197ec:	200028f0 	.word	0x200028f0
   197f0:	2000049c 	.word	0x2000049c
   197f4:	20003992 	.word	0x20003992

000197f8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   197f8:	b538      	push	{r3, r4, r5, lr}
   197fa:	4603      	mov	r3, r0
	__asm__ volatile(
   197fc:	f04f 0240 	mov.w	r2, #64	; 0x40
   19800:	f3ef 8511 	mrs	r5, BASEPRI
   19804:	f382 8812 	msr	BASEPRI_MAX, r2
   19808:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1980c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1980e:	2101      	movs	r1, #1
   19810:	6081      	str	r1, [r0, #8]
	return list->head == list;
   19812:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19814:	4283      	cmp	r3, r0
   19816:	d106      	bne.n	19826 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   19818:	f385 8811 	msr	BASEPRI, r5
   1981c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   19820:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   19822:	4620      	mov	r0, r4
   19824:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   19826:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1982a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1982c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1982e:	2300      	movs	r3, #0
	node->prev = NULL;
   19830:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19834:	f004 fe55 	bl	1e4e2 <signal_poll_event>
	z_reschedule(&lock, key);
   19838:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1983a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1983c:	4801      	ldr	r0, [pc, #4]	; (19844 <z_impl_k_poll_signal_raise+0x4c>)
   1983e:	f7ff fbbd 	bl	18fbc <z_reschedule>
	return rc;
   19842:	e7ee      	b.n	19822 <z_impl_k_poll_signal_raise+0x2a>
   19844:	20003992 	.word	0x20003992

00019848 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   19848:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1984a:	4606      	mov	r6, r0
   1984c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1984e:	f004 fa68 	bl	1dd22 <k_is_in_isr>
   19852:	b978      	cbnz	r0, 19874 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   19854:	4b0b      	ldr	r3, [pc, #44]	; (19884 <z_thread_aligned_alloc+0x3c>)
   19856:	689b      	ldr	r3, [r3, #8]
   19858:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1985a:	b17c      	cbz	r4, 1987c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1985c:	1d2a      	adds	r2, r5, #4
   1985e:	d209      	bcs.n	19874 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   19860:	2000      	movs	r0, #0
   19862:	2100      	movs	r1, #0
   19864:	e9cd 0100 	strd	r0, r1, [sp]
   19868:	f046 0104 	orr.w	r1, r6, #4
   1986c:	4620      	mov	r0, r4
   1986e:	f004 f9a1 	bl	1dbb4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   19872:	b908      	cbnz	r0, 19878 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   19874:	2400      	movs	r4, #0
	}

	return ret;
   19876:	e001      	b.n	1987c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   19878:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1987a:	1d04      	adds	r4, r0, #4
}
   1987c:	4620      	mov	r0, r4
   1987e:	b002      	add	sp, #8
   19880:	bd70      	pop	{r4, r5, r6, pc}
   19882:	bf00      	nop
   19884:	200028f0 	.word	0x200028f0

00019888 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   19888:	4801      	ldr	r0, [pc, #4]	; (19890 <boot_banner+0x8>)
   1988a:	f002 bd5e 	b.w	1c34a <printk>
   1988e:	bf00      	nop
   19890:	000205dc 	.word	0x000205dc

00019894 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   19896:	4b09      	ldr	r3, [pc, #36]	; (198bc <k_sys_work_q_init+0x28>)
   19898:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1989a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1989c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1989e:	9300      	str	r3, [sp, #0]
   198a0:	4907      	ldr	r1, [pc, #28]	; (198c0 <k_sys_work_q_init+0x2c>)
   198a2:	4808      	ldr	r0, [pc, #32]	; (198c4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   198a4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   198a8:	f04f 33ff 	mov.w	r3, #4294967295
   198ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   198b0:	f7ff f970 	bl	18b94 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   198b4:	4620      	mov	r0, r4
   198b6:	b004      	add	sp, #16
   198b8:	bd10      	pop	{r4, pc}
   198ba:	bf00      	nop
   198bc:	0002060a 	.word	0x0002060a
   198c0:	20005dc0 	.word	0x20005dc0
   198c4:	200020e0 	.word	0x200020e0

000198c8 <nrf_cc3xx_platform_init>:
   198c8:	b510      	push	{r4, lr}
   198ca:	4c0c      	ldr	r4, [pc, #48]	; (198fc <nrf_cc3xx_platform_init+0x34>)
   198cc:	6823      	ldr	r3, [r4, #0]
   198ce:	b113      	cbz	r3, 198d6 <nrf_cc3xx_platform_init+0xe>
   198d0:	4b0b      	ldr	r3, [pc, #44]	; (19900 <nrf_cc3xx_platform_init+0x38>)
   198d2:	681b      	ldr	r3, [r3, #0]
   198d4:	b92b      	cbnz	r3, 198e2 <nrf_cc3xx_platform_init+0x1a>
   198d6:	f000 fe99 	bl	1a60c <CC_LibInit>
   198da:	b930      	cbnz	r0, 198ea <nrf_cc3xx_platform_init+0x22>
   198dc:	4b08      	ldr	r3, [pc, #32]	; (19900 <nrf_cc3xx_platform_init+0x38>)
   198de:	2201      	movs	r2, #1
   198e0:	601a      	str	r2, [r3, #0]
   198e2:	2301      	movs	r3, #1
   198e4:	6023      	str	r3, [r4, #0]
   198e6:	2000      	movs	r0, #0
   198e8:	bd10      	pop	{r4, pc}
   198ea:	3801      	subs	r0, #1
   198ec:	2806      	cmp	r0, #6
   198ee:	d901      	bls.n	198f4 <nrf_cc3xx_platform_init+0x2c>
   198f0:	4804      	ldr	r0, [pc, #16]	; (19904 <nrf_cc3xx_platform_init+0x3c>)
   198f2:	bd10      	pop	{r4, pc}
   198f4:	4b04      	ldr	r3, [pc, #16]	; (19908 <nrf_cc3xx_platform_init+0x40>)
   198f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   198fa:	bd10      	pop	{r4, pc}
   198fc:	20002930 	.word	0x20002930
   19900:	20002934 	.word	0x20002934
   19904:	ffff8ffe 	.word	0xffff8ffe
   19908:	0001edb8 	.word	0x0001edb8

0001990c <nrf_cc3xx_platform_abort>:
   1990c:	f3bf 8f4f 	dsb	sy
   19910:	4905      	ldr	r1, [pc, #20]	; (19928 <nrf_cc3xx_platform_abort+0x1c>)
   19912:	4b06      	ldr	r3, [pc, #24]	; (1992c <nrf_cc3xx_platform_abort+0x20>)
   19914:	68ca      	ldr	r2, [r1, #12]
   19916:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1991a:	4313      	orrs	r3, r2
   1991c:	60cb      	str	r3, [r1, #12]
   1991e:	f3bf 8f4f 	dsb	sy
   19922:	bf00      	nop
   19924:	e7fd      	b.n	19922 <nrf_cc3xx_platform_abort+0x16>
   19926:	bf00      	nop
   19928:	e000ed00 	.word	0xe000ed00
   1992c:	05fa0004 	.word	0x05fa0004

00019930 <CC_PalAbort>:
   19930:	b410      	push	{r4}
   19932:	4b09      	ldr	r3, [pc, #36]	; (19958 <CC_PalAbort+0x28>)
   19934:	4909      	ldr	r1, [pc, #36]	; (1995c <CC_PalAbort+0x2c>)
   19936:	4c0a      	ldr	r4, [pc, #40]	; (19960 <CC_PalAbort+0x30>)
   19938:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1993c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   19940:	6849      	ldr	r1, [r1, #4]
   19942:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   19946:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1994a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1994e:	2300      	movs	r3, #0
   19950:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   19954:	bc10      	pop	{r4}
   19956:	4708      	bx	r1
   19958:	5002b000 	.word	0x5002b000
   1995c:	200004a4 	.word	0x200004a4
   19960:	5002a000 	.word	0x5002a000

00019964 <nrf_cc3xx_platform_set_abort>:
   19964:	e9d0 1200 	ldrd	r1, r2, [r0]
   19968:	4b01      	ldr	r3, [pc, #4]	; (19970 <nrf_cc3xx_platform_set_abort+0xc>)
   1996a:	e9c3 1200 	strd	r1, r2, [r3]
   1996e:	4770      	bx	lr
   19970:	200004a4 	.word	0x200004a4

00019974 <nrf_cc3xx_platform_ctr_drbg_init>:
   19974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19978:	4c14      	ldr	r4, [pc, #80]	; (199cc <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1997a:	4e15      	ldr	r6, [pc, #84]	; (199d0 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1997c:	2800      	cmp	r0, #0
   1997e:	bf18      	it	ne
   19980:	4604      	movne	r4, r0
   19982:	b083      	sub	sp, #12
   19984:	6823      	ldr	r3, [r4, #0]
   19986:	42b3      	cmp	r3, r6
   19988:	d01c      	beq.n	199c4 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   1998a:	460d      	mov	r5, r1
   1998c:	4620      	mov	r0, r4
   1998e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   19992:	f104 0904 	add.w	r9, r4, #4
   19996:	4617      	mov	r7, r2
   19998:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1999c:	f000 f8e8 	bl	19b70 <mbedtls_platform_zeroize>
   199a0:	4648      	mov	r0, r9
   199a2:	f000 fd1d 	bl	1a3e0 <cc_mbedtls_entropy_init>
   199a6:	4640      	mov	r0, r8
   199a8:	f000 fb4a 	bl	1a040 <cc_mbedtls_ctr_drbg_init>
   199ac:	4909      	ldr	r1, [pc, #36]	; (199d4 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   199ae:	9700      	str	r7, [sp, #0]
   199b0:	462b      	mov	r3, r5
   199b2:	464a      	mov	r2, r9
   199b4:	4640      	mov	r0, r8
   199b6:	f000 fb59 	bl	1a06c <cc_mbedtls_ctr_drbg_seed>
   199ba:	b900      	cbnz	r0, 199be <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   199bc:	6026      	str	r6, [r4, #0]
   199be:	b003      	add	sp, #12
   199c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   199c4:	2000      	movs	r0, #0
   199c6:	b003      	add	sp, #12
   199c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   199cc:	20002938 	.word	0x20002938
   199d0:	5ac9bca5 	.word	0x5ac9bca5
   199d4:	0001a469 	.word	0x0001a469

000199d8 <nrf_cc3xx_platform_ctr_drbg_get>:
   199d8:	b570      	push	{r4, r5, r6, lr}
   199da:	4d0d      	ldr	r5, [pc, #52]	; (19a10 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   199dc:	2800      	cmp	r0, #0
   199de:	bf18      	it	ne
   199e0:	4605      	movne	r5, r0
   199e2:	461e      	mov	r6, r3
   199e4:	6828      	ldr	r0, [r5, #0]
   199e6:	4b0b      	ldr	r3, [pc, #44]	; (19a14 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   199e8:	4298      	cmp	r0, r3
   199ea:	b082      	sub	sp, #8
   199ec:	d10d      	bne.n	19a0a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   199ee:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   199f2:	2500      	movs	r5, #0
   199f4:	9500      	str	r5, [sp, #0]
   199f6:	462b      	mov	r3, r5
   199f8:	4614      	mov	r4, r2
   199fa:	f000 fb85 	bl	1a108 <cc_mbedtls_ctr_drbg_random_with_add>
   199fe:	2800      	cmp	r0, #0
   19a00:	bf18      	it	ne
   19a02:	462c      	movne	r4, r5
   19a04:	6034      	str	r4, [r6, #0]
   19a06:	b002      	add	sp, #8
   19a08:	bd70      	pop	{r4, r5, r6, pc}
   19a0a:	4803      	ldr	r0, [pc, #12]	; (19a18 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   19a0c:	e7fb      	b.n	19a06 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   19a0e:	bf00      	nop
   19a10:	20002938 	.word	0x20002938
   19a14:	5ac9bca5 	.word	0x5ac9bca5
   19a18:	ffff8fe8 	.word	0xffff8fe8

00019a1c <mutex_free>:
   19a1c:	b510      	push	{r4, lr}
   19a1e:	4604      	mov	r4, r0
   19a20:	b150      	cbz	r0, 19a38 <mutex_free+0x1c>
   19a22:	6863      	ldr	r3, [r4, #4]
   19a24:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   19a28:	d005      	beq.n	19a36 <mutex_free+0x1a>
   19a2a:	4a06      	ldr	r2, [pc, #24]	; (19a44 <mutex_free+0x28>)
   19a2c:	4293      	cmp	r3, r2
   19a2e:	d002      	beq.n	19a36 <mutex_free+0x1a>
   19a30:	2300      	movs	r3, #0
   19a32:	6023      	str	r3, [r4, #0]
   19a34:	6062      	str	r2, [r4, #4]
   19a36:	bd10      	pop	{r4, pc}
   19a38:	4b03      	ldr	r3, [pc, #12]	; (19a48 <mutex_free+0x2c>)
   19a3a:	4804      	ldr	r0, [pc, #16]	; (19a4c <mutex_free+0x30>)
   19a3c:	685b      	ldr	r3, [r3, #4]
   19a3e:	4798      	blx	r3
   19a40:	e7ef      	b.n	19a22 <mutex_free+0x6>
   19a42:	bf00      	nop
   19a44:	a95c5f2c 	.word	0xa95c5f2c
   19a48:	200004a4 	.word	0x200004a4
   19a4c:	0001edd4 	.word	0x0001edd4

00019a50 <mutex_lock>:
   19a50:	b1c8      	cbz	r0, 19a86 <mutex_lock+0x36>
   19a52:	6843      	ldr	r3, [r0, #4]
   19a54:	4a0d      	ldr	r2, [pc, #52]	; (19a8c <mutex_lock+0x3c>)
   19a56:	4293      	cmp	r3, r2
   19a58:	d013      	beq.n	19a82 <mutex_lock+0x32>
   19a5a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   19a5e:	d00e      	beq.n	19a7e <mutex_lock+0x2e>
   19a60:	2301      	movs	r3, #1
   19a62:	e850 2f00 	ldrex	r2, [r0]
   19a66:	4619      	mov	r1, r3
   19a68:	e840 1c00 	strex	ip, r1, [r0]
   19a6c:	f09c 0f00 	teq	ip, #0
   19a70:	d1f7      	bne.n	19a62 <mutex_lock+0x12>
   19a72:	2a01      	cmp	r2, #1
   19a74:	d0f5      	beq.n	19a62 <mutex_lock+0x12>
   19a76:	f3bf 8f5f 	dmb	sy
   19a7a:	2000      	movs	r0, #0
   19a7c:	4770      	bx	lr
   19a7e:	4804      	ldr	r0, [pc, #16]	; (19a90 <mutex_lock+0x40>)
   19a80:	4770      	bx	lr
   19a82:	4804      	ldr	r0, [pc, #16]	; (19a94 <mutex_lock+0x44>)
   19a84:	4770      	bx	lr
   19a86:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   19a8a:	4770      	bx	lr
   19a8c:	a95c5f2c 	.word	0xa95c5f2c
   19a90:	ffff8fe9 	.word	0xffff8fe9
   19a94:	ffff8fea 	.word	0xffff8fea

00019a98 <mutex_unlock>:
   19a98:	b180      	cbz	r0, 19abc <mutex_unlock+0x24>
   19a9a:	6843      	ldr	r3, [r0, #4]
   19a9c:	4a09      	ldr	r2, [pc, #36]	; (19ac4 <mutex_unlock+0x2c>)
   19a9e:	4293      	cmp	r3, r2
   19aa0:	d00a      	beq.n	19ab8 <mutex_unlock+0x20>
   19aa2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   19aa6:	d005      	beq.n	19ab4 <mutex_unlock+0x1c>
   19aa8:	f3bf 8f5f 	dmb	sy
   19aac:	2300      	movs	r3, #0
   19aae:	6003      	str	r3, [r0, #0]
   19ab0:	4618      	mov	r0, r3
   19ab2:	4770      	bx	lr
   19ab4:	4804      	ldr	r0, [pc, #16]	; (19ac8 <mutex_unlock+0x30>)
   19ab6:	4770      	bx	lr
   19ab8:	4804      	ldr	r0, [pc, #16]	; (19acc <mutex_unlock+0x34>)
   19aba:	4770      	bx	lr
   19abc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   19ac0:	4770      	bx	lr
   19ac2:	bf00      	nop
   19ac4:	a95c5f2c 	.word	0xa95c5f2c
   19ac8:	ffff8fe9 	.word	0xffff8fe9
   19acc:	ffff8fea 	.word	0xffff8fea

00019ad0 <mutex_init>:
   19ad0:	b510      	push	{r4, lr}
   19ad2:	4604      	mov	r4, r0
   19ad4:	b120      	cbz	r0, 19ae0 <mutex_init+0x10>
   19ad6:	4b04      	ldr	r3, [pc, #16]	; (19ae8 <mutex_init+0x18>)
   19ad8:	6063      	str	r3, [r4, #4]
   19ada:	2200      	movs	r2, #0
   19adc:	6022      	str	r2, [r4, #0]
   19ade:	bd10      	pop	{r4, pc}
   19ae0:	4802      	ldr	r0, [pc, #8]	; (19aec <mutex_init+0x1c>)
   19ae2:	f7ff ff25 	bl	19930 <CC_PalAbort>
   19ae6:	e7f6      	b.n	19ad6 <mutex_init+0x6>
   19ae8:	3a00003a 	.word	0x3a00003a
   19aec:	0001edfc 	.word	0x0001edfc

00019af0 <nrf_cc3xx_platform_set_mutexes>:
   19af0:	b570      	push	{r4, r5, r6, lr}
   19af2:	e9d0 2300 	ldrd	r2, r3, [r0]
   19af6:	4c15      	ldr	r4, [pc, #84]	; (19b4c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   19af8:	4d15      	ldr	r5, [pc, #84]	; (19b50 <nrf_cc3xx_platform_set_mutexes+0x60>)
   19afa:	6063      	str	r3, [r4, #4]
   19afc:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   19b00:	e9c4 3002 	strd	r3, r0, [r4, #8]
   19b04:	6022      	str	r2, [r4, #0]
   19b06:	4b13      	ldr	r3, [pc, #76]	; (19b54 <nrf_cc3xx_platform_set_mutexes+0x64>)
   19b08:	6808      	ldr	r0, [r1, #0]
   19b0a:	6018      	str	r0, [r3, #0]
   19b0c:	6848      	ldr	r0, [r1, #4]
   19b0e:	6058      	str	r0, [r3, #4]
   19b10:	6888      	ldr	r0, [r1, #8]
   19b12:	6098      	str	r0, [r3, #8]
   19b14:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   19b18:	60d8      	str	r0, [r3, #12]
   19b1a:	6119      	str	r1, [r3, #16]
   19b1c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19b20:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   19b24:	d010      	beq.n	19b48 <nrf_cc3xx_platform_set_mutexes+0x58>
   19b26:	490c      	ldr	r1, [pc, #48]	; (19b58 <nrf_cc3xx_platform_set_mutexes+0x68>)
   19b28:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   19b2c:	2300      	movs	r3, #0
   19b2e:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   19b32:	f505 708a 	add.w	r0, r5, #276	; 0x114
   19b36:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   19b3a:	4790      	blx	r2
   19b3c:	6823      	ldr	r3, [r4, #0]
   19b3e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   19b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19b46:	4718      	bx	r3
   19b48:	bd70      	pop	{r4, r5, r6, pc}
   19b4a:	bf00      	nop
   19b4c:	200004b4 	.word	0x200004b4
   19b50:	20002938 	.word	0x20002938
   19b54:	200004c4 	.word	0x200004c4
   19b58:	a95c5f2c 	.word	0xa95c5f2c

00019b5c <mbedtls_zeroize_internal>:
   19b5c:	b138      	cbz	r0, 19b6e <mbedtls_zeroize_internal+0x12>
   19b5e:	b131      	cbz	r1, 19b6e <mbedtls_zeroize_internal+0x12>
   19b60:	4401      	add	r1, r0
   19b62:	2200      	movs	r2, #0
   19b64:	4603      	mov	r3, r0
   19b66:	3001      	adds	r0, #1
   19b68:	4281      	cmp	r1, r0
   19b6a:	701a      	strb	r2, [r3, #0]
   19b6c:	d1fa      	bne.n	19b64 <mbedtls_zeroize_internal+0x8>
   19b6e:	4770      	bx	lr

00019b70 <mbedtls_platform_zeroize>:
   19b70:	b138      	cbz	r0, 19b82 <mbedtls_platform_zeroize+0x12>
   19b72:	b131      	cbz	r1, 19b82 <mbedtls_platform_zeroize+0x12>
   19b74:	4401      	add	r1, r0
   19b76:	2200      	movs	r2, #0
   19b78:	4603      	mov	r3, r0
   19b7a:	3001      	adds	r0, #1
   19b7c:	4288      	cmp	r0, r1
   19b7e:	701a      	strb	r2, [r3, #0]
   19b80:	d1fa      	bne.n	19b78 <mbedtls_platform_zeroize+0x8>
   19b82:	4770      	bx	lr

00019b84 <block_cipher_df>:
   19b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b88:	b0b7      	sub	sp, #220	; 0xdc
   19b8a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   19b8e:	9005      	str	r0, [sp, #20]
   19b90:	f200 8147 	bhi.w	19e22 <block_cipher_df+0x29e>
   19b94:	4614      	mov	r4, r2
   19b96:	460d      	mov	r5, r1
   19b98:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   19b9c:	2100      	movs	r1, #0
   19b9e:	48a2      	ldr	r0, [pc, #648]	; (19e28 <block_cipher_df+0x2a4>)
   19ba0:	f003 fa2f 	bl	1d002 <memset>
   19ba4:	a819      	add	r0, sp, #100	; 0x64
   19ba6:	f001 f9cf 	bl	1af48 <cc_mbedtls_aes_init>
   19baa:	489f      	ldr	r0, [pc, #636]	; (19e28 <block_cipher_df+0x2a4>)
   19bac:	2300      	movs	r3, #0
   19bae:	8203      	strh	r3, [r0, #16]
   19bb0:	ba63      	rev16	r3, r4
   19bb2:	8243      	strh	r3, [r0, #18]
   19bb4:	2320      	movs	r3, #32
   19bb6:	4629      	mov	r1, r5
   19bb8:	75c3      	strb	r3, [r0, #23]
   19bba:	4605      	mov	r5, r0
   19bbc:	4622      	mov	r2, r4
   19bbe:	3018      	adds	r0, #24
   19bc0:	f003 fa14 	bl	1cfec <memcpy>
   19bc4:	462b      	mov	r3, r5
   19bc6:	4423      	add	r3, r4
   19bc8:	2280      	movs	r2, #128	; 0x80
   19bca:	761a      	strb	r2, [r3, #24]
   19bcc:	4b97      	ldr	r3, [pc, #604]	; (19e2c <block_cipher_df+0x2a8>)
   19bce:	930d      	str	r3, [sp, #52]	; 0x34
   19bd0:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   19bd4:	930e      	str	r3, [sp, #56]	; 0x38
   19bd6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   19bda:	930f      	str	r3, [sp, #60]	; 0x3c
   19bdc:	a90d      	add	r1, sp, #52	; 0x34
   19bde:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   19be2:	a819      	add	r0, sp, #100	; 0x64
   19be4:	9310      	str	r3, [sp, #64]	; 0x40
   19be6:	f001 f9c5 	bl	1af74 <cc_mbedtls_aes_setkey_enc>
   19bea:	4605      	mov	r5, r0
   19bec:	2800      	cmp	r0, #0
   19bee:	f040 80f4 	bne.w	19dda <block_cipher_df+0x256>
   19bf2:	f104 0319 	add.w	r3, r4, #25
   19bf6:	9306      	str	r3, [sp, #24]
   19bf8:	f10d 0820 	add.w	r8, sp, #32
   19bfc:	ab11      	add	r3, sp, #68	; 0x44
   19bfe:	9304      	str	r3, [sp, #16]
   19c00:	9307      	str	r3, [sp, #28]
   19c02:	46c1      	mov	r9, r8
   19c04:	2210      	movs	r2, #16
   19c06:	2100      	movs	r1, #0
   19c08:	4648      	mov	r0, r9
   19c0a:	f003 f9fa 	bl	1d002 <memset>
   19c0e:	f8df a220 	ldr.w	sl, [pc, #544]	; 19e30 <block_cipher_df+0x2ac>
   19c12:	9b06      	ldr	r3, [sp, #24]
   19c14:	9300      	str	r3, [sp, #0]
   19c16:	f8cd 900c 	str.w	r9, [sp, #12]
   19c1a:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   19c1e:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   19c22:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   19c26:	f89d 5020 	ldrb.w	r5, [sp, #32]
   19c2a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   19c2e:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   19c32:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   19c36:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   19c3a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   19c3e:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   19c42:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   19c46:	406a      	eors	r2, r5
   19c48:	ea8e 0e00 	eor.w	lr, lr, r0
   19c4c:	9d00      	ldr	r5, [sp, #0]
   19c4e:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   19c52:	9202      	str	r2, [sp, #8]
   19c54:	ea8c 0c03 	eor.w	ip, ip, r3
   19c58:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   19c5c:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   19c60:	2d10      	cmp	r5, #16
   19c62:	ea80 0003 	eor.w	r0, r0, r3
   19c66:	462b      	mov	r3, r5
   19c68:	bf8c      	ite	hi
   19c6a:	3b10      	subhi	r3, #16
   19c6c:	1b6b      	subls	r3, r5, r5
   19c6e:	9300      	str	r3, [sp, #0]
   19c70:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   19c74:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   19c78:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   19c7c:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   19c80:	4061      	eors	r1, r4
   19c82:	405f      	eors	r7, r3
   19c84:	2400      	movs	r4, #0
   19c86:	406a      	eors	r2, r5
   19c88:	ea8b 0b06 	eor.w	fp, fp, r6
   19c8c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   19c90:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   19c94:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   19c98:	9601      	str	r6, [sp, #4]
   19c9a:	4626      	mov	r6, r4
   19c9c:	406b      	eors	r3, r5
   19c9e:	f36b 0607 	bfi	r6, fp, #0, #8
   19ca2:	4625      	mov	r5, r4
   19ca4:	f367 260f 	bfi	r6, r7, #8, #8
   19ca8:	462f      	mov	r7, r5
   19caa:	f361 0707 	bfi	r7, r1, #0, #8
   19cae:	9902      	ldr	r1, [sp, #8]
   19cb0:	f361 0507 	bfi	r5, r1, #0, #8
   19cb4:	f362 250f 	bfi	r5, r2, #8, #8
   19cb8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   19cbc:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   19cc0:	f363 270f 	bfi	r7, r3, #8, #8
   19cc4:	ea82 0909 	eor.w	r9, r2, r9
   19cc8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   19ccc:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   19cd0:	ea83 0808 	eor.w	r8, r3, r8
   19cd4:	404a      	eors	r2, r1
   19cd6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   19cda:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   19cde:	f36e 0407 	bfi	r4, lr, #0, #8
   19ce2:	404b      	eors	r3, r1
   19ce4:	f368 4717 	bfi	r7, r8, #16, #8
   19ce8:	f36c 240f 	bfi	r4, ip, #8, #8
   19cec:	f363 671f 	bfi	r7, r3, #24, #8
   19cf0:	9b03      	ldr	r3, [sp, #12]
   19cf2:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   19cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
   19cfa:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   19cfe:	ea8c 0c0e 	eor.w	ip, ip, lr
   19d02:	f36c 4617 	bfi	r6, ip, #16, #8
   19d06:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   19d0a:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   19d0e:	ea8c 0c08 	eor.w	ip, ip, r8
   19d12:	f36c 661f 	bfi	r6, ip, #24, #8
   19d16:	f369 4517 	bfi	r5, r9, #16, #8
   19d1a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   19d1e:	960b      	str	r6, [sp, #44]	; 0x2c
   19d20:	f362 651f 	bfi	r5, r2, #24, #8
   19d24:	f360 4417 	bfi	r4, r0, #16, #8
   19d28:	9508      	str	r5, [sp, #32]
   19d2a:	ea8c 050e 	eor.w	r5, ip, lr
   19d2e:	f365 641f 	bfi	r4, r5, #24, #8
   19d32:	461a      	mov	r2, r3
   19d34:	2101      	movs	r1, #1
   19d36:	a819      	add	r0, sp, #100	; 0x64
   19d38:	f10a 0a10 	add.w	sl, sl, #16
   19d3c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   19d40:	f001 f932 	bl	1afa8 <cc_mbedtls_aes_crypt_ecb>
   19d44:	2800      	cmp	r0, #0
   19d46:	d168      	bne.n	19e1a <block_cipher_df+0x296>
   19d48:	9b00      	ldr	r3, [sp, #0]
   19d4a:	2b00      	cmp	r3, #0
   19d4c:	f47f af65 	bne.w	19c1a <block_cipher_df+0x96>
   19d50:	9c07      	ldr	r4, [sp, #28]
   19d52:	f8dd 900c 	ldr.w	r9, [sp, #12]
   19d56:	4620      	mov	r0, r4
   19d58:	2210      	movs	r2, #16
   19d5a:	3410      	adds	r4, #16
   19d5c:	4649      	mov	r1, r9
   19d5e:	9407      	str	r4, [sp, #28]
   19d60:	f003 f944 	bl	1cfec <memcpy>
   19d64:	4a30      	ldr	r2, [pc, #192]	; (19e28 <block_cipher_df+0x2a4>)
   19d66:	78d3      	ldrb	r3, [r2, #3]
   19d68:	3301      	adds	r3, #1
   19d6a:	70d3      	strb	r3, [r2, #3]
   19d6c:	ab19      	add	r3, sp, #100	; 0x64
   19d6e:	429c      	cmp	r4, r3
   19d70:	f47f af48 	bne.w	19c04 <block_cipher_df+0x80>
   19d74:	9904      	ldr	r1, [sp, #16]
   19d76:	2280      	movs	r2, #128	; 0x80
   19d78:	4618      	mov	r0, r3
   19d7a:	f001 f8fb 	bl	1af74 <cc_mbedtls_aes_setkey_enc>
   19d7e:	46c8      	mov	r8, r9
   19d80:	4605      	mov	r5, r0
   19d82:	bb70      	cbnz	r0, 19de2 <block_cipher_df+0x25e>
   19d84:	9c05      	ldr	r4, [sp, #20]
   19d86:	f104 0620 	add.w	r6, r4, #32
   19d8a:	ab15      	add	r3, sp, #84	; 0x54
   19d8c:	461a      	mov	r2, r3
   19d8e:	2101      	movs	r1, #1
   19d90:	a819      	add	r0, sp, #100	; 0x64
   19d92:	f001 f909 	bl	1afa8 <cc_mbedtls_aes_crypt_ecb>
   19d96:	2210      	movs	r2, #16
   19d98:	4605      	mov	r5, r0
   19d9a:	bb10      	cbnz	r0, 19de2 <block_cipher_df+0x25e>
   19d9c:	4620      	mov	r0, r4
   19d9e:	a915      	add	r1, sp, #84	; 0x54
   19da0:	3410      	adds	r4, #16
   19da2:	f003 f923 	bl	1cfec <memcpy>
   19da6:	42b4      	cmp	r4, r6
   19da8:	d1ef      	bne.n	19d8a <block_cipher_df+0x206>
   19daa:	a819      	add	r0, sp, #100	; 0x64
   19dac:	f001 f8dc 	bl	1af68 <cc_mbedtls_aes_free>
   19db0:	481d      	ldr	r0, [pc, #116]	; (19e28 <block_cipher_df+0x2a4>)
   19db2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   19db6:	f7ff fedb 	bl	19b70 <mbedtls_platform_zeroize>
   19dba:	9804      	ldr	r0, [sp, #16]
   19dbc:	2120      	movs	r1, #32
   19dbe:	f7ff fed7 	bl	19b70 <mbedtls_platform_zeroize>
   19dc2:	a80d      	add	r0, sp, #52	; 0x34
   19dc4:	2110      	movs	r1, #16
   19dc6:	f7ff fed3 	bl	19b70 <mbedtls_platform_zeroize>
   19dca:	4640      	mov	r0, r8
   19dcc:	2110      	movs	r1, #16
   19dce:	f7ff fecf 	bl	19b70 <mbedtls_platform_zeroize>
   19dd2:	4628      	mov	r0, r5
   19dd4:	b037      	add	sp, #220	; 0xdc
   19dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dda:	ab11      	add	r3, sp, #68	; 0x44
   19ddc:	9304      	str	r3, [sp, #16]
   19dde:	f10d 0820 	add.w	r8, sp, #32
   19de2:	a819      	add	r0, sp, #100	; 0x64
   19de4:	f001 f8c0 	bl	1af68 <cc_mbedtls_aes_free>
   19de8:	480f      	ldr	r0, [pc, #60]	; (19e28 <block_cipher_df+0x2a4>)
   19dea:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   19dee:	f7ff febf 	bl	19b70 <mbedtls_platform_zeroize>
   19df2:	9804      	ldr	r0, [sp, #16]
   19df4:	2120      	movs	r1, #32
   19df6:	f7ff febb 	bl	19b70 <mbedtls_platform_zeroize>
   19dfa:	a80d      	add	r0, sp, #52	; 0x34
   19dfc:	2110      	movs	r1, #16
   19dfe:	f7ff feb7 	bl	19b70 <mbedtls_platform_zeroize>
   19e02:	4640      	mov	r0, r8
   19e04:	2110      	movs	r1, #16
   19e06:	f7ff feb3 	bl	19b70 <mbedtls_platform_zeroize>
   19e0a:	9805      	ldr	r0, [sp, #20]
   19e0c:	2120      	movs	r1, #32
   19e0e:	f7ff feaf 	bl	19b70 <mbedtls_platform_zeroize>
   19e12:	4628      	mov	r0, r5
   19e14:	b037      	add	sp, #220	; 0xdc
   19e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e1a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   19e1e:	4605      	mov	r5, r0
   19e20:	e7df      	b.n	19de2 <block_cipher_df+0x25e>
   19e22:	f06f 0537 	mvn.w	r5, #55	; 0x37
   19e26:	e7f4      	b.n	19e12 <block_cipher_df+0x28e>
   19e28:	20002b08 	.word	0x20002b08
   19e2c:	03020100 	.word	0x03020100
   19e30:	20002b18 	.word	0x20002b18

00019e34 <ctr_drbg_update_internal>:
   19e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e38:	b088      	sub	sp, #32
   19e3a:	4604      	mov	r4, r0
   19e3c:	460d      	mov	r5, r1
   19e3e:	2220      	movs	r2, #32
   19e40:	2100      	movs	r1, #0
   19e42:	4668      	mov	r0, sp
   19e44:	f003 f8dd 	bl	1d002 <memset>
   19e48:	f104 0620 	add.w	r6, r4, #32
   19e4c:	466f      	mov	r7, sp
   19e4e:	7be2      	ldrb	r2, [r4, #15]
   19e50:	3201      	adds	r2, #1
   19e52:	b2d2      	uxtb	r2, r2
   19e54:	73e2      	strb	r2, [r4, #15]
   19e56:	2a00      	cmp	r2, #0
   19e58:	d14d      	bne.n	19ef6 <ctr_drbg_update_internal+0xc2>
   19e5a:	7ba2      	ldrb	r2, [r4, #14]
   19e5c:	3201      	adds	r2, #1
   19e5e:	b2d2      	uxtb	r2, r2
   19e60:	73a2      	strb	r2, [r4, #14]
   19e62:	2a00      	cmp	r2, #0
   19e64:	d147      	bne.n	19ef6 <ctr_drbg_update_internal+0xc2>
   19e66:	7b63      	ldrb	r3, [r4, #13]
   19e68:	3301      	adds	r3, #1
   19e6a:	b2db      	uxtb	r3, r3
   19e6c:	7363      	strb	r3, [r4, #13]
   19e6e:	2b00      	cmp	r3, #0
   19e70:	d141      	bne.n	19ef6 <ctr_drbg_update_internal+0xc2>
   19e72:	7b23      	ldrb	r3, [r4, #12]
   19e74:	3301      	adds	r3, #1
   19e76:	b2db      	uxtb	r3, r3
   19e78:	7323      	strb	r3, [r4, #12]
   19e7a:	2b00      	cmp	r3, #0
   19e7c:	d13b      	bne.n	19ef6 <ctr_drbg_update_internal+0xc2>
   19e7e:	7ae3      	ldrb	r3, [r4, #11]
   19e80:	3301      	adds	r3, #1
   19e82:	b2db      	uxtb	r3, r3
   19e84:	72e3      	strb	r3, [r4, #11]
   19e86:	2b00      	cmp	r3, #0
   19e88:	d135      	bne.n	19ef6 <ctr_drbg_update_internal+0xc2>
   19e8a:	7aa3      	ldrb	r3, [r4, #10]
   19e8c:	3301      	adds	r3, #1
   19e8e:	b2db      	uxtb	r3, r3
   19e90:	72a3      	strb	r3, [r4, #10]
   19e92:	2b00      	cmp	r3, #0
   19e94:	d12f      	bne.n	19ef6 <ctr_drbg_update_internal+0xc2>
   19e96:	7a63      	ldrb	r3, [r4, #9]
   19e98:	3301      	adds	r3, #1
   19e9a:	b2db      	uxtb	r3, r3
   19e9c:	7263      	strb	r3, [r4, #9]
   19e9e:	bb53      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19ea0:	7a23      	ldrb	r3, [r4, #8]
   19ea2:	3301      	adds	r3, #1
   19ea4:	b2db      	uxtb	r3, r3
   19ea6:	7223      	strb	r3, [r4, #8]
   19ea8:	bb2b      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19eaa:	79e3      	ldrb	r3, [r4, #7]
   19eac:	3301      	adds	r3, #1
   19eae:	b2db      	uxtb	r3, r3
   19eb0:	71e3      	strb	r3, [r4, #7]
   19eb2:	bb03      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19eb4:	79a3      	ldrb	r3, [r4, #6]
   19eb6:	3301      	adds	r3, #1
   19eb8:	b2db      	uxtb	r3, r3
   19eba:	71a3      	strb	r3, [r4, #6]
   19ebc:	b9db      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19ebe:	7963      	ldrb	r3, [r4, #5]
   19ec0:	3301      	adds	r3, #1
   19ec2:	b2db      	uxtb	r3, r3
   19ec4:	7163      	strb	r3, [r4, #5]
   19ec6:	b9b3      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19ec8:	7923      	ldrb	r3, [r4, #4]
   19eca:	3301      	adds	r3, #1
   19ecc:	b2db      	uxtb	r3, r3
   19ece:	7123      	strb	r3, [r4, #4]
   19ed0:	b98b      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19ed2:	78e3      	ldrb	r3, [r4, #3]
   19ed4:	3301      	adds	r3, #1
   19ed6:	b2db      	uxtb	r3, r3
   19ed8:	70e3      	strb	r3, [r4, #3]
   19eda:	b963      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19edc:	78a3      	ldrb	r3, [r4, #2]
   19ede:	3301      	adds	r3, #1
   19ee0:	b2db      	uxtb	r3, r3
   19ee2:	70a3      	strb	r3, [r4, #2]
   19ee4:	b93b      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19ee6:	7863      	ldrb	r3, [r4, #1]
   19ee8:	3301      	adds	r3, #1
   19eea:	b2db      	uxtb	r3, r3
   19eec:	7063      	strb	r3, [r4, #1]
   19eee:	b913      	cbnz	r3, 19ef6 <ctr_drbg_update_internal+0xc2>
   19ef0:	7823      	ldrb	r3, [r4, #0]
   19ef2:	3301      	adds	r3, #1
   19ef4:	7023      	strb	r3, [r4, #0]
   19ef6:	463b      	mov	r3, r7
   19ef8:	4622      	mov	r2, r4
   19efa:	2101      	movs	r1, #1
   19efc:	4630      	mov	r0, r6
   19efe:	f001 f853 	bl	1afa8 <cc_mbedtls_aes_crypt_ecb>
   19f02:	4680      	mov	r8, r0
   19f04:	bb50      	cbnz	r0, 19f5c <ctr_drbg_update_internal+0x128>
   19f06:	3710      	adds	r7, #16
   19f08:	ab08      	add	r3, sp, #32
   19f0a:	429f      	cmp	r7, r3
   19f0c:	d19f      	bne.n	19e4e <ctr_drbg_update_internal+0x1a>
   19f0e:	9a00      	ldr	r2, [sp, #0]
   19f10:	682b      	ldr	r3, [r5, #0]
   19f12:	9906      	ldr	r1, [sp, #24]
   19f14:	4053      	eors	r3, r2
   19f16:	9300      	str	r3, [sp, #0]
   19f18:	9a01      	ldr	r2, [sp, #4]
   19f1a:	686b      	ldr	r3, [r5, #4]
   19f1c:	4053      	eors	r3, r2
   19f1e:	9301      	str	r3, [sp, #4]
   19f20:	9a02      	ldr	r2, [sp, #8]
   19f22:	68ab      	ldr	r3, [r5, #8]
   19f24:	4053      	eors	r3, r2
   19f26:	9302      	str	r3, [sp, #8]
   19f28:	9a03      	ldr	r2, [sp, #12]
   19f2a:	68eb      	ldr	r3, [r5, #12]
   19f2c:	4053      	eors	r3, r2
   19f2e:	9303      	str	r3, [sp, #12]
   19f30:	9a04      	ldr	r2, [sp, #16]
   19f32:	692b      	ldr	r3, [r5, #16]
   19f34:	4053      	eors	r3, r2
   19f36:	9304      	str	r3, [sp, #16]
   19f38:	9a05      	ldr	r2, [sp, #20]
   19f3a:	696b      	ldr	r3, [r5, #20]
   19f3c:	4053      	eors	r3, r2
   19f3e:	69aa      	ldr	r2, [r5, #24]
   19f40:	9305      	str	r3, [sp, #20]
   19f42:	404a      	eors	r2, r1
   19f44:	69eb      	ldr	r3, [r5, #28]
   19f46:	9206      	str	r2, [sp, #24]
   19f48:	9a07      	ldr	r2, [sp, #28]
   19f4a:	4630      	mov	r0, r6
   19f4c:	4053      	eors	r3, r2
   19f4e:	4669      	mov	r1, sp
   19f50:	2280      	movs	r2, #128	; 0x80
   19f52:	9307      	str	r3, [sp, #28]
   19f54:	f001 f80e 	bl	1af74 <cc_mbedtls_aes_setkey_enc>
   19f58:	4680      	mov	r8, r0
   19f5a:	b138      	cbz	r0, 19f6c <ctr_drbg_update_internal+0x138>
   19f5c:	4668      	mov	r0, sp
   19f5e:	2120      	movs	r1, #32
   19f60:	f7ff fe06 	bl	19b70 <mbedtls_platform_zeroize>
   19f64:	4640      	mov	r0, r8
   19f66:	b008      	add	sp, #32
   19f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f6c:	2210      	movs	r2, #16
   19f6e:	eb0d 0102 	add.w	r1, sp, r2
   19f72:	4620      	mov	r0, r4
   19f74:	f003 f83a 	bl	1cfec <memcpy>
   19f78:	e7f0      	b.n	19f5c <ctr_drbg_update_internal+0x128>
   19f7a:	bf00      	nop

00019f7c <mbedtls_ctr_drbg_reseed_internal>:
   19f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f80:	4604      	mov	r4, r0
   19f82:	6980      	ldr	r0, [r0, #24]
   19f84:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   19f88:	d852      	bhi.n	1a030 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   19f8a:	461d      	mov	r5, r3
   19f8c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   19f90:	42ab      	cmp	r3, r5
   19f92:	d34d      	bcc.n	1a030 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   19f94:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   19f98:	1a18      	subs	r0, r3, r0
   19f9a:	4290      	cmp	r0, r2
   19f9c:	4616      	mov	r6, r2
   19f9e:	d347      	bcc.n	1a030 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   19fa0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1a03c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   19fa4:	f44f 72c0 	mov.w	r2, #384	; 0x180
   19fa8:	460f      	mov	r7, r1
   19faa:	4648      	mov	r0, r9
   19fac:	2100      	movs	r1, #0
   19fae:	f003 f828 	bl	1d002 <memset>
   19fb2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   19fb6:	69a2      	ldr	r2, [r4, #24]
   19fb8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   19fbc:	4649      	mov	r1, r9
   19fbe:	4798      	blx	r3
   19fc0:	2800      	cmp	r0, #0
   19fc2:	d138      	bne.n	1a036 <mbedtls_ctr_drbg_reseed_internal+0xba>
   19fc4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   19fc8:	b13d      	cbz	r5, 19fda <mbedtls_ctr_drbg_reseed_internal+0x5e>
   19fca:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   19fce:	462a      	mov	r2, r5
   19fd0:	eb09 0108 	add.w	r1, r9, r8
   19fd4:	4798      	blx	r3
   19fd6:	bb70      	cbnz	r0, 1a036 <mbedtls_ctr_drbg_reseed_internal+0xba>
   19fd8:	44a8      	add	r8, r5
   19fda:	b107      	cbz	r7, 19fde <mbedtls_ctr_drbg_reseed_internal+0x62>
   19fdc:	b9c6      	cbnz	r6, 1a010 <mbedtls_ctr_drbg_reseed_internal+0x94>
   19fde:	4917      	ldr	r1, [pc, #92]	; (1a03c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   19fe0:	4642      	mov	r2, r8
   19fe2:	4608      	mov	r0, r1
   19fe4:	f7ff fdce 	bl	19b84 <block_cipher_df>
   19fe8:	4605      	mov	r5, r0
   19fea:	b138      	cbz	r0, 19ffc <mbedtls_ctr_drbg_reseed_internal+0x80>
   19fec:	4813      	ldr	r0, [pc, #76]	; (1a03c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   19fee:	f44f 71c0 	mov.w	r1, #384	; 0x180
   19ff2:	f7ff fdbd 	bl	19b70 <mbedtls_platform_zeroize>
   19ff6:	4628      	mov	r0, r5
   19ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19ffc:	490f      	ldr	r1, [pc, #60]	; (1a03c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   19ffe:	4620      	mov	r0, r4
   1a000:	f7ff ff18 	bl	19e34 <ctr_drbg_update_internal>
   1a004:	4605      	mov	r5, r0
   1a006:	2800      	cmp	r0, #0
   1a008:	d1f0      	bne.n	19fec <mbedtls_ctr_drbg_reseed_internal+0x70>
   1a00a:	2301      	movs	r3, #1
   1a00c:	6123      	str	r3, [r4, #16]
   1a00e:	e7ed      	b.n	19fec <mbedtls_ctr_drbg_reseed_internal+0x70>
   1a010:	eb09 0008 	add.w	r0, r9, r8
   1a014:	4639      	mov	r1, r7
   1a016:	4632      	mov	r2, r6
   1a018:	f002 ffe8 	bl	1cfec <memcpy>
   1a01c:	4907      	ldr	r1, [pc, #28]	; (1a03c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1a01e:	44b0      	add	r8, r6
   1a020:	4642      	mov	r2, r8
   1a022:	4608      	mov	r0, r1
   1a024:	f7ff fdae 	bl	19b84 <block_cipher_df>
   1a028:	4605      	mov	r5, r0
   1a02a:	2800      	cmp	r0, #0
   1a02c:	d1de      	bne.n	19fec <mbedtls_ctr_drbg_reseed_internal+0x70>
   1a02e:	e7e5      	b.n	19ffc <mbedtls_ctr_drbg_reseed_internal+0x80>
   1a030:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1a034:	e7df      	b.n	19ff6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1a036:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1a03a:	e7dc      	b.n	19ff6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1a03c:	20002ca8 	.word	0x20002ca8

0001a040 <cc_mbedtls_ctr_drbg_init>:
   1a040:	b510      	push	{r4, lr}
   1a042:	22a4      	movs	r2, #164	; 0xa4
   1a044:	4604      	mov	r4, r0
   1a046:	2100      	movs	r1, #0
   1a048:	f002 ffdb 	bl	1d002 <memset>
   1a04c:	4b06      	ldr	r3, [pc, #24]	; (1a068 <cc_mbedtls_ctr_drbg_init+0x28>)
   1a04e:	f04f 31ff 	mov.w	r1, #4294967295
   1a052:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1a056:	6121      	str	r1, [r4, #16]
   1a058:	61e2      	str	r2, [r4, #28]
   1a05a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1a05e:	681b      	ldr	r3, [r3, #0]
   1a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a064:	4718      	bx	r3
   1a066:	bf00      	nop
   1a068:	20000508 	.word	0x20000508

0001a06c <cc_mbedtls_ctr_drbg_seed>:
   1a06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a070:	b085      	sub	sp, #20
   1a072:	4605      	mov	r5, r0
   1a074:	460f      	mov	r7, r1
   1a076:	4616      	mov	r6, r2
   1a078:	2100      	movs	r1, #0
   1a07a:	2210      	movs	r2, #16
   1a07c:	4668      	mov	r0, sp
   1a07e:	4699      	mov	r9, r3
   1a080:	f002 ffbf 	bl	1d002 <memset>
   1a084:	4b1e      	ldr	r3, [pc, #120]	; (1a100 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1a086:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1a08a:	681b      	ldr	r3, [r3, #0]
   1a08c:	4640      	mov	r0, r8
   1a08e:	4798      	blx	r3
   1a090:	b120      	cbz	r0, 1a09c <cc_mbedtls_ctr_drbg_seed+0x30>
   1a092:	4604      	mov	r4, r0
   1a094:	4620      	mov	r0, r4
   1a096:	b005      	add	sp, #20
   1a098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a09c:	f105 0420 	add.w	r4, r5, #32
   1a0a0:	4620      	mov	r0, r4
   1a0a2:	f000 ff51 	bl	1af48 <cc_mbedtls_aes_init>
   1a0a6:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1a0aa:	69ae      	ldr	r6, [r5, #24]
   1a0ac:	692b      	ldr	r3, [r5, #16]
   1a0ae:	b9ee      	cbnz	r6, 1a0ec <cc_mbedtls_ctr_drbg_seed+0x80>
   1a0b0:	2220      	movs	r2, #32
   1a0b2:	2b00      	cmp	r3, #0
   1a0b4:	61aa      	str	r2, [r5, #24]
   1a0b6:	db20      	blt.n	1a0fa <cc_mbedtls_ctr_drbg_seed+0x8e>
   1a0b8:	461e      	mov	r6, r3
   1a0ba:	4620      	mov	r0, r4
   1a0bc:	4669      	mov	r1, sp
   1a0be:	2280      	movs	r2, #128	; 0x80
   1a0c0:	f000 ff58 	bl	1af74 <cc_mbedtls_aes_setkey_enc>
   1a0c4:	4604      	mov	r4, r0
   1a0c6:	b930      	cbnz	r0, 1a0d6 <cc_mbedtls_ctr_drbg_seed+0x6a>
   1a0c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a0ca:	4633      	mov	r3, r6
   1a0cc:	4649      	mov	r1, r9
   1a0ce:	4628      	mov	r0, r5
   1a0d0:	f7ff ff54 	bl	19f7c <mbedtls_ctr_drbg_reseed_internal>
   1a0d4:	4604      	mov	r4, r0
   1a0d6:	4b0b      	ldr	r3, [pc, #44]	; (1a104 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1a0d8:	4640      	mov	r0, r8
   1a0da:	681b      	ldr	r3, [r3, #0]
   1a0dc:	4798      	blx	r3
   1a0de:	2800      	cmp	r0, #0
   1a0e0:	bf18      	it	ne
   1a0e2:	4604      	movne	r4, r0
   1a0e4:	4620      	mov	r0, r4
   1a0e6:	b005      	add	sp, #20
   1a0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a0ec:	2b00      	cmp	r3, #0
   1a0ee:	dae3      	bge.n	1a0b8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1a0f0:	2e17      	cmp	r6, #23
   1a0f2:	d802      	bhi.n	1a0fa <cc_mbedtls_ctr_drbg_seed+0x8e>
   1a0f4:	3601      	adds	r6, #1
   1a0f6:	0876      	lsrs	r6, r6, #1
   1a0f8:	e7df      	b.n	1a0ba <cc_mbedtls_ctr_drbg_seed+0x4e>
   1a0fa:	2600      	movs	r6, #0
   1a0fc:	e7dd      	b.n	1a0ba <cc_mbedtls_ctr_drbg_seed+0x4e>
   1a0fe:	bf00      	nop
   1a100:	2000050c 	.word	0x2000050c
   1a104:	20000510 	.word	0x20000510

0001a108 <cc_mbedtls_ctr_drbg_random_with_add>:
   1a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a10c:	b08d      	sub	sp, #52	; 0x34
   1a10e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1a112:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1a114:	f200 80e3 	bhi.w	1a2de <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1a118:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1a11c:	f200 80dc 	bhi.w	1a2d8 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1a120:	4604      	mov	r4, r0
   1a122:	4615      	mov	r5, r2
   1a124:	460e      	mov	r6, r1
   1a126:	2220      	movs	r2, #32
   1a128:	2100      	movs	r1, #0
   1a12a:	a804      	add	r0, sp, #16
   1a12c:	4698      	mov	r8, r3
   1a12e:	f002 ff68 	bl	1d002 <memset>
   1a132:	4b6c      	ldr	r3, [pc, #432]	; (1a2e4 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1a134:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1a138:	681b      	ldr	r3, [r3, #0]
   1a13a:	4648      	mov	r0, r9
   1a13c:	4798      	blx	r3
   1a13e:	4683      	mov	fp, r0
   1a140:	2800      	cmp	r0, #0
   1a142:	f040 8092 	bne.w	1a26a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1a146:	6922      	ldr	r2, [r4, #16]
   1a148:	69e3      	ldr	r3, [r4, #28]
   1a14a:	429a      	cmp	r2, r3
   1a14c:	f300 8091 	bgt.w	1a272 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1a150:	6963      	ldr	r3, [r4, #20]
   1a152:	2b00      	cmp	r3, #0
   1a154:	f040 808d 	bne.w	1a272 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1a158:	2f00      	cmp	r7, #0
   1a15a:	f040 80a9 	bne.w	1a2b0 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1a15e:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a2e8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1a162:	466f      	mov	r7, sp
   1a164:	2d00      	cmp	r5, #0
   1a166:	f000 8098 	beq.w	1a29a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1a16a:	f104 0820 	add.w	r8, r4, #32
   1a16e:	466f      	mov	r7, sp
   1a170:	e00e      	b.n	1a190 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1a172:	2d10      	cmp	r5, #16
   1a174:	46ab      	mov	fp, r5
   1a176:	bf28      	it	cs
   1a178:	f04f 0b10 	movcs.w	fp, #16
   1a17c:	4630      	mov	r0, r6
   1a17e:	465a      	mov	r2, fp
   1a180:	4639      	mov	r1, r7
   1a182:	f002 ff33 	bl	1cfec <memcpy>
   1a186:	ebb5 050b 	subs.w	r5, r5, fp
   1a18a:	445e      	add	r6, fp
   1a18c:	f000 8085 	beq.w	1a29a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1a190:	7be3      	ldrb	r3, [r4, #15]
   1a192:	3301      	adds	r3, #1
   1a194:	b2db      	uxtb	r3, r3
   1a196:	73e3      	strb	r3, [r4, #15]
   1a198:	2b00      	cmp	r3, #0
   1a19a:	d14d      	bne.n	1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a19c:	7ba3      	ldrb	r3, [r4, #14]
   1a19e:	3301      	adds	r3, #1
   1a1a0:	b2db      	uxtb	r3, r3
   1a1a2:	73a3      	strb	r3, [r4, #14]
   1a1a4:	2b00      	cmp	r3, #0
   1a1a6:	d147      	bne.n	1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1a8:	7b63      	ldrb	r3, [r4, #13]
   1a1aa:	3301      	adds	r3, #1
   1a1ac:	b2db      	uxtb	r3, r3
   1a1ae:	7363      	strb	r3, [r4, #13]
   1a1b0:	2b00      	cmp	r3, #0
   1a1b2:	d141      	bne.n	1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1b4:	7b23      	ldrb	r3, [r4, #12]
   1a1b6:	3301      	adds	r3, #1
   1a1b8:	b2db      	uxtb	r3, r3
   1a1ba:	7323      	strb	r3, [r4, #12]
   1a1bc:	2b00      	cmp	r3, #0
   1a1be:	d13b      	bne.n	1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1c0:	7ae3      	ldrb	r3, [r4, #11]
   1a1c2:	3301      	adds	r3, #1
   1a1c4:	b2db      	uxtb	r3, r3
   1a1c6:	72e3      	strb	r3, [r4, #11]
   1a1c8:	2b00      	cmp	r3, #0
   1a1ca:	d135      	bne.n	1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1cc:	7aa3      	ldrb	r3, [r4, #10]
   1a1ce:	3301      	adds	r3, #1
   1a1d0:	b2db      	uxtb	r3, r3
   1a1d2:	72a3      	strb	r3, [r4, #10]
   1a1d4:	2b00      	cmp	r3, #0
   1a1d6:	d12f      	bne.n	1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1d8:	7a63      	ldrb	r3, [r4, #9]
   1a1da:	3301      	adds	r3, #1
   1a1dc:	b2db      	uxtb	r3, r3
   1a1de:	7263      	strb	r3, [r4, #9]
   1a1e0:	bb53      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1e2:	7a23      	ldrb	r3, [r4, #8]
   1a1e4:	3301      	adds	r3, #1
   1a1e6:	b2db      	uxtb	r3, r3
   1a1e8:	7223      	strb	r3, [r4, #8]
   1a1ea:	bb2b      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1ec:	79e3      	ldrb	r3, [r4, #7]
   1a1ee:	3301      	adds	r3, #1
   1a1f0:	b2db      	uxtb	r3, r3
   1a1f2:	71e3      	strb	r3, [r4, #7]
   1a1f4:	bb03      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a1f6:	79a3      	ldrb	r3, [r4, #6]
   1a1f8:	3301      	adds	r3, #1
   1a1fa:	b2db      	uxtb	r3, r3
   1a1fc:	71a3      	strb	r3, [r4, #6]
   1a1fe:	b9db      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a200:	7963      	ldrb	r3, [r4, #5]
   1a202:	3301      	adds	r3, #1
   1a204:	b2db      	uxtb	r3, r3
   1a206:	7163      	strb	r3, [r4, #5]
   1a208:	b9b3      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a20a:	7923      	ldrb	r3, [r4, #4]
   1a20c:	3301      	adds	r3, #1
   1a20e:	b2db      	uxtb	r3, r3
   1a210:	7123      	strb	r3, [r4, #4]
   1a212:	b98b      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a214:	78e3      	ldrb	r3, [r4, #3]
   1a216:	3301      	adds	r3, #1
   1a218:	b2db      	uxtb	r3, r3
   1a21a:	70e3      	strb	r3, [r4, #3]
   1a21c:	b963      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a21e:	78a3      	ldrb	r3, [r4, #2]
   1a220:	3301      	adds	r3, #1
   1a222:	b2db      	uxtb	r3, r3
   1a224:	70a3      	strb	r3, [r4, #2]
   1a226:	b93b      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a228:	7863      	ldrb	r3, [r4, #1]
   1a22a:	3301      	adds	r3, #1
   1a22c:	b2db      	uxtb	r3, r3
   1a22e:	7063      	strb	r3, [r4, #1]
   1a230:	b913      	cbnz	r3, 1a238 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1a232:	7823      	ldrb	r3, [r4, #0]
   1a234:	3301      	adds	r3, #1
   1a236:	7023      	strb	r3, [r4, #0]
   1a238:	463b      	mov	r3, r7
   1a23a:	4622      	mov	r2, r4
   1a23c:	2101      	movs	r1, #1
   1a23e:	4640      	mov	r0, r8
   1a240:	f000 feb2 	bl	1afa8 <cc_mbedtls_aes_crypt_ecb>
   1a244:	4683      	mov	fp, r0
   1a246:	2800      	cmp	r0, #0
   1a248:	d093      	beq.n	1a172 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1a24a:	f8da 3000 	ldr.w	r3, [sl]
   1a24e:	4648      	mov	r0, r9
   1a250:	4798      	blx	r3
   1a252:	2120      	movs	r1, #32
   1a254:	4603      	mov	r3, r0
   1a256:	a804      	add	r0, sp, #16
   1a258:	2b00      	cmp	r3, #0
   1a25a:	bf18      	it	ne
   1a25c:	469b      	movne	fp, r3
   1a25e:	f7ff fc87 	bl	19b70 <mbedtls_platform_zeroize>
   1a262:	2110      	movs	r1, #16
   1a264:	4638      	mov	r0, r7
   1a266:	f7ff fc83 	bl	19b70 <mbedtls_platform_zeroize>
   1a26a:	4658      	mov	r0, fp
   1a26c:	b00d      	add	sp, #52	; 0x34
   1a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a272:	463a      	mov	r2, r7
   1a274:	4641      	mov	r1, r8
   1a276:	2300      	movs	r3, #0
   1a278:	4620      	mov	r0, r4
   1a27a:	f7ff fe7f 	bl	19f7c <mbedtls_ctr_drbg_reseed_internal>
   1a27e:	f8df a068 	ldr.w	sl, [pc, #104]	; 1a2e8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1a282:	2800      	cmp	r0, #0
   1a284:	f43f af6d 	beq.w	1a162 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1a288:	f8da 3000 	ldr.w	r3, [sl]
   1a28c:	4648      	mov	r0, r9
   1a28e:	4798      	blx	r3
   1a290:	4683      	mov	fp, r0
   1a292:	2800      	cmp	r0, #0
   1a294:	f43f af65 	beq.w	1a162 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1a298:	e7e7      	b.n	1a26a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1a29a:	a904      	add	r1, sp, #16
   1a29c:	4620      	mov	r0, r4
   1a29e:	f7ff fdc9 	bl	19e34 <ctr_drbg_update_internal>
   1a2a2:	4683      	mov	fp, r0
   1a2a4:	2800      	cmp	r0, #0
   1a2a6:	d1d0      	bne.n	1a24a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1a2a8:	6923      	ldr	r3, [r4, #16]
   1a2aa:	3301      	adds	r3, #1
   1a2ac:	6123      	str	r3, [r4, #16]
   1a2ae:	e7cc      	b.n	1a24a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1a2b0:	463a      	mov	r2, r7
   1a2b2:	4641      	mov	r1, r8
   1a2b4:	a804      	add	r0, sp, #16
   1a2b6:	f7ff fc65 	bl	19b84 <block_cipher_df>
   1a2ba:	4683      	mov	fp, r0
   1a2bc:	b118      	cbz	r0, 1a2c6 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1a2be:	f8df a028 	ldr.w	sl, [pc, #40]	; 1a2e8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1a2c2:	466f      	mov	r7, sp
   1a2c4:	e7c1      	b.n	1a24a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1a2c6:	a904      	add	r1, sp, #16
   1a2c8:	4620      	mov	r0, r4
   1a2ca:	f7ff fdb3 	bl	19e34 <ctr_drbg_update_internal>
   1a2ce:	4683      	mov	fp, r0
   1a2d0:	2800      	cmp	r0, #0
   1a2d2:	f43f af44 	beq.w	1a15e <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1a2d6:	e7f2      	b.n	1a2be <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1a2d8:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1a2dc:	e7c5      	b.n	1a26a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1a2de:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1a2e2:	e7c2      	b.n	1a26a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1a2e4:	2000050c 	.word	0x2000050c
   1a2e8:	20000510 	.word	0x20000510

0001a2ec <entropy_update>:
   1a2ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a2f0:	2b20      	cmp	r3, #32
   1a2f2:	b08b      	sub	sp, #44	; 0x2c
   1a2f4:	461d      	mov	r5, r3
   1a2f6:	4606      	mov	r6, r0
   1a2f8:	4688      	mov	r8, r1
   1a2fa:	4691      	mov	r9, r2
   1a2fc:	d826      	bhi.n	1a34c <entropy_update+0x60>
   1a2fe:	b2db      	uxtb	r3, r3
   1a300:	af02      	add	r7, sp, #8
   1a302:	f88d 8004 	strb.w	r8, [sp, #4]
   1a306:	46b0      	mov	r8, r6
   1a308:	f88d 3005 	strb.w	r3, [sp, #5]
   1a30c:	f858 1b04 	ldr.w	r1, [r8], #4
   1a310:	b921      	cbnz	r1, 1a31c <entropy_update+0x30>
   1a312:	4640      	mov	r0, r8
   1a314:	f000 fe8c 	bl	1b030 <cc_mbedtls_sha256_starts>
   1a318:	4604      	mov	r4, r0
   1a31a:	b940      	cbnz	r0, 1a32e <entropy_update+0x42>
   1a31c:	2301      	movs	r3, #1
   1a31e:	6033      	str	r3, [r6, #0]
   1a320:	2202      	movs	r2, #2
   1a322:	a901      	add	r1, sp, #4
   1a324:	4640      	mov	r0, r8
   1a326:	f000 fe97 	bl	1b058 <cc_mbedtls_sha256_update>
   1a32a:	4604      	mov	r4, r0
   1a32c:	b138      	cbz	r0, 1a33e <entropy_update+0x52>
   1a32e:	4638      	mov	r0, r7
   1a330:	2120      	movs	r1, #32
   1a332:	f7ff fc1d 	bl	19b70 <mbedtls_platform_zeroize>
   1a336:	4620      	mov	r0, r4
   1a338:	b00b      	add	sp, #44	; 0x2c
   1a33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a33e:	462a      	mov	r2, r5
   1a340:	4649      	mov	r1, r9
   1a342:	4640      	mov	r0, r8
   1a344:	f000 fe88 	bl	1b058 <cc_mbedtls_sha256_update>
   1a348:	4604      	mov	r4, r0
   1a34a:	e7f0      	b.n	1a32e <entropy_update+0x42>
   1a34c:	af02      	add	r7, sp, #8
   1a34e:	4619      	mov	r1, r3
   1a350:	4610      	mov	r0, r2
   1a352:	2300      	movs	r3, #0
   1a354:	463a      	mov	r2, r7
   1a356:	f001 f807 	bl	1b368 <cc_mbedtls_sha256>
   1a35a:	4604      	mov	r4, r0
   1a35c:	2800      	cmp	r0, #0
   1a35e:	d1e6      	bne.n	1a32e <entropy_update+0x42>
   1a360:	2320      	movs	r3, #32
   1a362:	46b9      	mov	r9, r7
   1a364:	461d      	mov	r5, r3
   1a366:	e7cc      	b.n	1a302 <entropy_update+0x16>

0001a368 <entropy_gather_internal.part.0>:
   1a368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a36a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1a36e:	b0a7      	sub	sp, #156	; 0x9c
   1a370:	2b00      	cmp	r3, #0
   1a372:	bfd8      	it	le
   1a374:	ae02      	addle	r6, sp, #8
   1a376:	dd2c      	ble.n	1a3d2 <entropy_gather_internal.part.0+0x6a>
   1a378:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1a37c:	4605      	mov	r5, r0
   1a37e:	2300      	movs	r3, #0
   1a380:	ae02      	add	r6, sp, #8
   1a382:	9301      	str	r3, [sp, #4]
   1a384:	f1a4 0701 	sub.w	r7, r4, #1
   1a388:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1a38c:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1a390:	ab01      	add	r3, sp, #4
   1a392:	2290      	movs	r2, #144	; 0x90
   1a394:	4631      	mov	r1, r6
   1a396:	47a0      	blx	r4
   1a398:	fab7 f787 	clz	r7, r7
   1a39c:	097f      	lsrs	r7, r7, #5
   1a39e:	4604      	mov	r4, r0
   1a3a0:	b910      	cbnz	r0, 1a3a8 <entropy_gather_internal.part.0+0x40>
   1a3a2:	9b01      	ldr	r3, [sp, #4]
   1a3a4:	b93b      	cbnz	r3, 1a3b6 <entropy_gather_internal.part.0+0x4e>
   1a3a6:	b1a7      	cbz	r7, 1a3d2 <entropy_gather_internal.part.0+0x6a>
   1a3a8:	4630      	mov	r0, r6
   1a3aa:	2190      	movs	r1, #144	; 0x90
   1a3ac:	f7ff fbe0 	bl	19b70 <mbedtls_platform_zeroize>
   1a3b0:	4620      	mov	r0, r4
   1a3b2:	b027      	add	sp, #156	; 0x9c
   1a3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3b6:	4601      	mov	r1, r0
   1a3b8:	4632      	mov	r2, r6
   1a3ba:	4628      	mov	r0, r5
   1a3bc:	f7ff ff96 	bl	1a2ec <entropy_update>
   1a3c0:	b950      	cbnz	r0, 1a3d8 <entropy_gather_internal.part.0+0x70>
   1a3c2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1a3c6:	9a01      	ldr	r2, [sp, #4]
   1a3c8:	4413      	add	r3, r2
   1a3ca:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1a3ce:	2f00      	cmp	r7, #0
   1a3d0:	d1ea      	bne.n	1a3a8 <entropy_gather_internal.part.0+0x40>
   1a3d2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1a3d6:	e7e7      	b.n	1a3a8 <entropy_gather_internal.part.0+0x40>
   1a3d8:	4604      	mov	r4, r0
   1a3da:	4620      	mov	r0, r4
   1a3dc:	b027      	add	sp, #156	; 0x9c
   1a3de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a3e0 <cc_mbedtls_entropy_init>:
   1a3e0:	b570      	push	{r4, r5, r6, lr}
   1a3e2:	2500      	movs	r5, #0
   1a3e4:	4604      	mov	r4, r0
   1a3e6:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1a3ea:	2214      	movs	r2, #20
   1a3ec:	4629      	mov	r1, r5
   1a3ee:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1a3f2:	30fc      	adds	r0, #252	; 0xfc
   1a3f4:	f002 fe05 	bl	1d002 <memset>
   1a3f8:	2208      	movs	r2, #8
   1a3fa:	4629      	mov	r1, r5
   1a3fc:	4630      	mov	r0, r6
   1a3fe:	f002 fe00 	bl	1d002 <memset>
   1a402:	4b15      	ldr	r3, [pc, #84]	; (1a458 <cc_mbedtls_entropy_init+0x78>)
   1a404:	4630      	mov	r0, r6
   1a406:	681b      	ldr	r3, [r3, #0]
   1a408:	4798      	blx	r3
   1a40a:	4620      	mov	r0, r4
   1a40c:	f840 5b04 	str.w	r5, [r0], #4
   1a410:	f000 fdf4 	bl	1affc <cc_mbedtls_sha256_init>
   1a414:	4b11      	ldr	r3, [pc, #68]	; (1a45c <cc_mbedtls_entropy_init+0x7c>)
   1a416:	4630      	mov	r0, r6
   1a418:	681b      	ldr	r3, [r3, #0]
   1a41a:	4798      	blx	r3
   1a41c:	b9d8      	cbnz	r0, 1a456 <cc_mbedtls_entropy_init+0x76>
   1a41e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1a422:	42ab      	cmp	r3, r5
   1a424:	dc11      	bgt.n	1a44a <cc_mbedtls_entropy_init+0x6a>
   1a426:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a42a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1a42e:	2120      	movs	r1, #32
   1a430:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1a434:	2101      	movs	r1, #1
   1a436:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1a43a:	3301      	adds	r3, #1
   1a43c:	4908      	ldr	r1, [pc, #32]	; (1a460 <cc_mbedtls_entropy_init+0x80>)
   1a43e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1a442:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1a446:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1a44a:	4b06      	ldr	r3, [pc, #24]	; (1a464 <cc_mbedtls_entropy_init+0x84>)
   1a44c:	4630      	mov	r0, r6
   1a44e:	681b      	ldr	r3, [r3, #0]
   1a450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a454:	4718      	bx	r3
   1a456:	bd70      	pop	{r4, r5, r6, pc}
   1a458:	20000508 	.word	0x20000508
   1a45c:	2000050c 	.word	0x2000050c
   1a460:	0001ae4d 	.word	0x0001ae4d
   1a464:	20000510 	.word	0x20000510

0001a468 <cc_mbedtls_entropy_func>:
   1a468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a46c:	2a20      	cmp	r2, #32
   1a46e:	b088      	sub	sp, #32
   1a470:	d876      	bhi.n	1a560 <cc_mbedtls_entropy_func+0xf8>
   1a472:	4b3d      	ldr	r3, [pc, #244]	; (1a568 <cc_mbedtls_entropy_func+0x100>)
   1a474:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1a478:	681b      	ldr	r3, [r3, #0]
   1a47a:	4604      	mov	r4, r0
   1a47c:	4648      	mov	r0, r9
   1a47e:	4617      	mov	r7, r2
   1a480:	4688      	mov	r8, r1
   1a482:	4798      	blx	r3
   1a484:	4605      	mov	r5, r0
   1a486:	bba0      	cbnz	r0, 1a4f2 <cc_mbedtls_entropy_func+0x8a>
   1a488:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1a48c:	f240 1601 	movw	r6, #257	; 0x101
   1a490:	e001      	b.n	1a496 <cc_mbedtls_entropy_func+0x2e>
   1a492:	3e01      	subs	r6, #1
   1a494:	d060      	beq.n	1a558 <cc_mbedtls_entropy_func+0xf0>
   1a496:	4620      	mov	r0, r4
   1a498:	b37b      	cbz	r3, 1a4fa <cc_mbedtls_entropy_func+0x92>
   1a49a:	f7ff ff65 	bl	1a368 <entropy_gather_internal.part.0>
   1a49e:	4605      	mov	r5, r0
   1a4a0:	bb68      	cbnz	r0, 1a4fe <cc_mbedtls_entropy_func+0x96>
   1a4a2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1a4a6:	2b00      	cmp	r3, #0
   1a4a8:	ddf3      	ble.n	1a492 <cc_mbedtls_entropy_func+0x2a>
   1a4aa:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   1a4ae:	4290      	cmp	r0, r2
   1a4b0:	d3ef      	bcc.n	1a492 <cc_mbedtls_entropy_func+0x2a>
   1a4b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4b6:	2a01      	cmp	r2, #1
   1a4b8:	d1eb      	bne.n	1a492 <cc_mbedtls_entropy_func+0x2a>
   1a4ba:	281f      	cmp	r0, #31
   1a4bc:	d9e9      	bls.n	1a492 <cc_mbedtls_entropy_func+0x2a>
   1a4be:	466e      	mov	r6, sp
   1a4c0:	4629      	mov	r1, r5
   1a4c2:	2220      	movs	r2, #32
   1a4c4:	4630      	mov	r0, r6
   1a4c6:	f104 0a04 	add.w	sl, r4, #4
   1a4ca:	f002 fd9a 	bl	1d002 <memset>
   1a4ce:	4631      	mov	r1, r6
   1a4d0:	4650      	mov	r0, sl
   1a4d2:	f000 fdeb 	bl	1b0ac <cc_mbedtls_sha256_finish>
   1a4d6:	4605      	mov	r5, r0
   1a4d8:	b198      	cbz	r0, 1a502 <cc_mbedtls_entropy_func+0x9a>
   1a4da:	2120      	movs	r1, #32
   1a4dc:	4630      	mov	r0, r6
   1a4de:	f7ff fb47 	bl	19b70 <mbedtls_platform_zeroize>
   1a4e2:	4b22      	ldr	r3, [pc, #136]	; (1a56c <cc_mbedtls_entropy_func+0x104>)
   1a4e4:	4648      	mov	r0, r9
   1a4e6:	681b      	ldr	r3, [r3, #0]
   1a4e8:	4798      	blx	r3
   1a4ea:	2800      	cmp	r0, #0
   1a4ec:	bf18      	it	ne
   1a4ee:	f06f 051d 	mvnne.w	r5, #29
   1a4f2:	4628      	mov	r0, r5
   1a4f4:	b008      	add	sp, #32
   1a4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a4fa:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1a4fe:	466e      	mov	r6, sp
   1a500:	e7eb      	b.n	1a4da <cc_mbedtls_entropy_func+0x72>
   1a502:	4650      	mov	r0, sl
   1a504:	f000 fd8e 	bl	1b024 <cc_mbedtls_sha256_free>
   1a508:	4650      	mov	r0, sl
   1a50a:	f000 fd77 	bl	1affc <cc_mbedtls_sha256_init>
   1a50e:	4629      	mov	r1, r5
   1a510:	4650      	mov	r0, sl
   1a512:	f000 fd8d 	bl	1b030 <cc_mbedtls_sha256_starts>
   1a516:	4605      	mov	r5, r0
   1a518:	2800      	cmp	r0, #0
   1a51a:	d1de      	bne.n	1a4da <cc_mbedtls_entropy_func+0x72>
   1a51c:	4650      	mov	r0, sl
   1a51e:	2220      	movs	r2, #32
   1a520:	4631      	mov	r1, r6
   1a522:	f000 fd99 	bl	1b058 <cc_mbedtls_sha256_update>
   1a526:	4605      	mov	r5, r0
   1a528:	2800      	cmp	r0, #0
   1a52a:	d1d6      	bne.n	1a4da <cc_mbedtls_entropy_func+0x72>
   1a52c:	4603      	mov	r3, r0
   1a52e:	4632      	mov	r2, r6
   1a530:	2120      	movs	r1, #32
   1a532:	4630      	mov	r0, r6
   1a534:	f000 ff18 	bl	1b368 <cc_mbedtls_sha256>
   1a538:	4605      	mov	r5, r0
   1a53a:	2800      	cmp	r0, #0
   1a53c:	d1cd      	bne.n	1a4da <cc_mbedtls_entropy_func+0x72>
   1a53e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1a542:	2b00      	cmp	r3, #0
   1a544:	bfc4      	itt	gt
   1a546:	2300      	movgt	r3, #0
   1a548:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1a54c:	463a      	mov	r2, r7
   1a54e:	4640      	mov	r0, r8
   1a550:	4631      	mov	r1, r6
   1a552:	f002 fd4b 	bl	1cfec <memcpy>
   1a556:	e7c0      	b.n	1a4da <cc_mbedtls_entropy_func+0x72>
   1a558:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1a55c:	466e      	mov	r6, sp
   1a55e:	e7bc      	b.n	1a4da <cc_mbedtls_entropy_func+0x72>
   1a560:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1a564:	e7c5      	b.n	1a4f2 <cc_mbedtls_entropy_func+0x8a>
   1a566:	bf00      	nop
   1a568:	2000050c 	.word	0x2000050c
   1a56c:	20000510 	.word	0x20000510

0001a570 <RndStartupTest.constprop.0>:
   1a570:	b530      	push	{r4, r5, lr}
   1a572:	b08d      	sub	sp, #52	; 0x34
   1a574:	2100      	movs	r1, #0
   1a576:	2228      	movs	r2, #40	; 0x28
   1a578:	a802      	add	r0, sp, #8
   1a57a:	9101      	str	r1, [sp, #4]
   1a57c:	f002 fd41 	bl	1d002 <memset>
   1a580:	a802      	add	r0, sp, #8
   1a582:	f000 ff19 	bl	1b3b8 <RNG_PLAT_SetUserRngParameters>
   1a586:	4604      	mov	r4, r0
   1a588:	b110      	cbz	r0, 1a590 <RndStartupTest.constprop.0+0x20>
   1a58a:	4620      	mov	r0, r4
   1a58c:	b00d      	add	sp, #52	; 0x34
   1a58e:	bd30      	pop	{r4, r5, pc}
   1a590:	4d18      	ldr	r5, [pc, #96]	; (1a5f4 <RndStartupTest.constprop.0+0x84>)
   1a592:	f04f 31ff 	mov.w	r1, #4294967295
   1a596:	6828      	ldr	r0, [r5, #0]
   1a598:	f000 f946 	bl	1a828 <CC_PalMutexLock>
   1a59c:	4604      	mov	r4, r0
   1a59e:	b9c0      	cbnz	r0, 1a5d2 <RndStartupTest.constprop.0+0x62>
   1a5a0:	2000      	movs	r0, #0
   1a5a2:	f000 f971 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1a5a6:	bb00      	cbnz	r0, 1a5ea <RndStartupTest.constprop.0+0x7a>
   1a5a8:	4a13      	ldr	r2, [pc, #76]	; (1a5f8 <RndStartupTest.constprop.0+0x88>)
   1a5aa:	a902      	add	r1, sp, #8
   1a5ac:	a801      	add	r0, sp, #4
   1a5ae:	f000 fc3f 	bl	1ae30 <LLF_RND_RunTrngStartupTest>
   1a5b2:	4604      	mov	r4, r0
   1a5b4:	2001      	movs	r0, #1
   1a5b6:	f000 f967 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1a5ba:	b990      	cbnz	r0, 1a5e2 <RndStartupTest.constprop.0+0x72>
   1a5bc:	6828      	ldr	r0, [r5, #0]
   1a5be:	f000 f93b 	bl	1a838 <CC_PalMutexUnlock>
   1a5c2:	2800      	cmp	r0, #0
   1a5c4:	d0e1      	beq.n	1a58a <RndStartupTest.constprop.0+0x1a>
   1a5c6:	480d      	ldr	r0, [pc, #52]	; (1a5fc <RndStartupTest.constprop.0+0x8c>)
   1a5c8:	f7ff f9b2 	bl	19930 <CC_PalAbort>
   1a5cc:	4620      	mov	r0, r4
   1a5ce:	b00d      	add	sp, #52	; 0x34
   1a5d0:	bd30      	pop	{r4, r5, pc}
   1a5d2:	480b      	ldr	r0, [pc, #44]	; (1a600 <RndStartupTest.constprop.0+0x90>)
   1a5d4:	f7ff f9ac 	bl	19930 <CC_PalAbort>
   1a5d8:	2c01      	cmp	r4, #1
   1a5da:	bf08      	it	eq
   1a5dc:	2405      	moveq	r4, #5
   1a5de:	d0ed      	beq.n	1a5bc <RndStartupTest.constprop.0+0x4c>
   1a5e0:	e7de      	b.n	1a5a0 <RndStartupTest.constprop.0+0x30>
   1a5e2:	4808      	ldr	r0, [pc, #32]	; (1a604 <RndStartupTest.constprop.0+0x94>)
   1a5e4:	f7ff f9a4 	bl	19930 <CC_PalAbort>
   1a5e8:	e7e8      	b.n	1a5bc <RndStartupTest.constprop.0+0x4c>
   1a5ea:	4807      	ldr	r0, [pc, #28]	; (1a608 <RndStartupTest.constprop.0+0x98>)
   1a5ec:	f7ff f9a0 	bl	19930 <CC_PalAbort>
   1a5f0:	e7da      	b.n	1a5a8 <RndStartupTest.constprop.0+0x38>
   1a5f2:	bf00      	nop
   1a5f4:	20000504 	.word	0x20000504
   1a5f8:	20002e94 	.word	0x20002e94
   1a5fc:	0001ee78 	.word	0x0001ee78
   1a600:	0001ee20 	.word	0x0001ee20
   1a604:	0001ee58 	.word	0x0001ee58
   1a608:	0001ee38 	.word	0x0001ee38

0001a60c <CC_LibInit>:
   1a60c:	b530      	push	{r4, r5, lr}
   1a60e:	b083      	sub	sp, #12
   1a610:	f000 f85c 	bl	1a6cc <CC_HalInit>
   1a614:	b128      	cbz	r0, 1a622 <CC_LibInit+0x16>
   1a616:	f000 f8ab 	bl	1a770 <CC_PalTerminate>
   1a61a:	2403      	movs	r4, #3
   1a61c:	4620      	mov	r0, r4
   1a61e:	b003      	add	sp, #12
   1a620:	bd30      	pop	{r4, r5, pc}
   1a622:	f000 f877 	bl	1a714 <CC_PalInit>
   1a626:	b9d8      	cbnz	r0, 1a660 <CC_LibInit+0x54>
   1a628:	f000 f92e 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1a62c:	b9e0      	cbnz	r0, 1a668 <CC_LibInit+0x5c>
   1a62e:	4c22      	ldr	r4, [pc, #136]	; (1a6b8 <CC_LibInit+0xac>)
   1a630:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   1a634:	0e1b      	lsrs	r3, r3, #24
   1a636:	2bf0      	cmp	r3, #240	; 0xf0
   1a638:	d10a      	bne.n	1a650 <CC_LibInit+0x44>
   1a63a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1a63e:	4b1f      	ldr	r3, [pc, #124]	; (1a6bc <CC_LibInit+0xb0>)
   1a640:	429a      	cmp	r2, r3
   1a642:	d031      	beq.n	1a6a8 <CC_LibInit+0x9c>
   1a644:	f000 f844 	bl	1a6d0 <CC_HalTerminate>
   1a648:	2407      	movs	r4, #7
   1a64a:	f000 f891 	bl	1a770 <CC_PalTerminate>
   1a64e:	e7e5      	b.n	1a61c <CC_LibInit+0x10>
   1a650:	f000 f83e 	bl	1a6d0 <CC_HalTerminate>
   1a654:	f000 f88c 	bl	1a770 <CC_PalTerminate>
   1a658:	2406      	movs	r4, #6
   1a65a:	4620      	mov	r0, r4
   1a65c:	b003      	add	sp, #12
   1a65e:	bd30      	pop	{r4, r5, pc}
   1a660:	2404      	movs	r4, #4
   1a662:	4620      	mov	r0, r4
   1a664:	b003      	add	sp, #12
   1a666:	bd30      	pop	{r4, r5, pc}
   1a668:	f000 f832 	bl	1a6d0 <CC_HalTerminate>
   1a66c:	f000 f880 	bl	1a770 <CC_PalTerminate>
   1a670:	f7ff ff7e 	bl	1a570 <RndStartupTest.constprop.0>
   1a674:	4604      	mov	r4, r0
   1a676:	b998      	cbnz	r0, 1a6a0 <CC_LibInit+0x94>
   1a678:	4d11      	ldr	r5, [pc, #68]	; (1a6c0 <CC_LibInit+0xb4>)
   1a67a:	682b      	ldr	r3, [r5, #0]
   1a67c:	2b00      	cmp	r3, #0
   1a67e:	d1cd      	bne.n	1a61c <CC_LibInit+0x10>
   1a680:	4602      	mov	r2, r0
   1a682:	4601      	mov	r1, r0
   1a684:	f7ff f976 	bl	19974 <nrf_cc3xx_platform_ctr_drbg_init>
   1a688:	b950      	cbnz	r0, 1a6a0 <CC_LibInit+0x94>
   1a68a:	490e      	ldr	r1, [pc, #56]	; (1a6c4 <CC_LibInit+0xb8>)
   1a68c:	ab01      	add	r3, sp, #4
   1a68e:	2268      	movs	r2, #104	; 0x68
   1a690:	f7ff f9a2 	bl	199d8 <nrf_cc3xx_platform_ctr_drbg_get>
   1a694:	b920      	cbnz	r0, 1a6a0 <CC_LibInit+0x94>
   1a696:	4b0c      	ldr	r3, [pc, #48]	; (1a6c8 <CC_LibInit+0xbc>)
   1a698:	602b      	str	r3, [r5, #0]
   1a69a:	4620      	mov	r0, r4
   1a69c:	b003      	add	sp, #12
   1a69e:	bd30      	pop	{r4, r5, pc}
   1a6a0:	2405      	movs	r4, #5
   1a6a2:	4620      	mov	r0, r4
   1a6a4:	b003      	add	sp, #12
   1a6a6:	bd30      	pop	{r4, r5, pc}
   1a6a8:	2001      	movs	r0, #1
   1a6aa:	f000 f8ed 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1a6ae:	2800      	cmp	r0, #0
   1a6b0:	d1da      	bne.n	1a668 <CC_LibInit+0x5c>
   1a6b2:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1a6b6:	e7db      	b.n	1a670 <CC_LibInit+0x64>
   1a6b8:	5002b000 	.word	0x5002b000
   1a6bc:	20e00000 	.word	0x20e00000
   1a6c0:	20002e90 	.word	0x20002e90
   1a6c4:	20002e28 	.word	0x20002e28
   1a6c8:	5a5aea5a 	.word	0x5a5aea5a

0001a6cc <CC_HalInit>:
   1a6cc:	2000      	movs	r0, #0
   1a6ce:	4770      	bx	lr

0001a6d0 <CC_HalTerminate>:
   1a6d0:	2000      	movs	r0, #0
   1a6d2:	4770      	bx	lr

0001a6d4 <CC_HalClearInterruptBit>:
   1a6d4:	0543      	lsls	r3, r0, #21
   1a6d6:	d504      	bpl.n	1a6e2 <CC_HalClearInterruptBit+0xe>
   1a6d8:	4b04      	ldr	r3, [pc, #16]	; (1a6ec <CC_HalClearInterruptBit+0x18>)
   1a6da:	f04f 32ff 	mov.w	r2, #4294967295
   1a6de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1a6e2:	4b02      	ldr	r3, [pc, #8]	; (1a6ec <CC_HalClearInterruptBit+0x18>)
   1a6e4:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   1a6e8:	4770      	bx	lr
   1a6ea:	bf00      	nop
   1a6ec:	5002b000 	.word	0x5002b000

0001a6f0 <CC_HalMaskInterrupt>:
   1a6f0:	4b01      	ldr	r3, [pc, #4]	; (1a6f8 <CC_HalMaskInterrupt+0x8>)
   1a6f2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1a6f6:	4770      	bx	lr
   1a6f8:	5002b000 	.word	0x5002b000

0001a6fc <CC_HalWaitInterrupt>:
   1a6fc:	b108      	cbz	r0, 1a702 <CC_HalWaitInterrupt+0x6>
   1a6fe:	f000 b86b 	b.w	1a7d8 <CC_PalWaitInterrupt>
   1a702:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1a706:	4770      	bx	lr

0001a708 <CC_HalWaitInterruptRND>:
   1a708:	b108      	cbz	r0, 1a70e <CC_HalWaitInterruptRND+0x6>
   1a70a:	f000 b84f 	b.w	1a7ac <CC_PalWaitInterruptRND>
   1a70e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1a712:	4770      	bx	lr

0001a714 <CC_PalInit>:
   1a714:	b510      	push	{r4, lr}
   1a716:	4811      	ldr	r0, [pc, #68]	; (1a75c <CC_PalInit+0x48>)
   1a718:	f000 f872 	bl	1a800 <CC_PalMutexCreate>
   1a71c:	b100      	cbz	r0, 1a720 <CC_PalInit+0xc>
   1a71e:	bd10      	pop	{r4, pc}
   1a720:	480f      	ldr	r0, [pc, #60]	; (1a760 <CC_PalInit+0x4c>)
   1a722:	f000 f86d 	bl	1a800 <CC_PalMutexCreate>
   1a726:	2800      	cmp	r0, #0
   1a728:	d1f9      	bne.n	1a71e <CC_PalInit+0xa>
   1a72a:	4c0e      	ldr	r4, [pc, #56]	; (1a764 <CC_PalInit+0x50>)
   1a72c:	4620      	mov	r0, r4
   1a72e:	f000 f867 	bl	1a800 <CC_PalMutexCreate>
   1a732:	2800      	cmp	r0, #0
   1a734:	d1f3      	bne.n	1a71e <CC_PalInit+0xa>
   1a736:	4b0c      	ldr	r3, [pc, #48]	; (1a768 <CC_PalInit+0x54>)
   1a738:	480c      	ldr	r0, [pc, #48]	; (1a76c <CC_PalInit+0x58>)
   1a73a:	601c      	str	r4, [r3, #0]
   1a73c:	f000 f860 	bl	1a800 <CC_PalMutexCreate>
   1a740:	4601      	mov	r1, r0
   1a742:	2800      	cmp	r0, #0
   1a744:	d1eb      	bne.n	1a71e <CC_PalInit+0xa>
   1a746:	f000 f82d 	bl	1a7a4 <CC_PalDmaInit>
   1a74a:	4604      	mov	r4, r0
   1a74c:	b108      	cbz	r0, 1a752 <CC_PalInit+0x3e>
   1a74e:	4620      	mov	r0, r4
   1a750:	bd10      	pop	{r4, pc}
   1a752:	f000 f87b 	bl	1a84c <CC_PalPowerSaveModeInit>
   1a756:	4620      	mov	r0, r4
   1a758:	e7fa      	b.n	1a750 <CC_PalInit+0x3c>
   1a75a:	bf00      	nop
   1a75c:	20000500 	.word	0x20000500
   1a760:	200004f4 	.word	0x200004f4
   1a764:	200004fc 	.word	0x200004fc
   1a768:	20000504 	.word	0x20000504
   1a76c:	200004f8 	.word	0x200004f8

0001a770 <CC_PalTerminate>:
   1a770:	b508      	push	{r3, lr}
   1a772:	4808      	ldr	r0, [pc, #32]	; (1a794 <CC_PalTerminate+0x24>)
   1a774:	f000 f84e 	bl	1a814 <CC_PalMutexDestroy>
   1a778:	4807      	ldr	r0, [pc, #28]	; (1a798 <CC_PalTerminate+0x28>)
   1a77a:	f000 f84b 	bl	1a814 <CC_PalMutexDestroy>
   1a77e:	4807      	ldr	r0, [pc, #28]	; (1a79c <CC_PalTerminate+0x2c>)
   1a780:	f000 f848 	bl	1a814 <CC_PalMutexDestroy>
   1a784:	4806      	ldr	r0, [pc, #24]	; (1a7a0 <CC_PalTerminate+0x30>)
   1a786:	f000 f845 	bl	1a814 <CC_PalMutexDestroy>
   1a78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a78e:	f000 b80b 	b.w	1a7a8 <CC_PalDmaTerminate>
   1a792:	bf00      	nop
   1a794:	20000500 	.word	0x20000500
   1a798:	200004f4 	.word	0x200004f4
   1a79c:	200004fc 	.word	0x200004fc
   1a7a0:	200004f8 	.word	0x200004f8

0001a7a4 <CC_PalDmaInit>:
   1a7a4:	2000      	movs	r0, #0
   1a7a6:	4770      	bx	lr

0001a7a8 <CC_PalDmaTerminate>:
   1a7a8:	4770      	bx	lr
   1a7aa:	bf00      	nop

0001a7ac <CC_PalWaitInterruptRND>:
   1a7ac:	b410      	push	{r4}
   1a7ae:	4c09      	ldr	r4, [pc, #36]	; (1a7d4 <CC_PalWaitInterruptRND+0x28>)
   1a7b0:	4602      	mov	r2, r0
   1a7b2:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1a7b6:	4213      	tst	r3, r2
   1a7b8:	d0fb      	beq.n	1a7b2 <CC_PalWaitInterruptRND+0x6>
   1a7ba:	b121      	cbz	r1, 1a7c6 <CC_PalWaitInterruptRND+0x1a>
   1a7bc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a7c0:	600b      	str	r3, [r1, #0]
   1a7c2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1a7c6:	4b03      	ldr	r3, [pc, #12]	; (1a7d4 <CC_PalWaitInterruptRND+0x28>)
   1a7c8:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1a7cc:	2000      	movs	r0, #0
   1a7ce:	bc10      	pop	{r4}
   1a7d0:	4770      	bx	lr
   1a7d2:	bf00      	nop
   1a7d4:	5002b000 	.word	0x5002b000

0001a7d8 <CC_PalWaitInterrupt>:
   1a7d8:	4a04      	ldr	r2, [pc, #16]	; (1a7ec <CC_PalWaitInterrupt+0x14>)
   1a7da:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   1a7de:	4218      	tst	r0, r3
   1a7e0:	d0fb      	beq.n	1a7da <CC_PalWaitInterrupt+0x2>
   1a7e2:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   1a7e6:	2000      	movs	r0, #0
   1a7e8:	4770      	bx	lr
   1a7ea:	bf00      	nop
   1a7ec:	5002b000 	.word	0x5002b000

0001a7f0 <CC_PalMemCopyPlat>:
   1a7f0:	f002 bbe5 	b.w	1cfbe <memmove>

0001a7f4 <CC_PalMemSetPlat>:
   1a7f4:	f002 bc05 	b.w	1d002 <memset>

0001a7f8 <CC_PalMemSetZeroPlat>:
   1a7f8:	460a      	mov	r2, r1
   1a7fa:	2100      	movs	r1, #0
   1a7fc:	f002 bc01 	b.w	1d002 <memset>

0001a800 <CC_PalMutexCreate>:
   1a800:	b508      	push	{r3, lr}
   1a802:	4b03      	ldr	r3, [pc, #12]	; (1a810 <CC_PalMutexCreate+0x10>)
   1a804:	6802      	ldr	r2, [r0, #0]
   1a806:	681b      	ldr	r3, [r3, #0]
   1a808:	6810      	ldr	r0, [r2, #0]
   1a80a:	4798      	blx	r3
   1a80c:	2000      	movs	r0, #0
   1a80e:	bd08      	pop	{r3, pc}
   1a810:	200004b4 	.word	0x200004b4

0001a814 <CC_PalMutexDestroy>:
   1a814:	b508      	push	{r3, lr}
   1a816:	4b03      	ldr	r3, [pc, #12]	; (1a824 <CC_PalMutexDestroy+0x10>)
   1a818:	6802      	ldr	r2, [r0, #0]
   1a81a:	685b      	ldr	r3, [r3, #4]
   1a81c:	6810      	ldr	r0, [r2, #0]
   1a81e:	4798      	blx	r3
   1a820:	2000      	movs	r0, #0
   1a822:	bd08      	pop	{r3, pc}
   1a824:	200004b4 	.word	0x200004b4

0001a828 <CC_PalMutexLock>:
   1a828:	4b02      	ldr	r3, [pc, #8]	; (1a834 <CC_PalMutexLock+0xc>)
   1a82a:	6802      	ldr	r2, [r0, #0]
   1a82c:	689b      	ldr	r3, [r3, #8]
   1a82e:	6810      	ldr	r0, [r2, #0]
   1a830:	4718      	bx	r3
   1a832:	bf00      	nop
   1a834:	200004b4 	.word	0x200004b4

0001a838 <CC_PalMutexUnlock>:
   1a838:	b508      	push	{r3, lr}
   1a83a:	4b03      	ldr	r3, [pc, #12]	; (1a848 <CC_PalMutexUnlock+0x10>)
   1a83c:	6802      	ldr	r2, [r0, #0]
   1a83e:	68db      	ldr	r3, [r3, #12]
   1a840:	6810      	ldr	r0, [r2, #0]
   1a842:	4798      	blx	r3
   1a844:	2000      	movs	r0, #0
   1a846:	bd08      	pop	{r3, pc}
   1a848:	200004b4 	.word	0x200004b4

0001a84c <CC_PalPowerSaveModeInit>:
   1a84c:	b570      	push	{r4, r5, r6, lr}
   1a84e:	4c09      	ldr	r4, [pc, #36]	; (1a874 <CC_PalPowerSaveModeInit+0x28>)
   1a850:	4d09      	ldr	r5, [pc, #36]	; (1a878 <CC_PalPowerSaveModeInit+0x2c>)
   1a852:	6920      	ldr	r0, [r4, #16]
   1a854:	68ab      	ldr	r3, [r5, #8]
   1a856:	4798      	blx	r3
   1a858:	b118      	cbz	r0, 1a862 <CC_PalPowerSaveModeInit+0x16>
   1a85a:	4b08      	ldr	r3, [pc, #32]	; (1a87c <CC_PalPowerSaveModeInit+0x30>)
   1a85c:	4808      	ldr	r0, [pc, #32]	; (1a880 <CC_PalPowerSaveModeInit+0x34>)
   1a85e:	685b      	ldr	r3, [r3, #4]
   1a860:	4798      	blx	r3
   1a862:	4a08      	ldr	r2, [pc, #32]	; (1a884 <CC_PalPowerSaveModeInit+0x38>)
   1a864:	68eb      	ldr	r3, [r5, #12]
   1a866:	6920      	ldr	r0, [r4, #16]
   1a868:	2100      	movs	r1, #0
   1a86a:	6011      	str	r1, [r2, #0]
   1a86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a870:	4718      	bx	r3
   1a872:	bf00      	nop
   1a874:	200004c4 	.word	0x200004c4
   1a878:	200004b4 	.word	0x200004b4
   1a87c:	200004a4 	.word	0x200004a4
   1a880:	0001ee90 	.word	0x0001ee90
   1a884:	200030b4 	.word	0x200030b4

0001a888 <CC_PalPowerSaveModeSelect>:
   1a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a88a:	4d1a      	ldr	r5, [pc, #104]	; (1a8f4 <CC_PalPowerSaveModeSelect+0x6c>)
   1a88c:	4e1a      	ldr	r6, [pc, #104]	; (1a8f8 <CC_PalPowerSaveModeSelect+0x70>)
   1a88e:	4604      	mov	r4, r0
   1a890:	68b2      	ldr	r2, [r6, #8]
   1a892:	6928      	ldr	r0, [r5, #16]
   1a894:	4790      	blx	r2
   1a896:	b9e8      	cbnz	r0, 1a8d4 <CC_PalPowerSaveModeSelect+0x4c>
   1a898:	4f18      	ldr	r7, [pc, #96]	; (1a8fc <CC_PalPowerSaveModeSelect+0x74>)
   1a89a:	683b      	ldr	r3, [r7, #0]
   1a89c:	b14c      	cbz	r4, 1a8b2 <CC_PalPowerSaveModeSelect+0x2a>
   1a89e:	b1a3      	cbz	r3, 1a8ca <CC_PalPowerSaveModeSelect+0x42>
   1a8a0:	2b01      	cmp	r3, #1
   1a8a2:	d019      	beq.n	1a8d8 <CC_PalPowerSaveModeSelect+0x50>
   1a8a4:	3b01      	subs	r3, #1
   1a8a6:	603b      	str	r3, [r7, #0]
   1a8a8:	6928      	ldr	r0, [r5, #16]
   1a8aa:	68f3      	ldr	r3, [r6, #12]
   1a8ac:	4798      	blx	r3
   1a8ae:	2000      	movs	r0, #0
   1a8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8b2:	b943      	cbnz	r3, 1a8c6 <CC_PalPowerSaveModeSelect+0x3e>
   1a8b4:	4a12      	ldr	r2, [pc, #72]	; (1a900 <CC_PalPowerSaveModeSelect+0x78>)
   1a8b6:	2101      	movs	r1, #1
   1a8b8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1a8bc:	4911      	ldr	r1, [pc, #68]	; (1a904 <CC_PalPowerSaveModeSelect+0x7c>)
   1a8be:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   1a8c2:	2a00      	cmp	r2, #0
   1a8c4:	d1fb      	bne.n	1a8be <CC_PalPowerSaveModeSelect+0x36>
   1a8c6:	3301      	adds	r3, #1
   1a8c8:	603b      	str	r3, [r7, #0]
   1a8ca:	68f3      	ldr	r3, [r6, #12]
   1a8cc:	6928      	ldr	r0, [r5, #16]
   1a8ce:	4798      	blx	r3
   1a8d0:	2000      	movs	r0, #0
   1a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8d4:	480c      	ldr	r0, [pc, #48]	; (1a908 <CC_PalPowerSaveModeSelect+0x80>)
   1a8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8d8:	4a0a      	ldr	r2, [pc, #40]	; (1a904 <CC_PalPowerSaveModeSelect+0x7c>)
   1a8da:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1a8de:	2b00      	cmp	r3, #0
   1a8e0:	d1fb      	bne.n	1a8da <CC_PalPowerSaveModeSelect+0x52>
   1a8e2:	4a07      	ldr	r2, [pc, #28]	; (1a900 <CC_PalPowerSaveModeSelect+0x78>)
   1a8e4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1a8e8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1a8ec:	f7ff ff00 	bl	1a6f0 <CC_HalMaskInterrupt>
   1a8f0:	683b      	ldr	r3, [r7, #0]
   1a8f2:	e7d7      	b.n	1a8a4 <CC_PalPowerSaveModeSelect+0x1c>
   1a8f4:	200004c4 	.word	0x200004c4
   1a8f8:	200004b4 	.word	0x200004b4
   1a8fc:	200030b4 	.word	0x200030b4
   1a900:	5002a000 	.word	0x5002a000
   1a904:	5002b000 	.word	0x5002b000
   1a908:	ffff8fe9 	.word	0xffff8fe9

0001a90c <mutex_init>:
   1a90c:	4b01      	ldr	r3, [pc, #4]	; (1a914 <mutex_init+0x8>)
   1a90e:	681b      	ldr	r3, [r3, #0]
   1a910:	4718      	bx	r3
   1a912:	bf00      	nop
   1a914:	200004b4 	.word	0x200004b4

0001a918 <mutex_lock>:
   1a918:	4b01      	ldr	r3, [pc, #4]	; (1a920 <mutex_lock+0x8>)
   1a91a:	689b      	ldr	r3, [r3, #8]
   1a91c:	4718      	bx	r3
   1a91e:	bf00      	nop
   1a920:	200004b4 	.word	0x200004b4

0001a924 <mutex_unlock>:
   1a924:	4b01      	ldr	r3, [pc, #4]	; (1a92c <mutex_unlock+0x8>)
   1a926:	68db      	ldr	r3, [r3, #12]
   1a928:	4718      	bx	r3
   1a92a:	bf00      	nop
   1a92c:	200004b4 	.word	0x200004b4

0001a930 <startTrngHW>:
   1a930:	2800      	cmp	r0, #0
   1a932:	f000 8084 	beq.w	1aa3e <startTrngHW+0x10e>
   1a936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a93a:	460c      	mov	r4, r1
   1a93c:	b083      	sub	sp, #12
   1a93e:	2900      	cmp	r1, #0
   1a940:	d078      	beq.n	1aa34 <startTrngHW+0x104>
   1a942:	461d      	mov	r5, r3
   1a944:	2b00      	cmp	r3, #0
   1a946:	d075      	beq.n	1aa34 <startTrngHW+0x104>
   1a948:	4607      	mov	r7, r0
   1a94a:	b11a      	cbz	r2, 1a954 <startTrngHW+0x24>
   1a94c:	2201      	movs	r2, #1
   1a94e:	2300      	movs	r3, #0
   1a950:	602a      	str	r2, [r5, #0]
   1a952:	6003      	str	r3, [r0, #0]
   1a954:	682b      	ldr	r3, [r5, #0]
   1a956:	2b00      	cmp	r3, #0
   1a958:	d067      	beq.n	1aa2a <startTrngHW+0xfa>
   1a95a:	4629      	mov	r1, r5
   1a95c:	4620      	mov	r0, r4
   1a95e:	f000 fde9 	bl	1b534 <LLF_RND_GetFastestRosc>
   1a962:	4603      	mov	r3, r0
   1a964:	2800      	cmp	r0, #0
   1a966:	d161      	bne.n	1aa2c <startTrngHW+0xfc>
   1a968:	6828      	ldr	r0, [r5, #0]
   1a96a:	4621      	mov	r1, r4
   1a96c:	f000 fdc4 	bl	1b4f8 <LLF_RND_GetRoscSampleCnt>
   1a970:	4603      	mov	r3, r0
   1a972:	2800      	cmp	r0, #0
   1a974:	d15a      	bne.n	1aa2c <startTrngHW+0xfc>
   1a976:	682a      	ldr	r2, [r5, #0]
   1a978:	2a08      	cmp	r2, #8
   1a97a:	d072      	beq.n	1aa62 <startTrngHW+0x132>
   1a97c:	2a04      	cmp	r2, #4
   1a97e:	d073      	beq.n	1aa68 <startTrngHW+0x138>
   1a980:	f1a2 0802 	sub.w	r8, r2, #2
   1a984:	fab8 f888 	clz	r8, r8
   1a988:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1a98c:	4e38      	ldr	r6, [pc, #224]	; (1aa70 <startTrngHW+0x140>)
   1a98e:	2001      	movs	r0, #1
   1a990:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1a994:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   1a998:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1a99c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a99e:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   1a9a2:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   1a9a6:	428a      	cmp	r2, r1
   1a9a8:	d1f6      	bne.n	1a998 <startTrngHW+0x68>
   1a9aa:	f04f 0900 	mov.w	r9, #0
   1a9ae:	9301      	str	r3, [sp, #4]
   1a9b0:	f04f 30ff 	mov.w	r0, #4294967295
   1a9b4:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   1a9b8:	f7ff fe8c 	bl	1a6d4 <CC_HalClearInterruptBit>
   1a9bc:	f06f 021b 	mvn.w	r2, #27
   1a9c0:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   1a9c4:	4648      	mov	r0, r9
   1a9c6:	f7ff fe93 	bl	1a6f0 <CC_HalMaskInterrupt>
   1a9ca:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   1a9ce:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1a9d2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1a9d6:	f7ff fe8b 	bl	1a6f0 <CC_HalMaskInterrupt>
   1a9da:	220a      	movs	r2, #10
   1a9dc:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   1a9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a9e2:	2b01      	cmp	r3, #1
   1a9e4:	9b01      	ldr	r3, [sp, #4]
   1a9e6:	d02d      	beq.n	1aa44 <startTrngHW+0x114>
   1a9e8:	6922      	ldr	r2, [r4, #16]
   1a9ea:	4922      	ldr	r1, [pc, #136]	; (1aa74 <startTrngHW+0x144>)
   1a9ec:	fba1 1202 	umull	r1, r2, r1, r2
   1a9f0:	0912      	lsrs	r2, r2, #4
   1a9f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a9f4:	fb01 f202 	mul.w	r2, r1, r2
   1a9f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1a9fc:	491c      	ldr	r1, [pc, #112]	; (1aa70 <startTrngHW+0x140>)
   1a9fe:	03d2      	lsls	r2, r2, #15
   1aa00:	0992      	lsrs	r2, r2, #6
   1aa02:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   1aa06:	2201      	movs	r2, #1
   1aa08:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   1aa0c:	683a      	ldr	r2, [r7, #0]
   1aa0e:	6829      	ldr	r1, [r5, #0]
   1aa10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1aa14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1aa18:	603a      	str	r2, [r7, #0]
   1aa1a:	6829      	ldr	r1, [r5, #0]
   1aa1c:	4618      	mov	r0, r3
   1aa1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1aa22:	603a      	str	r2, [r7, #0]
   1aa24:	b003      	add	sp, #12
   1aa26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aa2a:	4b13      	ldr	r3, [pc, #76]	; (1aa78 <startTrngHW+0x148>)
   1aa2c:	4618      	mov	r0, r3
   1aa2e:	b003      	add	sp, #12
   1aa30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aa34:	4b11      	ldr	r3, [pc, #68]	; (1aa7c <startTrngHW+0x14c>)
   1aa36:	4618      	mov	r0, r3
   1aa38:	b003      	add	sp, #12
   1aa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aa3e:	4b0f      	ldr	r3, [pc, #60]	; (1aa7c <startTrngHW+0x14c>)
   1aa40:	4618      	mov	r0, r3
   1aa42:	4770      	bx	lr
   1aa44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1aa48:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   1aa4c:	3101      	adds	r1, #1
   1aa4e:	d006      	beq.n	1aa5e <startTrngHW+0x12e>
   1aa50:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   1aa54:	4907      	ldr	r1, [pc, #28]	; (1aa74 <startTrngHW+0x144>)
   1aa56:	fba1 1202 	umull	r1, r2, r1, r2
   1aa5a:	0912      	lsrs	r2, r2, #4
   1aa5c:	e7c9      	b.n	1a9f2 <startTrngHW+0xc2>
   1aa5e:	2216      	movs	r2, #22
   1aa60:	e7c7      	b.n	1a9f2 <startTrngHW+0xc2>
   1aa62:	f04f 0803 	mov.w	r8, #3
   1aa66:	e791      	b.n	1a98c <startTrngHW+0x5c>
   1aa68:	f04f 0802 	mov.w	r8, #2
   1aa6c:	e78e      	b.n	1a98c <startTrngHW+0x5c>
   1aa6e:	bf00      	nop
   1aa70:	5002b000 	.word	0x5002b000
   1aa74:	aaaaaaab 	.word	0xaaaaaaab
   1aa78:	00f10c31 	.word	0x00f10c31
   1aa7c:	00f10c35 	.word	0x00f10c35

0001aa80 <LLF_RND_RepetitionCounterTest.part.0>:
   1aa80:	b570      	push	{r4, r5, r6, lr}
   1aa82:	00c9      	lsls	r1, r1, #3
   1aa84:	2400      	movs	r4, #0
   1aa86:	1e4e      	subs	r6, r1, #1
   1aa88:	f04f 0c01 	mov.w	ip, #1
   1aa8c:	4625      	mov	r5, r4
   1aa8e:	46a6      	mov	lr, r4
   1aa90:	e008      	b.n	1aaa4 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   1aa92:	459e      	cmp	lr, r3
   1aa94:	d015      	beq.n	1aac2 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   1aa96:	2501      	movs	r5, #1
   1aa98:	45b4      	cmp	ip, r6
   1aa9a:	d817      	bhi.n	1aacc <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   1aa9c:	3401      	adds	r4, #1
   1aa9e:	f10c 0c01 	add.w	ip, ip, #1
   1aaa2:	469e      	mov	lr, r3
   1aaa4:	0963      	lsrs	r3, r4, #5
   1aaa6:	f004 011f 	and.w	r1, r4, #31
   1aaaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1aaae:	291f      	cmp	r1, #31
   1aab0:	fa23 f301 	lsr.w	r3, r3, r1
   1aab4:	bf18      	it	ne
   1aab6:	f003 0301 	andne.w	r3, r3, #1
   1aaba:	2c00      	cmp	r4, #0
   1aabc:	d1e9      	bne.n	1aa92 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1aabe:	2501      	movs	r5, #1
   1aac0:	e7ec      	b.n	1aa9c <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1aac2:	3501      	adds	r5, #1
   1aac4:	4295      	cmp	r5, r2
   1aac6:	d1e7      	bne.n	1aa98 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1aac8:	4801      	ldr	r0, [pc, #4]	; (1aad0 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   1aaca:	bd70      	pop	{r4, r5, r6, pc}
   1aacc:	2000      	movs	r0, #0
   1aace:	bd70      	pop	{r4, r5, r6, pc}
   1aad0:	00f10c36 	.word	0x00f10c36

0001aad4 <LLF_RND_AdaptiveProportionTest>:
   1aad4:	2800      	cmp	r0, #0
   1aad6:	d03f      	beq.n	1ab58 <LLF_RND_AdaptiveProportionTest+0x84>
   1aad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aadc:	1e4c      	subs	r4, r1, #1
   1aade:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1aae2:	d228      	bcs.n	1ab36 <LLF_RND_AdaptiveProportionTest+0x62>
   1aae4:	b33b      	cbz	r3, 1ab36 <LLF_RND_AdaptiveProportionTest+0x62>
   1aae6:	b332      	cbz	r2, 1ab36 <LLF_RND_AdaptiveProportionTest+0x62>
   1aae8:	f04f 0e00 	mov.w	lr, #0
   1aaec:	00cf      	lsls	r7, r1, #3
   1aaee:	4676      	mov	r6, lr
   1aaf0:	4675      	mov	r5, lr
   1aaf2:	4674      	mov	r4, lr
   1aaf4:	f103 38ff 	add.w	r8, r3, #4294967295
   1aaf8:	0961      	lsrs	r1, r4, #5
   1aafa:	f004 0c1f 	and.w	ip, r4, #31
   1aafe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1ab02:	f1bc 0f1f 	cmp.w	ip, #31
   1ab06:	fa21 f10c 	lsr.w	r1, r1, ip
   1ab0a:	bf18      	it	ne
   1ab0c:	f001 0101 	andne.w	r1, r1, #1
   1ab10:	b1a4      	cbz	r4, 1ab3c <LLF_RND_AdaptiveProportionTest+0x68>
   1ab12:	42ab      	cmp	r3, r5
   1ab14:	d018      	beq.n	1ab48 <LLF_RND_AdaptiveProportionTest+0x74>
   1ab16:	428e      	cmp	r6, r1
   1ab18:	bf08      	it	eq
   1ab1a:	f10e 0e01 	addeq.w	lr, lr, #1
   1ab1e:	45a8      	cmp	r8, r5
   1ab20:	d015      	beq.n	1ab4e <LLF_RND_AdaptiveProportionTest+0x7a>
   1ab22:	3501      	adds	r5, #1
   1ab24:	4631      	mov	r1, r6
   1ab26:	3401      	adds	r4, #1
   1ab28:	42bc      	cmp	r4, r7
   1ab2a:	d001      	beq.n	1ab30 <LLF_RND_AdaptiveProportionTest+0x5c>
   1ab2c:	460e      	mov	r6, r1
   1ab2e:	e7e3      	b.n	1aaf8 <LLF_RND_AdaptiveProportionTest+0x24>
   1ab30:	2000      	movs	r0, #0
   1ab32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab36:	4809      	ldr	r0, [pc, #36]	; (1ab5c <LLF_RND_AdaptiveProportionTest+0x88>)
   1ab38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab3c:	f04f 0e01 	mov.w	lr, #1
   1ab40:	4674      	mov	r4, lr
   1ab42:	4675      	mov	r5, lr
   1ab44:	460e      	mov	r6, r1
   1ab46:	e7d7      	b.n	1aaf8 <LLF_RND_AdaptiveProportionTest+0x24>
   1ab48:	2501      	movs	r5, #1
   1ab4a:	46ae      	mov	lr, r5
   1ab4c:	e7eb      	b.n	1ab26 <LLF_RND_AdaptiveProportionTest+0x52>
   1ab4e:	4572      	cmp	r2, lr
   1ab50:	d3f1      	bcc.n	1ab36 <LLF_RND_AdaptiveProportionTest+0x62>
   1ab52:	4631      	mov	r1, r6
   1ab54:	461d      	mov	r5, r3
   1ab56:	e7e6      	b.n	1ab26 <LLF_RND_AdaptiveProportionTest+0x52>
   1ab58:	4800      	ldr	r0, [pc, #0]	; (1ab5c <LLF_RND_AdaptiveProportionTest+0x88>)
   1ab5a:	4770      	bx	lr
   1ab5c:	00f10c37 	.word	0x00f10c37

0001ab60 <getTrngSource>:
   1ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab64:	b091      	sub	sp, #68	; 0x44
   1ab66:	460d      	mov	r5, r1
   1ab68:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   1ab6c:	4681      	mov	r9, r0
   1ab6e:	2900      	cmp	r1, #0
   1ab70:	d14c      	bne.n	1ac0c <getTrngSource+0xac>
   1ab72:	6928      	ldr	r0, [r5, #16]
   1ab74:	9006      	str	r0, [sp, #24]
   1ab76:	981a      	ldr	r0, [sp, #104]	; 0x68
   1ab78:	601c      	str	r4, [r3, #0]
   1ab7a:	2300      	movs	r3, #0
   1ab7c:	6003      	str	r3, [r0, #0]
   1ab7e:	2a00      	cmp	r2, #0
   1ab80:	f000 8124 	beq.w	1adcc <getTrngSource+0x26c>
   1ab84:	4b9d      	ldr	r3, [pc, #628]	; (1adfc <getTrngSource+0x29c>)
   1ab86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1ab88:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1ab8c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1ab90:	429a      	cmp	r2, r3
   1ab92:	d147      	bne.n	1ac24 <getTrngSource+0xc4>
   1ab94:	290a      	cmp	r1, #10
   1ab96:	d145      	bne.n	1ac24 <getTrngSource+0xc4>
   1ab98:	f899 3003 	ldrb.w	r3, [r9, #3]
   1ab9c:	9308      	str	r3, [sp, #32]
   1ab9e:	f104 0308 	add.w	r3, r4, #8
   1aba2:	9a06      	ldr	r2, [sp, #24]
   1aba4:	9307      	str	r3, [sp, #28]
   1aba6:	4b96      	ldr	r3, [pc, #600]	; (1ae00 <getTrngSource+0x2a0>)
   1aba8:	4c94      	ldr	r4, [pc, #592]	; (1adfc <getTrngSource+0x29c>)
   1abaa:	fba3 1302 	umull	r1, r3, r3, r2
   1abae:	089b      	lsrs	r3, r3, #2
   1abb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1abb4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   1abb8:	9303      	str	r3, [sp, #12]
   1abba:	2304      	movs	r3, #4
   1abbc:	9305      	str	r3, [sp, #20]
   1abbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1abc0:	9e06      	ldr	r6, [sp, #24]
   1abc2:	601e      	str	r6, [r3, #0]
   1abc4:	2e00      	cmp	r6, #0
   1abc6:	d033      	beq.n	1ac30 <getTrngSource+0xd0>
   1abc8:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1abcc:	2700      	movs	r7, #0
   1abce:	f04f 0a01 	mov.w	sl, #1
   1abd2:	f000 fcbf 	bl	1b554 <LLF_RND_TurnOffTrng>
   1abd6:	2300      	movs	r3, #0
   1abd8:	9309      	str	r3, [sp, #36]	; 0x24
   1abda:	f1b9 0f00 	cmp.w	r9, #0
   1abde:	f000 80df 	beq.w	1ada0 <getTrngSource+0x240>
   1abe2:	2d00      	cmp	r5, #0
   1abe4:	f000 80dc 	beq.w	1ada0 <getTrngSource+0x240>
   1abe8:	9b08      	ldr	r3, [sp, #32]
   1abea:	b1eb      	cbz	r3, 1ac28 <getTrngSource+0xc8>
   1abec:	a908      	add	r1, sp, #32
   1abee:	4628      	mov	r0, r5
   1abf0:	f000 fca0 	bl	1b534 <LLF_RND_GetFastestRosc>
   1abf4:	2800      	cmp	r0, #0
   1abf6:	d03e      	beq.n	1ac76 <getTrngSource+0x116>
   1abf8:	4b82      	ldr	r3, [pc, #520]	; (1ae04 <getTrngSource+0x2a4>)
   1abfa:	4298      	cmp	r0, r3
   1abfc:	d118      	bne.n	1ac30 <getTrngSource+0xd0>
   1abfe:	9003      	str	r0, [sp, #12]
   1ac00:	f000 fca8 	bl	1b554 <LLF_RND_TurnOffTrng>
   1ac04:	9803      	ldr	r0, [sp, #12]
   1ac06:	b011      	add	sp, #68	; 0x44
   1ac08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1ac10:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   1ac14:	3601      	adds	r6, #1
   1ac16:	bf14      	ite	ne
   1ac18:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   1ac1c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   1ac20:	9006      	str	r0, [sp, #24]
   1ac22:	e7a8      	b.n	1ab76 <getTrngSource+0x16>
   1ac24:	4878      	ldr	r0, [pc, #480]	; (1ae08 <getTrngSource+0x2a8>)
   1ac26:	e7ea      	b.n	1abfe <getTrngSource+0x9e>
   1ac28:	4878      	ldr	r0, [pc, #480]	; (1ae0c <getTrngSource+0x2ac>)
   1ac2a:	4b76      	ldr	r3, [pc, #472]	; (1ae04 <getTrngSource+0x2a4>)
   1ac2c:	4298      	cmp	r0, r3
   1ac2e:	d0e6      	beq.n	1abfe <getTrngSource+0x9e>
   1ac30:	9b08      	ldr	r3, [sp, #32]
   1ac32:	2b08      	cmp	r3, #8
   1ac34:	f000 80c8 	beq.w	1adc8 <getTrngSource+0x268>
   1ac38:	005b      	lsls	r3, r3, #1
   1ac3a:	2200      	movs	r2, #0
   1ac3c:	9308      	str	r3, [sp, #32]
   1ac3e:	9200      	str	r2, [sp, #0]
   1ac40:	ab08      	add	r3, sp, #32
   1ac42:	4629      	mov	r1, r5
   1ac44:	4648      	mov	r0, r9
   1ac46:	f7ff fe73 	bl	1a930 <startTrngHW>
   1ac4a:	4b70      	ldr	r3, [pc, #448]	; (1ae0c <getTrngSource+0x2ac>)
   1ac4c:	4298      	cmp	r0, r3
   1ac4e:	f000 80b7 	beq.w	1adc0 <getTrngSource+0x260>
   1ac52:	2800      	cmp	r0, #0
   1ac54:	d1d3      	bne.n	1abfe <getTrngSource+0x9e>
   1ac56:	f8d9 2000 	ldr.w	r2, [r9]
   1ac5a:	0a13      	lsrs	r3, r2, #8
   1ac5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1ac60:	4313      	orrs	r3, r2
   1ac62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ac66:	f8c9 3000 	str.w	r3, [r9]
   1ac6a:	9b05      	ldr	r3, [sp, #20]
   1ac6c:	3b01      	subs	r3, #1
   1ac6e:	9305      	str	r3, [sp, #20]
   1ac70:	d1a5      	bne.n	1abbe <getTrngSource+0x5e>
   1ac72:	2000      	movs	r0, #0
   1ac74:	e7c3      	b.n	1abfe <getTrngSource+0x9e>
   1ac76:	9808      	ldr	r0, [sp, #32]
   1ac78:	4629      	mov	r1, r5
   1ac7a:	f000 fc3d 	bl	1b4f8 <LLF_RND_GetRoscSampleCnt>
   1ac7e:	2800      	cmp	r0, #0
   1ac80:	d1ba      	bne.n	1abf8 <getTrngSource+0x98>
   1ac82:	9b08      	ldr	r3, [sp, #32]
   1ac84:	2b08      	cmp	r3, #8
   1ac86:	f000 8095 	beq.w	1adb4 <getTrngSource+0x254>
   1ac8a:	2b04      	cmp	r3, #4
   1ac8c:	f000 8095 	beq.w	1adba <getTrngSource+0x25a>
   1ac90:	f1a3 0302 	sub.w	r3, r3, #2
   1ac94:	fab3 f383 	clz	r3, r3
   1ac98:	095b      	lsrs	r3, r3, #5
   1ac9a:	9304      	str	r3, [sp, #16]
   1ac9c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1aca0:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   1aca4:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1aca8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1acaa:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1acae:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1acb2:	4293      	cmp	r3, r2
   1acb4:	d1f6      	bne.n	1aca4 <getTrngSource+0x144>
   1acb6:	f04f 0b00 	mov.w	fp, #0
   1acba:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1acbe:	f04f 30ff 	mov.w	r0, #4294967295
   1acc2:	f7ff fd07 	bl	1a6d4 <CC_HalClearInterruptBit>
   1acc6:	f06f 031b 	mvn.w	r3, #27
   1acca:	4658      	mov	r0, fp
   1accc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1acd0:	f7ff fd0e 	bl	1a6f0 <CC_HalMaskInterrupt>
   1acd4:	9b04      	ldr	r3, [sp, #16]
   1acd6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1acda:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1acde:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1ace2:	f7ff fd05 	bl	1a6f0 <CC_HalMaskInterrupt>
   1ace6:	230a      	movs	r3, #10
   1ace8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1acec:	692b      	ldr	r3, [r5, #16]
   1acee:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1acf2:	fbab 2303 	umull	r2, r3, fp, r3
   1acf6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1acf8:	091b      	lsrs	r3, r3, #4
   1acfa:	fb02 f303 	mul.w	r3, r2, r3
   1acfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ad02:	03db      	lsls	r3, r3, #15
   1ad04:	099b      	lsrs	r3, r3, #6
   1ad06:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1ad0a:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   1ad0e:	9908      	ldr	r1, [sp, #32]
   1ad10:	f8d9 2000 	ldr.w	r2, [r9]
   1ad14:	020b      	lsls	r3, r1, #8
   1ad16:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1ad1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1ad1e:	4313      	orrs	r3, r2
   1ad20:	f8c9 3000 	str.w	r3, [r9]
   1ad24:	a809      	add	r0, sp, #36	; 0x24
   1ad26:	f000 fbd7 	bl	1b4d8 <LLF_RND_WaitRngInterrupt>
   1ad2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ad2c:	f003 031a 	and.w	r3, r3, #26
   1ad30:	4303      	orrs	r3, r0
   1ad32:	f47f af7d 	bne.w	1ac30 <getTrngSource+0xd0>
   1ad36:	fbab 3b06 	umull	r3, fp, fp, r6
   1ad3a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1ad3e:	930a      	str	r3, [sp, #40]	; 0x28
   1ad40:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1ad44:	930b      	str	r3, [sp, #44]	; 0x2c
   1ad46:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1ad4a:	930c      	str	r3, [sp, #48]	; 0x30
   1ad4c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1ad50:	930d      	str	r3, [sp, #52]	; 0x34
   1ad52:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad56:	930e      	str	r3, [sp, #56]	; 0x38
   1ad58:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ad5c:	930f      	str	r3, [sp, #60]	; 0x3c
   1ad5e:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   1ad62:	d101      	bne.n	1ad68 <getTrngSource+0x208>
   1ad64:	9b03      	ldr	r3, [sp, #12]
   1ad66:	b9eb      	cbnz	r3, 1ada4 <getTrngSource+0x244>
   1ad68:	4640      	mov	r0, r8
   1ad6a:	2218      	movs	r2, #24
   1ad6c:	a90a      	add	r1, sp, #40	; 0x28
   1ad6e:	3e18      	subs	r6, #24
   1ad70:	f108 0818 	add.w	r8, r8, #24
   1ad74:	f7ff fd3c 	bl	1a7f0 <CC_PalMemCopyPlat>
   1ad78:	3701      	adds	r7, #1
   1ad7a:	2e00      	cmp	r6, #0
   1ad7c:	f47f af29 	bne.w	1abd2 <getTrngSource+0x72>
   1ad80:	9b06      	ldr	r3, [sp, #24]
   1ad82:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   1ad86:	d836      	bhi.n	1adf6 <getTrngSource+0x296>
   1ad88:	9e07      	ldr	r6, [sp, #28]
   1ad8a:	696a      	ldr	r2, [r5, #20]
   1ad8c:	4619      	mov	r1, r3
   1ad8e:	4630      	mov	r0, r6
   1ad90:	461f      	mov	r7, r3
   1ad92:	f7ff fe75 	bl	1aa80 <LLF_RND_RepetitionCounterTest.part.0>
   1ad96:	b320      	cbz	r0, 1ade2 <getTrngSource+0x282>
   1ad98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1ad9a:	2300      	movs	r3, #0
   1ad9c:	6013      	str	r3, [r2, #0]
   1ad9e:	e72b      	b.n	1abf8 <getTrngSource+0x98>
   1ada0:	481b      	ldr	r0, [pc, #108]	; (1ae10 <getTrngSource+0x2b0>)
   1ada2:	e729      	b.n	1abf8 <getTrngSource+0x98>
   1ada4:	4640      	mov	r0, r8
   1ada6:	461a      	mov	r2, r3
   1ada8:	a90a      	add	r1, sp, #40	; 0x28
   1adaa:	1af6      	subs	r6, r6, r3
   1adac:	4498      	add	r8, r3
   1adae:	f7ff fd1f 	bl	1a7f0 <CC_PalMemCopyPlat>
   1adb2:	e7e1      	b.n	1ad78 <getTrngSource+0x218>
   1adb4:	2303      	movs	r3, #3
   1adb6:	9304      	str	r3, [sp, #16]
   1adb8:	e770      	b.n	1ac9c <getTrngSource+0x13c>
   1adba:	2302      	movs	r3, #2
   1adbc:	9304      	str	r3, [sp, #16]
   1adbe:	e76d      	b.n	1ac9c <getTrngSource+0x13c>
   1adc0:	6a2b      	ldr	r3, [r5, #32]
   1adc2:	2b00      	cmp	r3, #0
   1adc4:	f43f af1b 	beq.w	1abfe <getTrngSource+0x9e>
   1adc8:	4812      	ldr	r0, [pc, #72]	; (1ae14 <getTrngSource+0x2b4>)
   1adca:	e718      	b.n	1abfe <getTrngSource+0x9e>
   1adcc:	9100      	str	r1, [sp, #0]
   1adce:	ab08      	add	r3, sp, #32
   1add0:	2201      	movs	r2, #1
   1add2:	4629      	mov	r1, r5
   1add4:	4648      	mov	r0, r9
   1add6:	f7ff fdab 	bl	1a930 <startTrngHW>
   1adda:	2800      	cmp	r0, #0
   1addc:	f43f aedf 	beq.w	1ab9e <getTrngSource+0x3e>
   1ade0:	e70d      	b.n	1abfe <getTrngSource+0x9e>
   1ade2:	69aa      	ldr	r2, [r5, #24]
   1ade4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1ade8:	4639      	mov	r1, r7
   1adea:	4630      	mov	r0, r6
   1adec:	f7ff fe72 	bl	1aad4 <LLF_RND_AdaptiveProportionTest>
   1adf0:	2800      	cmp	r0, #0
   1adf2:	d1d1      	bne.n	1ad98 <getTrngSource+0x238>
   1adf4:	e73d      	b.n	1ac72 <getTrngSource+0x112>
   1adf6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1adf8:	601e      	str	r6, [r3, #0]
   1adfa:	e719      	b.n	1ac30 <getTrngSource+0xd0>
   1adfc:	5002b000 	.word	0x5002b000
   1ae00:	aaaaaaab 	.word	0xaaaaaaab
   1ae04:	00f10c02 	.word	0x00f10c02
   1ae08:	00f10c30 	.word	0x00f10c30
   1ae0c:	00f10c31 	.word	0x00f10c31
   1ae10:	00f10c35 	.word	0x00f10c35
   1ae14:	00f10c32 	.word	0x00f10c32

0001ae18 <LLF_RND_GetTrngSource>:
   1ae18:	b410      	push	{r4}
   1ae1a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1ae1e:	9401      	str	r4, [sp, #4]
   1ae20:	9c03      	ldr	r4, [sp, #12]
   1ae22:	9402      	str	r4, [sp, #8]
   1ae24:	2400      	movs	r4, #0
   1ae26:	9403      	str	r4, [sp, #12]
   1ae28:	bc10      	pop	{r4}
   1ae2a:	f7ff be99 	b.w	1ab60 <getTrngSource>
   1ae2e:	bf00      	nop

0001ae30 <LLF_RND_RunTrngStartupTest>:
   1ae30:	b510      	push	{r4, lr}
   1ae32:	b086      	sub	sp, #24
   1ae34:	ab05      	add	r3, sp, #20
   1ae36:	2401      	movs	r4, #1
   1ae38:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1ae3c:	9300      	str	r3, [sp, #0]
   1ae3e:	2200      	movs	r2, #0
   1ae40:	ab04      	add	r3, sp, #16
   1ae42:	f7ff fe8d 	bl	1ab60 <getTrngSource>
   1ae46:	b006      	add	sp, #24
   1ae48:	bd10      	pop	{r4, pc}
   1ae4a:	bf00      	nop

0001ae4c <mbedtls_hardware_poll>:
   1ae4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae4e:	b089      	sub	sp, #36	; 0x24
   1ae50:	9205      	str	r2, [sp, #20]
   1ae52:	2900      	cmp	r1, #0
   1ae54:	d064      	beq.n	1af20 <mbedtls_hardware_poll+0xd4>
   1ae56:	461c      	mov	r4, r3
   1ae58:	2b00      	cmp	r3, #0
   1ae5a:	d061      	beq.n	1af20 <mbedtls_hardware_poll+0xd4>
   1ae5c:	4615      	mov	r5, r2
   1ae5e:	2a00      	cmp	r2, #0
   1ae60:	d05e      	beq.n	1af20 <mbedtls_hardware_poll+0xd4>
   1ae62:	4f31      	ldr	r7, [pc, #196]	; (1af28 <mbedtls_hardware_poll+0xdc>)
   1ae64:	460e      	mov	r6, r1
   1ae66:	6838      	ldr	r0, [r7, #0]
   1ae68:	f04f 31ff 	mov.w	r1, #4294967295
   1ae6c:	f7ff fcdc 	bl	1a828 <CC_PalMutexLock>
   1ae70:	2800      	cmp	r0, #0
   1ae72:	d14b      	bne.n	1af0c <mbedtls_hardware_poll+0xc0>
   1ae74:	2000      	movs	r0, #0
   1ae76:	f7ff fd07 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1ae7a:	2800      	cmp	r0, #0
   1ae7c:	d142      	bne.n	1af04 <mbedtls_hardware_poll+0xb8>
   1ae7e:	482b      	ldr	r0, [pc, #172]	; (1af2c <mbedtls_hardware_poll+0xe0>)
   1ae80:	f000 fa9a 	bl	1b3b8 <RNG_PLAT_SetUserRngParameters>
   1ae84:	b1d8      	cbz	r0, 1aebe <mbedtls_hardware_poll+0x72>
   1ae86:	2001      	movs	r0, #1
   1ae88:	f04f 36ff 	mov.w	r6, #4294967295
   1ae8c:	f7ff fcfc 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1ae90:	2800      	cmp	r0, #0
   1ae92:	d133      	bne.n	1aefc <mbedtls_hardware_poll+0xb0>
   1ae94:	4826      	ldr	r0, [pc, #152]	; (1af30 <mbedtls_hardware_poll+0xe4>)
   1ae96:	f44f 7108 	mov.w	r1, #544	; 0x220
   1ae9a:	f7fe fe5f 	bl	19b5c <mbedtls_zeroize_internal>
   1ae9e:	4825      	ldr	r0, [pc, #148]	; (1af34 <mbedtls_hardware_poll+0xe8>)
   1aea0:	2104      	movs	r1, #4
   1aea2:	f7fe fe5b 	bl	19b5c <mbedtls_zeroize_internal>
   1aea6:	4821      	ldr	r0, [pc, #132]	; (1af2c <mbedtls_hardware_poll+0xe0>)
   1aea8:	2128      	movs	r1, #40	; 0x28
   1aeaa:	f7fe fe57 	bl	19b5c <mbedtls_zeroize_internal>
   1aeae:	6838      	ldr	r0, [r7, #0]
   1aeb0:	f7ff fcc2 	bl	1a838 <CC_PalMutexUnlock>
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d12d      	bne.n	1af14 <mbedtls_hardware_poll+0xc8>
   1aeb8:	4630      	mov	r0, r6
   1aeba:	b009      	add	sp, #36	; 0x24
   1aebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aebe:	4b1c      	ldr	r3, [pc, #112]	; (1af30 <mbedtls_hardware_poll+0xe4>)
   1aec0:	9302      	str	r3, [sp, #8]
   1aec2:	ab07      	add	r3, sp, #28
   1aec4:	9003      	str	r0, [sp, #12]
   1aec6:	4602      	mov	r2, r0
   1aec8:	9300      	str	r3, [sp, #0]
   1aeca:	4918      	ldr	r1, [pc, #96]	; (1af2c <mbedtls_hardware_poll+0xe0>)
   1aecc:	4819      	ldr	r0, [pc, #100]	; (1af34 <mbedtls_hardware_poll+0xe8>)
   1aece:	9401      	str	r4, [sp, #4]
   1aed0:	ab05      	add	r3, sp, #20
   1aed2:	f7ff ffa1 	bl	1ae18 <LLF_RND_GetTrngSource>
   1aed6:	4603      	mov	r3, r0
   1aed8:	2800      	cmp	r0, #0
   1aeda:	d1d4      	bne.n	1ae86 <mbedtls_hardware_poll+0x3a>
   1aedc:	6822      	ldr	r2, [r4, #0]
   1aede:	42aa      	cmp	r2, r5
   1aee0:	d3d1      	bcc.n	1ae86 <mbedtls_hardware_poll+0x3a>
   1aee2:	9907      	ldr	r1, [sp, #28]
   1aee4:	4630      	mov	r0, r6
   1aee6:	3108      	adds	r1, #8
   1aee8:	462a      	mov	r2, r5
   1aeea:	461e      	mov	r6, r3
   1aeec:	f7ff fc80 	bl	1a7f0 <CC_PalMemCopyPlat>
   1aef0:	6025      	str	r5, [r4, #0]
   1aef2:	2001      	movs	r0, #1
   1aef4:	f7ff fcc8 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1aef8:	2800      	cmp	r0, #0
   1aefa:	d0cb      	beq.n	1ae94 <mbedtls_hardware_poll+0x48>
   1aefc:	480e      	ldr	r0, [pc, #56]	; (1af38 <mbedtls_hardware_poll+0xec>)
   1aefe:	f7fe fd17 	bl	19930 <CC_PalAbort>
   1af02:	e7c7      	b.n	1ae94 <mbedtls_hardware_poll+0x48>
   1af04:	480d      	ldr	r0, [pc, #52]	; (1af3c <mbedtls_hardware_poll+0xf0>)
   1af06:	f7fe fd13 	bl	19930 <CC_PalAbort>
   1af0a:	e7b8      	b.n	1ae7e <mbedtls_hardware_poll+0x32>
   1af0c:	480c      	ldr	r0, [pc, #48]	; (1af40 <mbedtls_hardware_poll+0xf4>)
   1af0e:	f7fe fd0f 	bl	19930 <CC_PalAbort>
   1af12:	e7af      	b.n	1ae74 <mbedtls_hardware_poll+0x28>
   1af14:	480b      	ldr	r0, [pc, #44]	; (1af44 <mbedtls_hardware_poll+0xf8>)
   1af16:	f7fe fd0b 	bl	19930 <CC_PalAbort>
   1af1a:	4630      	mov	r0, r6
   1af1c:	b009      	add	sp, #36	; 0x24
   1af1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af20:	f04f 36ff 	mov.w	r6, #4294967295
   1af24:	e7c8      	b.n	1aeb8 <mbedtls_hardware_poll+0x6c>
   1af26:	bf00      	nop
   1af28:	20000504 	.word	0x20000504
   1af2c:	200032dc 	.word	0x200032dc
   1af30:	200030bc 	.word	0x200030bc
   1af34:	200030b8 	.word	0x200030b8
   1af38:	0001ee58 	.word	0x0001ee58
   1af3c:	0001ee38 	.word	0x0001ee38
   1af40:	0001ee20 	.word	0x0001ee20
   1af44:	0001eeb0 	.word	0x0001eeb0

0001af48 <cc_mbedtls_aes_init>:
   1af48:	b510      	push	{r4, lr}
   1af4a:	4604      	mov	r4, r0
   1af4c:	b130      	cbz	r0, 1af5c <cc_mbedtls_aes_init+0x14>
   1af4e:	2200      	movs	r2, #0
   1af50:	2301      	movs	r3, #1
   1af52:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1af56:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1af5a:	bd10      	pop	{r4, pc}
   1af5c:	4801      	ldr	r0, [pc, #4]	; (1af64 <cc_mbedtls_aes_init+0x1c>)
   1af5e:	f7fe fce7 	bl	19930 <CC_PalAbort>
   1af62:	e7f4      	b.n	1af4e <cc_mbedtls_aes_init+0x6>
   1af64:	0001eec8 	.word	0x0001eec8

0001af68 <cc_mbedtls_aes_free>:
   1af68:	b118      	cbz	r0, 1af72 <cc_mbedtls_aes_free+0xa>
   1af6a:	2274      	movs	r2, #116	; 0x74
   1af6c:	2100      	movs	r1, #0
   1af6e:	f7ff bc41 	b.w	1a7f4 <CC_PalMemSetPlat>
   1af72:	4770      	bx	lr

0001af74 <cc_mbedtls_aes_setkey_enc>:
   1af74:	b190      	cbz	r0, 1af9c <cc_mbedtls_aes_setkey_enc+0x28>
   1af76:	b1a1      	cbz	r1, 1afa2 <cc_mbedtls_aes_setkey_enc+0x2e>
   1af78:	b510      	push	{r4, lr}
   1af7a:	2a80      	cmp	r2, #128	; 0x80
   1af7c:	f04f 0400 	mov.w	r4, #0
   1af80:	6384      	str	r4, [r0, #56]	; 0x38
   1af82:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1af86:	d106      	bne.n	1af96 <cc_mbedtls_aes_setkey_enc+0x22>
   1af88:	2210      	movs	r2, #16
   1af8a:	6304      	str	r4, [r0, #48]	; 0x30
   1af8c:	4410      	add	r0, r2
   1af8e:	f7ff fc2f 	bl	1a7f0 <CC_PalMemCopyPlat>
   1af92:	4620      	mov	r0, r4
   1af94:	bd10      	pop	{r4, pc}
   1af96:	f06f 001f 	mvn.w	r0, #31
   1af9a:	bd10      	pop	{r4, pc}
   1af9c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1afa0:	4770      	bx	lr
   1afa2:	f06f 001f 	mvn.w	r0, #31
   1afa6:	4770      	bx	lr

0001afa8 <cc_mbedtls_aes_crypt_ecb>:
   1afa8:	b328      	cbz	r0, 1aff6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1afaa:	b322      	cbz	r2, 1aff6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1afac:	b31b      	cbz	r3, 1aff6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1afae:	2901      	cmp	r1, #1
   1afb0:	d821      	bhi.n	1aff6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1afb2:	b570      	push	{r4, r5, r6, lr}
   1afb4:	4604      	mov	r4, r0
   1afb6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1afb8:	b086      	sub	sp, #24
   1afba:	d017      	beq.n	1afec <cc_mbedtls_aes_crypt_ecb+0x44>
   1afbc:	2901      	cmp	r1, #1
   1afbe:	d117      	bne.n	1aff0 <cc_mbedtls_aes_crypt_ecb+0x48>
   1afc0:	2510      	movs	r5, #16
   1afc2:	2100      	movs	r1, #0
   1afc4:	eb0d 0605 	add.w	r6, sp, r5
   1afc8:	6361      	str	r1, [r4, #52]	; 0x34
   1afca:	4610      	mov	r0, r2
   1afcc:	9500      	str	r5, [sp, #0]
   1afce:	9601      	str	r6, [sp, #4]
   1afd0:	aa02      	add	r2, sp, #8
   1afd2:	4629      	mov	r1, r5
   1afd4:	f000 faca 	bl	1b56c <SetDataBuffersInfo>
   1afd8:	b950      	cbnz	r0, 1aff0 <cc_mbedtls_aes_crypt_ecb+0x48>
   1afda:	462b      	mov	r3, r5
   1afdc:	4632      	mov	r2, r6
   1afde:	a902      	add	r1, sp, #8
   1afe0:	4620      	mov	r0, r4
   1afe2:	f000 fd4b 	bl	1ba7c <ProcessAesDrv>
   1afe6:	b918      	cbnz	r0, 1aff0 <cc_mbedtls_aes_crypt_ecb+0x48>
   1afe8:	b006      	add	sp, #24
   1afea:	bd70      	pop	{r4, r5, r6, pc}
   1afec:	2900      	cmp	r1, #0
   1afee:	d0e7      	beq.n	1afc0 <cc_mbedtls_aes_crypt_ecb+0x18>
   1aff0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1aff4:	e7f8      	b.n	1afe8 <cc_mbedtls_aes_crypt_ecb+0x40>
   1aff6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1affa:	4770      	bx	lr

0001affc <cc_mbedtls_sha256_init>:
   1affc:	b510      	push	{r4, lr}
   1affe:	4604      	mov	r4, r0
   1b000:	b128      	cbz	r0, 1b00e <cc_mbedtls_sha256_init+0x12>
   1b002:	4620      	mov	r0, r4
   1b004:	21f4      	movs	r1, #244	; 0xf4
   1b006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b00a:	f7ff bbf5 	b.w	1a7f8 <CC_PalMemSetZeroPlat>
   1b00e:	4804      	ldr	r0, [pc, #16]	; (1b020 <cc_mbedtls_sha256_init+0x24>)
   1b010:	f7fe fc8e 	bl	19930 <CC_PalAbort>
   1b014:	4620      	mov	r0, r4
   1b016:	21f4      	movs	r1, #244	; 0xf4
   1b018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b01c:	f7ff bbec 	b.w	1a7f8 <CC_PalMemSetZeroPlat>
   1b020:	0001eedc 	.word	0x0001eedc

0001b024 <cc_mbedtls_sha256_free>:
   1b024:	b110      	cbz	r0, 1b02c <cc_mbedtls_sha256_free+0x8>
   1b026:	21f4      	movs	r1, #244	; 0xf4
   1b028:	f7fe bd98 	b.w	19b5c <mbedtls_zeroize_internal>
   1b02c:	4770      	bx	lr
   1b02e:	bf00      	nop

0001b030 <cc_mbedtls_sha256_starts>:
   1b030:	b508      	push	{r3, lr}
   1b032:	b161      	cbz	r1, 1b04e <cc_mbedtls_sha256_starts+0x1e>
   1b034:	2901      	cmp	r1, #1
   1b036:	d107      	bne.n	1b048 <cc_mbedtls_sha256_starts+0x18>
   1b038:	2102      	movs	r1, #2
   1b03a:	f000 f85b 	bl	1b0f4 <mbedtls_sha_starts_internal>
   1b03e:	2800      	cmp	r0, #0
   1b040:	bf18      	it	ne
   1b042:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1b046:	bd08      	pop	{r3, pc}
   1b048:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b04c:	bd08      	pop	{r3, pc}
   1b04e:	2101      	movs	r1, #1
   1b050:	f000 f850 	bl	1b0f4 <mbedtls_sha_starts_internal>
   1b054:	e7f3      	b.n	1b03e <cc_mbedtls_sha256_starts+0xe>
   1b056:	bf00      	nop

0001b058 <cc_mbedtls_sha256_update>:
   1b058:	b530      	push	{r4, r5, lr}
   1b05a:	4605      	mov	r5, r0
   1b05c:	1888      	adds	r0, r1, r2
   1b05e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1b062:	b0a1      	sub	sp, #132	; 0x84
   1b064:	460b      	mov	r3, r1
   1b066:	4614      	mov	r4, r2
   1b068:	d801      	bhi.n	1b06e <cc_mbedtls_sha256_update+0x16>
   1b06a:	2a80      	cmp	r2, #128	; 0x80
   1b06c:	d90c      	bls.n	1b088 <cc_mbedtls_sha256_update+0x30>
   1b06e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1b072:	d917      	bls.n	1b0a4 <cc_mbedtls_sha256_update+0x4c>
   1b074:	4622      	mov	r2, r4
   1b076:	4619      	mov	r1, r3
   1b078:	4628      	mov	r0, r5
   1b07a:	f000 f87d 	bl	1b178 <mbedtls_sha_update_internal>
   1b07e:	4604      	mov	r4, r0
   1b080:	b984      	cbnz	r4, 1b0a4 <cc_mbedtls_sha256_update+0x4c>
   1b082:	4620      	mov	r0, r4
   1b084:	b021      	add	sp, #132	; 0x84
   1b086:	bd30      	pop	{r4, r5, pc}
   1b088:	4668      	mov	r0, sp
   1b08a:	f7ff fbb1 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b08e:	4622      	mov	r2, r4
   1b090:	4669      	mov	r1, sp
   1b092:	4628      	mov	r0, r5
   1b094:	f000 f870 	bl	1b178 <mbedtls_sha_update_internal>
   1b098:	2180      	movs	r1, #128	; 0x80
   1b09a:	4604      	mov	r4, r0
   1b09c:	4668      	mov	r0, sp
   1b09e:	f7ff fbab 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1b0a2:	e7ed      	b.n	1b080 <cc_mbedtls_sha256_update+0x28>
   1b0a4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1b0a8:	e7eb      	b.n	1b082 <cc_mbedtls_sha256_update+0x2a>
   1b0aa:	bf00      	nop

0001b0ac <cc_mbedtls_sha256_finish>:
   1b0ac:	b570      	push	{r4, r5, r6, lr}
   1b0ae:	b1e8      	cbz	r0, 1b0ec <cc_mbedtls_sha256_finish+0x40>
   1b0b0:	460e      	mov	r6, r1
   1b0b2:	b1d9      	cbz	r1, 1b0ec <cc_mbedtls_sha256_finish+0x40>
   1b0b4:	4604      	mov	r4, r0
   1b0b6:	f000 f831 	bl	1b11c <mbedtls_sha_finish_internal>
   1b0ba:	4605      	mov	r5, r0
   1b0bc:	b9b0      	cbnz	r0, 1b0ec <cc_mbedtls_sha256_finish+0x40>
   1b0be:	6823      	ldr	r3, [r4, #0]
   1b0c0:	2b01      	cmp	r3, #1
   1b0c2:	d00b      	beq.n	1b0dc <cc_mbedtls_sha256_finish+0x30>
   1b0c4:	2b02      	cmp	r3, #2
   1b0c6:	d001      	beq.n	1b0cc <cc_mbedtls_sha256_finish+0x20>
   1b0c8:	4628      	mov	r0, r5
   1b0ca:	bd70      	pop	{r4, r5, r6, pc}
   1b0cc:	221c      	movs	r2, #28
   1b0ce:	f104 0108 	add.w	r1, r4, #8
   1b0d2:	4630      	mov	r0, r6
   1b0d4:	f7ff fb8c 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b0d8:	4628      	mov	r0, r5
   1b0da:	bd70      	pop	{r4, r5, r6, pc}
   1b0dc:	2220      	movs	r2, #32
   1b0de:	f104 0108 	add.w	r1, r4, #8
   1b0e2:	4630      	mov	r0, r6
   1b0e4:	f7ff fb84 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b0e8:	4628      	mov	r0, r5
   1b0ea:	bd70      	pop	{r4, r5, r6, pc}
   1b0ec:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1b0f0:	e7ea      	b.n	1b0c8 <cc_mbedtls_sha256_finish+0x1c>
   1b0f2:	bf00      	nop

0001b0f4 <mbedtls_sha_starts_internal>:
   1b0f4:	b178      	cbz	r0, 1b116 <mbedtls_sha_starts_internal+0x22>
   1b0f6:	b538      	push	{r3, r4, r5, lr}
   1b0f8:	4604      	mov	r4, r0
   1b0fa:	460d      	mov	r5, r1
   1b0fc:	21f0      	movs	r1, #240	; 0xf0
   1b0fe:	f7ff fb7b 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1b102:	2340      	movs	r3, #64	; 0x40
   1b104:	6025      	str	r5, [r4, #0]
   1b106:	65e3      	str	r3, [r4, #92]	; 0x5c
   1b108:	4620      	mov	r0, r4
   1b10a:	f000 fa63 	bl	1b5d4 <InitHashDrv>
   1b10e:	3800      	subs	r0, #0
   1b110:	bf18      	it	ne
   1b112:	2001      	movne	r0, #1
   1b114:	bd38      	pop	{r3, r4, r5, pc}
   1b116:	2001      	movs	r0, #1
   1b118:	4770      	bx	lr
   1b11a:	bf00      	nop

0001b11c <mbedtls_sha_finish_internal>:
   1b11c:	b570      	push	{r4, r5, r6, lr}
   1b11e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1b120:	b0a4      	sub	sp, #144	; 0x90
   1b122:	4604      	mov	r4, r0
   1b124:	ae04      	add	r6, sp, #16
   1b126:	b9e5      	cbnz	r5, 1b162 <mbedtls_sha_finish_internal+0x46>
   1b128:	2201      	movs	r2, #1
   1b12a:	2300      	movs	r3, #0
   1b12c:	6062      	str	r2, [r4, #4]
   1b12e:	4630      	mov	r0, r6
   1b130:	e9cd 3300 	strd	r3, r3, [sp]
   1b134:	aa02      	add	r2, sp, #8
   1b136:	4629      	mov	r1, r5
   1b138:	f000 fa18 	bl	1b56c <SetDataBuffersInfo>
   1b13c:	b110      	cbz	r0, 1b144 <mbedtls_sha_finish_internal+0x28>
   1b13e:	2001      	movs	r0, #1
   1b140:	b024      	add	sp, #144	; 0x90
   1b142:	bd70      	pop	{r4, r5, r6, pc}
   1b144:	462a      	mov	r2, r5
   1b146:	a902      	add	r1, sp, #8
   1b148:	4620      	mov	r0, r4
   1b14a:	f000 fa6d 	bl	1b628 <ProcessHashDrv>
   1b14e:	2800      	cmp	r0, #0
   1b150:	d1f5      	bne.n	1b13e <mbedtls_sha_finish_internal+0x22>
   1b152:	4620      	mov	r0, r4
   1b154:	f000 fb7e 	bl	1b854 <FinishHashDrv>
   1b158:	2800      	cmp	r0, #0
   1b15a:	d1f0      	bne.n	1b13e <mbedtls_sha_finish_internal+0x22>
   1b15c:	6620      	str	r0, [r4, #96]	; 0x60
   1b15e:	b024      	add	sp, #144	; 0x90
   1b160:	bd70      	pop	{r4, r5, r6, pc}
   1b162:	2d80      	cmp	r5, #128	; 0x80
   1b164:	462a      	mov	r2, r5
   1b166:	f100 0164 	add.w	r1, r0, #100	; 0x64
   1b16a:	bf28      	it	cs
   1b16c:	2280      	movcs	r2, #128	; 0x80
   1b16e:	4630      	mov	r0, r6
   1b170:	f7ff fb3e 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b174:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1b176:	e7d7      	b.n	1b128 <mbedtls_sha_finish_internal+0xc>

0001b178 <mbedtls_sha_update_internal>:
   1b178:	2800      	cmp	r0, #0
   1b17a:	f000 80cd 	beq.w	1b318 <mbedtls_sha_update_internal+0x1a0>
   1b17e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b182:	4615      	mov	r5, r2
   1b184:	b0a5      	sub	sp, #148	; 0x94
   1b186:	2a00      	cmp	r2, #0
   1b188:	f000 80b4 	beq.w	1b2f4 <mbedtls_sha_update_internal+0x17c>
   1b18c:	460f      	mov	r7, r1
   1b18e:	2900      	cmp	r1, #0
   1b190:	f000 80ac 	beq.w	1b2ec <mbedtls_sha_update_internal+0x174>
   1b194:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1b198:	4606      	mov	r6, r0
   1b19a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1b19c:	d37d      	bcc.n	1b29a <mbedtls_sha_update_internal+0x122>
   1b19e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1b1a2:	f106 0964 	add.w	r9, r6, #100	; 0x64
   1b1a6:	e014      	b.n	1b1d2 <mbedtls_sha_update_internal+0x5a>
   1b1a8:	4283      	cmp	r3, r0
   1b1aa:	46ba      	mov	sl, r7
   1b1ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1b1b0:	d029      	beq.n	1b206 <mbedtls_sha_update_internal+0x8e>
   1b1b2:	fbb4 fbf3 	udiv	fp, r4, r3
   1b1b6:	fb03 fb0b 	mul.w	fp, r3, fp
   1b1ba:	f1bb 0f00 	cmp.w	fp, #0
   1b1be:	d144      	bne.n	1b24a <mbedtls_sha_update_internal+0xd2>
   1b1c0:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   1b1c4:	4447      	add	r7, r8
   1b1c6:	3dff      	subs	r5, #255	; 0xff
   1b1c8:	2c00      	cmp	r4, #0
   1b1ca:	d159      	bne.n	1b280 <mbedtls_sha_update_internal+0x108>
   1b1cc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1b1d0:	d363      	bcc.n	1b29a <mbedtls_sha_update_internal+0x122>
   1b1d2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   1b1d4:	1a1c      	subs	r4, r3, r0
   1b1d6:	fbb4 f2f3 	udiv	r2, r4, r3
   1b1da:	fb03 4412 	mls	r4, r3, r2, r4
   1b1de:	2c00      	cmp	r4, #0
   1b1e0:	d0e2      	beq.n	1b1a8 <mbedtls_sha_update_internal+0x30>
   1b1e2:	4544      	cmp	r4, r8
   1b1e4:	bf28      	it	cs
   1b1e6:	4644      	movcs	r4, r8
   1b1e8:	4622      	mov	r2, r4
   1b1ea:	4448      	add	r0, r9
   1b1ec:	4639      	mov	r1, r7
   1b1ee:	f7ff faff 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b1f2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   1b1f4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   1b1f6:	4420      	add	r0, r4
   1b1f8:	4283      	cmp	r3, r0
   1b1fa:	eb07 0a04 	add.w	sl, r7, r4
   1b1fe:	6630      	str	r0, [r6, #96]	; 0x60
   1b200:	eba8 0404 	sub.w	r4, r8, r4
   1b204:	d1d5      	bne.n	1b1b2 <mbedtls_sha_update_internal+0x3a>
   1b206:	2b80      	cmp	r3, #128	; 0x80
   1b208:	bf28      	it	cs
   1b20a:	2380      	movcs	r3, #128	; 0x80
   1b20c:	461a      	mov	r2, r3
   1b20e:	4649      	mov	r1, r9
   1b210:	a804      	add	r0, sp, #16
   1b212:	f7ff faed 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b216:	2300      	movs	r3, #0
   1b218:	e9cd 3300 	strd	r3, r3, [sp]
   1b21c:	aa02      	add	r2, sp, #8
   1b21e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   1b220:	a804      	add	r0, sp, #16
   1b222:	f000 f9a3 	bl	1b56c <SetDataBuffersInfo>
   1b226:	2800      	cmp	r0, #0
   1b228:	d160      	bne.n	1b2ec <mbedtls_sha_update_internal+0x174>
   1b22a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1b22c:	a902      	add	r1, sp, #8
   1b22e:	4630      	mov	r0, r6
   1b230:	f000 f9fa 	bl	1b628 <ProcessHashDrv>
   1b234:	2800      	cmp	r0, #0
   1b236:	d159      	bne.n	1b2ec <mbedtls_sha_update_internal+0x174>
   1b238:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   1b23a:	fbb4 fbf3 	udiv	fp, r4, r3
   1b23e:	fb03 fb0b 	mul.w	fp, r3, fp
   1b242:	6630      	str	r0, [r6, #96]	; 0x60
   1b244:	f1bb 0f00 	cmp.w	fp, #0
   1b248:	d0ba      	beq.n	1b1c0 <mbedtls_sha_update_internal+0x48>
   1b24a:	2300      	movs	r3, #0
   1b24c:	e9cd 3300 	strd	r3, r3, [sp]
   1b250:	aa02      	add	r2, sp, #8
   1b252:	4659      	mov	r1, fp
   1b254:	4650      	mov	r0, sl
   1b256:	f000 f989 	bl	1b56c <SetDataBuffersInfo>
   1b25a:	2800      	cmp	r0, #0
   1b25c:	d146      	bne.n	1b2ec <mbedtls_sha_update_internal+0x174>
   1b25e:	a902      	add	r1, sp, #8
   1b260:	465a      	mov	r2, fp
   1b262:	4630      	mov	r0, r6
   1b264:	f000 f9e0 	bl	1b628 <ProcessHashDrv>
   1b268:	2800      	cmp	r0, #0
   1b26a:	d13f      	bne.n	1b2ec <mbedtls_sha_update_internal+0x174>
   1b26c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   1b270:	eba4 040b 	sub.w	r4, r4, fp
   1b274:	6e30      	ldr	r0, [r6, #96]	; 0x60
   1b276:	44da      	add	sl, fp
   1b278:	4447      	add	r7, r8
   1b27a:	3dff      	subs	r5, #255	; 0xff
   1b27c:	2c00      	cmp	r4, #0
   1b27e:	d0a5      	beq.n	1b1cc <mbedtls_sha_update_internal+0x54>
   1b280:	3019      	adds	r0, #25
   1b282:	4651      	mov	r1, sl
   1b284:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1b288:	4622      	mov	r2, r4
   1b28a:	f7ff fab1 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b28e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   1b290:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1b294:	4420      	add	r0, r4
   1b296:	6630      	str	r0, [r6, #96]	; 0x60
   1b298:	d29b      	bcs.n	1b1d2 <mbedtls_sha_update_internal+0x5a>
   1b29a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1b29c:	1a14      	subs	r4, r2, r0
   1b29e:	fbb4 f3f2 	udiv	r3, r4, r2
   1b2a2:	fb02 4413 	mls	r4, r2, r3, r4
   1b2a6:	42ac      	cmp	r4, r5
   1b2a8:	bf28      	it	cs
   1b2aa:	462c      	movcs	r4, r5
   1b2ac:	bb34      	cbnz	r4, 1b2fc <mbedtls_sha_update_internal+0x184>
   1b2ae:	4290      	cmp	r0, r2
   1b2b0:	d034      	beq.n	1b31c <mbedtls_sha_update_internal+0x1a4>
   1b2b2:	fbb5 f4f2 	udiv	r4, r5, r2
   1b2b6:	fb02 f404 	mul.w	r4, r2, r4
   1b2ba:	b96c      	cbnz	r4, 1b2d8 <mbedtls_sha_update_internal+0x160>
   1b2bc:	b1d5      	cbz	r5, 1b2f4 <mbedtls_sha_update_internal+0x17c>
   1b2be:	6e33      	ldr	r3, [r6, #96]	; 0x60
   1b2c0:	3319      	adds	r3, #25
   1b2c2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   1b2c6:	462a      	mov	r2, r5
   1b2c8:	4639      	mov	r1, r7
   1b2ca:	f7ff fa91 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b2ce:	6e33      	ldr	r3, [r6, #96]	; 0x60
   1b2d0:	442b      	add	r3, r5
   1b2d2:	2000      	movs	r0, #0
   1b2d4:	6633      	str	r3, [r6, #96]	; 0x60
   1b2d6:	e00a      	b.n	1b2ee <mbedtls_sha_update_internal+0x176>
   1b2d8:	2300      	movs	r3, #0
   1b2da:	e9cd 3300 	strd	r3, r3, [sp]
   1b2de:	aa02      	add	r2, sp, #8
   1b2e0:	4621      	mov	r1, r4
   1b2e2:	4638      	mov	r0, r7
   1b2e4:	f000 f942 	bl	1b56c <SetDataBuffersInfo>
   1b2e8:	2800      	cmp	r0, #0
   1b2ea:	d033      	beq.n	1b354 <mbedtls_sha_update_internal+0x1dc>
   1b2ec:	2001      	movs	r0, #1
   1b2ee:	b025      	add	sp, #148	; 0x94
   1b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2f4:	4628      	mov	r0, r5
   1b2f6:	b025      	add	sp, #148	; 0x94
   1b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2fc:	f106 0364 	add.w	r3, r6, #100	; 0x64
   1b300:	4639      	mov	r1, r7
   1b302:	4622      	mov	r2, r4
   1b304:	4418      	add	r0, r3
   1b306:	f7ff fa73 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b30a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   1b30c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1b30e:	4420      	add	r0, r4
   1b310:	1b2d      	subs	r5, r5, r4
   1b312:	4427      	add	r7, r4
   1b314:	6630      	str	r0, [r6, #96]	; 0x60
   1b316:	e7ca      	b.n	1b2ae <mbedtls_sha_update_internal+0x136>
   1b318:	2001      	movs	r0, #1
   1b31a:	4770      	bx	lr
   1b31c:	2a80      	cmp	r2, #128	; 0x80
   1b31e:	bf28      	it	cs
   1b320:	2280      	movcs	r2, #128	; 0x80
   1b322:	f106 0164 	add.w	r1, r6, #100	; 0x64
   1b326:	a804      	add	r0, sp, #16
   1b328:	f7ff fa62 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b32c:	2300      	movs	r3, #0
   1b32e:	e9cd 3300 	strd	r3, r3, [sp]
   1b332:	a804      	add	r0, sp, #16
   1b334:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   1b336:	aa02      	add	r2, sp, #8
   1b338:	f000 f918 	bl	1b56c <SetDataBuffersInfo>
   1b33c:	2800      	cmp	r0, #0
   1b33e:	d1d5      	bne.n	1b2ec <mbedtls_sha_update_internal+0x174>
   1b340:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1b342:	a902      	add	r1, sp, #8
   1b344:	4630      	mov	r0, r6
   1b346:	f000 f96f 	bl	1b628 <ProcessHashDrv>
   1b34a:	2800      	cmp	r0, #0
   1b34c:	d1ce      	bne.n	1b2ec <mbedtls_sha_update_internal+0x174>
   1b34e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1b350:	6630      	str	r0, [r6, #96]	; 0x60
   1b352:	e7ae      	b.n	1b2b2 <mbedtls_sha_update_internal+0x13a>
   1b354:	a902      	add	r1, sp, #8
   1b356:	4622      	mov	r2, r4
   1b358:	4630      	mov	r0, r6
   1b35a:	f000 f965 	bl	1b628 <ProcessHashDrv>
   1b35e:	2800      	cmp	r0, #0
   1b360:	d1c4      	bne.n	1b2ec <mbedtls_sha_update_internal+0x174>
   1b362:	4427      	add	r7, r4
   1b364:	1b2d      	subs	r5, r5, r4
   1b366:	e7a9      	b.n	1b2bc <mbedtls_sha_update_internal+0x144>

0001b368 <cc_mbedtls_sha256>:
   1b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b36a:	461c      	mov	r4, r3
   1b36c:	4605      	mov	r5, r0
   1b36e:	4811      	ldr	r0, [pc, #68]	; (1b3b4 <cc_mbedtls_sha256+0x4c>)
   1b370:	460e      	mov	r6, r1
   1b372:	4617      	mov	r7, r2
   1b374:	f7ff fe42 	bl	1affc <cc_mbedtls_sha256_init>
   1b378:	4621      	mov	r1, r4
   1b37a:	480e      	ldr	r0, [pc, #56]	; (1b3b4 <cc_mbedtls_sha256+0x4c>)
   1b37c:	f7ff fe58 	bl	1b030 <cc_mbedtls_sha256_starts>
   1b380:	4604      	mov	r4, r0
   1b382:	b120      	cbz	r0, 1b38e <cc_mbedtls_sha256+0x26>
   1b384:	480b      	ldr	r0, [pc, #44]	; (1b3b4 <cc_mbedtls_sha256+0x4c>)
   1b386:	f7ff fe4d 	bl	1b024 <cc_mbedtls_sha256_free>
   1b38a:	4620      	mov	r0, r4
   1b38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b38e:	4809      	ldr	r0, [pc, #36]	; (1b3b4 <cc_mbedtls_sha256+0x4c>)
   1b390:	4632      	mov	r2, r6
   1b392:	4629      	mov	r1, r5
   1b394:	f7ff fe60 	bl	1b058 <cc_mbedtls_sha256_update>
   1b398:	4604      	mov	r4, r0
   1b39a:	2800      	cmp	r0, #0
   1b39c:	d1f2      	bne.n	1b384 <cc_mbedtls_sha256+0x1c>
   1b39e:	4639      	mov	r1, r7
   1b3a0:	4804      	ldr	r0, [pc, #16]	; (1b3b4 <cc_mbedtls_sha256+0x4c>)
   1b3a2:	f7ff fe83 	bl	1b0ac <cc_mbedtls_sha256_finish>
   1b3a6:	4604      	mov	r4, r0
   1b3a8:	4802      	ldr	r0, [pc, #8]	; (1b3b4 <cc_mbedtls_sha256+0x4c>)
   1b3aa:	f7ff fe3b 	bl	1b024 <cc_mbedtls_sha256_free>
   1b3ae:	4620      	mov	r0, r4
   1b3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b3b2:	bf00      	nop
   1b3b4:	20003304 	.word	0x20003304

0001b3b8 <RNG_PLAT_SetUserRngParameters>:
   1b3b8:	b530      	push	{r4, r5, lr}
   1b3ba:	b083      	sub	sp, #12
   1b3bc:	231c      	movs	r3, #28
   1b3be:	a901      	add	r1, sp, #4
   1b3c0:	4604      	mov	r4, r0
   1b3c2:	9301      	str	r3, [sp, #4]
   1b3c4:	f000 f834 	bl	1b430 <CC_PalTrngParamGet>
   1b3c8:	4605      	mov	r5, r0
   1b3ca:	b938      	cbnz	r0, 1b3dc <RNG_PLAT_SetUserRngParameters+0x24>
   1b3cc:	9b01      	ldr	r3, [sp, #4]
   1b3ce:	2b1c      	cmp	r3, #28
   1b3d0:	d007      	beq.n	1b3e2 <RNG_PLAT_SetUserRngParameters+0x2a>
   1b3d2:	4d15      	ldr	r5, [pc, #84]	; (1b428 <RNG_PLAT_SetUserRngParameters+0x70>)
   1b3d4:	211c      	movs	r1, #28
   1b3d6:	4620      	mov	r0, r4
   1b3d8:	f7ff fa0e 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1b3dc:	4628      	mov	r0, r5
   1b3de:	b003      	add	sp, #12
   1b3e0:	bd30      	pop	{r4, r5, pc}
   1b3e2:	e9d4 3200 	ldrd	r3, r2, [r4]
   1b3e6:	2101      	movs	r1, #1
   1b3e8:	3b00      	subs	r3, #0
   1b3ea:	61e1      	str	r1, [r4, #28]
   1b3ec:	bf18      	it	ne
   1b3ee:	2301      	movne	r3, #1
   1b3f0:	b10a      	cbz	r2, 1b3f6 <RNG_PLAT_SetUserRngParameters+0x3e>
   1b3f2:	f043 0302 	orr.w	r3, r3, #2
   1b3f6:	68a2      	ldr	r2, [r4, #8]
   1b3f8:	b932      	cbnz	r2, 1b408 <RNG_PLAT_SetUserRngParameters+0x50>
   1b3fa:	68e2      	ldr	r2, [r4, #12]
   1b3fc:	b942      	cbnz	r2, 1b410 <RNG_PLAT_SetUserRngParameters+0x58>
   1b3fe:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b402:	b97b      	cbnz	r3, 1b424 <RNG_PLAT_SetUserRngParameters+0x6c>
   1b404:	4d09      	ldr	r5, [pc, #36]	; (1b42c <RNG_PLAT_SetUserRngParameters+0x74>)
   1b406:	e7e5      	b.n	1b3d4 <RNG_PLAT_SetUserRngParameters+0x1c>
   1b408:	68e2      	ldr	r2, [r4, #12]
   1b40a:	f043 0304 	orr.w	r3, r3, #4
   1b40e:	b13a      	cbz	r2, 1b420 <RNG_PLAT_SetUserRngParameters+0x68>
   1b410:	f043 0308 	orr.w	r3, r3, #8
   1b414:	2200      	movs	r2, #0
   1b416:	4628      	mov	r0, r5
   1b418:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b41c:	b003      	add	sp, #12
   1b41e:	bd30      	pop	{r4, r5, pc}
   1b420:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1b424:	4615      	mov	r5, r2
   1b426:	e7d9      	b.n	1b3dc <RNG_PLAT_SetUserRngParameters+0x24>
   1b428:	00f00c37 	.word	0x00f00c37
   1b42c:	00f00c0e 	.word	0x00f00c0e

0001b430 <CC_PalTrngParamGet>:
   1b430:	b118      	cbz	r0, 1b43a <CC_PalTrngParamGet+0xa>
   1b432:	b111      	cbz	r1, 1b43a <CC_PalTrngParamGet+0xa>
   1b434:	680b      	ldr	r3, [r1, #0]
   1b436:	2b1c      	cmp	r3, #28
   1b438:	d001      	beq.n	1b43e <CC_PalTrngParamGet+0xe>
   1b43a:	2001      	movs	r0, #1
   1b43c:	4770      	bx	lr
   1b43e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b442:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1b446:	3201      	adds	r2, #1
   1b448:	bf14      	ite	ne
   1b44a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1b44e:	f241 225c 	movweq	r2, #4700	; 0x125c
   1b452:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b456:	6002      	str	r2, [r0, #0]
   1b458:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1b45c:	3201      	adds	r2, #1
   1b45e:	bf14      	ite	ne
   1b460:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1b464:	f641 1264 	movweq	r2, #6500	; 0x1964
   1b468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b46c:	6042      	str	r2, [r0, #4]
   1b46e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1b472:	3201      	adds	r2, #1
   1b474:	bf14      	ite	ne
   1b476:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1b47a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1b47e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b482:	6082      	str	r2, [r0, #8]
   1b484:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1b488:	3201      	adds	r2, #1
   1b48a:	bf14      	ite	ne
   1b48c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1b490:	f241 3288 	movweq	r2, #5000	; 0x1388
   1b494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b498:	60c2      	str	r2, [r0, #12]
   1b49a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1b49e:	3201      	adds	r2, #1
   1b4a0:	bf14      	ite	ne
   1b4a2:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1b4a6:	2290      	moveq	r2, #144	; 0x90
   1b4a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b4ac:	6102      	str	r2, [r0, #16]
   1b4ae:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1b4b2:	3201      	adds	r2, #1
   1b4b4:	bf14      	ite	ne
   1b4b6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1b4ba:	2251      	moveq	r2, #81	; 0x51
   1b4bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b4c0:	6142      	str	r2, [r0, #20]
   1b4c2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1b4c6:	3201      	adds	r2, #1
   1b4c8:	bf14      	ite	ne
   1b4ca:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1b4ce:	f240 3337 	movweq	r3, #823	; 0x337
   1b4d2:	6183      	str	r3, [r0, #24]
   1b4d4:	2000      	movs	r0, #0
   1b4d6:	4770      	bx	lr

0001b4d8 <LLF_RND_WaitRngInterrupt>:
   1b4d8:	b508      	push	{r3, lr}
   1b4da:	4601      	mov	r1, r0
   1b4dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1b4e0:	f7ff f912 	bl	1a708 <CC_HalWaitInterruptRND>
   1b4e4:	4b03      	ldr	r3, [pc, #12]	; (1b4f4 <LLF_RND_WaitRngInterrupt+0x1c>)
   1b4e6:	2200      	movs	r2, #0
   1b4e8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1b4ec:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1b4f0:	bd08      	pop	{r3, pc}
   1b4f2:	bf00      	nop
   1b4f4:	5002b000 	.word	0x5002b000

0001b4f8 <LLF_RND_GetRoscSampleCnt>:
   1b4f8:	3801      	subs	r0, #1
   1b4fa:	2807      	cmp	r0, #7
   1b4fc:	d805      	bhi.n	1b50a <LLF_RND_GetRoscSampleCnt+0x12>
   1b4fe:	e8df f000 	tbb	[pc, r0]
   1b502:	0e12      	.short	0x0e12
   1b504:	04040a04 	.word	0x04040a04
   1b508:	0604      	.short	0x0604
   1b50a:	4809      	ldr	r0, [pc, #36]	; (1b530 <LLF_RND_GetRoscSampleCnt+0x38>)
   1b50c:	4770      	bx	lr
   1b50e:	68cb      	ldr	r3, [r1, #12]
   1b510:	624b      	str	r3, [r1, #36]	; 0x24
   1b512:	2000      	movs	r0, #0
   1b514:	4770      	bx	lr
   1b516:	688b      	ldr	r3, [r1, #8]
   1b518:	624b      	str	r3, [r1, #36]	; 0x24
   1b51a:	2000      	movs	r0, #0
   1b51c:	4770      	bx	lr
   1b51e:	684b      	ldr	r3, [r1, #4]
   1b520:	624b      	str	r3, [r1, #36]	; 0x24
   1b522:	2000      	movs	r0, #0
   1b524:	4770      	bx	lr
   1b526:	680b      	ldr	r3, [r1, #0]
   1b528:	624b      	str	r3, [r1, #36]	; 0x24
   1b52a:	2000      	movs	r0, #0
   1b52c:	4770      	bx	lr
   1b52e:	bf00      	nop
   1b530:	00f10c31 	.word	0x00f10c31

0001b534 <LLF_RND_GetFastestRosc>:
   1b534:	680b      	ldr	r3, [r1, #0]
   1b536:	e002      	b.n	1b53e <LLF_RND_GetFastestRosc+0xa>
   1b538:	2b08      	cmp	r3, #8
   1b53a:	600b      	str	r3, [r1, #0]
   1b53c:	d806      	bhi.n	1b54c <LLF_RND_GetFastestRosc+0x18>
   1b53e:	6a02      	ldr	r2, [r0, #32]
   1b540:	4213      	tst	r3, r2
   1b542:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1b546:	d0f7      	beq.n	1b538 <LLF_RND_GetFastestRosc+0x4>
   1b548:	2000      	movs	r0, #0
   1b54a:	4770      	bx	lr
   1b54c:	4800      	ldr	r0, [pc, #0]	; (1b550 <LLF_RND_GetFastestRosc+0x1c>)
   1b54e:	4770      	bx	lr
   1b550:	00f10c31 	.word	0x00f10c31

0001b554 <LLF_RND_TurnOffTrng>:
   1b554:	4b04      	ldr	r3, [pc, #16]	; (1b568 <LLF_RND_TurnOffTrng+0x14>)
   1b556:	2200      	movs	r2, #0
   1b558:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1b55c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1b560:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1b564:	f7ff b8b6 	b.w	1a6d4 <CC_HalClearInterruptBit>
   1b568:	5002b000 	.word	0x5002b000

0001b56c <SetDataBuffersInfo>:
   1b56c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b56e:	b083      	sub	sp, #12
   1b570:	461d      	mov	r5, r3
   1b572:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1b576:	f04f 0300 	mov.w	r3, #0
   1b57a:	f88d 3007 	strb.w	r3, [sp, #7]
   1b57e:	d324      	bcc.n	1b5ca <SetDataBuffersInfo+0x5e>
   1b580:	468c      	mov	ip, r1
   1b582:	4484      	add	ip, r0
   1b584:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   1b588:	4604      	mov	r4, r0
   1b58a:	d81e      	bhi.n	1b5ca <SetDataBuffersInfo+0x5e>
   1b58c:	4617      	mov	r7, r2
   1b58e:	f10d 0307 	add.w	r3, sp, #7
   1b592:	2201      	movs	r2, #1
   1b594:	f000 fe68 	bl	1c268 <CC_PalDataBufferAttrGet>
   1b598:	4606      	mov	r6, r0
   1b59a:	b9b0      	cbnz	r0, 1b5ca <SetDataBuffersInfo+0x5e>
   1b59c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b59e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b5a2:	603c      	str	r4, [r7, #0]
   1b5a4:	713b      	strb	r3, [r7, #4]
   1b5a6:	b192      	cbz	r2, 1b5ce <SetDataBuffersInfo+0x62>
   1b5a8:	b14d      	cbz	r5, 1b5be <SetDataBuffersInfo+0x52>
   1b5aa:	4602      	mov	r2, r0
   1b5ac:	9908      	ldr	r1, [sp, #32]
   1b5ae:	f10d 0307 	add.w	r3, sp, #7
   1b5b2:	4628      	mov	r0, r5
   1b5b4:	f000 fe58 	bl	1c268 <CC_PalDataBufferAttrGet>
   1b5b8:	b938      	cbnz	r0, 1b5ca <SetDataBuffersInfo+0x5e>
   1b5ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b5c0:	4630      	mov	r0, r6
   1b5c2:	6015      	str	r5, [r2, #0]
   1b5c4:	7113      	strb	r3, [r2, #4]
   1b5c6:	b003      	add	sp, #12
   1b5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b5ca:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1b5ce:	4630      	mov	r0, r6
   1b5d0:	b003      	add	sp, #12
   1b5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b5d4 <InitHashDrv>:
   1b5d4:	b1e8      	cbz	r0, 1b612 <InitHashDrv+0x3e>
   1b5d6:	b510      	push	{r4, lr}
   1b5d8:	6804      	ldr	r4, [r0, #0]
   1b5da:	2c01      	cmp	r4, #1
   1b5dc:	d004      	beq.n	1b5e8 <InitHashDrv+0x14>
   1b5de:	2c02      	cmp	r4, #2
   1b5e0:	d010      	beq.n	1b604 <InitHashDrv+0x30>
   1b5e2:	b144      	cbz	r4, 1b5f6 <InitHashDrv+0x22>
   1b5e4:	480c      	ldr	r0, [pc, #48]	; (1b618 <InitHashDrv+0x44>)
   1b5e6:	bd10      	pop	{r4, pc}
   1b5e8:	490c      	ldr	r1, [pc, #48]	; (1b61c <InitHashDrv+0x48>)
   1b5ea:	2220      	movs	r2, #32
   1b5ec:	3008      	adds	r0, #8
   1b5ee:	f7ff f8ff 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b5f2:	2000      	movs	r0, #0
   1b5f4:	bd10      	pop	{r4, pc}
   1b5f6:	490a      	ldr	r1, [pc, #40]	; (1b620 <InitHashDrv+0x4c>)
   1b5f8:	2214      	movs	r2, #20
   1b5fa:	3008      	adds	r0, #8
   1b5fc:	f7ff f8f8 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b600:	4620      	mov	r0, r4
   1b602:	bd10      	pop	{r4, pc}
   1b604:	4907      	ldr	r1, [pc, #28]	; (1b624 <InitHashDrv+0x50>)
   1b606:	2220      	movs	r2, #32
   1b608:	3008      	adds	r0, #8
   1b60a:	f7ff f8f1 	bl	1a7f0 <CC_PalMemCopyPlat>
   1b60e:	2000      	movs	r0, #0
   1b610:	bd10      	pop	{r4, pc}
   1b612:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1b616:	4770      	bx	lr
   1b618:	00f30001 	.word	0x00f30001
   1b61c:	0001ef20 	.word	0x0001ef20
   1b620:	0001eeec 	.word	0x0001eeec
   1b624:	0001ef00 	.word	0x0001ef00

0001b628 <ProcessHashDrv>:
   1b628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b62c:	2900      	cmp	r1, #0
   1b62e:	f000 80f9 	beq.w	1b824 <ProcessHashDrv+0x1fc>
   1b632:	4604      	mov	r4, r0
   1b634:	2800      	cmp	r0, #0
   1b636:	f000 80f9 	beq.w	1b82c <ProcessHashDrv+0x204>
   1b63a:	6803      	ldr	r3, [r0, #0]
   1b63c:	4690      	mov	r8, r2
   1b63e:	460f      	mov	r7, r1
   1b640:	2b00      	cmp	r3, #0
   1b642:	f000 80c3 	beq.w	1b7cc <ProcessHashDrv+0x1a4>
   1b646:	3b01      	subs	r3, #1
   1b648:	2b01      	cmp	r3, #1
   1b64a:	f200 80d7 	bhi.w	1b7fc <ProcessHashDrv+0x1d4>
   1b64e:	4879      	ldr	r0, [pc, #484]	; (1b834 <ProcessHashDrv+0x20c>)
   1b650:	f04f 31ff 	mov.w	r1, #4294967295
   1b654:	f04f 0902 	mov.w	r9, #2
   1b658:	f7ff f8e6 	bl	1a828 <CC_PalMutexLock>
   1b65c:	2800      	cmp	r0, #0
   1b65e:	f040 80bf 	bne.w	1b7e0 <ProcessHashDrv+0x1b8>
   1b662:	2000      	movs	r0, #0
   1b664:	f7ff f910 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1b668:	4606      	mov	r6, r0
   1b66a:	2800      	cmp	r0, #0
   1b66c:	f040 80c2 	bne.w	1b7f4 <ProcessHashDrv+0x1cc>
   1b670:	4a71      	ldr	r2, [pc, #452]	; (1b838 <ProcessHashDrv+0x210>)
   1b672:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1b676:	2b00      	cmp	r3, #0
   1b678:	d1fb      	bne.n	1b672 <ProcessHashDrv+0x4a>
   1b67a:	4d6f      	ldr	r5, [pc, #444]	; (1b838 <ProcessHashDrv+0x210>)
   1b67c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   1b680:	2b00      	cmp	r3, #0
   1b682:	d1fb      	bne.n	1b67c <ProcessHashDrv+0x54>
   1b684:	f04f 30ff 	mov.w	r0, #4294967295
   1b688:	f7ff f824 	bl	1a6d4 <CC_HalClearInterruptBit>
   1b68c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1b690:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1b694:	f7ff f82c 	bl	1a6f0 <CC_HalMaskInterrupt>
   1b698:	2301      	movs	r3, #1
   1b69a:	2207      	movs	r2, #7
   1b69c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   1b6a0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1b6a4:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1b6a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b6aa:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   1b6ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1b6b0:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1b6b4:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1b6b8:	6823      	ldr	r3, [r4, #0]
   1b6ba:	b15b      	cbz	r3, 1b6d4 <ProcessHashDrv+0xac>
   1b6bc:	3b01      	subs	r3, #1
   1b6be:	2b01      	cmp	r3, #1
   1b6c0:	d818      	bhi.n	1b6f4 <ProcessHashDrv+0xcc>
   1b6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b6c4:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1b6c8:	6a23      	ldr	r3, [r4, #32]
   1b6ca:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   1b6ce:	69e3      	ldr	r3, [r4, #28]
   1b6d0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1b6d4:	4b58      	ldr	r3, [pc, #352]	; (1b838 <ProcessHashDrv+0x210>)
   1b6d6:	69a2      	ldr	r2, [r4, #24]
   1b6d8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1b6dc:	6962      	ldr	r2, [r4, #20]
   1b6de:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1b6e2:	6922      	ldr	r2, [r4, #16]
   1b6e4:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1b6e8:	68e2      	ldr	r2, [r4, #12]
   1b6ea:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   1b6ee:	68a2      	ldr	r2, [r4, #8]
   1b6f0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1b6f4:	4a50      	ldr	r2, [pc, #320]	; (1b838 <ProcessHashDrv+0x210>)
   1b6f6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1b6fa:	2b00      	cmp	r3, #0
   1b6fc:	d1fb      	bne.n	1b6f6 <ProcessHashDrv+0xce>
   1b6fe:	f1b8 0f00 	cmp.w	r8, #0
   1b702:	d05f      	beq.n	1b7c4 <ProcessHashDrv+0x19c>
   1b704:	6863      	ldr	r3, [r4, #4]
   1b706:	2b01      	cmp	r3, #1
   1b708:	bf08      	it	eq
   1b70a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1b70e:	4b4a      	ldr	r3, [pc, #296]	; (1b838 <ProcessHashDrv+0x210>)
   1b710:	683a      	ldr	r2, [r7, #0]
   1b712:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1b716:	2040      	movs	r0, #64	; 0x40
   1b718:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   1b71c:	f7fe ffee 	bl	1a6fc <CC_HalWaitInterrupt>
   1b720:	4606      	mov	r6, r0
   1b722:	4a45      	ldr	r2, [pc, #276]	; (1b838 <ProcessHashDrv+0x210>)
   1b724:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1b728:	2b00      	cmp	r3, #0
   1b72a:	d1fb      	bne.n	1b724 <ProcessHashDrv+0xfc>
   1b72c:	4a42      	ldr	r2, [pc, #264]	; (1b838 <ProcessHashDrv+0x210>)
   1b72e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1b732:	2b00      	cmp	r3, #0
   1b734:	d1fb      	bne.n	1b72e <ProcessHashDrv+0x106>
   1b736:	6823      	ldr	r3, [r4, #0]
   1b738:	b15b      	cbz	r3, 1b752 <ProcessHashDrv+0x12a>
   1b73a:	3b01      	subs	r3, #1
   1b73c:	2b01      	cmp	r3, #1
   1b73e:	d818      	bhi.n	1b772 <ProcessHashDrv+0x14a>
   1b740:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   1b744:	6263      	str	r3, [r4, #36]	; 0x24
   1b746:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   1b74a:	6223      	str	r3, [r4, #32]
   1b74c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   1b750:	61e3      	str	r3, [r4, #28]
   1b752:	4b39      	ldr	r3, [pc, #228]	; (1b838 <ProcessHashDrv+0x210>)
   1b754:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1b758:	61a2      	str	r2, [r4, #24]
   1b75a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1b75e:	6162      	str	r2, [r4, #20]
   1b760:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   1b764:	6122      	str	r2, [r4, #16]
   1b766:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1b76a:	60e2      	str	r2, [r4, #12]
   1b76c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   1b770:	60a3      	str	r3, [r4, #8]
   1b772:	4a31      	ldr	r2, [pc, #196]	; (1b838 <ProcessHashDrv+0x210>)
   1b774:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   1b778:	64a1      	str	r1, [r4, #72]	; 0x48
   1b77a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   1b77e:	64e1      	str	r1, [r4, #76]	; 0x4c
   1b780:	2300      	movs	r3, #0
   1b782:	2101      	movs	r1, #1
   1b784:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1b788:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   1b78c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1b790:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1b794:	2b00      	cmp	r3, #0
   1b796:	d1fb      	bne.n	1b790 <ProcessHashDrv+0x168>
   1b798:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   1b79c:	2e00      	cmp	r6, #0
   1b79e:	d13b      	bne.n	1b818 <ProcessHashDrv+0x1f0>
   1b7a0:	4b25      	ldr	r3, [pc, #148]	; (1b838 <ProcessHashDrv+0x210>)
   1b7a2:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1b7a6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1b7aa:	f7fe ffa1 	bl	1a6f0 <CC_HalMaskInterrupt>
   1b7ae:	2001      	movs	r0, #1
   1b7b0:	f7ff f86a 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1b7b4:	bb60      	cbnz	r0, 1b810 <ProcessHashDrv+0x1e8>
   1b7b6:	481f      	ldr	r0, [pc, #124]	; (1b834 <ProcessHashDrv+0x20c>)
   1b7b8:	f7ff f83e 	bl	1a838 <CC_PalMutexUnlock>
   1b7bc:	bb10      	cbnz	r0, 1b804 <ProcessHashDrv+0x1dc>
   1b7be:	4630      	mov	r0, r6
   1b7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b7c4:	2304      	movs	r3, #4
   1b7c6:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1b7ca:	e7aa      	b.n	1b722 <ProcessHashDrv+0xfa>
   1b7cc:	4819      	ldr	r0, [pc, #100]	; (1b834 <ProcessHashDrv+0x20c>)
   1b7ce:	f04f 31ff 	mov.w	r1, #4294967295
   1b7d2:	f04f 0901 	mov.w	r9, #1
   1b7d6:	f7ff f827 	bl	1a828 <CC_PalMutexLock>
   1b7da:	2800      	cmp	r0, #0
   1b7dc:	f43f af41 	beq.w	1b662 <ProcessHashDrv+0x3a>
   1b7e0:	4816      	ldr	r0, [pc, #88]	; (1b83c <ProcessHashDrv+0x214>)
   1b7e2:	f7fe f8a5 	bl	19930 <CC_PalAbort>
   1b7e6:	2000      	movs	r0, #0
   1b7e8:	f7ff f84e 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1b7ec:	4606      	mov	r6, r0
   1b7ee:	2800      	cmp	r0, #0
   1b7f0:	f43f af3e 	beq.w	1b670 <ProcessHashDrv+0x48>
   1b7f4:	4812      	ldr	r0, [pc, #72]	; (1b840 <ProcessHashDrv+0x218>)
   1b7f6:	f7fe f89b 	bl	19930 <CC_PalAbort>
   1b7fa:	e739      	b.n	1b670 <ProcessHashDrv+0x48>
   1b7fc:	4e11      	ldr	r6, [pc, #68]	; (1b844 <ProcessHashDrv+0x21c>)
   1b7fe:	4630      	mov	r0, r6
   1b800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b804:	4810      	ldr	r0, [pc, #64]	; (1b848 <ProcessHashDrv+0x220>)
   1b806:	f7fe f893 	bl	19930 <CC_PalAbort>
   1b80a:	4630      	mov	r0, r6
   1b80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b810:	480e      	ldr	r0, [pc, #56]	; (1b84c <ProcessHashDrv+0x224>)
   1b812:	f7fe f88d 	bl	19930 <CC_PalAbort>
   1b816:	e7ce      	b.n	1b7b6 <ProcessHashDrv+0x18e>
   1b818:	2110      	movs	r1, #16
   1b81a:	f104 0008 	add.w	r0, r4, #8
   1b81e:	f7fe ffeb 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1b822:	e7bd      	b.n	1b7a0 <ProcessHashDrv+0x178>
   1b824:	4e0a      	ldr	r6, [pc, #40]	; (1b850 <ProcessHashDrv+0x228>)
   1b826:	4630      	mov	r0, r6
   1b828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b82c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   1b830:	e7c5      	b.n	1b7be <ProcessHashDrv+0x196>
   1b832:	bf00      	nop
   1b834:	20000500 	.word	0x20000500
   1b838:	5002b000 	.word	0x5002b000
   1b83c:	0001ee20 	.word	0x0001ee20
   1b840:	0001ee38 	.word	0x0001ee38
   1b844:	00f30001 	.word	0x00f30001
   1b848:	0001ee78 	.word	0x0001ee78
   1b84c:	0001ee58 	.word	0x0001ee58
   1b850:	00f30003 	.word	0x00f30003

0001b854 <FinishHashDrv>:
   1b854:	b398      	cbz	r0, 1b8be <FinishHashDrv+0x6a>
   1b856:	b470      	push	{r4, r5, r6}
   1b858:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   1b85c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1b860:	ba26      	rev	r6, r4
   1b862:	ba0d      	rev	r5, r1
   1b864:	ba14      	rev	r4, r2
   1b866:	ba19      	rev	r1, r3
   1b868:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   1b86c:	ba12      	rev	r2, r2
   1b86e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   1b872:	6182      	str	r2, [r0, #24]
   1b874:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   1b878:	e9c0 6502 	strd	r6, r5, [r0, #8]
   1b87c:	ba1b      	rev	r3, r3
   1b87e:	ba25      	rev	r5, r4
   1b880:	e9c0 3507 	strd	r3, r5, [r0, #28]
   1b884:	ba14      	rev	r4, r2
   1b886:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1b88a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1b88c:	ba12      	rev	r2, r2
   1b88e:	ba09      	rev	r1, r1
   1b890:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   1b894:	62c2      	str	r2, [r0, #44]	; 0x2c
   1b896:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   1b89a:	ba1b      	rev	r3, r3
   1b89c:	ba25      	rev	r5, r4
   1b89e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   1b8a2:	ba14      	rev	r4, r2
   1b8a4:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   1b8a8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1b8aa:	ba12      	rev	r2, r2
   1b8ac:	ba09      	rev	r1, r1
   1b8ae:	ba1b      	rev	r3, r3
   1b8b0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1b8b4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1b8b8:	2000      	movs	r0, #0
   1b8ba:	bc70      	pop	{r4, r5, r6}
   1b8bc:	4770      	bx	lr
   1b8be:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1b8c2:	4770      	bx	lr

0001b8c4 <LoadAesKey>:
   1b8c4:	2800      	cmp	r0, #0
   1b8c6:	d046      	beq.n	1b956 <LoadAesKey+0x92>
   1b8c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1b8cc:	2b00      	cmp	r3, #0
   1b8ce:	d033      	beq.n	1b938 <LoadAesKey+0x74>
   1b8d0:	2b03      	cmp	r3, #3
   1b8d2:	b510      	push	{r4, lr}
   1b8d4:	d013      	beq.n	1b8fe <LoadAesKey+0x3a>
   1b8d6:	4821      	ldr	r0, [pc, #132]	; (1b95c <LoadAesKey+0x98>)
   1b8d8:	4c21      	ldr	r4, [pc, #132]	; (1b960 <LoadAesKey+0x9c>)
   1b8da:	6822      	ldr	r2, [r4, #0]
   1b8dc:	4b21      	ldr	r3, [pc, #132]	; (1b964 <LoadAesKey+0xa0>)
   1b8de:	6812      	ldr	r2, [r2, #0]
   1b8e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1b8e4:	6822      	ldr	r2, [r4, #0]
   1b8e6:	6852      	ldr	r2, [r2, #4]
   1b8e8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1b8ec:	6822      	ldr	r2, [r4, #0]
   1b8ee:	6892      	ldr	r2, [r2, #8]
   1b8f0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1b8f4:	6822      	ldr	r2, [r4, #0]
   1b8f6:	68d2      	ldr	r2, [r2, #12]
   1b8f8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1b8fc:	bd10      	pop	{r4, pc}
   1b8fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1b900:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1b902:	4c17      	ldr	r4, [pc, #92]	; (1b960 <LoadAesKey+0x9c>)
   1b904:	f000 fbac 	bl	1c060 <kmu_validate_kdr_slot_and_size>
   1b908:	2800      	cmp	r0, #0
   1b90a:	d1e6      	bne.n	1b8da <LoadAesKey+0x16>
   1b90c:	6822      	ldr	r2, [r4, #0]
   1b90e:	4b15      	ldr	r3, [pc, #84]	; (1b964 <LoadAesKey+0xa0>)
   1b910:	6812      	ldr	r2, [r2, #0]
   1b912:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1b916:	6822      	ldr	r2, [r4, #0]
   1b918:	6852      	ldr	r2, [r2, #4]
   1b91a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1b91e:	6822      	ldr	r2, [r4, #0]
   1b920:	6892      	ldr	r2, [r2, #8]
   1b922:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1b926:	6822      	ldr	r2, [r4, #0]
   1b928:	68d2      	ldr	r2, [r2, #12]
   1b92a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1b92e:	f000 fba3 	bl	1c078 <kmu_use_kdr_key>
   1b932:	2800      	cmp	r0, #0
   1b934:	d1d1      	bne.n	1b8da <LoadAesKey+0x16>
   1b936:	bd10      	pop	{r4, pc}
   1b938:	4a0a      	ldr	r2, [pc, #40]	; (1b964 <LoadAesKey+0xa0>)
   1b93a:	6901      	ldr	r1, [r0, #16]
   1b93c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   1b940:	6941      	ldr	r1, [r0, #20]
   1b942:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   1b946:	6981      	ldr	r1, [r0, #24]
   1b948:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   1b94c:	69c1      	ldr	r1, [r0, #28]
   1b94e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   1b952:	4618      	mov	r0, r3
   1b954:	4770      	bx	lr
   1b956:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1b95a:	4770      	bx	lr
   1b95c:	00f10009 	.word	0x00f10009
   1b960:	200004f0 	.word	0x200004f0
   1b964:	5002b000 	.word	0x5002b000

0001b968 <InitAes.part.0>:
   1b968:	4a37      	ldr	r2, [pc, #220]	; (1ba48 <InitAes.part.0+0xe0>)
   1b96a:	b538      	push	{r3, r4, r5, lr}
   1b96c:	4604      	mov	r4, r0
   1b96e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1b972:	2b00      	cmp	r3, #0
   1b974:	d1fb      	bne.n	1b96e <InitAes.part.0+0x6>
   1b976:	4a34      	ldr	r2, [pc, #208]	; (1ba48 <InitAes.part.0+0xe0>)
   1b978:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1b97c:	2b00      	cmp	r3, #0
   1b97e:	d1fb      	bne.n	1b978 <InitAes.part.0+0x10>
   1b980:	4a31      	ldr	r2, [pc, #196]	; (1ba48 <InitAes.part.0+0xe0>)
   1b982:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   1b986:	2b00      	cmp	r3, #0
   1b988:	d1fb      	bne.n	1b982 <InitAes.part.0+0x1a>
   1b98a:	4a2f      	ldr	r2, [pc, #188]	; (1ba48 <InitAes.part.0+0xe0>)
   1b98c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1b990:	2b00      	cmp	r3, #0
   1b992:	d1fb      	bne.n	1b98c <InitAes.part.0+0x24>
   1b994:	4a2c      	ldr	r2, [pc, #176]	; (1ba48 <InitAes.part.0+0xe0>)
   1b996:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1b99a:	2b00      	cmp	r3, #0
   1b99c:	d1fb      	bne.n	1b996 <InitAes.part.0+0x2e>
   1b99e:	4d2a      	ldr	r5, [pc, #168]	; (1ba48 <InitAes.part.0+0xe0>)
   1b9a0:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	d1fb      	bne.n	1b9a0 <InitAes.part.0+0x38>
   1b9a8:	f04f 30ff 	mov.w	r0, #4294967295
   1b9ac:	f7fe fe92 	bl	1a6d4 <CC_HalClearInterruptBit>
   1b9b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b9b2:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1b9b6:	f023 0304 	bic.w	r3, r3, #4
   1b9ba:	2b03      	cmp	r3, #3
   1b9bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1b9be:	d039      	beq.n	1ba34 <InitAes.part.0+0xcc>
   1b9c0:	2b01      	cmp	r3, #1
   1b9c2:	bf0c      	ite	eq
   1b9c4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1b9c8:	f020 0020 	bicne.w	r0, r0, #32
   1b9cc:	f7fe fe90 	bl	1a6f0 <CC_HalMaskInterrupt>
   1b9d0:	4a1d      	ldr	r2, [pc, #116]	; (1ba48 <InitAes.part.0+0xe0>)
   1b9d2:	2301      	movs	r3, #1
   1b9d4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   1b9d8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1b9dc:	2b00      	cmp	r3, #0
   1b9de:	d1fb      	bne.n	1b9d8 <InitAes.part.0+0x70>
   1b9e0:	4a19      	ldr	r2, [pc, #100]	; (1ba48 <InitAes.part.0+0xe0>)
   1b9e2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1b9e6:	2b00      	cmp	r3, #0
   1b9e8:	d1fb      	bne.n	1b9e2 <InitAes.part.0+0x7a>
   1b9ea:	4917      	ldr	r1, [pc, #92]	; (1ba48 <InitAes.part.0+0xe0>)
   1b9ec:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   1b9f0:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   1b9f4:	2b00      	cmp	r3, #0
   1b9f6:	d1fb      	bne.n	1b9f0 <InitAes.part.0+0x88>
   1b9f8:	4a13      	ldr	r2, [pc, #76]	; (1ba48 <InitAes.part.0+0xe0>)
   1b9fa:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1b9fe:	2b00      	cmp	r3, #0
   1ba00:	d1fb      	bne.n	1b9fa <InitAes.part.0+0x92>
   1ba02:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1ba04:	f022 0104 	bic.w	r1, r2, #4
   1ba08:	2903      	cmp	r1, #3
   1ba0a:	bf18      	it	ne
   1ba0c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1ba0e:	490e      	ldr	r1, [pc, #56]	; (1ba48 <InitAes.part.0+0xe0>)
   1ba10:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1ba14:	bf18      	it	ne
   1ba16:	f003 0301 	andne.w	r3, r3, #1
   1ba1a:	f002 021c 	and.w	r2, r2, #28
   1ba1e:	4313      	orrs	r3, r2
   1ba20:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   1ba24:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ba26:	2b07      	cmp	r3, #7
   1ba28:	bf04      	itt	eq
   1ba2a:	2301      	moveq	r3, #1
   1ba2c:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   1ba30:	2000      	movs	r0, #0
   1ba32:	bd38      	pop	{r3, r4, r5, pc}
   1ba34:	2b01      	cmp	r3, #1
   1ba36:	bf0c      	ite	eq
   1ba38:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1ba3c:	f020 0010 	bicne.w	r0, r0, #16
   1ba40:	f7fe fe56 	bl	1a6f0 <CC_HalMaskInterrupt>
   1ba44:	e7c4      	b.n	1b9d0 <InitAes.part.0+0x68>
   1ba46:	bf00      	nop
   1ba48:	5002b000 	.word	0x5002b000

0001ba4c <write_invalid_key>:
   1ba4c:	4a09      	ldr	r2, [pc, #36]	; (1ba74 <write_invalid_key+0x28>)
   1ba4e:	4b0a      	ldr	r3, [pc, #40]	; (1ba78 <write_invalid_key+0x2c>)
   1ba50:	6811      	ldr	r1, [r2, #0]
   1ba52:	6809      	ldr	r1, [r1, #0]
   1ba54:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   1ba58:	6811      	ldr	r1, [r2, #0]
   1ba5a:	6849      	ldr	r1, [r1, #4]
   1ba5c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   1ba60:	6811      	ldr	r1, [r2, #0]
   1ba62:	6889      	ldr	r1, [r1, #8]
   1ba64:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   1ba68:	6812      	ldr	r2, [r2, #0]
   1ba6a:	68d2      	ldr	r2, [r2, #12]
   1ba6c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1ba70:	4770      	bx	lr
   1ba72:	bf00      	nop
   1ba74:	200004f0 	.word	0x200004f0
   1ba78:	5002b000 	.word	0x5002b000

0001ba7c <ProcessAesDrv>:
   1ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba80:	b085      	sub	sp, #20
   1ba82:	2900      	cmp	r1, #0
   1ba84:	f000 80a3 	beq.w	1bbce <ProcessAesDrv+0x152>
   1ba88:	4690      	mov	r8, r2
   1ba8a:	2a00      	cmp	r2, #0
   1ba8c:	f000 809f 	beq.w	1bbce <ProcessAesDrv+0x152>
   1ba90:	4605      	mov	r5, r0
   1ba92:	2800      	cmp	r0, #0
   1ba94:	f000 813c 	beq.w	1bd10 <ProcessAesDrv+0x294>
   1ba98:	4699      	mov	r9, r3
   1ba9a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1ba9c:	460e      	mov	r6, r1
   1ba9e:	2b00      	cmp	r3, #0
   1baa0:	d151      	bne.n	1bb46 <ProcessAesDrv+0xca>
   1baa2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1baa6:	d253      	bcs.n	1bb50 <ProcessAesDrv+0xd4>
   1baa8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1baac:	2b04      	cmp	r3, #4
   1baae:	f000 8112 	beq.w	1bcd6 <ProcessAesDrv+0x25a>
   1bab2:	2700      	movs	r7, #0
   1bab4:	48a6      	ldr	r0, [pc, #664]	; (1bd50 <ProcessAesDrv+0x2d4>)
   1bab6:	f04f 31ff 	mov.w	r1, #4294967295
   1baba:	f7fe feb5 	bl	1a828 <CC_PalMutexLock>
   1babe:	2800      	cmp	r0, #0
   1bac0:	f040 80e8 	bne.w	1bc94 <ProcessAesDrv+0x218>
   1bac4:	2000      	movs	r0, #0
   1bac6:	f7fe fedf 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1baca:	2800      	cmp	r0, #0
   1bacc:	f040 80eb 	bne.w	1bca6 <ProcessAesDrv+0x22a>
   1bad0:	48a0      	ldr	r0, [pc, #640]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bad2:	2301      	movs	r3, #1
   1bad4:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   1bad8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   1badc:	2c00      	cmp	r4, #0
   1bade:	d1fb      	bne.n	1bad8 <ProcessAesDrv+0x5c>
   1bae0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bae2:	2b03      	cmp	r3, #3
   1bae4:	dc39      	bgt.n	1bb5a <ProcessAesDrv+0xde>
   1bae6:	2b00      	cmp	r3, #0
   1bae8:	da3a      	bge.n	1bb60 <ProcessAesDrv+0xe4>
   1baea:	4c9b      	ldr	r4, [pc, #620]	; (1bd58 <ProcessAesDrv+0x2dc>)
   1baec:	4a99      	ldr	r2, [pc, #612]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1baee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d1fb      	bne.n	1baee <ProcessAesDrv+0x72>
   1baf6:	2f00      	cmp	r7, #0
   1baf8:	f040 80e4 	bne.w	1bcc4 <ProcessAesDrv+0x248>
   1bafc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bafe:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1bb00:	f023 0304 	bic.w	r3, r3, #4
   1bb04:	2b03      	cmp	r3, #3
   1bb06:	4b93      	ldr	r3, [pc, #588]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bb08:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1bb0c:	d056      	beq.n	1bbbc <ProcessAesDrv+0x140>
   1bb0e:	2a01      	cmp	r2, #1
   1bb10:	bf0c      	ite	eq
   1bb12:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1bb16:	f040 0020 	orrne.w	r0, r0, #32
   1bb1a:	f7fe fde9 	bl	1a6f0 <CC_HalMaskInterrupt>
   1bb1e:	4b8d      	ldr	r3, [pc, #564]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bb20:	2200      	movs	r2, #0
   1bb22:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1bb26:	2001      	movs	r0, #1
   1bb28:	f7fe feae 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1bb2c:	2800      	cmp	r0, #0
   1bb2e:	f040 80c5 	bne.w	1bcbc <ProcessAesDrv+0x240>
   1bb32:	4887      	ldr	r0, [pc, #540]	; (1bd50 <ProcessAesDrv+0x2d4>)
   1bb34:	f7fe fe80 	bl	1a838 <CC_PalMutexUnlock>
   1bb38:	2800      	cmp	r0, #0
   1bb3a:	f040 80b8 	bne.w	1bcae <ProcessAesDrv+0x232>
   1bb3e:	4620      	mov	r0, r4
   1bb40:	b005      	add	sp, #20
   1bb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb46:	2b01      	cmp	r3, #1
   1bb48:	d1ae      	bne.n	1baa8 <ProcessAesDrv+0x2c>
   1bb4a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   1bb4e:	d3ab      	bcc.n	1baa8 <ProcessAesDrv+0x2c>
   1bb50:	4c82      	ldr	r4, [pc, #520]	; (1bd5c <ProcessAesDrv+0x2e0>)
   1bb52:	4620      	mov	r0, r4
   1bb54:	b005      	add	sp, #20
   1bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb5a:	3b06      	subs	r3, #6
   1bb5c:	2b01      	cmp	r3, #1
   1bb5e:	d8c4      	bhi.n	1baea <ProcessAesDrv+0x6e>
   1bb60:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bb62:	2b01      	cmp	r3, #1
   1bb64:	f200 80d2 	bhi.w	1bd0c <ProcessAesDrv+0x290>
   1bb68:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1bb6a:	2b01      	cmp	r3, #1
   1bb6c:	d834      	bhi.n	1bbd8 <ProcessAesDrv+0x15c>
   1bb6e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1bb70:	2b01      	cmp	r3, #1
   1bb72:	f200 8122 	bhi.w	1bdba <ProcessAesDrv+0x33e>
   1bb76:	4628      	mov	r0, r5
   1bb78:	f7ff fef6 	bl	1b968 <InitAes.part.0>
   1bb7c:	4604      	mov	r4, r0
   1bb7e:	2800      	cmp	r0, #0
   1bb80:	d1b4      	bne.n	1baec <ProcessAesDrv+0x70>
   1bb82:	4628      	mov	r0, r5
   1bb84:	f7ff fe9e 	bl	1b8c4 <LoadAesKey>
   1bb88:	4604      	mov	r4, r0
   1bb8a:	2800      	cmp	r0, #0
   1bb8c:	d1ae      	bne.n	1baec <ProcessAesDrv+0x70>
   1bb8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bb90:	2b07      	cmp	r3, #7
   1bb92:	d8aa      	bhi.n	1baea <ProcessAesDrv+0x6e>
   1bb94:	a201      	add	r2, pc, #4	; (adr r2, 1bb9c <ProcessAesDrv+0x120>)
   1bb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bb9a:	bf00      	nop
   1bb9c:	0001bbf9 	.word	0x0001bbf9
   1bba0:	0001bbdd 	.word	0x0001bbdd
   1bba4:	0001bd81 	.word	0x0001bd81
   1bba8:	0001bbdd 	.word	0x0001bbdd
   1bbac:	0001baeb 	.word	0x0001baeb
   1bbb0:	0001baeb 	.word	0x0001baeb
   1bbb4:	0001bd81 	.word	0x0001bd81
   1bbb8:	0001bbdd 	.word	0x0001bbdd
   1bbbc:	2a01      	cmp	r2, #1
   1bbbe:	bf0c      	ite	eq
   1bbc0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1bbc4:	f040 0010 	orrne.w	r0, r0, #16
   1bbc8:	f7fe fd92 	bl	1a6f0 <CC_HalMaskInterrupt>
   1bbcc:	e7a7      	b.n	1bb1e <ProcessAesDrv+0xa2>
   1bbce:	4c64      	ldr	r4, [pc, #400]	; (1bd60 <ProcessAesDrv+0x2e4>)
   1bbd0:	4620      	mov	r0, r4
   1bbd2:	b005      	add	sp, #20
   1bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbd8:	4c62      	ldr	r4, [pc, #392]	; (1bd64 <ProcessAesDrv+0x2e8>)
   1bbda:	e787      	b.n	1baec <ProcessAesDrv+0x70>
   1bbdc:	4b5d      	ldr	r3, [pc, #372]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bbde:	682a      	ldr	r2, [r5, #0]
   1bbe0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1bbe4:	686a      	ldr	r2, [r5, #4]
   1bbe6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1bbea:	68aa      	ldr	r2, [r5, #8]
   1bbec:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1bbf0:	68ea      	ldr	r2, [r5, #12]
   1bbf2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1bbf6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bbf8:	6832      	ldr	r2, [r6, #0]
   1bbfa:	f023 0304 	bic.w	r3, r3, #4
   1bbfe:	2b03      	cmp	r3, #3
   1bc00:	d00d      	beq.n	1bc1e <ProcessAesDrv+0x1a2>
   1bc02:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1bc04:	f8d8 1000 	ldr.w	r1, [r8]
   1bc08:	2b01      	cmp	r3, #1
   1bc0a:	4b52      	ldr	r3, [pc, #328]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bc0c:	bf0b      	itete	eq
   1bc0e:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   1bc12:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   1bc16:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   1bc1a:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   1bc1e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1bc20:	2b01      	cmp	r3, #1
   1bc22:	4b4c      	ldr	r3, [pc, #304]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bc24:	bf0b      	itete	eq
   1bc26:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   1bc2a:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   1bc2e:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   1bc32:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   1bc36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bc38:	f023 0304 	bic.w	r3, r3, #4
   1bc3c:	2b03      	cmp	r3, #3
   1bc3e:	d06a      	beq.n	1bd16 <ProcessAesDrv+0x29a>
   1bc40:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1bc42:	2b01      	cmp	r3, #1
   1bc44:	bf0c      	ite	eq
   1bc46:	2080      	moveq	r0, #128	; 0x80
   1bc48:	2020      	movne	r0, #32
   1bc4a:	f7fe fd57 	bl	1a6fc <CC_HalWaitInterrupt>
   1bc4e:	4604      	mov	r4, r0
   1bc50:	2800      	cmp	r0, #0
   1bc52:	f47f af4b 	bne.w	1baec <ProcessAesDrv+0x70>
   1bc56:	4b3f      	ldr	r3, [pc, #252]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bc58:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   1bc5c:	2c00      	cmp	r4, #0
   1bc5e:	d1fb      	bne.n	1bc58 <ProcessAesDrv+0x1dc>
   1bc60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bc62:	3b01      	subs	r3, #1
   1bc64:	2b06      	cmp	r3, #6
   1bc66:	d812      	bhi.n	1bc8e <ProcessAesDrv+0x212>
   1bc68:	e8df f003 	tbb	[pc, r3]
   1bc6c:	11049904 	.word	0x11049904
   1bc70:	9911      	.short	0x9911
   1bc72:	04          	.byte	0x04
   1bc73:	00          	.byte	0x00
   1bc74:	4b37      	ldr	r3, [pc, #220]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bc76:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1bc7a:	602a      	str	r2, [r5, #0]
   1bc7c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1bc80:	606a      	str	r2, [r5, #4]
   1bc82:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1bc86:	60aa      	str	r2, [r5, #8]
   1bc88:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1bc8c:	60eb      	str	r3, [r5, #12]
   1bc8e:	2301      	movs	r3, #1
   1bc90:	65ab      	str	r3, [r5, #88]	; 0x58
   1bc92:	e72b      	b.n	1baec <ProcessAesDrv+0x70>
   1bc94:	4834      	ldr	r0, [pc, #208]	; (1bd68 <ProcessAesDrv+0x2ec>)
   1bc96:	f7fd fe4b 	bl	19930 <CC_PalAbort>
   1bc9a:	2000      	movs	r0, #0
   1bc9c:	f7fe fdf4 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1bca0:	2800      	cmp	r0, #0
   1bca2:	f43f af15 	beq.w	1bad0 <ProcessAesDrv+0x54>
   1bca6:	4831      	ldr	r0, [pc, #196]	; (1bd6c <ProcessAesDrv+0x2f0>)
   1bca8:	f7fd fe42 	bl	19930 <CC_PalAbort>
   1bcac:	e710      	b.n	1bad0 <ProcessAesDrv+0x54>
   1bcae:	4830      	ldr	r0, [pc, #192]	; (1bd70 <ProcessAesDrv+0x2f4>)
   1bcb0:	f7fd fe3e 	bl	19930 <CC_PalAbort>
   1bcb4:	4620      	mov	r0, r4
   1bcb6:	b005      	add	sp, #20
   1bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcbc:	482d      	ldr	r0, [pc, #180]	; (1bd74 <ProcessAesDrv+0x2f8>)
   1bcbe:	f7fd fe37 	bl	19930 <CC_PalAbort>
   1bcc2:	e736      	b.n	1bb32 <ProcessAesDrv+0xb6>
   1bcc4:	2304      	movs	r3, #4
   1bcc6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1bcca:	2120      	movs	r1, #32
   1bccc:	f105 0010 	add.w	r0, r5, #16
   1bcd0:	f7fe fd92 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1bcd4:	e712      	b.n	1bafc <ProcessAesDrv+0x80>
   1bcd6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1bcd8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1bcda:	f000 f9b5 	bl	1c048 <kmu_validate_slot_and_size>
   1bcde:	b998      	cbnz	r0, 1bd08 <ProcessAesDrv+0x28c>
   1bce0:	4f25      	ldr	r7, [pc, #148]	; (1bd78 <ProcessAesDrv+0x2fc>)
   1bce2:	4c1c      	ldr	r4, [pc, #112]	; (1bd54 <ProcessAesDrv+0x2d8>)
   1bce4:	683b      	ldr	r3, [r7, #0]
   1bce6:	681b      	ldr	r3, [r3, #0]
   1bce8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1bcec:	683b      	ldr	r3, [r7, #0]
   1bcee:	685b      	ldr	r3, [r3, #4]
   1bcf0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1bcf4:	683b      	ldr	r3, [r7, #0]
   1bcf6:	689b      	ldr	r3, [r3, #8]
   1bcf8:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1bcfc:	683b      	ldr	r3, [r7, #0]
   1bcfe:	68db      	ldr	r3, [r3, #12]
   1bd00:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1bd04:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1bd06:	b161      	cbz	r1, 1bd22 <ProcessAesDrv+0x2a6>
   1bd08:	2701      	movs	r7, #1
   1bd0a:	e6d3      	b.n	1bab4 <ProcessAesDrv+0x38>
   1bd0c:	4c1b      	ldr	r4, [pc, #108]	; (1bd7c <ProcessAesDrv+0x300>)
   1bd0e:	e6ed      	b.n	1baec <ProcessAesDrv+0x70>
   1bd10:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1bd14:	e713      	b.n	1bb3e <ProcessAesDrv+0xc2>
   1bd16:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1bd18:	2b01      	cmp	r3, #1
   1bd1a:	bf0c      	ite	eq
   1bd1c:	2040      	moveq	r0, #64	; 0x40
   1bd1e:	2010      	movne	r0, #16
   1bd20:	e793      	b.n	1bc4a <ProcessAesDrv+0x1ce>
   1bd22:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1bd24:	9301      	str	r3, [sp, #4]
   1bd26:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1bd28:	9300      	str	r3, [sp, #0]
   1bd2a:	f105 0a10 	add.w	sl, r5, #16
   1bd2e:	f04f 0b10 	mov.w	fp, #16
   1bd32:	f8cd a008 	str.w	sl, [sp, #8]
   1bd36:	f8cd b00c 	str.w	fp, [sp, #12]
   1bd3a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   1bd3e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1bd40:	f000 f9a4 	bl	1c08c <kmu_derive_cmac>
   1bd44:	2800      	cmp	r0, #0
   1bd46:	d13a      	bne.n	1bdbe <ProcessAesDrv+0x342>
   1bd48:	2300      	movs	r3, #0
   1bd4a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1bd4e:	e7db      	b.n	1bd08 <ProcessAesDrv+0x28c>
   1bd50:	20000500 	.word	0x20000500
   1bd54:	5002b000 	.word	0x5002b000
   1bd58:	00f10001 	.word	0x00f10001
   1bd5c:	00f10005 	.word	0x00f10005
   1bd60:	00f1000b 	.word	0x00f1000b
   1bd64:	00f10003 	.word	0x00f10003
   1bd68:	0001ee20 	.word	0x0001ee20
   1bd6c:	0001ee38 	.word	0x0001ee38
   1bd70:	0001ee78 	.word	0x0001ee78
   1bd74:	0001ee58 	.word	0x0001ee58
   1bd78:	200004f0 	.word	0x200004f0
   1bd7c:	00f10002 	.word	0x00f10002
   1bd80:	4b19      	ldr	r3, [pc, #100]	; (1bde8 <ProcessAesDrv+0x36c>)
   1bd82:	682a      	ldr	r2, [r5, #0]
   1bd84:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1bd88:	686a      	ldr	r2, [r5, #4]
   1bd8a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1bd8e:	68aa      	ldr	r2, [r5, #8]
   1bd90:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1bd94:	68ea      	ldr	r2, [r5, #12]
   1bd96:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1bd9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bd9c:	e72c      	b.n	1bbf8 <ProcessAesDrv+0x17c>
   1bd9e:	4b12      	ldr	r3, [pc, #72]	; (1bde8 <ProcessAesDrv+0x36c>)
   1bda0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1bda4:	602a      	str	r2, [r5, #0]
   1bda6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1bdaa:	606a      	str	r2, [r5, #4]
   1bdac:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1bdb0:	60aa      	str	r2, [r5, #8]
   1bdb2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1bdb6:	60eb      	str	r3, [r5, #12]
   1bdb8:	e769      	b.n	1bc8e <ProcessAesDrv+0x212>
   1bdba:	4c0c      	ldr	r4, [pc, #48]	; (1bdec <ProcessAesDrv+0x370>)
   1bdbc:	e696      	b.n	1baec <ProcessAesDrv+0x70>
   1bdbe:	683b      	ldr	r3, [r7, #0]
   1bdc0:	681b      	ldr	r3, [r3, #0]
   1bdc2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1bdc6:	683b      	ldr	r3, [r7, #0]
   1bdc8:	685b      	ldr	r3, [r3, #4]
   1bdca:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1bdce:	683b      	ldr	r3, [r7, #0]
   1bdd0:	689b      	ldr	r3, [r3, #8]
   1bdd2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1bdd6:	683b      	ldr	r3, [r7, #0]
   1bdd8:	68db      	ldr	r3, [r3, #12]
   1bdda:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1bdde:	4659      	mov	r1, fp
   1bde0:	4650      	mov	r0, sl
   1bde2:	f7fe fd09 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1bde6:	e7af      	b.n	1bd48 <ProcessAesDrv+0x2cc>
   1bde8:	5002b000 	.word	0x5002b000
   1bdec:	00f10004 	.word	0x00f10004

0001bdf0 <FinishAesDrv>:
   1bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdf4:	b301      	cbz	r1, 1be38 <FinishAesDrv+0x48>
   1bdf6:	b1fa      	cbz	r2, 1be38 <FinishAesDrv+0x48>
   1bdf8:	4604      	mov	r4, r0
   1bdfa:	2800      	cmp	r0, #0
   1bdfc:	d07c      	beq.n	1bef8 <FinishAesDrv+0x108>
   1bdfe:	461d      	mov	r5, r3
   1be00:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1be02:	2b07      	cmp	r3, #7
   1be04:	460e      	mov	r6, r1
   1be06:	d01b      	beq.n	1be40 <FinishAesDrv+0x50>
   1be08:	b95d      	cbnz	r5, 1be22 <FinishAesDrv+0x32>
   1be0a:	2b03      	cmp	r3, #3
   1be0c:	d110      	bne.n	1be30 <FinishAesDrv+0x40>
   1be0e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1be10:	b973      	cbnz	r3, 1be30 <FinishAesDrv+0x40>
   1be12:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1be16:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1be1a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1be1e:	600b      	str	r3, [r1, #0]
   1be20:	2510      	movs	r5, #16
   1be22:	462b      	mov	r3, r5
   1be24:	4631      	mov	r1, r6
   1be26:	4620      	mov	r0, r4
   1be28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1be2c:	f7ff be26 	b.w	1ba7c <ProcessAesDrv>
   1be30:	462f      	mov	r7, r5
   1be32:	4638      	mov	r0, r7
   1be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be38:	4f77      	ldr	r7, [pc, #476]	; (1c018 <FinishAesDrv+0x228>)
   1be3a:	4638      	mov	r0, r7
   1be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be40:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1be42:	2b00      	cmp	r3, #0
   1be44:	d15b      	bne.n	1befe <FinishAesDrv+0x10e>
   1be46:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1be4a:	d25d      	bcs.n	1bf08 <FinishAesDrv+0x118>
   1be4c:	b915      	cbnz	r5, 1be54 <FinishAesDrv+0x64>
   1be4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1be50:	2b00      	cmp	r3, #0
   1be52:	d159      	bne.n	1bf08 <FinishAesDrv+0x118>
   1be54:	4871      	ldr	r0, [pc, #452]	; (1c01c <FinishAesDrv+0x22c>)
   1be56:	f04f 31ff 	mov.w	r1, #4294967295
   1be5a:	f7fe fce5 	bl	1a828 <CC_PalMutexLock>
   1be5e:	2800      	cmp	r0, #0
   1be60:	f040 80b8 	bne.w	1bfd4 <FinishAesDrv+0x1e4>
   1be64:	2000      	movs	r0, #0
   1be66:	f7fe fd0f 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1be6a:	2800      	cmp	r0, #0
   1be6c:	f040 80ae 	bne.w	1bfcc <FinishAesDrv+0x1dc>
   1be70:	4a6b      	ldr	r2, [pc, #428]	; (1c020 <FinishAesDrv+0x230>)
   1be72:	2301      	movs	r3, #1
   1be74:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1be78:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1be7c:	2b00      	cmp	r3, #0
   1be7e:	d1fb      	bne.n	1be78 <FinishAesDrv+0x88>
   1be80:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1be82:	2b03      	cmp	r3, #3
   1be84:	dd20      	ble.n	1bec8 <FinishAesDrv+0xd8>
   1be86:	3b06      	subs	r3, #6
   1be88:	2b01      	cmp	r3, #1
   1be8a:	d81f      	bhi.n	1becc <FinishAesDrv+0xdc>
   1be8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1be8e:	2b01      	cmp	r3, #1
   1be90:	d83c      	bhi.n	1bf0c <FinishAesDrv+0x11c>
   1be92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1be94:	2b01      	cmp	r3, #1
   1be96:	f200 80a5 	bhi.w	1bfe4 <FinishAesDrv+0x1f4>
   1be9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1be9c:	2b01      	cmp	r3, #1
   1be9e:	f200 80a3 	bhi.w	1bfe8 <FinishAesDrv+0x1f8>
   1bea2:	4620      	mov	r0, r4
   1bea4:	f7ff fd60 	bl	1b968 <InitAes.part.0>
   1bea8:	4607      	mov	r7, r0
   1beaa:	b980      	cbnz	r0, 1bece <FinishAesDrv+0xde>
   1beac:	4620      	mov	r0, r4
   1beae:	f7ff fd09 	bl	1b8c4 <LoadAesKey>
   1beb2:	4607      	mov	r7, r0
   1beb4:	b958      	cbnz	r0, 1bece <FinishAesDrv+0xde>
   1beb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1beb8:	2b07      	cmp	r3, #7
   1beba:	d807      	bhi.n	1becc <FinishAesDrv+0xdc>
   1bebc:	e8df f003 	tbb	[pc, r3]
   1bec0:	285c2835 	.word	0x285c2835
   1bec4:	285c0606 	.word	0x285c0606
   1bec8:	2b00      	cmp	r3, #0
   1beca:	dadf      	bge.n	1be8c <FinishAesDrv+0x9c>
   1becc:	4f55      	ldr	r7, [pc, #340]	; (1c024 <FinishAesDrv+0x234>)
   1bece:	4a54      	ldr	r2, [pc, #336]	; (1c020 <FinishAesDrv+0x230>)
   1bed0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1bed4:	2b00      	cmp	r3, #0
   1bed6:	d1fb      	bne.n	1bed0 <FinishAesDrv+0xe0>
   1bed8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1bedc:	2001      	movs	r0, #1
   1bede:	f7fe fcd3 	bl	1a888 <CC_PalPowerSaveModeSelect>
   1bee2:	2800      	cmp	r0, #0
   1bee4:	d17a      	bne.n	1bfdc <FinishAesDrv+0x1ec>
   1bee6:	484d      	ldr	r0, [pc, #308]	; (1c01c <FinishAesDrv+0x22c>)
   1bee8:	f7fe fca6 	bl	1a838 <CC_PalMutexUnlock>
   1beec:	2800      	cmp	r0, #0
   1beee:	d0a0      	beq.n	1be32 <FinishAesDrv+0x42>
   1bef0:	484d      	ldr	r0, [pc, #308]	; (1c028 <FinishAesDrv+0x238>)
   1bef2:	f7fd fd1d 	bl	19930 <CC_PalAbort>
   1bef6:	e79c      	b.n	1be32 <FinishAesDrv+0x42>
   1bef8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1befc:	e799      	b.n	1be32 <FinishAesDrv+0x42>
   1befe:	2b01      	cmp	r3, #1
   1bf00:	d1a4      	bne.n	1be4c <FinishAesDrv+0x5c>
   1bf02:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1bf06:	d3a1      	bcc.n	1be4c <FinishAesDrv+0x5c>
   1bf08:	4f48      	ldr	r7, [pc, #288]	; (1c02c <FinishAesDrv+0x23c>)
   1bf0a:	e792      	b.n	1be32 <FinishAesDrv+0x42>
   1bf0c:	4f48      	ldr	r7, [pc, #288]	; (1c030 <FinishAesDrv+0x240>)
   1bf0e:	e7de      	b.n	1bece <FinishAesDrv+0xde>
   1bf10:	4b43      	ldr	r3, [pc, #268]	; (1c020 <FinishAesDrv+0x230>)
   1bf12:	6822      	ldr	r2, [r4, #0]
   1bf14:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1bf18:	6862      	ldr	r2, [r4, #4]
   1bf1a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1bf1e:	68a2      	ldr	r2, [r4, #8]
   1bf20:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1bf24:	68e2      	ldr	r2, [r4, #12]
   1bf26:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1bf2a:	4b3d      	ldr	r3, [pc, #244]	; (1c020 <FinishAesDrv+0x230>)
   1bf2c:	2201      	movs	r2, #1
   1bf2e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   1bf32:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   1bf36:	2d00      	cmp	r5, #0
   1bf38:	d158      	bne.n	1bfec <FinishAesDrv+0x1fc>
   1bf3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1bf3c:	b909      	cbnz	r1, 1bf42 <FinishAesDrv+0x152>
   1bf3e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   1bf42:	4b37      	ldr	r3, [pc, #220]	; (1c020 <FinishAesDrv+0x230>)
   1bf44:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   1bf48:	2f00      	cmp	r7, #0
   1bf4a:	d1fb      	bne.n	1bf44 <FinishAesDrv+0x154>
   1bf4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bf4e:	3b01      	subs	r3, #1
   1bf50:	2b06      	cmp	r3, #6
   1bf52:	d8bc      	bhi.n	1bece <FinishAesDrv+0xde>
   1bf54:	a201      	add	r2, pc, #4	; (adr r2, 1bf5c <FinishAesDrv+0x16c>)
   1bf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bf5a:	bf00      	nop
   1bf5c:	0001bf95 	.word	0x0001bf95
   1bf60:	0001bfb1 	.word	0x0001bfb1
   1bf64:	0001bf95 	.word	0x0001bf95
   1bf68:	0001becf 	.word	0x0001becf
   1bf6c:	0001becf 	.word	0x0001becf
   1bf70:	0001bfb1 	.word	0x0001bfb1
   1bf74:	0001bf95 	.word	0x0001bf95
   1bf78:	4b29      	ldr	r3, [pc, #164]	; (1c020 <FinishAesDrv+0x230>)
   1bf7a:	6822      	ldr	r2, [r4, #0]
   1bf7c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1bf80:	6862      	ldr	r2, [r4, #4]
   1bf82:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1bf86:	68a2      	ldr	r2, [r4, #8]
   1bf88:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1bf8c:	68e2      	ldr	r2, [r4, #12]
   1bf8e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1bf92:	e7ca      	b.n	1bf2a <FinishAesDrv+0x13a>
   1bf94:	4b22      	ldr	r3, [pc, #136]	; (1c020 <FinishAesDrv+0x230>)
   1bf96:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1bf9a:	6022      	str	r2, [r4, #0]
   1bf9c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1bfa0:	6062      	str	r2, [r4, #4]
   1bfa2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1bfa6:	60a2      	str	r2, [r4, #8]
   1bfa8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1bfac:	60e3      	str	r3, [r4, #12]
   1bfae:	e78e      	b.n	1bece <FinishAesDrv+0xde>
   1bfb0:	4b1b      	ldr	r3, [pc, #108]	; (1c020 <FinishAesDrv+0x230>)
   1bfb2:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1bfb6:	6022      	str	r2, [r4, #0]
   1bfb8:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1bfbc:	6062      	str	r2, [r4, #4]
   1bfbe:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1bfc2:	60a2      	str	r2, [r4, #8]
   1bfc4:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1bfc8:	60e3      	str	r3, [r4, #12]
   1bfca:	e780      	b.n	1bece <FinishAesDrv+0xde>
   1bfcc:	4819      	ldr	r0, [pc, #100]	; (1c034 <FinishAesDrv+0x244>)
   1bfce:	f7fd fcaf 	bl	19930 <CC_PalAbort>
   1bfd2:	e74d      	b.n	1be70 <FinishAesDrv+0x80>
   1bfd4:	4818      	ldr	r0, [pc, #96]	; (1c038 <FinishAesDrv+0x248>)
   1bfd6:	f7fd fcab 	bl	19930 <CC_PalAbort>
   1bfda:	e743      	b.n	1be64 <FinishAesDrv+0x74>
   1bfdc:	4817      	ldr	r0, [pc, #92]	; (1c03c <FinishAesDrv+0x24c>)
   1bfde:	f7fd fca7 	bl	19930 <CC_PalAbort>
   1bfe2:	e780      	b.n	1bee6 <FinishAesDrv+0xf6>
   1bfe4:	4f16      	ldr	r7, [pc, #88]	; (1c040 <FinishAesDrv+0x250>)
   1bfe6:	e772      	b.n	1bece <FinishAesDrv+0xde>
   1bfe8:	4f16      	ldr	r7, [pc, #88]	; (1c044 <FinishAesDrv+0x254>)
   1bfea:	e770      	b.n	1bece <FinishAesDrv+0xde>
   1bfec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   1bfee:	6832      	ldr	r2, [r6, #0]
   1bff0:	2901      	cmp	r1, #1
   1bff2:	d00a      	beq.n	1c00a <FinishAesDrv+0x21a>
   1bff4:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   1bff8:	2010      	movs	r0, #16
   1bffa:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1bffe:	f7fe fb7d 	bl	1a6fc <CC_HalWaitInterrupt>
   1c002:	4607      	mov	r7, r0
   1c004:	2800      	cmp	r0, #0
   1c006:	d09c      	beq.n	1bf42 <FinishAesDrv+0x152>
   1c008:	e761      	b.n	1bece <FinishAesDrv+0xde>
   1c00a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1c00e:	2040      	movs	r0, #64	; 0x40
   1c010:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   1c014:	e7f3      	b.n	1bffe <FinishAesDrv+0x20e>
   1c016:	bf00      	nop
   1c018:	00f1000b 	.word	0x00f1000b
   1c01c:	20000500 	.word	0x20000500
   1c020:	5002b000 	.word	0x5002b000
   1c024:	00f10001 	.word	0x00f10001
   1c028:	0001ee78 	.word	0x0001ee78
   1c02c:	00f10005 	.word	0x00f10005
   1c030:	00f10002 	.word	0x00f10002
   1c034:	0001ee38 	.word	0x0001ee38
   1c038:	0001ee20 	.word	0x0001ee20
   1c03c:	0001ee58 	.word	0x0001ee58
   1c040:	00f10003 	.word	0x00f10003
   1c044:	00f10004 	.word	0x00f10004

0001c048 <kmu_validate_slot_and_size>:
   1c048:	b921      	cbnz	r1, 1c054 <kmu_validate_slot_and_size+0xc>
   1c04a:	4b03      	ldr	r3, [pc, #12]	; (1c058 <kmu_validate_slot_and_size+0x10>)
   1c04c:	2800      	cmp	r0, #0
   1c04e:	bf18      	it	ne
   1c050:	4618      	movne	r0, r3
   1c052:	4770      	bx	lr
   1c054:	4801      	ldr	r0, [pc, #4]	; (1c05c <kmu_validate_slot_and_size+0x14>)
   1c056:	4770      	bx	lr
   1c058:	00f70001 	.word	0x00f70001
   1c05c:	00f70003 	.word	0x00f70003

0001c060 <kmu_validate_kdr_slot_and_size>:
   1c060:	b921      	cbnz	r1, 1c06c <kmu_validate_kdr_slot_and_size+0xc>
   1c062:	4b03      	ldr	r3, [pc, #12]	; (1c070 <kmu_validate_kdr_slot_and_size+0x10>)
   1c064:	2800      	cmp	r0, #0
   1c066:	bf18      	it	ne
   1c068:	4618      	movne	r0, r3
   1c06a:	4770      	bx	lr
   1c06c:	4801      	ldr	r0, [pc, #4]	; (1c074 <kmu_validate_kdr_slot_and_size+0x14>)
   1c06e:	4770      	bx	lr
   1c070:	00f70001 	.word	0x00f70001
   1c074:	00f70003 	.word	0x00f70003

0001c078 <kmu_use_kdr_key>:
   1c078:	4b03      	ldr	r3, [pc, #12]	; (1c088 <kmu_use_kdr_key+0x10>)
   1c07a:	2000      	movs	r0, #0
   1c07c:	2201      	movs	r2, #1
   1c07e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   1c082:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   1c086:	4770      	bx	lr
   1c088:	5002b000 	.word	0x5002b000

0001c08c <kmu_derive_cmac>:
   1c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c090:	b0cc      	sub	sp, #304	; 0x130
   1c092:	2400      	movs	r4, #0
   1c094:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1c096:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1c09a:	4682      	mov	sl, r0
   1c09c:	4689      	mov	r9, r1
   1c09e:	4616      	mov	r6, r2
   1c0a0:	4621      	mov	r1, r4
   1c0a2:	2274      	movs	r2, #116	; 0x74
   1c0a4:	a80e      	add	r0, sp, #56	; 0x38
   1c0a6:	461f      	mov	r7, r3
   1c0a8:	f000 ffab 	bl	1d002 <memset>
   1c0ac:	2280      	movs	r2, #128	; 0x80
   1c0ae:	4621      	mov	r1, r4
   1c0b0:	a82c      	add	r0, sp, #176	; 0xb0
   1c0b2:	942b      	str	r4, [sp, #172]	; 0xac
   1c0b4:	f000 ffa5 	bl	1d002 <memset>
   1c0b8:	2384      	movs	r3, #132	; 0x84
   1c0ba:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1c0be:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1c0c2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1c0c6:	9305      	str	r3, [sp, #20]
   1c0c8:	d863      	bhi.n	1c192 <kmu_derive_cmac+0x106>
   1c0ca:	f7ff fcbf 	bl	1ba4c <write_invalid_key>
   1c0ce:	ab05      	add	r3, sp, #20
   1c0d0:	4630      	mov	r0, r6
   1c0d2:	ae2b      	add	r6, sp, #172	; 0xac
   1c0d4:	9301      	str	r3, [sp, #4]
   1c0d6:	9502      	str	r5, [sp, #8]
   1c0d8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1c0dc:	4639      	mov	r1, r7
   1c0de:	9600      	str	r6, [sp, #0]
   1c0e0:	f000 f862 	bl	1c1a8 <UtilCmacBuildDataForDerivation>
   1c0e4:	2800      	cmp	r0, #0
   1c0e6:	d14f      	bne.n	1c188 <kmu_derive_cmac+0xfc>
   1c0e8:	2303      	movs	r3, #3
   1c0ea:	f88d 3013 	strb.w	r3, [sp, #19]
   1c0ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1c0f2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1c0f6:	2307      	movs	r3, #7
   1c0f8:	2200      	movs	r2, #0
   1c0fa:	901c      	str	r0, [sp, #112]	; 0x70
   1c0fc:	2110      	movs	r1, #16
   1c0fe:	a80e      	add	r0, sp, #56	; 0x38
   1c100:	931b      	str	r3, [sp, #108]	; 0x6c
   1c102:	2401      	movs	r4, #1
   1c104:	2301      	movs	r3, #1
   1c106:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1c10a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1c10e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   1c112:	9426      	str	r4, [sp, #152]	; 0x98
   1c114:	f10d 0920 	add.w	r9, sp, #32
   1c118:	f7fe fb6e 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1c11c:	2210      	movs	r2, #16
   1c11e:	9200      	str	r2, [sp, #0]
   1c120:	9905      	ldr	r1, [sp, #20]
   1c122:	f8cd 9004 	str.w	r9, [sp, #4]
   1c126:	ab0a      	add	r3, sp, #40	; 0x28
   1c128:	4630      	mov	r0, r6
   1c12a:	aa06      	add	r2, sp, #24
   1c12c:	f7ff fa1e 	bl	1b56c <SetDataBuffersInfo>
   1c130:	4607      	mov	r7, r0
   1c132:	b170      	cbz	r0, 1c152 <kmu_derive_cmac+0xc6>
   1c134:	e01d      	b.n	1c172 <kmu_derive_cmac+0xe6>
   1c136:	a90e      	add	r1, sp, #56	; 0x38
   1c138:	eb08 0007 	add.w	r0, r8, r7
   1c13c:	f7fe fb58 	bl	1a7f0 <CC_PalMemCopyPlat>
   1c140:	2110      	movs	r1, #16
   1c142:	a80e      	add	r0, sp, #56	; 0x38
   1c144:	f7fe fb58 	bl	1a7f8 <CC_PalMemSetZeroPlat>
   1c148:	3401      	adds	r4, #1
   1c14a:	1bad      	subs	r5, r5, r6
   1c14c:	4437      	add	r7, r6
   1c14e:	b2e4      	uxtb	r4, r4
   1c150:	d024      	beq.n	1c19c <kmu_derive_cmac+0x110>
   1c152:	2d10      	cmp	r5, #16
   1c154:	464a      	mov	r2, r9
   1c156:	9b05      	ldr	r3, [sp, #20]
   1c158:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1c15c:	a906      	add	r1, sp, #24
   1c15e:	a80e      	add	r0, sp, #56	; 0x38
   1c160:	462e      	mov	r6, r5
   1c162:	bf28      	it	cs
   1c164:	2610      	movcs	r6, #16
   1c166:	f7ff fe43 	bl	1bdf0 <FinishAesDrv>
   1c16a:	4632      	mov	r2, r6
   1c16c:	2800      	cmp	r0, #0
   1c16e:	d0e2      	beq.n	1c136 <kmu_derive_cmac+0xaa>
   1c170:	4607      	mov	r7, r0
   1c172:	a80e      	add	r0, sp, #56	; 0x38
   1c174:	2274      	movs	r2, #116	; 0x74
   1c176:	2100      	movs	r1, #0
   1c178:	f7fe fb3c 	bl	1a7f4 <CC_PalMemSetPlat>
   1c17c:	f7ff fc66 	bl	1ba4c <write_invalid_key>
   1c180:	4638      	mov	r0, r7
   1c182:	b04c      	add	sp, #304	; 0x130
   1c184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c188:	4f05      	ldr	r7, [pc, #20]	; (1c1a0 <kmu_derive_cmac+0x114>)
   1c18a:	4638      	mov	r0, r7
   1c18c:	b04c      	add	sp, #304	; 0x130
   1c18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c192:	4f04      	ldr	r7, [pc, #16]	; (1c1a4 <kmu_derive_cmac+0x118>)
   1c194:	4638      	mov	r0, r7
   1c196:	b04c      	add	sp, #304	; 0x130
   1c198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c19c:	462f      	mov	r7, r5
   1c19e:	e7e8      	b.n	1c172 <kmu_derive_cmac+0xe6>
   1c1a0:	00f1000e 	.word	0x00f1000e
   1c1a4:	00f1000f 	.word	0x00f1000f

0001c1a8 <UtilCmacBuildDataForDerivation>:
   1c1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1ac:	b082      	sub	sp, #8
   1c1ae:	461e      	mov	r6, r3
   1c1b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c1b2:	2300      	movs	r3, #0
   1c1b4:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   1c1b8:	9301      	str	r3, [sp, #4]
   1c1ba:	d83e      	bhi.n	1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1bc:	00e4      	lsls	r4, r4, #3
   1c1be:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1c1c2:	4617      	mov	r7, r2
   1c1c4:	f101 32ff 	add.w	r2, r1, #4294967295
   1c1c8:	bf34      	ite	cc
   1c1ca:	2303      	movcc	r3, #3
   1c1cc:	2304      	movcs	r3, #4
   1c1ce:	2a3f      	cmp	r2, #63	; 0x3f
   1c1d0:	460d      	mov	r5, r1
   1c1d2:	9300      	str	r3, [sp, #0]
   1c1d4:	d831      	bhi.n	1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1d6:	b380      	cbz	r0, 1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1d8:	b116      	cbz	r6, 1c1e0 <UtilCmacBuildDataForDerivation+0x38>
   1c1da:	b377      	cbz	r7, 1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1dc:	2e40      	cmp	r6, #64	; 0x40
   1c1de:	d82c      	bhi.n	1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1e0:	9a08      	ldr	r2, [sp, #32]
   1c1e2:	b352      	cbz	r2, 1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c1e6:	6811      	ldr	r1, [r2, #0]
   1c1e8:	b339      	cbz	r1, 1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1ea:	19aa      	adds	r2, r5, r6
   1c1ec:	4413      	add	r3, r2
   1c1ee:	4299      	cmp	r1, r3
   1c1f0:	d323      	bcc.n	1c23a <UtilCmacBuildDataForDerivation+0x92>
   1c1f2:	9b08      	ldr	r3, [sp, #32]
   1c1f4:	4601      	mov	r1, r0
   1c1f6:	462a      	mov	r2, r5
   1c1f8:	1c58      	adds	r0, r3, #1
   1c1fa:	f7fe faf9 	bl	1a7f0 <CC_PalMemCopyPlat>
   1c1fe:	9b08      	ldr	r3, [sp, #32]
   1c200:	f105 0802 	add.w	r8, r5, #2
   1c204:	441d      	add	r5, r3
   1c206:	2300      	movs	r3, #0
   1c208:	706b      	strb	r3, [r5, #1]
   1c20a:	bb0e      	cbnz	r6, 1c250 <UtilCmacBuildDataForDerivation+0xa8>
   1c20c:	9b08      	ldr	r3, [sp, #32]
   1c20e:	9400      	str	r4, [sp, #0]
   1c210:	2cff      	cmp	r4, #255	; 0xff
   1c212:	eb03 0008 	add.w	r0, r3, r8
   1c216:	d914      	bls.n	1c242 <UtilCmacBuildDataForDerivation+0x9a>
   1c218:	0223      	lsls	r3, r4, #8
   1c21a:	b29b      	uxth	r3, r3
   1c21c:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   1c220:	2202      	movs	r2, #2
   1c222:	a901      	add	r1, sp, #4
   1c224:	9401      	str	r4, [sp, #4]
   1c226:	f7fe fae3 	bl	1a7f0 <CC_PalMemCopyPlat>
   1c22a:	f108 0302 	add.w	r3, r8, #2
   1c22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c230:	2000      	movs	r0, #0
   1c232:	6013      	str	r3, [r2, #0]
   1c234:	b002      	add	sp, #8
   1c236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c23a:	480a      	ldr	r0, [pc, #40]	; (1c264 <UtilCmacBuildDataForDerivation+0xbc>)
   1c23c:	b002      	add	sp, #8
   1c23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c242:	2201      	movs	r2, #1
   1c244:	4669      	mov	r1, sp
   1c246:	f7fe fad3 	bl	1a7f0 <CC_PalMemCopyPlat>
   1c24a:	f108 0301 	add.w	r3, r8, #1
   1c24e:	e7ee      	b.n	1c22e <UtilCmacBuildDataForDerivation+0x86>
   1c250:	9b08      	ldr	r3, [sp, #32]
   1c252:	4632      	mov	r2, r6
   1c254:	eb03 0008 	add.w	r0, r3, r8
   1c258:	4639      	mov	r1, r7
   1c25a:	f7fe fac9 	bl	1a7f0 <CC_PalMemCopyPlat>
   1c25e:	44b0      	add	r8, r6
   1c260:	e7d4      	b.n	1c20c <UtilCmacBuildDataForDerivation+0x64>
   1c262:	bf00      	nop
   1c264:	80000006 	.word	0x80000006

0001c268 <CC_PalDataBufferAttrGet>:
   1c268:	2000      	movs	r0, #0
   1c26a:	7018      	strb	r0, [r3, #0]
   1c26c:	4770      	bx	lr
   1c26e:	bf00      	nop

0001c270 <cbpprintf_external>:
{
   1c270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c274:	4606      	mov	r6, r0
   1c276:	460d      	mov	r5, r1
   1c278:	4617      	mov	r7, r2
	if (buf == NULL) {
   1c27a:	4698      	mov	r8, r3
   1c27c:	b32b      	cbz	r3, 1c2ca <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   1c27e:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1c282:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c286:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1c288:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c28a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1c28e:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c292:	441c      	add	r4, r3
   1c294:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1c296:	f04f 0a00 	mov.w	sl, #0
   1c29a:	45ca      	cmp	sl, r9
   1c29c:	d309      	bcc.n	1c2b2 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1c29e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c2a2:	f108 0308 	add.w	r3, r8, #8
   1c2a6:	4639      	mov	r1, r7
   1c2a8:	4630      	mov	r0, r6
   1c2aa:	46ac      	mov	ip, r5
}
   1c2ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1c2b0:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1c2b2:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   1c2b6:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1c2ba:	4620      	mov	r0, r4
   1c2bc:	f000 fe4b 	bl	1cf56 <strlen>
   1c2c0:	3001      	adds	r0, #1
   1c2c2:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1c2c4:	f10a 0a01 	add.w	sl, sl, #1
   1c2c8:	e7e7      	b.n	1c29a <cbpprintf_external+0x2a>
}
   1c2ca:	f06f 0015 	mvn.w	r0, #21
   1c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c2d2 <is_ptr>:
{
   1c2d2:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1c2d4:	2500      	movs	r5, #0
{
   1c2d6:	4602      	mov	r2, r0
	bool mod = false;
   1c2d8:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1c2da:	4614      	mov	r4, r2
   1c2dc:	f814 3b01 	ldrb.w	r3, [r4], #1
   1c2e0:	b90b      	cbnz	r3, 1c2e6 <is_ptr+0x14>
					return false;
   1c2e2:	4618      	mov	r0, r3
   1c2e4:	e009      	b.n	1c2fa <is_ptr+0x28>
		if (mod) {
   1c2e6:	b198      	cbz	r0, 1c310 <is_ptr+0x3e>
			if (cnt == n) {
   1c2e8:	428d      	cmp	r5, r1
   1c2ea:	d107      	bne.n	1c2fc <is_ptr+0x2a>
				if (c == 'p') {
   1c2ec:	2b70      	cmp	r3, #112	; 0x70
   1c2ee:	d004      	beq.n	1c2fa <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   1c2f0:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1c2f4:	2a3a      	cmp	r2, #58	; 0x3a
   1c2f6:	d80b      	bhi.n	1c310 <is_ptr+0x3e>
					return false;
   1c2f8:	2000      	movs	r0, #0
}
   1c2fa:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1c2fc:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   1c300:	2e3a      	cmp	r6, #58	; 0x3a
   1c302:	d805      	bhi.n	1c310 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1c304:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1c306:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1c308:	1c94      	adds	r4, r2, #2
   1c30a:	2b00      	cmp	r3, #0
   1c30c:	d0e9      	beq.n	1c2e2 <is_ptr+0x10>
   1c30e:	2000      	movs	r0, #0
		if (c == '%') {
   1c310:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   1c312:	bf08      	it	eq
   1c314:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   1c318:	4622      	mov	r2, r4
   1c31a:	e7de      	b.n	1c2da <is_ptr+0x8>

0001c31c <arch_printk_char_out>:
}
   1c31c:	2000      	movs	r0, #0
   1c31e:	4770      	bx	lr

0001c320 <str_out>:
{
   1c320:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c322:	688a      	ldr	r2, [r1, #8]
   1c324:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1c326:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c328:	b114      	cbz	r4, 1c330 <str_out+0x10>
   1c32a:	684b      	ldr	r3, [r1, #4]
   1c32c:	4293      	cmp	r3, r2
   1c32e:	dc01      	bgt.n	1c334 <str_out+0x14>
		ctx->count++;
   1c330:	608d      	str	r5, [r1, #8]
}
   1c332:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c334:	3b01      	subs	r3, #1
   1c336:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c338:	bf08      	it	eq
   1c33a:	2200      	moveq	r2, #0
   1c33c:	608d      	str	r5, [r1, #8]
   1c33e:	bf0c      	ite	eq
   1c340:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c342:	54a0      	strbne	r0, [r4, r2]
   1c344:	e7f5      	b.n	1c332 <str_out+0x12>

0001c346 <vprintk>:
		z_log_vprintk(fmt, ap);
   1c346:	f000 bd58 	b.w	1cdfa <z_log_vprintk>

0001c34a <printk>:
{
   1c34a:	b40f      	push	{r0, r1, r2, r3}
   1c34c:	b507      	push	{r0, r1, r2, lr}
   1c34e:	a904      	add	r1, sp, #16
   1c350:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c354:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   1c356:	f000 fd50 	bl	1cdfa <z_log_vprintk>
}
   1c35a:	b003      	add	sp, #12
   1c35c:	f85d eb04 	ldr.w	lr, [sp], #4
   1c360:	b004      	add	sp, #16
   1c362:	4770      	bx	lr

0001c364 <snprintk>:
{
   1c364:	b40c      	push	{r2, r3}
   1c366:	b507      	push	{r0, r1, r2, lr}
   1c368:	ab04      	add	r3, sp, #16
   1c36a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c36e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c370:	f7f4 feac 	bl	110cc <vsnprintk>
}
   1c374:	b003      	add	sp, #12
   1c376:	f85d eb04 	ldr.w	lr, [sp], #4
   1c37a:	b002      	add	sp, #8
   1c37c:	4770      	bx	lr

0001c37e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c37e:	4604      	mov	r4, r0
   1c380:	b508      	push	{r3, lr}
   1c382:	4608      	mov	r0, r1
   1c384:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1c386:	461a      	mov	r2, r3
   1c388:	47a0      	blx	r4
	return z_impl_z_current_get();
   1c38a:	f7fc ff51 	bl	19230 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1c38e:	f7f7 f93f 	bl	13610 <z_impl_k_thread_abort>

0001c392 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1c392:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1c396:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1c398:	0840      	lsrs	r0, r0, #1
   1c39a:	4770      	bx	lr

0001c39c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c39e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c3a0:	f7ff fff7 	bl	1c392 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1c3a4:	fab0 f080 	clz	r0, r0
   1c3a8:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1c3ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1c3b0:	00ca      	lsls	r2, r1, #3
   1c3b2:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1c3b6:	1d17      	adds	r7, r2, #4
{
   1c3b8:	460c      	mov	r4, r1
   1c3ba:	3206      	adds	r2, #6
   1c3bc:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1c3be:	b956      	cbnz	r6, 1c3d6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1c3c0:	2101      	movs	r1, #1
   1c3c2:	fa01 f000 	lsl.w	r0, r1, r0
   1c3c6:	68d9      	ldr	r1, [r3, #12]
   1c3c8:	4301      	orrs	r1, r0
   1c3ca:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1c3cc:	f8cc 4010 	str.w	r4, [ip, #16]
   1c3d0:	53dd      	strh	r5, [r3, r7]
   1c3d2:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1c3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1c3d6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1c3d8:	3104      	adds	r1, #4
   1c3da:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1c3dc:	53d8      	strh	r0, [r3, r7]
   1c3de:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1c3e2:	529e      	strh	r6, [r3, r2]
   1c3e4:	80c5      	strh	r5, [r0, #6]
   1c3e6:	525d      	strh	r5, [r3, r1]
   1c3e8:	e7f4      	b.n	1c3d4 <free_list_add+0x38>

0001c3ea <free_list_remove_bidx>:
{
   1c3ea:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1c3ec:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1c3f0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1c3f2:	4299      	cmp	r1, r3
   1c3f4:	f102 0104 	add.w	r1, r2, #4
   1c3f8:	d10a      	bne.n	1c410 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1c3fa:	2301      	movs	r3, #1
   1c3fc:	fa03 f202 	lsl.w	r2, r3, r2
   1c400:	68c3      	ldr	r3, [r0, #12]
   1c402:	ea23 0302 	bic.w	r3, r3, r2
   1c406:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1c408:	2300      	movs	r3, #0
   1c40a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1c40e:	bd10      	pop	{r4, pc}
   1c410:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1c412:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1c416:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1c41a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c41e:	80cb      	strh	r3, [r1, #6]
   1c420:	8082      	strh	r2, [r0, #4]
}
   1c422:	e7f4      	b.n	1c40e <free_list_remove_bidx+0x24>

0001c424 <free_list_remove>:
{
   1c424:	b508      	push	{r3, lr}
   1c426:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c428:	f7ff ffb3 	bl	1c392 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1c42c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1c430:	f1c2 021f 	rsb	r2, r2, #31
   1c434:	4618      	mov	r0, r3
}
   1c436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1c43a:	f7ff bfd6 	b.w	1c3ea <free_list_remove_bidx>

0001c43e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1c43e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c442:	fab1 f581 	clz	r5, r1
   1c446:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1c44a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   1c44e:	4603      	mov	r3, r0
	if (b->next) {
   1c450:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1c454:	460e      	mov	r6, r1
	if (b->next) {
   1c456:	b1c2      	cbz	r2, 1c48a <alloc_chunk+0x4c>
   1c458:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1c45a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1c45e:	4618      	mov	r0, r3
   1c460:	4621      	mov	r1, r4
   1c462:	f7ff ff96 	bl	1c392 <chunk_size>
   1c466:	42b0      	cmp	r0, r6
   1c468:	d306      	bcc.n	1c478 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1c46a:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1c46c:	4618      	mov	r0, r3
   1c46e:	f7ff ffbc 	bl	1c3ea <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1c472:	4620      	mov	r0, r4
   1c474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1c478:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1c47c:	3f01      	subs	r7, #1
   1c47e:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   1c480:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1c484:	d001      	beq.n	1c48a <alloc_chunk+0x4c>
   1c486:	4282      	cmp	r2, r0
   1c488:	d1e7      	bne.n	1c45a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1c48a:	f1c5 0220 	rsb	r2, r5, #32
   1c48e:	f04f 34ff 	mov.w	r4, #4294967295
   1c492:	4094      	lsls	r4, r2
   1c494:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1c496:	4014      	ands	r4, r2
   1c498:	d0eb      	beq.n	1c472 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1c49a:	fa94 f2a4 	rbit	r2, r4
   1c49e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1c4a2:	1d11      	adds	r1, r2, #4
   1c4a4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1c4a8:	4621      	mov	r1, r4
   1c4aa:	e7df      	b.n	1c46c <alloc_chunk+0x2e>

0001c4ac <merge_chunks>:
{
   1c4ac:	b538      	push	{r3, r4, r5, lr}
   1c4ae:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c4b0:	f7ff ff6f 	bl	1c392 <chunk_size>
{
   1c4b4:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c4b6:	4604      	mov	r4, r0
   1c4b8:	4611      	mov	r1, r2
   1c4ba:	4618      	mov	r0, r3
   1c4bc:	f7ff ff69 	bl	1c392 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1c4c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1c4c4:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c4c6:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1c4c8:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1c4ca:	4618      	mov	r0, r3
   1c4cc:	f7ff ff61 	bl	1c392 <chunk_size>
	void *cmem = &buf[c];
   1c4d0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c4d2:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1c4d6:	bd38      	pop	{r3, r4, r5, pc}

0001c4d8 <split_chunks>:
{
   1c4d8:	b538      	push	{r3, r4, r5, lr}
   1c4da:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1c4dc:	f7ff ff59 	bl	1c392 <chunk_size>
{
   1c4e0:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1c4e2:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1c4e4:	1a51      	subs	r1, r2, r1
   1c4e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1c4ea:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c4ec:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1c4ee:	8060      	strh	r0, [r4, #2]
   1c4f0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c4f4:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1c4f6:	8044      	strh	r4, [r0, #2]
   1c4f8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1c4fc:	4618      	mov	r0, r3
   1c4fe:	4611      	mov	r1, r2
   1c500:	f7ff ff47 	bl	1c392 <chunk_size>
	void *cmem = &buf[c];
   1c504:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c506:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1c50a:	bd38      	pop	{r3, r4, r5, pc}

0001c50c <free_chunk>:
{
   1c50c:	b538      	push	{r3, r4, r5, lr}
   1c50e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1c510:	f7ff ff3f 	bl	1c392 <chunk_size>
   1c514:	460c      	mov	r4, r1
   1c516:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1c518:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c51c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1c51e:	07da      	lsls	r2, r3, #31
   1c520:	d40a      	bmi.n	1c538 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1c522:	4628      	mov	r0, r5
   1c524:	f7ff ff7e 	bl	1c424 <free_list_remove>
	return c + chunk_size(h, c);
   1c528:	4621      	mov	r1, r4
   1c52a:	4628      	mov	r0, r5
   1c52c:	f7ff ff31 	bl	1c392 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1c530:	1822      	adds	r2, r4, r0
   1c532:	4628      	mov	r0, r5
   1c534:	f7ff ffba 	bl	1c4ac <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1c538:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c53c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1c53e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c542:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1c544:	07db      	lsls	r3, r3, #31
   1c546:	d40c      	bmi.n	1c562 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1c548:	4628      	mov	r0, r5
   1c54a:	f7ff ff6b 	bl	1c424 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1c54e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1c552:	4622      	mov	r2, r4
   1c554:	1a61      	subs	r1, r4, r1
   1c556:	4628      	mov	r0, r5
   1c558:	f7ff ffa8 	bl	1c4ac <merge_chunks>
   1c55c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c560:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1c562:	4621      	mov	r1, r4
   1c564:	4628      	mov	r0, r5
}
   1c566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1c56a:	f7ff bf17 	b.w	1c39c <free_list_add>

0001c56e <sys_heap_free>:
	if (mem == NULL) {
   1c56e:	b161      	cbz	r1, 1c58a <sys_heap_free+0x1c>
   1c570:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c572:	3904      	subs	r1, #4
   1c574:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1c576:	f021 0307 	bic.w	r3, r1, #7
   1c57a:	4403      	add	r3, r0
	free_chunk(h, c);
   1c57c:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c57e:	885a      	ldrh	r2, [r3, #2]
   1c580:	f022 0201 	bic.w	r2, r2, #1
   1c584:	805a      	strh	r2, [r3, #2]
   1c586:	f7ff bfc1 	b.w	1c50c <free_chunk>
}
   1c58a:	4770      	bx	lr

0001c58c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1c58c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1c58e:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1c590:	b909      	cbnz	r1, 1c596 <sys_heap_alloc+0xa>
		return NULL;
   1c592:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1c594:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1c596:	68ab      	ldr	r3, [r5, #8]
   1c598:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1c59c:	d9f9      	bls.n	1c592 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c59e:	310b      	adds	r1, #11
   1c5a0:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1c5a2:	4621      	mov	r1, r4
   1c5a4:	4628      	mov	r0, r5
   1c5a6:	f7ff ff4a 	bl	1c43e <alloc_chunk>
	if (c == 0U) {
   1c5aa:	4606      	mov	r6, r0
   1c5ac:	2800      	cmp	r0, #0
   1c5ae:	d0f0      	beq.n	1c592 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1c5b0:	4601      	mov	r1, r0
   1c5b2:	4628      	mov	r0, r5
   1c5b4:	f7ff feed 	bl	1c392 <chunk_size>
   1c5b8:	42a0      	cmp	r0, r4
   1c5ba:	d907      	bls.n	1c5cc <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1c5bc:	1932      	adds	r2, r6, r4
   1c5be:	4628      	mov	r0, r5
   1c5c0:	f7ff ff8a 	bl	1c4d8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1c5c4:	4611      	mov	r1, r2
   1c5c6:	4628      	mov	r0, r5
   1c5c8:	f7ff fee8 	bl	1c39c <free_list_add>
	void *cmem = &buf[c];
   1c5cc:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c5d0:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c5d2:	8853      	ldrh	r3, [r2, #2]
   1c5d4:	f043 0301 	orr.w	r3, r3, #1
   1c5d8:	8053      	strh	r3, [r2, #2]
   1c5da:	3004      	adds	r0, #4
	return mem;
   1c5dc:	e7da      	b.n	1c594 <sys_heap_alloc+0x8>

0001c5de <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1c5de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c5e2:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1c5e6:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   1c5ea:	6806      	ldr	r6, [r0, #0]
{
   1c5ec:	460f      	mov	r7, r1
   1c5ee:	4614      	mov	r4, r2
	if (align != rew) {
   1c5f0:	d00c      	beq.n	1c60c <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1c5f2:	424b      	negs	r3, r1
   1c5f4:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1c5f6:	2b04      	cmp	r3, #4
   1c5f8:	461a      	mov	r2, r3
   1c5fa:	464f      	mov	r7, r9
   1c5fc:	bf28      	it	cs
   1c5fe:	2204      	movcs	r2, #4
	rew = align & -align;
   1c600:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1c602:	b964      	cbnz	r4, 1c61e <sys_heap_aligned_alloc+0x40>
		return NULL;
   1c604:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1c606:	4628      	mov	r0, r5
   1c608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1c60c:	2904      	cmp	r1, #4
   1c60e:	d804      	bhi.n	1c61a <sys_heap_aligned_alloc+0x3c>
}
   1c610:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1c614:	4611      	mov	r1, r2
   1c616:	f7ff bfb9 	b.w	1c58c <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1c61a:	2204      	movs	r2, #4
   1c61c:	e7f1      	b.n	1c602 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1c61e:	68b3      	ldr	r3, [r6, #8]
   1c620:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1c624:	d9ee      	bls.n	1c604 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c626:	f104 010b 	add.w	r1, r4, #11
   1c62a:	4439      	add	r1, r7
   1c62c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1c62e:	08c9      	lsrs	r1, r1, #3
   1c630:	4630      	mov	r0, r6
   1c632:	f7ff ff04 	bl	1c43e <alloc_chunk>
	if (c0 == 0) {
   1c636:	4680      	mov	r8, r0
   1c638:	2800      	cmp	r0, #0
   1c63a:	d0e3      	beq.n	1c604 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1c63c:	f109 0504 	add.w	r5, r9, #4
   1c640:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1c644:	1e7b      	subs	r3, r7, #1
   1c646:	4435      	add	r5, r6
   1c648:	441d      	add	r5, r3
   1c64a:	427f      	negs	r7, r7
   1c64c:	403d      	ands	r5, r7
   1c64e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c652:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c654:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c656:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c658:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c65a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1c65e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1c660:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c664:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1c668:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1c66c:	d208      	bcs.n	1c680 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1c66e:	4601      	mov	r1, r0
   1c670:	463a      	mov	r2, r7
   1c672:	4630      	mov	r0, r6
   1c674:	f7ff ff30 	bl	1c4d8 <split_chunks>
		free_list_add(h, c0);
   1c678:	4641      	mov	r1, r8
   1c67a:	4630      	mov	r0, r6
   1c67c:	f7ff fe8e 	bl	1c39c <free_list_add>
	return c + chunk_size(h, c);
   1c680:	4639      	mov	r1, r7
   1c682:	4630      	mov	r0, r6
   1c684:	f7ff fe85 	bl	1c392 <chunk_size>
   1c688:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1c68a:	4284      	cmp	r4, r0
   1c68c:	d207      	bcs.n	1c69e <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   1c68e:	4630      	mov	r0, r6
   1c690:	4622      	mov	r2, r4
   1c692:	f7ff ff21 	bl	1c4d8 <split_chunks>
		free_list_add(h, c_end);
   1c696:	4621      	mov	r1, r4
   1c698:	4630      	mov	r0, r6
   1c69a:	f7ff fe7f 	bl	1c39c <free_list_add>
	void *cmem = &buf[c];
   1c69e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c6a2:	8873      	ldrh	r3, [r6, #2]
   1c6a4:	f043 0301 	orr.w	r3, r3, #1
   1c6a8:	8073      	strh	r3, [r6, #2]
   1c6aa:	e7ac      	b.n	1c606 <sys_heap_aligned_alloc+0x28>

0001c6ac <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1c6ac:	3a04      	subs	r2, #4
{
   1c6ae:	b4f0      	push	{r4, r5, r6, r7}
   1c6b0:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c6b2:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c6b4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c6b6:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c6ba:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1c6be:	1a0e      	subs	r6, r1, r0
   1c6c0:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1c6c2:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   1c6c4:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1c6c8:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c6ca:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   1c6ce:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   1c6d0:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c6d2:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   1c6d4:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c6d8:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c6da:	f1c2 0220 	rsb	r2, r2, #32
   1c6de:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1c6e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   1c6e4:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1c6e8:	4294      	cmp	r4, r2
   1c6ea:	d1fb      	bne.n	1c6e4 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c6ec:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c6ee:	f042 0201 	orr.w	r2, r2, #1
   1c6f2:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   1c6f4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1c6f8:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c6fa:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1c6fc:	8007      	strh	r7, [r0, #0]
   1c6fe:	8065      	strh	r5, [r4, #2]
   1c700:	1984      	adds	r4, r0, r6
   1c702:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1c706:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1c70a:	8067      	strh	r7, [r4, #2]
   1c70c:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c70e:	885a      	ldrh	r2, [r3, #2]
   1c710:	f042 0201 	orr.w	r2, r2, #1
   1c714:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1c716:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1c718:	f7ff be40 	b.w	1c39c <free_list_add>

0001c71c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c71c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c71e:	f013 0307 	ands.w	r3, r3, #7
   1c722:	d105      	bne.n	1c730 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c724:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1c726:	2b00      	cmp	r3, #0
   1c728:	bf0c      	ite	eq
   1c72a:	2000      	moveq	r0, #0
   1c72c:	2003      	movne	r0, #3
   1c72e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c730:	2b02      	cmp	r3, #2
   1c732:	d105      	bne.n	1c740 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c734:	8b40      	ldrh	r0, [r0, #26]
   1c736:	fab0 f080 	clz	r0, r0
   1c73a:	0940      	lsrs	r0, r0, #5
   1c73c:	0080      	lsls	r0, r0, #2
   1c73e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c740:	2b01      	cmp	r3, #1
   1c742:	d105      	bne.n	1c750 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c744:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1c746:	2b00      	cmp	r3, #0
   1c748:	bf0c      	ite	eq
   1c74a:	2000      	moveq	r0, #0
   1c74c:	2005      	movne	r0, #5
   1c74e:	4770      	bx	lr
	int evt = EVT_NOP;
   1c750:	2000      	movs	r0, #0
}
   1c752:	4770      	bx	lr

0001c754 <validate_args>:
{
   1c754:	b510      	push	{r4, lr}
   1c756:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c758:	b100      	cbz	r0, 1c75c <validate_args+0x8>
   1c75a:	b911      	cbnz	r1, 1c762 <validate_args+0xe>
		return -EINVAL;
   1c75c:	f06f 0015 	mvn.w	r0, #21
}
   1c760:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1c762:	1d08      	adds	r0, r1, #4
   1c764:	f000 f895 	bl	1c892 <sys_notify_validate>
	if ((rv == 0)
   1c768:	2800      	cmp	r0, #0
   1c76a:	d1f9      	bne.n	1c760 <validate_args+0xc>
	    && ((cli->notify.flags
   1c76c:	68a3      	ldr	r3, [r4, #8]
   1c76e:	2b03      	cmp	r3, #3
   1c770:	d9f6      	bls.n	1c760 <validate_args+0xc>
   1c772:	e7f3      	b.n	1c75c <validate_args+0x8>

0001c774 <notify_one>:
{
   1c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c778:	460d      	mov	r5, r1
   1c77a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c77c:	4619      	mov	r1, r3
   1c77e:	1d28      	adds	r0, r5, #4
{
   1c780:	4690      	mov	r8, r2
   1c782:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c784:	f000 f899 	bl	1c8ba <sys_notify_finalize>
	if (cb) {
   1c788:	4604      	mov	r4, r0
   1c78a:	b138      	cbz	r0, 1c79c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c78c:	4633      	mov	r3, r6
   1c78e:	4642      	mov	r2, r8
   1c790:	4629      	mov	r1, r5
   1c792:	4638      	mov	r0, r7
   1c794:	46a4      	mov	ip, r4
}
   1c796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c79a:	4760      	bx	ip
}
   1c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c7a0 <transition_complete>:
{
   1c7a0:	b410      	push	{r4}
	__asm__ volatile(
   1c7a2:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c7a6:	f3ef 8211 	mrs	r2, BASEPRI
   1c7aa:	f384 8812 	msr	BASEPRI_MAX, r4
   1c7ae:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c7b2:	6141      	str	r1, [r0, #20]
}
   1c7b4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1c7b6:	2101      	movs	r1, #1
   1c7b8:	f7f4 bc9e 	b.w	110f8 <process_event>

0001c7bc <onoff_manager_init>:
{
   1c7bc:	b538      	push	{r3, r4, r5, lr}
   1c7be:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c7c0:	4605      	mov	r5, r0
   1c7c2:	b158      	cbz	r0, 1c7dc <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c7c4:	b151      	cbz	r1, 1c7dc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c7c6:	680b      	ldr	r3, [r1, #0]
   1c7c8:	b143      	cbz	r3, 1c7dc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c7ca:	684b      	ldr	r3, [r1, #4]
   1c7cc:	b133      	cbz	r3, 1c7dc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c7ce:	221c      	movs	r2, #28
   1c7d0:	2100      	movs	r1, #0
   1c7d2:	f000 fc16 	bl	1d002 <memset>
   1c7d6:	612c      	str	r4, [r5, #16]
	return 0;
   1c7d8:	2000      	movs	r0, #0
}
   1c7da:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c7dc:	f06f 0015 	mvn.w	r0, #21
   1c7e0:	e7fb      	b.n	1c7da <onoff_manager_init+0x1e>

0001c7e2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c7e2:	b570      	push	{r4, r5, r6, lr}
   1c7e4:	4605      	mov	r5, r0
   1c7e6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c7e8:	f7ff ffb4 	bl	1c754 <validate_args>

	if (rv < 0) {
   1c7ec:	1e04      	subs	r4, r0, #0
   1c7ee:	db15      	blt.n	1c81c <onoff_request+0x3a>
   1c7f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7f4:	f3ef 8211 	mrs	r2, BASEPRI
   1c7f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7fc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c800:	8b6b      	ldrh	r3, [r5, #26]
   1c802:	8b2c      	ldrh	r4, [r5, #24]
   1c804:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c808:	428b      	cmp	r3, r1
   1c80a:	f004 0407 	and.w	r4, r4, #7
   1c80e:	d107      	bne.n	1c820 <onoff_request+0x3e>
	__asm__ volatile(
   1c810:	f382 8811 	msr	BASEPRI, r2
   1c814:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1c818:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1c81c:	4620      	mov	r0, r4
   1c81e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1c820:	2c02      	cmp	r4, #2
   1c822:	d10c      	bne.n	1c83e <onoff_request+0x5c>
		mgr->refs += 1U;
   1c824:	3301      	adds	r3, #1
   1c826:	836b      	strh	r3, [r5, #26]
   1c828:	f382 8811 	msr	BASEPRI, r2
   1c82c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1c830:	2300      	movs	r3, #0
   1c832:	4622      	mov	r2, r4
   1c834:	4631      	mov	r1, r6
   1c836:	4628      	mov	r0, r5
   1c838:	f7ff ff9c 	bl	1c774 <notify_one>
   1c83c:	e7ee      	b.n	1c81c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1c83e:	2c06      	cmp	r4, #6
   1c840:	d814      	bhi.n	1c86c <onoff_request+0x8a>
   1c842:	e8df f004 	tbb	[pc, r4]
   1c846:	1304      	.short	0x1304
   1c848:	1a041313 	.word	0x1a041313
   1c84c:	04          	.byte	0x04
   1c84d:	00          	.byte	0x00
	parent->next = child;
   1c84e:	2300      	movs	r3, #0
   1c850:	6033      	str	r3, [r6, #0]
	return list->tail;
   1c852:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1c854:	b93b      	cbnz	r3, 1c866 <onoff_request+0x84>
	list->head = node;
   1c856:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1c85a:	b9ac      	cbnz	r4, 1c888 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1c85c:	2102      	movs	r1, #2
   1c85e:	4628      	mov	r0, r5
   1c860:	f7f4 fc4a 	bl	110f8 <process_event>
   1c864:	e7da      	b.n	1c81c <onoff_request+0x3a>
	parent->next = child;
   1c866:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1c868:	606e      	str	r6, [r5, #4]
}
   1c86a:	e7f6      	b.n	1c85a <onoff_request+0x78>
   1c86c:	f382 8811 	msr	BASEPRI, r2
   1c870:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1c874:	f06f 0404 	mvn.w	r4, #4
   1c878:	e7d0      	b.n	1c81c <onoff_request+0x3a>
   1c87a:	f382 8811 	msr	BASEPRI, r2
   1c87e:	f3bf 8f6f 	isb	sy
   1c882:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1c886:	e7c9      	b.n	1c81c <onoff_request+0x3a>
   1c888:	f382 8811 	msr	BASEPRI, r2
   1c88c:	f3bf 8f6f 	isb	sy
		if (notify) {
   1c890:	e7c4      	b.n	1c81c <onoff_request+0x3a>

0001c892 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c892:	4603      	mov	r3, r0
   1c894:	b140      	cbz	r0, 1c8a8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c896:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c898:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c89c:	2a02      	cmp	r2, #2
   1c89e:	d006      	beq.n	1c8ae <sys_notify_validate+0x1c>
   1c8a0:	2a03      	cmp	r2, #3
   1c8a2:	d004      	beq.n	1c8ae <sys_notify_validate+0x1c>
   1c8a4:	2a01      	cmp	r2, #1
   1c8a6:	d005      	beq.n	1c8b4 <sys_notify_validate+0x22>
   1c8a8:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1c8ac:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c8ae:	681a      	ldr	r2, [r3, #0]
   1c8b0:	2a00      	cmp	r2, #0
   1c8b2:	d0f9      	beq.n	1c8a8 <sys_notify_validate+0x16>
		notify->result = 0;
   1c8b4:	2000      	movs	r0, #0
   1c8b6:	6098      	str	r0, [r3, #8]
   1c8b8:	4770      	bx	lr

0001c8ba <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1c8ba:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c8bc:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1c8be:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c8c0:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   1c8c4:	2a02      	cmp	r2, #2
{
   1c8c6:	4603      	mov	r3, r0
	switch (method) {
   1c8c8:	f04f 0400 	mov.w	r4, #0
   1c8cc:	d007      	beq.n	1c8de <sys_notify_finalize+0x24>
   1c8ce:	2a03      	cmp	r2, #3
   1c8d0:	d002      	beq.n	1c8d8 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c8d2:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1c8d4:	2000      	movs	r0, #0
   1c8d6:	e001      	b.n	1c8dc <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1c8d8:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c8da:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c8dc:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1c8de:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c8e0:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c8e2:	2800      	cmp	r0, #0
   1c8e4:	d0f6      	beq.n	1c8d4 <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1c8e6:	f7fc ff87 	bl	197f8 <z_impl_k_poll_signal_raise>
   1c8ea:	e7f3      	b.n	1c8d4 <sys_notify_finalize+0x1a>

0001c8ec <encode_uint>:
{
   1c8ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8f0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1c8f2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1c8f4:	2b6f      	cmp	r3, #111	; 0x6f
{
   1c8f6:	4680      	mov	r8, r0
   1c8f8:	460f      	mov	r7, r1
   1c8fa:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1c8fc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1c900:	d029      	beq.n	1c956 <encode_uint+0x6a>
   1c902:	d824      	bhi.n	1c94e <encode_uint+0x62>
		return 10;
   1c904:	2b58      	cmp	r3, #88	; 0x58
   1c906:	bf0c      	ite	eq
   1c908:	2610      	moveq	r6, #16
   1c90a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1c90c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1c910:	4632      	mov	r2, r6
   1c912:	2300      	movs	r3, #0
   1c914:	4640      	mov	r0, r8
   1c916:	4639      	mov	r1, r7
   1c918:	f7e3 fbf2 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c91c:	2a09      	cmp	r2, #9
   1c91e:	b2d4      	uxtb	r4, r2
   1c920:	d81e      	bhi.n	1c960 <encode_uint+0x74>
   1c922:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1c924:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c926:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1c928:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c92c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1c930:	d301      	bcc.n	1c936 <encode_uint+0x4a>
   1c932:	45d1      	cmp	r9, sl
   1c934:	d811      	bhi.n	1c95a <encode_uint+0x6e>
	if (conv->flag_hash) {
   1c936:	782b      	ldrb	r3, [r5, #0]
   1c938:	069b      	lsls	r3, r3, #26
   1c93a:	d505      	bpl.n	1c948 <encode_uint+0x5c>
		if (radix == 8) {
   1c93c:	2e08      	cmp	r6, #8
   1c93e:	d115      	bne.n	1c96c <encode_uint+0x80>
			conv->altform_0 = true;
   1c940:	78ab      	ldrb	r3, [r5, #2]
   1c942:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1c946:	70ab      	strb	r3, [r5, #2]
}
   1c948:	4648      	mov	r0, r9
   1c94a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1c94e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1c952:	2b70      	cmp	r3, #112	; 0x70
   1c954:	e7d7      	b.n	1c906 <encode_uint+0x1a>
	switch (specifier) {
   1c956:	2608      	movs	r6, #8
   1c958:	e7d8      	b.n	1c90c <encode_uint+0x20>
		value /= radix;
   1c95a:	4680      	mov	r8, r0
   1c95c:	460f      	mov	r7, r1
   1c95e:	e7d7      	b.n	1c910 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c960:	f1bb 0f19 	cmp.w	fp, #25
   1c964:	bf94      	ite	ls
   1c966:	3437      	addls	r4, #55	; 0x37
   1c968:	3457      	addhi	r4, #87	; 0x57
   1c96a:	e7db      	b.n	1c924 <encode_uint+0x38>
		} else if (radix == 16) {
   1c96c:	2e10      	cmp	r6, #16
   1c96e:	d1eb      	bne.n	1c948 <encode_uint+0x5c>
			conv->altform_0c = true;
   1c970:	78ab      	ldrb	r3, [r5, #2]
   1c972:	f043 0310 	orr.w	r3, r3, #16
   1c976:	e7e6      	b.n	1c946 <encode_uint+0x5a>

0001c978 <outs>:
{
   1c978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c97c:	4607      	mov	r7, r0
   1c97e:	4688      	mov	r8, r1
   1c980:	4615      	mov	r5, r2
   1c982:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c984:	4614      	mov	r4, r2
   1c986:	42b4      	cmp	r4, r6
   1c988:	d305      	bcc.n	1c996 <outs+0x1e>
   1c98a:	b10e      	cbz	r6, 1c990 <outs+0x18>
	return (int)count;
   1c98c:	1b60      	subs	r0, r4, r5
   1c98e:	e008      	b.n	1c9a2 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c990:	7823      	ldrb	r3, [r4, #0]
   1c992:	2b00      	cmp	r3, #0
   1c994:	d0fa      	beq.n	1c98c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1c996:	f814 0b01 	ldrb.w	r0, [r4], #1
   1c99a:	4641      	mov	r1, r8
   1c99c:	47b8      	blx	r7
		if (rc < 0) {
   1c99e:	2800      	cmp	r0, #0
   1c9a0:	daf1      	bge.n	1c986 <outs+0xe>
}
   1c9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c9a6 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1c9a6:	b40f      	push	{r0, r1, r2, r3}
   1c9a8:	b507      	push	{r0, r1, r2, lr}
   1c9aa:	a904      	add	r1, sp, #16
   1c9ac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1c9b0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1c9b2:	f7ff fcc8 	bl	1c346 <vprintk>

	va_end(ap);
}
   1c9b6:	b003      	add	sp, #12
   1c9b8:	f85d eb04 	ldr.w	lr, [sp], #4
   1c9bc:	b004      	add	sp, #16
   1c9be:	4770      	bx	lr

0001c9c0 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1c9c0:	68c3      	ldr	r3, [r0, #12]
   1c9c2:	6802      	ldr	r2, [r0, #0]
   1c9c4:	4293      	cmp	r3, r2
   1c9c6:	d904      	bls.n	1c9d2 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1c9c8:	3b01      	subs	r3, #1
   1c9ca:	1a9a      	subs	r2, r3, r2

		return false;
   1c9cc:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1c9ce:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   1c9d0:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1c9d2:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   1c9d4:	b913      	cbnz	r3, 1c9dc <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1c9d6:	3801      	subs	r0, #1
   1c9d8:	1a82      	subs	r2, r0, r2
		return false;
   1c9da:	e7f7      	b.n	1c9cc <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   1c9dc:	1a82      	subs	r2, r0, r2
	return true;
   1c9de:	2001      	movs	r0, #1
   1c9e0:	e7f5      	b.n	1c9ce <free_space+0xe>

0001c9e2 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   1c9e2:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   1c9e4:	a901      	add	r1, sp, #4
{
   1c9e6:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1c9e8:	f7ff ffea 	bl	1c9c0 <free_space>
   1c9ec:	b120      	cbz	r0, 1c9f8 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1c9ee:	9b01      	ldr	r3, [sp, #4]
   1c9f0:	68e2      	ldr	r2, [r4, #12]
   1c9f2:	3b01      	subs	r3, #1
   1c9f4:	4413      	add	r3, r2
   1c9f6:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   1c9f8:	6a20      	ldr	r0, [r4, #32]
   1c9fa:	9b01      	ldr	r3, [sp, #4]
   1c9fc:	1ac0      	subs	r0, r0, r3
}
   1c9fe:	3801      	subs	r0, #1
   1ca00:	b002      	add	sp, #8
   1ca02:	bd10      	pop	{r4, pc}

0001ca04 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   1ca04:	b510      	push	{r4, lr}
   1ca06:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1ca08:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1ca0a:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1ca0c:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1ca0e:	07d2      	lsls	r2, r2, #31
   1ca10:	d502      	bpl.n	1ca18 <idx_inc+0x14>
		return i & (buffer->size - 1);
   1ca12:	3b01      	subs	r3, #1
   1ca14:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   1ca16:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1ca18:	4298      	cmp	r0, r3
   1ca1a:	bf28      	it	cs
   1ca1c:	1ac0      	subcs	r0, r0, r3
   1ca1e:	e7fa      	b.n	1ca16 <idx_inc+0x12>

0001ca20 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   1ca20:	b538      	push	{r3, r4, r5, lr}
   1ca22:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1ca24:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   1ca26:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1ca28:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1ca2a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1ca2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1ca32:	462a      	mov	r2, r5
   1ca34:	6801      	ldr	r1, [r0, #0]
{
   1ca36:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1ca38:	f7ff ffe4 	bl	1ca04 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1ca3c:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1ca3e:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1ca40:	462a      	mov	r2, r5
   1ca42:	4620      	mov	r0, r4
   1ca44:	f7ff ffde 	bl	1ca04 <idx_inc>
   1ca48:	6060      	str	r0, [r4, #4]
}
   1ca4a:	bd38      	pop	{r3, r4, r5, pc}

0001ca4c <max_utilization_update>:
{
   1ca4c:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1ca4e:	6903      	ldr	r3, [r0, #16]
   1ca50:	075b      	lsls	r3, r3, #29
{
   1ca52:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1ca54:	d506      	bpl.n	1ca64 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1ca56:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1ca58:	f7ff ffc3 	bl	1c9e2 <get_usage>
   1ca5c:	4285      	cmp	r5, r0
   1ca5e:	bf2c      	ite	cs
   1ca60:	6265      	strcs	r5, [r4, #36]	; 0x24
   1ca62:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   1ca64:	bd38      	pop	{r3, r4, r5, pc}

0001ca66 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   1ca66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca6a:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   1ca6c:	2300      	movs	r3, #0
   1ca6e:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1ca70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1ca74:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   1ca78:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1ca7c:	f003 0303 	and.w	r3, r3, #3
   1ca80:	2b02      	cmp	r3, #2
{
   1ca82:	4604      	mov	r4, r0
   1ca84:	468b      	mov	fp, r1
   1ca86:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1ca88:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1ca8c:	d103      	bne.n	1ca96 <drop_item_locked+0x30>
		return item->skip.len;
   1ca8e:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1ca92:	08ad      	lsrs	r5, r5, #2
   1ca94:	d12e      	bne.n	1caf4 <drop_item_locked+0x8e>
   1ca96:	69a3      	ldr	r3, [r4, #24]
   1ca98:	4630      	mov	r0, r6
   1ca9a:	4798      	blx	r3
   1ca9c:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   1ca9e:	f1b8 0f00 	cmp.w	r8, #0
   1caa2:	d038      	beq.n	1cb16 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   1caa4:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1caa8:	079b      	lsls	r3, r3, #30
   1caaa:	d531      	bpl.n	1cb10 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   1caac:	f10b 0101 	add.w	r1, fp, #1
   1cab0:	4620      	mov	r0, r4
   1cab2:	f7ff ffb5 	bl	1ca20 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1cab6:	6861      	ldr	r1, [r4, #4]
   1cab8:	462a      	mov	r2, r5
   1caba:	4620      	mov	r0, r4
   1cabc:	f7ff ffa2 	bl	1ca04 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1cac0:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1cac2:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1cac4:	462a      	mov	r2, r5
   1cac6:	4620      	mov	r0, r4
   1cac8:	f7ff ff9c 	bl	1ca04 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1cacc:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1cace:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1cad0:	68e1      	ldr	r1, [r4, #12]
   1cad2:	4620      	mov	r0, r4
   1cad4:	f7ff ff96 	bl	1ca04 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1cad8:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   1cada:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   1cade:	f002 0203 	and.w	r2, r2, #3
   1cae2:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1cae4:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1cae8:	d10e      	bne.n	1cb08 <drop_item_locked+0xa2>
		return item->skip.len;
   1caea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   1caee:	089b      	lsrs	r3, r3, #2
   1caf0:	d00a      	beq.n	1cb08 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   1caf2:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1caf4:	68e1      	ldr	r1, [r4, #12]
   1caf6:	462a      	mov	r2, r5
   1caf8:	4620      	mov	r0, r4
   1cafa:	f7ff ff83 	bl	1ca04 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1cafe:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   1cb02:	4630      	mov	r0, r6
   1cb04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   1cb08:	69a3      	ldr	r3, [r4, #24]
   1cb0a:	4630      	mov	r0, r6
   1cb0c:	4798      	blx	r3
   1cb0e:	4405      	add	r5, r0
			*user_packet = true;
   1cb10:	2301      	movs	r3, #1
   1cb12:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1cb14:	e7ee      	b.n	1caf4 <drop_item_locked+0x8e>
		item = NULL;
   1cb16:	4646      	mov	r6, r8
	return item;
   1cb18:	e7f3      	b.n	1cb02 <drop_item_locked+0x9c>

0001cb1a <mpsc_pbuf_init>:
{
   1cb1a:	b538      	push	{r3, r4, r5, lr}
   1cb1c:	460d      	mov	r5, r1
   1cb1e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   1cb20:	221c      	movs	r2, #28
   1cb22:	2100      	movs	r1, #0
   1cb24:	f000 fa6d 	bl	1d002 <memset>
	buffer->get_wlen = cfg->get_wlen;
   1cb28:	68eb      	ldr	r3, [r5, #12]
   1cb2a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   1cb2c:	68ab      	ldr	r3, [r5, #8]
   1cb2e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   1cb30:	682b      	ldr	r3, [r5, #0]
   1cb32:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   1cb34:	686b      	ldr	r3, [r5, #4]
   1cb36:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   1cb38:	2200      	movs	r2, #0
   1cb3a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   1cb3c:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   1cb3e:	b123      	cbz	r3, 1cb4a <mpsc_pbuf_init+0x30>
   1cb40:	1e59      	subs	r1, r3, #1
   1cb42:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1cb44:	bf08      	it	eq
   1cb46:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   1cb4a:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cb4c:	2201      	movs	r2, #1
   1cb4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cb52:	2100      	movs	r1, #0
}
   1cb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cb58:	f001 b999 	b.w	1de8e <z_impl_k_sem_init>

0001cb5c <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   1cb5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1cb60:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   1cb62:	6a03      	ldr	r3, [r0, #32]
   1cb64:	3b01      	subs	r3, #1
   1cb66:	428b      	cmp	r3, r1
{
   1cb68:	4604      	mov	r4, r0
   1cb6a:	460e      	mov	r6, r1
   1cb6c:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   1cb6e:	d351      	bcc.n	1cc14 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   1cb70:	2500      	movs	r5, #0
	__asm__ volatile(
   1cb72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb76:	f3ef 8911 	mrs	r9, BASEPRI
   1cb7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb7e:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   1cb82:	a901      	add	r1, sp, #4
   1cb84:	4620      	mov	r0, r4
   1cb86:	f7ff ff1b 	bl	1c9c0 <free_space>

		if (free_wlen >= wlen) {
   1cb8a:	f8dd a004 	ldr.w	sl, [sp, #4]
   1cb8e:	45b2      	cmp	sl, r6
   1cb90:	d317      	bcc.n	1cbc2 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1cb92:	6822      	ldr	r2, [r4, #0]
			item =
   1cb94:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   1cb96:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   1cb9a:	f021 0103 	bic.w	r1, r1, #3
   1cb9e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   1cba2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   1cba6:	6821      	ldr	r1, [r4, #0]
   1cba8:	4632      	mov	r2, r6
   1cbaa:	4620      	mov	r0, r4
   1cbac:	f7ff ff2a 	bl	1ca04 <idx_inc>
   1cbb0:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   1cbb2:	f389 8811 	msr	BASEPRI, r9
   1cbb6:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   1cbba:	4628      	mov	r0, r5
   1cbbc:	b002      	add	sp, #8
   1cbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   1cbc2:	b150      	cbz	r0, 1cbda <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   1cbc4:	4651      	mov	r1, sl
   1cbc6:	4620      	mov	r0, r4
   1cbc8:	f7ff ff2a 	bl	1ca20 <add_skip_item>
   1cbcc:	f389 8811 	msr	BASEPRI, r9
   1cbd0:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1cbd4:	2d00      	cmp	r5, #0
   1cbd6:	d0cb      	beq.n	1cb70 <mpsc_pbuf_alloc+0x14>
   1cbd8:	e033      	b.n	1cc42 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cbda:	ea57 0308 	orrs.w	r3, r7, r8
   1cbde:	d020      	beq.n	1cc22 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   1cbe0:	f001 f89f 	bl	1dd22 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cbe4:	b9e8      	cbnz	r0, 1cc22 <mpsc_pbuf_alloc+0xc6>
   1cbe6:	f389 8811 	msr	BASEPRI, r9
   1cbea:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   1cbee:	463a      	mov	r2, r7
   1cbf0:	4643      	mov	r3, r8
   1cbf2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cbf6:	f7fb fea9 	bl	1894c <z_impl_k_sem_take>
	__asm__ volatile(
   1cbfa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1cbfe:	f3ef 8311 	mrs	r3, BASEPRI
   1cc02:	f382 8812 	msr	BASEPRI_MAX, r2
   1cc06:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   1cc0a:	b128      	cbz	r0, 1cc18 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   1cc0c:	f383 8811 	msr	BASEPRI, r3
   1cc10:	f3bf 8f6f 	isb	sy
		return NULL;
   1cc14:	2500      	movs	r5, #0
   1cc16:	e7d0      	b.n	1cbba <mpsc_pbuf_alloc+0x5e>
   1cc18:	f383 8811 	msr	BASEPRI, r3
   1cc1c:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1cc20:	e7d8      	b.n	1cbd4 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   1cc22:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   1cc24:	f10d 0303 	add.w	r3, sp, #3
   1cc28:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1cc2c:	4651      	mov	r1, sl
   1cc2e:	4620      	mov	r0, r4
   1cc30:	f7ff ff19 	bl	1ca66 <drop_item_locked>
   1cc34:	4605      	mov	r5, r0
   1cc36:	f389 8811 	msr	BASEPRI, r9
   1cc3a:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1cc3e:	2800      	cmp	r0, #0
   1cc40:	d0e8      	beq.n	1cc14 <mpsc_pbuf_alloc+0xb8>
   1cc42:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1cc46:	2b00      	cmp	r3, #0
   1cc48:	d093      	beq.n	1cb72 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   1cc4a:	6963      	ldr	r3, [r4, #20]
   1cc4c:	2b00      	cmp	r3, #0
   1cc4e:	d08f      	beq.n	1cb70 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   1cc50:	4629      	mov	r1, r5
   1cc52:	4620      	mov	r0, r4
   1cc54:	4798      	blx	r3
   1cc56:	e78b      	b.n	1cb70 <mpsc_pbuf_alloc+0x14>

0001cc58 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1cc58:	b570      	push	{r4, r5, r6, lr}
   1cc5a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1cc5c:	6983      	ldr	r3, [r0, #24]
   1cc5e:	4608      	mov	r0, r1
{
   1cc60:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1cc62:	4798      	blx	r3
   1cc64:	4602      	mov	r2, r0
	__asm__ volatile(
   1cc66:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc6a:	f3ef 8611 	mrs	r6, BASEPRI
   1cc6e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc72:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1cc76:	782b      	ldrb	r3, [r5, #0]
   1cc78:	f043 0301 	orr.w	r3, r3, #1
   1cc7c:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1cc7e:	6861      	ldr	r1, [r4, #4]
   1cc80:	4620      	mov	r0, r4
   1cc82:	f7ff febf 	bl	1ca04 <idx_inc>
   1cc86:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1cc88:	4620      	mov	r0, r4
   1cc8a:	f7ff fedf 	bl	1ca4c <max_utilization_update>
	__asm__ volatile(
   1cc8e:	f386 8811 	msr	BASEPRI, r6
   1cc92:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   1cc96:	bd70      	pop	{r4, r5, r6, pc}

0001cc98 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc9a:	4604      	mov	r4, r0
	__asm__ volatile(
   1cc9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cca0:	f3ef 8611 	mrs	r6, BASEPRI
   1cca4:	f383 8812 	msr	BASEPRI_MAX, r3
   1cca8:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1ccac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1ccb0:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1ccb2:	bf88      	it	hi
   1ccb4:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   1ccb6:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   1ccb8:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   1ccba:	b132      	cbz	r2, 1ccca <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   1ccbc:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   1ccc0:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   1ccc4:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   1ccc8:	d105      	bne.n	1ccd6 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   1ccca:	f386 8811 	msr	BASEPRI, r6
   1ccce:	f3bf 8f6f 	isb	sy
			item = NULL;
   1ccd2:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   1ccd4:	e02e      	b.n	1cd34 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   1ccd6:	2802      	cmp	r0, #2
   1ccd8:	d103      	bne.n	1cce2 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   1ccda:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   1ccde:	08ad      	lsrs	r5, r5, #2
   1cce0:	d105      	bne.n	1ccee <mpsc_pbuf_claim+0x56>
   1cce2:	07d0      	lsls	r0, r2, #31
   1cce4:	d414      	bmi.n	1cd10 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   1cce6:	69a3      	ldr	r3, [r4, #24]
   1cce8:	4638      	mov	r0, r7
   1ccea:	4798      	blx	r3
   1ccec:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   1ccee:	68a1      	ldr	r1, [r4, #8]
   1ccf0:	462a      	mov	r2, r5
   1ccf2:	4620      	mov	r0, r4
   1ccf4:	f7ff fe86 	bl	1ca04 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   1ccf8:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   1ccfa:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   1ccfc:	462a      	mov	r2, r5
   1ccfe:	4620      	mov	r0, r4
   1cd00:	f7ff fe80 	bl	1ca04 <idx_inc>
				buffer->rd_idx =
   1cd04:	60e0      	str	r0, [r4, #12]
   1cd06:	f386 8811 	msr	BASEPRI, r6
   1cd0a:	f3bf 8f6f 	isb	sy
	} while (cont);
   1cd0e:	e7c5      	b.n	1cc9c <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   1cd10:	f042 0202 	orr.w	r2, r2, #2
   1cd14:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   1cd18:	4638      	mov	r0, r7
   1cd1a:	69a3      	ldr	r3, [r4, #24]
   1cd1c:	68a5      	ldr	r5, [r4, #8]
   1cd1e:	4798      	blx	r3
   1cd20:	4629      	mov	r1, r5
   1cd22:	4602      	mov	r2, r0
   1cd24:	4620      	mov	r0, r4
   1cd26:	f7ff fe6d 	bl	1ca04 <idx_inc>
				buffer->tmp_rd_idx =
   1cd2a:	60a0      	str	r0, [r4, #8]
   1cd2c:	f386 8811 	msr	BASEPRI, r6
   1cd30:	f3bf 8f6f 	isb	sy
}
   1cd34:	4638      	mov	r0, r7
   1cd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cd38 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   1cd38:	b570      	push	{r4, r5, r6, lr}
   1cd3a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1cd3c:	6983      	ldr	r3, [r0, #24]
   1cd3e:	4608      	mov	r0, r1
{
   1cd40:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1cd42:	4798      	blx	r3
   1cd44:	4602      	mov	r2, r0
	__asm__ volatile(
   1cd46:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd4a:	f3ef 8611 	mrs	r6, BASEPRI
   1cd4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1cd56:	782b      	ldrb	r3, [r5, #0]
   1cd58:	f36f 0300 	bfc	r3, #0, #1
   1cd5c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1cd5e:	6923      	ldr	r3, [r4, #16]
   1cd60:	079b      	lsls	r3, r3, #30
   1cd62:	d505      	bpl.n	1cd70 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1cd64:	68e1      	ldr	r1, [r4, #12]
   1cd66:	69e3      	ldr	r3, [r4, #28]
   1cd68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1cd6c:	429d      	cmp	r5, r3
   1cd6e:	d112      	bne.n	1cd96 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   1cd70:	782b      	ldrb	r3, [r5, #0]
   1cd72:	f36f 0341 	bfc	r3, #1, #1
   1cd76:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1cd78:	68e1      	ldr	r1, [r4, #12]
   1cd7a:	4620      	mov	r0, r4
   1cd7c:	f7ff fe42 	bl	1ca04 <idx_inc>
   1cd80:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1cd82:	f386 8811 	msr	BASEPRI, r6
   1cd86:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1cd8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   1cd8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cd92:	f7fb bdb5 	b.w	18900 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1cd96:	682b      	ldr	r3, [r5, #0]
   1cd98:	f360 039f 	bfi	r3, r0, #2, #30
   1cd9c:	602b      	str	r3, [r5, #0]
   1cd9e:	e7f0      	b.n	1cd82 <mpsc_pbuf_free+0x4a>

0001cda0 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1cda0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1cda4:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1cda6:	bf88      	it	hi
   1cda8:	6a02      	ldrhi	r2, [r0, #32]
   1cdaa:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1cdac:	1e18      	subs	r0, r3, #0
   1cdae:	bf18      	it	ne
   1cdb0:	2001      	movne	r0, #1
   1cdb2:	4770      	bx	lr

0001cdb4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1cdb4:	4770      	bx	lr

0001cdb6 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1cdb6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1cdb8:	075b      	lsls	r3, r3, #29
   1cdba:	d40b      	bmi.n	1cdd4 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1cdbc:	6803      	ldr	r3, [r0, #0]
   1cdbe:	8842      	ldrh	r2, [r0, #2]
   1cdc0:	f3c3 2349 	ubfx	r3, r3, #9, #10
   1cdc4:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   1cdc8:	1898      	adds	r0, r3, r2
   1cdca:	3017      	adds	r0, #23
   1cdcc:	f020 0007 	bic.w	r0, r0, #7
   1cdd0:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1cdd2:	4770      	bx	lr
	return 0;
   1cdd4:	2000      	movs	r0, #0
}
   1cdd6:	4770      	bx	lr

0001cdd8 <dummy_timestamp>:
}
   1cdd8:	2000      	movs	r0, #0
   1cdda:	4770      	bx	lr

0001cddc <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1cddc:	f000 bdd6 	b.w	1d98c <sys_clock_cycle_get_32>

0001cde0 <atomic_inc>:
{
   1cde0:	4603      	mov	r3, r0
}
   1cde2:	f3bf 8f5b 	dmb	ish
   1cde6:	e853 0f00 	ldrex	r0, [r3]
   1cdea:	1c42      	adds	r2, r0, #1
   1cdec:	e843 2100 	strex	r1, r2, [r3]
   1cdf0:	2900      	cmp	r1, #0
   1cdf2:	d1f8      	bne.n	1cde6 <atomic_inc+0x6>
   1cdf4:	f3bf 8f5b 	dmb	ish
   1cdf8:	4770      	bx	lr

0001cdfa <z_log_vprintk>:
{
   1cdfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   1cdfc:	2300      	movs	r3, #0
   1cdfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ce02:	e9cd 3300 	strd	r3, r3, [sp]
   1ce06:	461a      	mov	r2, r3
   1ce08:	4619      	mov	r1, r3
   1ce0a:	4618      	mov	r0, r3
   1ce0c:	f7f5 f930 	bl	12070 <z_impl_z_log_msg_runtime_vcreate>
}
   1ce10:	b005      	add	sp, #20
   1ce12:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce16 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1ce16:	2001      	movs	r0, #1
   1ce18:	f7f4 bf16 	b.w	11c48 <z_log_dropped>

0001ce1c <z_log_get_tag>:
}
   1ce1c:	2000      	movs	r0, #0
   1ce1e:	4770      	bx	lr

0001ce20 <z_cbprintf_cpy>:
{
   1ce20:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1ce22:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1ce26:	1b9b      	subs	r3, r3, r6
   1ce28:	428b      	cmp	r3, r1
{
   1ce2a:	460c      	mov	r4, r1
   1ce2c:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1ce2e:	d30a      	bcc.n	1ce46 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1ce30:	6813      	ldr	r3, [r2, #0]
   1ce32:	460a      	mov	r2, r1
   1ce34:	4601      	mov	r1, r0
   1ce36:	1998      	adds	r0, r3, r6
   1ce38:	f000 f8d8 	bl	1cfec <memcpy>
	desc->off += len;
   1ce3c:	68ab      	ldr	r3, [r5, #8]
   1ce3e:	4423      	add	r3, r4
   1ce40:	60ab      	str	r3, [r5, #8]
	return len;
   1ce42:	4620      	mov	r0, r4
}
   1ce44:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1ce46:	f06f 001b 	mvn.w	r0, #27
   1ce4a:	e7fb      	b.n	1ce44 <z_cbprintf_cpy+0x24>

0001ce4c <z_log_msg_finalize>:
{
   1ce4c:	b570      	push	{r4, r5, r6, lr}
   1ce4e:	460e      	mov	r6, r1
   1ce50:	4615      	mov	r5, r2
   1ce52:	4619      	mov	r1, r3
	if (!msg) {
   1ce54:	4604      	mov	r4, r0
   1ce56:	b918      	cbnz	r0, 1ce60 <z_log_msg_finalize+0x14>
}
   1ce58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1ce5c:	f7f4 bef4 	b.w	11c48 <z_log_dropped>
	if (data) {
   1ce60:	b13b      	cbz	r3, 1ce72 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1ce62:	f3c2 2349 	ubfx	r3, r2, #9, #10
   1ce66:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   1ce68:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1ce6c:	4418      	add	r0, r3
   1ce6e:	f000 f8bd 	bl	1cfec <memcpy>
	msg->hdr.source = source;
   1ce72:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1ce76:	4620      	mov	r0, r4
}
   1ce78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1ce7c:	f7f5 b870 	b.w	11f60 <z_log_msg_commit>

0001ce80 <buffer_write>:
{
   1ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce82:	4606      	mov	r6, r0
   1ce84:	460d      	mov	r5, r1
   1ce86:	4614      	mov	r4, r2
   1ce88:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ce8a:	4621      	mov	r1, r4
   1ce8c:	4628      	mov	r0, r5
   1ce8e:	463a      	mov	r2, r7
   1ce90:	47b0      	blx	r6
	} while (len != 0);
   1ce92:	1a24      	subs	r4, r4, r0
		buf += processed;
   1ce94:	4405      	add	r5, r0
	} while (len != 0);
   1ce96:	d1f8      	bne.n	1ce8a <buffer_write+0xa>
}
   1ce98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ce9a <cbvprintf>:
{
   1ce9a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1ce9c:	2400      	movs	r4, #0
   1ce9e:	9400      	str	r4, [sp, #0]
   1cea0:	f7f4 fa38 	bl	11314 <z_cbvprintf_impl>
}
   1cea4:	b002      	add	sp, #8
   1cea6:	bd10      	pop	{r4, pc}

0001cea8 <log_output_flush>:
{
   1cea8:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1ceaa:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1ceac:	6881      	ldr	r1, [r0, #8]
{
   1ceae:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1ceb0:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ceb4:	6800      	ldr	r0, [r0, #0]
   1ceb6:	f7ff ffe3 	bl	1ce80 <buffer_write>
	output->control_block->offset = 0;
   1ceba:	6863      	ldr	r3, [r4, #4]
   1cebc:	2200      	movs	r2, #0
   1cebe:	601a      	str	r2, [r3, #0]
}
   1cec0:	bd10      	pop	{r4, pc}

0001cec2 <out_func>:
{
   1cec2:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1cec4:	684b      	ldr	r3, [r1, #4]
   1cec6:	681a      	ldr	r2, [r3, #0]
   1cec8:	68cb      	ldr	r3, [r1, #12]
   1ceca:	429a      	cmp	r2, r3
{
   1cecc:	4605      	mov	r5, r0
   1cece:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ced0:	d102      	bne.n	1ced8 <out_func+0x16>
		log_output_flush(out_ctx);
   1ced2:	4608      	mov	r0, r1
   1ced4:	f7ff ffe8 	bl	1cea8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ced8:	6863      	ldr	r3, [r4, #4]
   1ceda:	f3bf 8f5b 	dmb	ish
   1cede:	e853 2f00 	ldrex	r2, [r3]
   1cee2:	1c51      	adds	r1, r2, #1
   1cee4:	e843 1000 	strex	r0, r1, [r3]
   1cee8:	2800      	cmp	r0, #0
   1ceea:	d1f8      	bne.n	1cede <out_func+0x1c>
   1ceec:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1cef0:	68a3      	ldr	r3, [r4, #8]
   1cef2:	549d      	strb	r5, [r3, r2]
}
   1cef4:	2000      	movs	r0, #0
   1cef6:	bd38      	pop	{r3, r4, r5, pc}

0001cef8 <cr_out_func>:
	if (c == '\n') {
   1cef8:	280a      	cmp	r0, #10
{
   1cefa:	b538      	push	{r3, r4, r5, lr}
   1cefc:	4604      	mov	r4, r0
   1cefe:	460d      	mov	r5, r1
	if (c == '\n') {
   1cf00:	d102      	bne.n	1cf08 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1cf02:	200d      	movs	r0, #13
   1cf04:	f7ff ffdd 	bl	1cec2 <out_func>
	out_func(c, ctx);
   1cf08:	4629      	mov	r1, r5
   1cf0a:	4620      	mov	r0, r4
   1cf0c:	f7ff ffd9 	bl	1cec2 <out_func>
}
   1cf10:	2000      	movs	r0, #0
   1cf12:	bd38      	pop	{r3, r4, r5, pc}

0001cf14 <log_backend_uart_init>:
}
   1cf14:	4770      	bx	lr

0001cf16 <abort_function>:
{
   1cf16:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1cf18:	2000      	movs	r0, #0
   1cf1a:	f7f4 fdad 	bl	11a78 <sys_reboot>

0001cf1e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1cf1e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1cf20:	6800      	ldr	r0, [r0, #0]
   1cf22:	f7f5 bddb 	b.w	12adc <z_arm_fatal_error>

0001cf26 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1cf26:	2100      	movs	r1, #0
   1cf28:	2001      	movs	r0, #1
   1cf2a:	f7f5 bdd7 	b.w	12adc <z_arm_fatal_error>

0001cf2e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1cf2e:	b508      	push	{r3, lr}
	handler();
   1cf30:	f7f5 fe9a 	bl	12c68 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1cf34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1cf38:	f7f5 bf72 	b.w	12e20 <z_arm_exc_exit>

0001cf3c <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1cf3c:	2300      	movs	r3, #0
   1cf3e:	f7f5 b843 	b.w	11fc8 <z_impl_z_log_msg_static_create>

0001cf42 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1cf42:	3901      	subs	r1, #1
   1cf44:	4603      	mov	r3, r0
   1cf46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cf4a:	b90a      	cbnz	r2, 1cf50 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1cf4c:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1cf4e:	4770      	bx	lr
		*d = *s;
   1cf50:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1cf54:	e7f7      	b.n	1cf46 <strcpy+0x4>

0001cf56 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1cf56:	4603      	mov	r3, r0
	size_t n = 0;
   1cf58:	2000      	movs	r0, #0

	while (*s != '\0') {
   1cf5a:	5c1a      	ldrb	r2, [r3, r0]
   1cf5c:	b902      	cbnz	r2, 1cf60 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1cf5e:	4770      	bx	lr
		n++;
   1cf60:	3001      	adds	r0, #1
   1cf62:	e7fa      	b.n	1cf5a <strlen+0x4>

0001cf64 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1cf64:	4603      	mov	r3, r0
	size_t n = 0;
   1cf66:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1cf68:	5c1a      	ldrb	r2, [r3, r0]
   1cf6a:	b10a      	cbz	r2, 1cf70 <strnlen+0xc>
   1cf6c:	4288      	cmp	r0, r1
   1cf6e:	d100      	bne.n	1cf72 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1cf70:	4770      	bx	lr
		n++;
   1cf72:	3001      	adds	r0, #1
   1cf74:	e7f8      	b.n	1cf68 <strnlen+0x4>

0001cf76 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1cf76:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1cf78:	460b      	mov	r3, r1
   1cf7a:	4605      	mov	r5, r0
   1cf7c:	b16a      	cbz	r2, 1cf9a <strncmp+0x24>
   1cf7e:	f810 6b01 	ldrb.w	r6, [r0], #1
   1cf82:	781c      	ldrb	r4, [r3, #0]
   1cf84:	42b4      	cmp	r4, r6
   1cf86:	f101 0101 	add.w	r1, r1, #1
   1cf8a:	d100      	bne.n	1cf8e <strncmp+0x18>
   1cf8c:	b91c      	cbnz	r4, 1cf96 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1cf8e:	782a      	ldrb	r2, [r5, #0]
   1cf90:	781b      	ldrb	r3, [r3, #0]
   1cf92:	1ad0      	subs	r0, r2, r3
   1cf94:	e002      	b.n	1cf9c <strncmp+0x26>
		n--;
   1cf96:	3a01      	subs	r2, #1
   1cf98:	e7ee      	b.n	1cf78 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   1cf9a:	4610      	mov	r0, r2
}
   1cf9c:	bd70      	pop	{r4, r5, r6, pc}

0001cf9e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1cf9e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1cfa0:	b15a      	cbz	r2, 1cfba <memcmp+0x1c>
   1cfa2:	3901      	subs	r1, #1
   1cfa4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1cfa6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cfaa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1cfae:	42a0      	cmp	r0, r4
   1cfb0:	d001      	beq.n	1cfb6 <memcmp+0x18>
   1cfb2:	429a      	cmp	r2, r3
   1cfb4:	d0f7      	beq.n	1cfa6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1cfb6:	1ad0      	subs	r0, r2, r3
}
   1cfb8:	bd10      	pop	{r4, pc}
		return 0;
   1cfba:	4610      	mov	r0, r2
   1cfbc:	e7fc      	b.n	1cfb8 <memcmp+0x1a>

0001cfbe <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1cfbe:	1a43      	subs	r3, r0, r1
   1cfc0:	4293      	cmp	r3, r2
{
   1cfc2:	b510      	push	{r4, lr}
   1cfc4:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1cfc8:	d308      	bcc.n	1cfdc <memmove+0x1e>
   1cfca:	3901      	subs	r1, #1
	char *dest = d;
   1cfcc:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1cfce:	429a      	cmp	r2, r3
   1cfd0:	d00b      	beq.n	1cfea <memmove+0x2c>
			*dest = *src;
   1cfd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1cfd6:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1cfda:	e7f8      	b.n	1cfce <memmove+0x10>
   1cfdc:	440a      	add	r2, r1
			dest[n] = src[n];
   1cfde:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1cfe2:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1cfe6:	428a      	cmp	r2, r1
   1cfe8:	d1f9      	bne.n	1cfde <memmove+0x20>
		}
	}

	return d;
}
   1cfea:	bd10      	pop	{r4, pc}

0001cfec <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1cfec:	b510      	push	{r4, lr}
   1cfee:	1e43      	subs	r3, r0, #1
   1cff0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1cff2:	4291      	cmp	r1, r2
   1cff4:	d100      	bne.n	1cff8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1cff6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1cff8:	f811 4b01 	ldrb.w	r4, [r1], #1
   1cffc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d000:	e7f7      	b.n	1cff2 <memcpy+0x6>

0001d002 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1d002:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1d004:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1d006:	4603      	mov	r3, r0
	while (n > 0) {
   1d008:	4293      	cmp	r3, r2
   1d00a:	d100      	bne.n	1d00e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d00c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1d00e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d012:	e7f9      	b.n	1d008 <memset+0x6>

0001d014 <_stdout_hook_default>:
}
   1d014:	f04f 30ff 	mov.w	r0, #4294967295
   1d018:	4770      	bx	lr

0001d01a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1d01a:	2806      	cmp	r0, #6
   1d01c:	d108      	bne.n	1d030 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1d01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d022:	2201      	movs	r2, #1
   1d024:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1d028:	f3bf 8f4f 	dsb	sy
        __WFE();
   1d02c:	bf20      	wfe
    while (true)
   1d02e:	e7fd      	b.n	1d02c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1d030:	4770      	bx	lr

0001d032 <pm_state_exit_post_ops>:
   1d032:	2300      	movs	r3, #0
   1d034:	f383 8811 	msr	BASEPRI, r3
   1d038:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1d03c:	4770      	bx	lr

0001d03e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1d03e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1d040:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1d042:	2106      	movs	r1, #6
{
   1d044:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1d046:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1d04a:	f7fa fae3 	bl	17614 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1d04e:	b918      	cbnz	r0, 1d058 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1d050:	79a3      	ldrb	r3, [r4, #6]
   1d052:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d056:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1d058:	bd10      	pop	{r4, pc}

0001d05a <hci_vendor_event>:
}
   1d05a:	4770      	bx	lr

0001d05c <z_log_msg_static_create.constprop.0>:
   1d05c:	2300      	movs	r3, #0
   1d05e:	f7f4 bfb3 	b.w	11fc8 <z_impl_z_log_msg_static_create>

0001d062 <bt_addr_le_eq>:
{
   1d062:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1d064:	2207      	movs	r2, #7
   1d066:	f7ff ff9a 	bl	1cf9e <memcmp>
}
   1d06a:	fab0 f080 	clz	r0, r0
   1d06e:	0940      	lsrs	r0, r0, #5
   1d070:	bd08      	pop	{r3, pc}

0001d072 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d072:	f3bf 8f5b 	dmb	ish
   1d076:	6800      	ldr	r0, [r0, #0]
   1d078:	f3bf 8f5b 	dmb	ish
}
   1d07c:	4770      	bx	lr

0001d07e <z_log_msg_static_create.constprop.0>:
   1d07e:	2300      	movs	r3, #0
   1d080:	f7f4 bfa2 	b.w	11fc8 <z_impl_z_log_msg_static_create>

0001d084 <is_adv_using_rand_addr>:
{
   1d084:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1d086:	f7f8 f8bf 	bl	15208 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   1d08a:	b120      	cbz	r0, 1d096 <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d08c:	3010      	adds	r0, #16
   1d08e:	f7ff fff0 	bl	1d072 <atomic_get>
   1d092:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
   1d096:	bd08      	pop	{r3, pc}

0001d098 <bt_lookup_id_addr>:
	return addr;
   1d098:	2800      	cmp	r0, #0
}
   1d09a:	bf0c      	ite	eq
   1d09c:	4608      	moveq	r0, r1
   1d09e:	2000      	movne	r0, #0
   1d0a0:	4770      	bx	lr

0001d0a2 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1d0a2:	b118      	cbz	r0, 1d0ac <bt_id_set_adv_random_addr+0xa>
   1d0a4:	b111      	cbz	r1, 1d0ac <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1d0a6:	4608      	mov	r0, r1
   1d0a8:	f7f7 bd34 	b.w	14b14 <set_random_address>
}
   1d0ac:	f06f 0015 	mvn.w	r0, #21
   1d0b0:	4770      	bx	lr

0001d0b2 <bt_id_set_private_addr>:
{
   1d0b2:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   1d0b4:	b980      	cbnz	r0, 1d0d8 <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1d0b6:	2106      	movs	r1, #6
   1d0b8:	4668      	mov	r0, sp
   1d0ba:	f7fa faab 	bl	17614 <bt_rand>
	if (err) {
   1d0be:	b940      	cbnz	r0, 1d0d2 <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   1d0c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1d0c4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1d0c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d0ca:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1d0ce:	f7f7 fd21 	bl	14b14 <set_random_address>
}
   1d0d2:	b003      	add	sp, #12
   1d0d4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1d0d8:	f06f 0015 	mvn.w	r0, #21
   1d0dc:	e7f9      	b.n	1d0d2 <bt_id_set_private_addr+0x20>

0001d0de <bt_id_set_adv_private_addr>:
{
   1d0de:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1d0e0:	4604      	mov	r4, r0
   1d0e2:	b180      	cbz	r0, 1d106 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1d0e4:	2106      	movs	r1, #6
   1d0e6:	4668      	mov	r0, sp
   1d0e8:	f7fa fa94 	bl	17614 <bt_rand>
	if (err) {
   1d0ec:	b948      	cbnz	r0, 1d102 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1d0ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1d0f2:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1d0f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1d0f8:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1d0fa:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1d0fe:	f7ff ffd0 	bl	1d0a2 <bt_id_set_adv_random_addr>
}
   1d102:	b002      	add	sp, #8
   1d104:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d106:	f06f 0015 	mvn.w	r0, #21
   1d10a:	e7fa      	b.n	1d102 <bt_id_set_adv_private_addr+0x24>

0001d10c <bt_id_scan_random_addr_check>:
{
   1d10c:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1d10e:	f7f8 f87b 	bl	15208 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1d112:	b110      	cbz	r0, 1d11a <bt_id_scan_random_addr_check+0xe>
   1d114:	3010      	adds	r0, #16
   1d116:	f7ff ffac 	bl	1d072 <atomic_get>
}
   1d11a:	2001      	movs	r0, #1
   1d11c:	bd08      	pop	{r3, pc}

0001d11e <get_adv_channel_map>:
{
   1d11e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1d120:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1d124:	bf0c      	ite	eq
   1d126:	2007      	moveq	r0, #7
   1d128:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1d12a:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1d12c:	bf48      	it	mi
   1d12e:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1d132:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1d134:	bf48      	it	mi
   1d136:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1d13a:	4770      	bx	lr

0001d13c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d13c:	f3bf 8f5b 	dmb	ish
   1d140:	6800      	ldr	r0, [r0, #0]
   1d142:	f3bf 8f5b 	dmb	ish
}
   1d146:	4770      	bx	lr

0001d148 <atomic_and>:
{
   1d148:	b510      	push	{r4, lr}
   1d14a:	4603      	mov	r3, r0
}
   1d14c:	f3bf 8f5b 	dmb	ish
   1d150:	e853 0f00 	ldrex	r0, [r3]
   1d154:	ea00 0201 	and.w	r2, r0, r1
   1d158:	e843 2400 	strex	r4, r2, [r3]
   1d15c:	2c00      	cmp	r4, #0
   1d15e:	d1f7      	bne.n	1d150 <atomic_and+0x8>
   1d160:	f3bf 8f5b 	dmb	ish
   1d164:	bd10      	pop	{r4, pc}

0001d166 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d166:	2301      	movs	r3, #1
{
   1d168:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d16a:	fa03 f101 	lsl.w	r1, r3, r1
{
   1d16e:	4604      	mov	r4, r0
	if (val) {
   1d170:	b162      	cbz	r2, 1d18c <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d172:	f3bf 8f5b 	dmb	ish
   1d176:	e854 3f00 	ldrex	r3, [r4]
   1d17a:	430b      	orrs	r3, r1
   1d17c:	e844 3200 	strex	r2, r3, [r4]
   1d180:	2a00      	cmp	r2, #0
   1d182:	d1f8      	bne.n	1d176 <atomic_set_bit_to+0x10>
   1d184:	f3bf 8f5b 	dmb	ish
	}
}
   1d188:	bc10      	pop	{r4}
   1d18a:	4770      	bx	lr
   1d18c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d18e:	43c9      	mvns	r1, r1
   1d190:	f7ff bfda 	b.w	1d148 <atomic_and>

0001d194 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d198:	b087      	sub	sp, #28
   1d19a:	4605      	mov	r5, r0
   1d19c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1d1a0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1d1a4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1d1a8:	460c      	mov	r4, r1
   1d1aa:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1d1ac:	2100      	movs	r1, #0
   1d1ae:	2210      	movs	r2, #16
   1d1b0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1d1b2:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1d1b4:	f7ff ff25 	bl	1d002 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1d1b8:	b9ee      	cbnz	r6, 1d1f6 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   1d1ba:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1d1be:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1d1c0:	a902      	add	r1, sp, #8
   1d1c2:	f242 0008 	movw	r0, #8200	; 0x2008
   1d1c6:	f7f7 ff5f 	bl	15088 <hci_set_ad>
		if (err) {
   1d1ca:	4604      	mov	r4, r0
   1d1cc:	b978      	cbnz	r0, 1d1ee <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   1d1ce:	f1ba 0f00 	cmp.w	sl, #0
   1d1d2:	d13e      	bne.n	1d252 <le_adv_update.constprop.0+0xbe>
   1d1d4:	3510      	adds	r5, #16
   1d1d6:	f3bf 8f5b 	dmb	ish
   1d1da:	e855 3f00 	ldrex	r3, [r5]
   1d1de:	f043 0304 	orr.w	r3, r3, #4
   1d1e2:	e845 3200 	strex	r2, r3, [r5]
   1d1e6:	2a00      	cmp	r2, #0
   1d1e8:	d1f7      	bne.n	1d1da <le_adv_update.constprop.0+0x46>
   1d1ea:	f3bf 8f5b 	dmb	ish
}
   1d1ee:	4620      	mov	r0, r4
   1d1f0:	b007      	add	sp, #28
   1d1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1d1f6:	f7f7 fc33 	bl	14a60 <bt_get_name>
   1d1fa:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1d1fc:	b9e4      	cbnz	r4, 1d238 <le_adv_update.constprop.0+0xa4>
   1d1fe:	bb37      	cbnz	r7, 1d24e <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1d200:	4658      	mov	r0, fp
   1d202:	f7ff fea8 	bl	1cf56 <strlen>
   1d206:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1d208:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1d20a:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1d20e:	f88d 3000 	strb.w	r3, [sp]
   1d212:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1d216:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1d21a:	d1d0      	bne.n	1d1be <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   1d21c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1d220:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1d222:	2202      	movs	r2, #2
   1d224:	e7cc      	b.n	1d1c0 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1d226:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1d22a:	3a08      	subs	r2, #8
   1d22c:	2a01      	cmp	r2, #1
   1d22e:	d925      	bls.n	1d27c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1d230:	3301      	adds	r3, #1
   1d232:	4598      	cmp	r8, r3
   1d234:	d1f7      	bne.n	1d226 <le_adv_update.constprop.0+0x92>
   1d236:	e7e2      	b.n	1d1fe <le_adv_update.constprop.0+0x6a>
   1d238:	2300      	movs	r3, #0
   1d23a:	e7fa      	b.n	1d232 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1d23c:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1d240:	3a08      	subs	r2, #8
   1d242:	2a01      	cmp	r2, #1
   1d244:	d91a      	bls.n	1d27c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1d246:	3301      	adds	r3, #1
   1d248:	4599      	cmp	r9, r3
   1d24a:	d1f7      	bne.n	1d23c <le_adv_update.constprop.0+0xa8>
   1d24c:	e7d8      	b.n	1d200 <le_adv_update.constprop.0+0x6c>
   1d24e:	2300      	movs	r3, #0
   1d250:	e7fa      	b.n	1d248 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1d252:	2e02      	cmp	r6, #2
   1d254:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1d258:	bf08      	it	eq
   1d25a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1d25c:	a902      	add	r1, sp, #8
			d_len = 2;
   1d25e:	bf08      	it	eq
   1d260:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1d262:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1d266:	bf08      	it	eq
   1d268:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1d26c:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1d270:	f7f7 ff0a 	bl	15088 <hci_set_ad>
		if (err) {
   1d274:	2800      	cmp	r0, #0
   1d276:	d0ad      	beq.n	1d1d4 <le_adv_update.constprop.0+0x40>
   1d278:	4604      	mov	r4, r0
   1d27a:	e7b8      	b.n	1d1ee <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   1d27c:	f06f 0415 	mvn.w	r4, #21
   1d280:	e7b5      	b.n	1d1ee <le_adv_update.constprop.0+0x5a>

0001d282 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1d282:	6843      	ldr	r3, [r0, #4]
   1d284:	f013 0008 	ands.w	r0, r3, #8
   1d288:	d00a      	beq.n	1d2a0 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1d28a:	035a      	lsls	r2, r3, #13
   1d28c:	d407      	bmi.n	1d29e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1d28e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1d292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1d296:	bf14      	ite	ne
   1d298:	2002      	movne	r0, #2
   1d29a:	2001      	moveq	r0, #1
   1d29c:	4770      	bx	lr
   1d29e:	2001      	movs	r0, #1
}
   1d2a0:	4770      	bx	lr

0001d2a2 <bt_le_adv_set_enable_legacy>:
{
   1d2a2:	b570      	push	{r4, r5, r6, lr}
   1d2a4:	4606      	mov	r6, r0
   1d2a6:	b086      	sub	sp, #24
   1d2a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1d2aa:	f242 000a 	movw	r0, #8202	; 0x200a
   1d2ae:	2101      	movs	r1, #1
   1d2b0:	f7f6 fdd2 	bl	13e58 <bt_hci_cmd_create>
	if (!buf) {
   1d2b4:	4604      	mov	r4, r0
   1d2b6:	b1b0      	cbz	r0, 1d2e6 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1d2b8:	300c      	adds	r0, #12
	if (enable) {
   1d2ba:	b195      	cbz	r5, 1d2e2 <bt_le_adv_set_enable_legacy+0x40>
   1d2bc:	2101      	movs	r1, #1
   1d2be:	f000 f877 	bl	1d3b0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1d2c2:	f106 0210 	add.w	r2, r6, #16
   1d2c6:	a903      	add	r1, sp, #12
   1d2c8:	4620      	mov	r0, r4
   1d2ca:	9500      	str	r5, [sp, #0]
   1d2cc:	2307      	movs	r3, #7
   1d2ce:	f7f6 fdb1 	bl	13e34 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1d2d2:	2200      	movs	r2, #0
   1d2d4:	4621      	mov	r1, r4
   1d2d6:	f242 000a 	movw	r0, #8202	; 0x200a
   1d2da:	f7f6 fdf7 	bl	13ecc <bt_hci_cmd_send_sync>
}
   1d2de:	b006      	add	sp, #24
   1d2e0:	bd70      	pop	{r4, r5, r6, pc}
   1d2e2:	4629      	mov	r1, r5
   1d2e4:	e7eb      	b.n	1d2be <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1d2e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d2ea:	e7f8      	b.n	1d2de <bt_le_adv_set_enable_legacy+0x3c>

0001d2ec <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1d2ec:	3018      	adds	r0, #24
   1d2ee:	f000 be90 	b.w	1e012 <k_work_cancel_delayable>

0001d2f2 <atomic_and>:
{
   1d2f2:	b510      	push	{r4, lr}
   1d2f4:	4603      	mov	r3, r0
}
   1d2f6:	f3bf 8f5b 	dmb	ish
   1d2fa:	e853 0f00 	ldrex	r0, [r3]
   1d2fe:	ea00 0201 	and.w	r2, r0, r1
   1d302:	e843 2400 	strex	r4, r2, [r3]
   1d306:	2c00      	cmp	r4, #0
   1d308:	d1f7      	bne.n	1d2fa <atomic_and+0x8>
   1d30a:	f3bf 8f5b 	dmb	ish
   1d30e:	bd10      	pop	{r4, pc}

0001d310 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   1d310:	f7f8 b916 	b.w	15540 <bt_le_scan_set_enable_legacy>

0001d314 <fixed_data_unref>:
}
   1d314:	4770      	bx	lr

0001d316 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d316:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d318:	6849      	ldr	r1, [r1, #4]
   1d31a:	6809      	ldr	r1, [r1, #0]
   1d31c:	f7f8 bb2e 	b.w	1597c <net_buf_alloc_len>

0001d320 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1d320:	f7fb baba 	b.w	18898 <z_impl_k_queue_get>

0001d324 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1d324:	6883      	ldr	r3, [r0, #8]
   1d326:	440b      	add	r3, r1
   1d328:	6003      	str	r3, [r0, #0]
}
   1d32a:	4770      	bx	lr

0001d32c <net_buf_slist_put>:
	__asm__ volatile(
   1d32c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d330:	f3ef 8211 	mrs	r2, BASEPRI
   1d334:	f383 8812 	msr	BASEPRI_MAX, r3
   1d338:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1d33c:	2300      	movs	r3, #0
   1d33e:	600b      	str	r3, [r1, #0]
	return list->tail;
   1d340:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   1d342:	b933      	cbnz	r3, 1d352 <net_buf_slist_put+0x26>
	list->head = node;
   1d344:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   1d348:	f382 8811 	msr	BASEPRI, r2
   1d34c:	f3bf 8f6f 	isb	sy
}
   1d350:	4770      	bx	lr
	parent->next = child;
   1d352:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1d354:	6041      	str	r1, [r0, #4]
}
   1d356:	e7f7      	b.n	1d348 <net_buf_slist_put+0x1c>

0001d358 <net_buf_slist_get>:
{
   1d358:	b510      	push	{r4, lr}
   1d35a:	4603      	mov	r3, r0
	__asm__ volatile(
   1d35c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d360:	f3ef 8111 	mrs	r1, BASEPRI
   1d364:	f382 8812 	msr	BASEPRI_MAX, r2
   1d368:	f3bf 8f6f 	isb	sy
	return list->head;
   1d36c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1d36e:	b128      	cbz	r0, 1d37c <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d370:	685c      	ldr	r4, [r3, #4]
	return node->next;
   1d372:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1d374:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d376:	42a0      	cmp	r0, r4
	list->tail = node;
   1d378:	bf08      	it	eq
   1d37a:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   1d37c:	f381 8811 	msr	BASEPRI, r1
   1d380:	f3bf 8f6f 	isb	sy
}
   1d384:	bd10      	pop	{r4, pc}

0001d386 <net_buf_put>:
	k_fifo_put(fifo, buf);
   1d386:	f000 bd6d 	b.w	1de64 <k_queue_append>

0001d38a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1d38a:	7a02      	ldrb	r2, [r0, #8]
   1d38c:	3201      	adds	r2, #1
   1d38e:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1d390:	4770      	bx	lr

0001d392 <net_buf_simple_add>:
	return buf->data + buf->len;
   1d392:	8883      	ldrh	r3, [r0, #4]
   1d394:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1d396:	4419      	add	r1, r3
   1d398:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1d39a:	18d0      	adds	r0, r2, r3
   1d39c:	4770      	bx	lr

0001d39e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1d39e:	b430      	push	{r4, r5}
   1d3a0:	8884      	ldrh	r4, [r0, #4]
   1d3a2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1d3a4:	18a3      	adds	r3, r4, r2
   1d3a6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d3a8:	1928      	adds	r0, r5, r4
}
   1d3aa:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d3ac:	f7ff be1e 	b.w	1cfec <memcpy>

0001d3b0 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1d3b0:	b510      	push	{r4, lr}
   1d3b2:	8883      	ldrh	r3, [r0, #4]
   1d3b4:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1d3b6:	1c5c      	adds	r4, r3, #1
   1d3b8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1d3ba:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1d3bc:	18d0      	adds	r0, r2, r3
   1d3be:	bd10      	pop	{r4, pc}

0001d3c0 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1d3c0:	8882      	ldrh	r2, [r0, #4]
   1d3c2:	1a52      	subs	r2, r2, r1
{
   1d3c4:	4603      	mov	r3, r0
	buf->len -= len;
   1d3c6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1d3c8:	6800      	ldr	r0, [r0, #0]
   1d3ca:	4408      	add	r0, r1
   1d3cc:	6018      	str	r0, [r3, #0]
}
   1d3ce:	4770      	bx	lr

0001d3d0 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1d3d0:	4603      	mov	r3, r0
	void *data = buf->data;
   1d3d2:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1d3d4:	889a      	ldrh	r2, [r3, #4]
   1d3d6:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1d3d8:	4401      	add	r1, r0
	buf->len -= len;
   1d3da:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1d3dc:	6019      	str	r1, [r3, #0]

	return data;
}
   1d3de:	4770      	bx	lr

0001d3e0 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1d3e0:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1d3e2:	6803      	ldr	r3, [r0, #0]
   1d3e4:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d3e6:	2101      	movs	r1, #1
   1d3e8:	f7ff ffea 	bl	1d3c0 <net_buf_simple_pull>

	return val;
}
   1d3ec:	4620      	mov	r0, r4
   1d3ee:	bd10      	pop	{r4, pc}

0001d3f0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d3f0:	6802      	ldr	r2, [r0, #0]
   1d3f2:	6880      	ldr	r0, [r0, #8]
}
   1d3f4:	1a10      	subs	r0, r2, r0
   1d3f6:	4770      	bx	lr

0001d3f8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d3f8:	6903      	ldr	r3, [r0, #16]
   1d3fa:	b2c9      	uxtb	r1, r1
   1d3fc:	220c      	movs	r2, #12
   1d3fe:	fb01 3302 	mla	r3, r1, r2, r3
   1d402:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1d404:	f000 0007 	and.w	r0, r0, #7
   1d408:	4770      	bx	lr

0001d40a <set_on_state>:
	__asm__ volatile(
   1d40a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d40e:	f3ef 8211 	mrs	r2, BASEPRI
   1d412:	f383 8812 	msr	BASEPRI_MAX, r3
   1d416:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d41a:	6803      	ldr	r3, [r0, #0]
   1d41c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d420:	f043 0302 	orr.w	r3, r3, #2
   1d424:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d426:	f382 8811 	msr	BASEPRI, r2
   1d42a:	f3bf 8f6f 	isb	sy
}
   1d42e:	4770      	bx	lr

0001d430 <stop>:
{
   1d430:	b570      	push	{r4, r5, r6, lr}
   1d432:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1d434:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1d436:	f04f 0440 	mov.w	r4, #64	; 0x40
   1d43a:	f3ef 8511 	mrs	r5, BASEPRI
   1d43e:	f384 8812 	msr	BASEPRI_MAX, r4
   1d442:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d446:	260c      	movs	r6, #12
   1d448:	fb06 3401 	mla	r4, r6, r1, r3
   1d44c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d44e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1d452:	d008      	beq.n	1d466 <stop+0x36>
   1d454:	42a2      	cmp	r2, r4
   1d456:	d006      	beq.n	1d466 <stop+0x36>
	__asm__ volatile(
   1d458:	f385 8811 	msr	BASEPRI, r5
   1d45c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1d460:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d464:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d466:	4371      	muls	r1, r6
   1d468:	440b      	add	r3, r1
   1d46a:	2201      	movs	r2, #1
   1d46c:	641a      	str	r2, [r3, #64]	; 0x40
   1d46e:	f385 8811 	msr	BASEPRI, r5
   1d472:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1d476:	6843      	ldr	r3, [r0, #4]
   1d478:	440b      	add	r3, r1
   1d47a:	685b      	ldr	r3, [r3, #4]
   1d47c:	4798      	blx	r3
	return 0;
   1d47e:	2000      	movs	r0, #0
   1d480:	e7f0      	b.n	1d464 <stop+0x34>

0001d482 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d482:	2280      	movs	r2, #128	; 0x80
   1d484:	f7ff bfd4 	b.w	1d430 <stop>

0001d488 <async_start>:
{
   1d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d48a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1d48c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1d48e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d490:	f04f 0540 	mov.w	r5, #64	; 0x40
   1d494:	f3ef 8611 	mrs	r6, BASEPRI
   1d498:	f385 8812 	msr	BASEPRI_MAX, r5
   1d49c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d4a0:	250c      	movs	r5, #12
   1d4a2:	4369      	muls	r1, r5
   1d4a4:	440c      	add	r4, r1
   1d4a6:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d4a8:	f005 0c07 	and.w	ip, r5, #7
   1d4ac:	f1bc 0f01 	cmp.w	ip, #1
   1d4b0:	d10b      	bne.n	1d4ca <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d4b2:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   1d4b4:	f386 8811 	msr	BASEPRI, r6
   1d4b8:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1d4bc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d4c0:	6843      	ldr	r3, [r0, #4]
   1d4c2:	585b      	ldr	r3, [r3, r1]
   1d4c4:	4798      	blx	r3
	return 0;
   1d4c6:	2000      	movs	r0, #0
}
   1d4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d4ca:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1d4ce:	42af      	cmp	r7, r5
   1d4d0:	f386 8811 	msr	BASEPRI, r6
   1d4d4:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1d4d8:	bf0c      	ite	eq
   1d4da:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1d4de:	f04f 30ff 	movne.w	r0, #4294967295
   1d4e2:	e7f1      	b.n	1d4c8 <async_start+0x40>

0001d4e4 <api_start>:
{
   1d4e4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d4e6:	2480      	movs	r4, #128	; 0x80
   1d4e8:	9400      	str	r4, [sp, #0]
   1d4ea:	f7ff ffcd 	bl	1d488 <async_start>
}
   1d4ee:	b002      	add	sp, #8
   1d4f0:	bd10      	pop	{r4, pc}

0001d4f2 <onoff_started_callback>:
{
   1d4f2:	b410      	push	{r4}
	return &data->mgr[type];
   1d4f4:	6900      	ldr	r0, [r0, #16]
   1d4f6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d4f8:	241c      	movs	r4, #28
   1d4fa:	fb03 0004 	mla	r0, r3, r4, r0
   1d4fe:	2100      	movs	r1, #0
}
   1d500:	bc10      	pop	{r4}
	notify(mgr, 0);
   1d502:	4710      	bx	r2

0001d504 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d504:	2000      	movs	r0, #0
   1d506:	f7fa b91f 	b.w	17748 <nrfx_clock_start>

0001d50a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d50a:	2000      	movs	r0, #0
   1d50c:	f000 bac5 	b.w	1da9a <nrfx_clock_stop>

0001d510 <blocking_start_callback>:
{
   1d510:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d512:	f7fb b9f5 	b.w	18900 <z_impl_k_sem_give>

0001d516 <debug_hook_out_nop>:
}
   1d516:	2000      	movs	r0, #0
   1d518:	4770      	bx	lr

0001d51a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d51a:	6843      	ldr	r3, [r0, #4]
   1d51c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d51e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1d522:	600b      	str	r3, [r1, #0]
}
   1d524:	2000      	movs	r0, #0
   1d526:	4770      	bx	lr

0001d528 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d528:	6843      	ldr	r3, [r0, #4]
   1d52a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1d52c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1d530:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1d534:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1d538:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1d53c:	2000      	movs	r0, #0
   1d53e:	4770      	bx	lr

0001d540 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d540:	6843      	ldr	r3, [r0, #4]
   1d542:	685b      	ldr	r3, [r3, #4]
}
   1d544:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1d546:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1d54a:	4770      	bx	lr

0001d54c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d54c:	6843      	ldr	r3, [r0, #4]
   1d54e:	685b      	ldr	r3, [r3, #4]
}
   1d550:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d552:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1d556:	4770      	bx	lr

0001d558 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d558:	6843      	ldr	r3, [r0, #4]
   1d55a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d55c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1d560:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1d564:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1d566:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1d56a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1d56e:	2000      	movs	r0, #0
   1d570:	4770      	bx	lr

0001d572 <gpio_nrfx_manage_callback>:
{
   1d572:	b510      	push	{r4, lr}
	return port->data;
   1d574:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1d576:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1d578:	b1f8      	cbz	r0, 1d5ba <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d57a:	4288      	cmp	r0, r1
   1d57c:	d119      	bne.n	1d5b2 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1d57e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1d580:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1d582:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d584:	42a1      	cmp	r1, r4
   1d586:	d100      	bne.n	1d58a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1d588:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1d58a:	2000      	movs	r0, #0
   1d58c:	6008      	str	r0, [r1, #0]
	if (set) {
   1d58e:	b12a      	cbz	r2, 1d59c <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1d590:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1d592:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d594:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1d596:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d598:	b902      	cbnz	r2, 1d59c <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   1d59a:	6099      	str	r1, [r3, #8]
	return 0;
   1d59c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d59e:	e010      	b.n	1d5c2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d5a0:	4281      	cmp	r1, r0
   1d5a2:	d106      	bne.n	1d5b2 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1d5a4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1d5a6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d5a8:	6898      	ldr	r0, [r3, #8]
   1d5aa:	4281      	cmp	r1, r0
   1d5ac:	d1ed      	bne.n	1d58a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1d5ae:	609c      	str	r4, [r3, #8]
}
   1d5b0:	e7eb      	b.n	1d58a <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1d5b2:	4604      	mov	r4, r0
   1d5b4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d5b6:	2800      	cmp	r0, #0
   1d5b8:	d1f2      	bne.n	1d5a0 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   1d5ba:	2a00      	cmp	r2, #0
   1d5bc:	d1e8      	bne.n	1d590 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   1d5be:	f06f 0015 	mvn.w	r0, #21
}
   1d5c2:	bd10      	pop	{r4, pc}

0001d5c4 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   1d5c4:	6902      	ldr	r2, [r0, #16]
{
   1d5c6:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1d5c8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d5cc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d5d0:	2000      	movs	r0, #0
   1d5d2:	4770      	bx	lr

0001d5d4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d5d4:	6843      	ldr	r3, [r0, #4]
   1d5d6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d5d8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d5dc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d5e0:	4770      	bx	lr

0001d5e2 <tx_start>:
{
   1d5e2:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1d5e4:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   1d5e6:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d5e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d5ec:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d5f0:	2200      	movs	r2, #0
   1d5f2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1d5f6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d5fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1d5fe:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d602:	6862      	ldr	r2, [r4, #4]
   1d604:	06d2      	lsls	r2, r2, #27
   1d606:	d508      	bpl.n	1d61a <tx_start+0x38>
	return config->uarte_regs;
   1d608:	6842      	ldr	r2, [r0, #4]
   1d60a:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d60c:	2108      	movs	r1, #8
   1d60e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1d612:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1d616:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d61a:	2201      	movs	r2, #1
   1d61c:	609a      	str	r2, [r3, #8]
}
   1d61e:	bd10      	pop	{r4, pc}

0001d620 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d620:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1d622:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1d624:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d626:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d62a:	b150      	cbz	r0, 1d642 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   1d62c:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d62e:	2000      	movs	r0, #0
   1d630:	7812      	ldrb	r2, [r2, #0]
   1d632:	700a      	strb	r2, [r1, #0]
   1d634:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d638:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d63c:	2201      	movs	r2, #1
   1d63e:	601a      	str	r2, [r3, #0]
	return 0;
   1d640:	4770      	bx	lr
		return -1;
   1d642:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d646:	4770      	bx	lr

0001d648 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d648:	2a00      	cmp	r2, #0
{
   1d64a:	b510      	push	{r4, lr}
   1d64c:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d64e:	dd10      	ble.n	1d672 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   1d650:	6843      	ldr	r3, [r0, #4]
   1d652:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d654:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d658:	b150      	cbz	r0, 1d670 <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
   1d65a:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d65c:	2000      	movs	r0, #0
   1d65e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   1d662:	6992      	ldr	r2, [r2, #24]
   1d664:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1d668:	7812      	ldrb	r2, [r2, #0]
   1d66a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d66c:	2001      	movs	r0, #1
   1d66e:	6018      	str	r0, [r3, #0]
}
   1d670:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   1d672:	2000      	movs	r0, #0
   1d674:	e7fc      	b.n	1d670 <uarte_nrfx_fifo_read+0x28>

0001d676 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1d676:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d678:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   1d67a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1d67c:	f04f 0040 	mov.w	r0, #64	; 0x40
   1d680:	f3ef 8311 	mrs	r3, BASEPRI
   1d684:	f380 8812 	msr	BASEPRI_MAX, r0
   1d688:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1d68c:	68c9      	ldr	r1, [r1, #12]
   1d68e:	2000      	movs	r0, #0
   1d690:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1d692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d696:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1d69a:	f383 8811 	msr	BASEPRI, r3
   1d69e:	f3bf 8f6f 	isb	sy
}
   1d6a2:	4770      	bx	lr

0001d6a4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d6a4:	6903      	ldr	r3, [r0, #16]
   1d6a6:	68db      	ldr	r3, [r3, #12]
   1d6a8:	2201      	movs	r2, #1
   1d6aa:	739a      	strb	r2, [r3, #14]
}
   1d6ac:	4770      	bx	lr

0001d6ae <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1d6ae:	6903      	ldr	r3, [r0, #16]
   1d6b0:	68db      	ldr	r3, [r3, #12]
   1d6b2:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d6b4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1d6b8:	b962      	cbnz	r2, 1d6d4 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1d6ba:	6842      	ldr	r2, [r0, #4]
   1d6bc:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6be:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1d6c2:	b140      	cbz	r0, 1d6d6 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1d6c4:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d6c8:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1d6cc:	d003      	beq.n	1d6d6 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   1d6ce:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d6d0:	2001      	movs	r0, #1
   1d6d2:	4770      	bx	lr
   1d6d4:	2000      	movs	r0, #0
}
   1d6d6:	4770      	bx	lr

0001d6d8 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1d6d8:	6843      	ldr	r3, [r0, #4]
   1d6da:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6dc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d6e0:	3800      	subs	r0, #0
   1d6e2:	bf18      	it	ne
   1d6e4:	2001      	movne	r0, #1
   1d6e6:	4770      	bx	lr

0001d6e8 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   1d6e8:	6843      	ldr	r3, [r0, #4]
   1d6ea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1d6ec:	2210      	movs	r2, #16
   1d6ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d6f2:	4770      	bx	lr

0001d6f4 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   1d6f4:	6843      	ldr	r3, [r0, #4]
   1d6f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1d6f8:	2210      	movs	r2, #16
   1d6fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d6fe:	4770      	bx	lr

0001d700 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   1d700:	6843      	ldr	r3, [r0, #4]
   1d702:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1d704:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d708:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d70c:	4770      	bx	lr

0001d70e <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   1d70e:	6843      	ldr	r3, [r0, #4]
   1d710:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1d712:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d716:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d71a:	4770      	bx	lr

0001d71c <uarte_nrfx_irq_is_pending>:
{
   1d71c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1d71e:	6843      	ldr	r3, [r0, #4]
   1d720:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1d722:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1d726:	025b      	lsls	r3, r3, #9
{
   1d728:	4604      	mov	r4, r0
		||
   1d72a:	d405      	bmi.n	1d738 <uarte_nrfx_irq_is_pending+0x1c>
   1d72c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1d730:	f010 0010 	ands.w	r0, r0, #16
   1d734:	d106      	bne.n	1d744 <uarte_nrfx_irq_is_pending+0x28>
}
   1d736:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d738:	f7ff ffb9 	bl	1d6ae <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1d73c:	2800      	cmp	r0, #0
   1d73e:	d0f5      	beq.n	1d72c <uarte_nrfx_irq_is_pending+0x10>
		||
   1d740:	2001      	movs	r0, #1
   1d742:	e7f8      	b.n	1d736 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d744:	4620      	mov	r0, r4
   1d746:	f7ff ffc7 	bl	1d6d8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d74a:	3800      	subs	r0, #0
   1d74c:	bf18      	it	ne
   1d74e:	2001      	movne	r0, #1
   1d750:	e7f1      	b.n	1d736 <uarte_nrfx_irq_is_pending+0x1a>

0001d752 <uarte_nrfx_irq_update>:
}
   1d752:	2001      	movs	r0, #1
   1d754:	4770      	bx	lr

0001d756 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   1d756:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   1d758:	68d8      	ldr	r0, [r3, #12]
   1d75a:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   1d75c:	68db      	ldr	r3, [r3, #12]
   1d75e:	605a      	str	r2, [r3, #4]
}
   1d760:	4770      	bx	lr

0001d762 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d762:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d764:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d766:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d76a:	b940      	cbnz	r0, 1d77e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1d76c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d76e:	079b      	lsls	r3, r3, #30
   1d770:	d406      	bmi.n	1d780 <is_tx_ready.isra.0+0x1e>
   1d772:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d776:	3800      	subs	r0, #0
   1d778:	bf18      	it	ne
   1d77a:	2001      	movne	r0, #1
   1d77c:	4770      	bx	lr
   1d77e:	2001      	movs	r0, #1
}
   1d780:	4770      	bx	lr

0001d782 <uarte_nrfx_fifo_fill>:
{
   1d782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1d784:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1d786:	68f3      	ldr	r3, [r6, #12]
   1d788:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d78a:	f3bf 8f5b 	dmb	ish
   1d78e:	4294      	cmp	r4, r2
   1d790:	bfa8      	it	ge
   1d792:	4614      	movge	r4, r2
{
   1d794:	4605      	mov	r5, r0
   1d796:	3310      	adds	r3, #16
   1d798:	2201      	movs	r2, #1
   1d79a:	e853 0f00 	ldrex	r0, [r3]
   1d79e:	2800      	cmp	r0, #0
   1d7a0:	d103      	bne.n	1d7aa <uarte_nrfx_fifo_fill+0x28>
   1d7a2:	e843 2700 	strex	r7, r2, [r3]
   1d7a6:	2f00      	cmp	r7, #0
   1d7a8:	d1f7      	bne.n	1d79a <uarte_nrfx_fifo_fill+0x18>
   1d7aa:	f3bf 8f5b 	dmb	ish
   1d7ae:	bf0c      	ite	eq
   1d7b0:	4613      	moveq	r3, r2
   1d7b2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1d7b4:	d11f      	bne.n	1d7f6 <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   1d7b6:	68f3      	ldr	r3, [r6, #12]
   1d7b8:	4622      	mov	r2, r4
   1d7ba:	6898      	ldr	r0, [r3, #8]
   1d7bc:	f7ff fc16 	bl	1cfec <memcpy>
	__asm__ volatile(
   1d7c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7c4:	f3ef 8711 	mrs	r7, BASEPRI
   1d7c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7cc:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1d7d0:	6868      	ldr	r0, [r5, #4]
   1d7d2:	f7ff ffc6 	bl	1d762 <is_tx_ready.isra.0>
   1d7d6:	68f3      	ldr	r3, [r6, #12]
   1d7d8:	b938      	cbnz	r0, 1d7ea <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
   1d7da:	6118      	str	r0, [r3, #16]
		len = 0;
   1d7dc:	4604      	mov	r4, r0
	__asm__ volatile(
   1d7de:	f387 8811 	msr	BASEPRI, r7
   1d7e2:	f3bf 8f6f 	isb	sy
}
   1d7e6:	4620      	mov	r0, r4
   1d7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   1d7ea:	6899      	ldr	r1, [r3, #8]
   1d7ec:	4622      	mov	r2, r4
   1d7ee:	4628      	mov	r0, r5
   1d7f0:	f7ff fef7 	bl	1d5e2 <tx_start>
   1d7f4:	e7f3      	b.n	1d7de <uarte_nrfx_fifo_fill+0x5c>
		return 0;
   1d7f6:	461c      	mov	r4, r3
   1d7f8:	e7f5      	b.n	1d7e6 <uarte_nrfx_fifo_fill+0x64>

0001d7fa <uarte_nrfx_isr_int>:
{
   1d7fa:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   1d7fc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1d7fe:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1d800:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d804:	05c9      	lsls	r1, r1, #23
   1d806:	d518      	bpl.n	1d83a <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d808:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d80c:	b1a9      	cbz	r1, 1d83a <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1d80e:	f04f 0440 	mov.w	r4, #64	; 0x40
   1d812:	f3ef 8111 	mrs	r1, BASEPRI
   1d816:	f384 8812 	msr	BASEPRI_MAX, r4
   1d81a:	f3bf 8f6f 	isb	sy
   1d81e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d822:	b134      	cbz	r4, 1d832 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d824:	2400      	movs	r4, #0
   1d826:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   1d82a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d82e:	2401      	movs	r4, #1
   1d830:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   1d832:	f381 8811 	msr	BASEPRI, r1
   1d836:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d83a:	6852      	ldr	r2, [r2, #4]
   1d83c:	06d2      	lsls	r2, r2, #27
   1d83e:	d51a      	bpl.n	1d876 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   1d840:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d844:	f3ef 8111 	mrs	r1, BASEPRI
   1d848:	f382 8812 	msr	BASEPRI_MAX, r2
   1d84c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d850:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d854:	b112      	cbz	r2, 1d85c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d856:	2200      	movs	r2, #0
   1d858:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1d85c:	6902      	ldr	r2, [r0, #16]
   1d85e:	68d2      	ldr	r2, [r2, #12]
   1d860:	b10a      	cbz	r2, 1d866 <uarte_nrfx_isr_int+0x6c>
   1d862:	6912      	ldr	r2, [r2, #16]
   1d864:	b91a      	cbnz	r2, 1d86e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   1d866:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1d86a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1d86e:	f381 8811 	msr	BASEPRI, r1
   1d872:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   1d876:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   1d878:	68d4      	ldr	r4, [r2, #12]
   1d87a:	b16c      	cbz	r4, 1d898 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d87c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d880:	b161      	cbz	r1, 1d89c <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   1d882:	2100      	movs	r1, #0
   1d884:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   1d886:	68d4      	ldr	r4, [r2, #12]
   1d888:	7ba4      	ldrb	r4, [r4, #14]
   1d88a:	b13c      	cbz	r4, 1d89c <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   1d88c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1d890:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1d894:	68d3      	ldr	r3, [r2, #12]
   1d896:	7399      	strb	r1, [r3, #14]
}
   1d898:	bc10      	pop	{r4}
   1d89a:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d89c:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d8a0:	b121      	cbz	r1, 1d8ac <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8a2:	2100      	movs	r1, #0
   1d8a4:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1d8a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d8ac:	68d2      	ldr	r2, [r2, #12]
   1d8ae:	6813      	ldr	r3, [r2, #0]
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	d0f1      	beq.n	1d898 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d8b4:	6851      	ldr	r1, [r2, #4]
}
   1d8b6:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d8b8:	4718      	bx	r3

0001d8ba <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1d8ba:	b510      	push	{r4, lr}
   1d8bc:	2200      	movs	r2, #0
   1d8be:	4604      	mov	r4, r0
   1d8c0:	2101      	movs	r1, #1
   1d8c2:	2028      	movs	r0, #40	; 0x28
   1d8c4:	f7f5 f9a8 	bl	12c18 <z_arm_irq_priority_set>
   1d8c8:	2028      	movs	r0, #40	; 0x28
   1d8ca:	f7f5 f975 	bl	12bb8 <arch_irq_enable>
   1d8ce:	4620      	mov	r0, r4
   1d8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d8d4:	f7f8 bcbe 	b.w	16254 <uarte_instance_init.constprop.0>

0001d8d8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1d8d8:	b510      	push	{r4, lr}
   1d8da:	2200      	movs	r2, #0
   1d8dc:	4604      	mov	r4, r0
   1d8de:	2101      	movs	r1, #1
   1d8e0:	2002      	movs	r0, #2
   1d8e2:	f7f5 f999 	bl	12c18 <z_arm_irq_priority_set>
   1d8e6:	2002      	movs	r0, #2
   1d8e8:	f7f5 f966 	bl	12bb8 <arch_irq_enable>
   1d8ec:	4620      	mov	r0, r4
   1d8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d8f2:	f7f8 bcaf 	b.w	16254 <uarte_instance_init.constprop.0>

0001d8f6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1d8f6:	2000      	movs	r0, #0
   1d8f8:	4770      	bx	lr

0001d8fa <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1d8fa:	b538      	push	{r3, r4, r5, lr}
   1d8fc:	460c      	mov	r4, r1
   1d8fe:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1d900:	f7f7 f8a2 	bl	14a48 <bt_is_ready>
   1d904:	b128      	cbz	r0, 1d912 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1d906:	4629      	mov	r1, r5
   1d908:	4620      	mov	r0, r4
}
   1d90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1d90e:	f7f6 bd5f 	b.w	143d0 <bt_hci_le_rand>
}
   1d912:	f06f 000a 	mvn.w	r0, #10
   1d916:	bd38      	pop	{r3, r4, r5, pc}

0001d918 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1d918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d91a:	460f      	mov	r7, r1
   1d91c:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1d91e:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1d922:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   1d924:	42a6      	cmp	r6, r4
   1d926:	d803      	bhi.n	1d930 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   1d928:	d016      	beq.n	1d958 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   1d92a:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   1d92c:	b003      	add	sp, #12
   1d92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1d930:	1b33      	subs	r3, r6, r4
   1d932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1d936:	bf38      	it	cc
   1d938:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1d93a:	462a      	mov	r2, r5
   1d93c:	ab01      	add	r3, sp, #4
   1d93e:	1939      	adds	r1, r7, r4
   1d940:	2000      	movs	r0, #0
   1d942:	f7fc f849 	bl	199d8 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   1d946:	b920      	cbnz	r0, 1d952 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   1d948:	9b01      	ldr	r3, [sp, #4]
   1d94a:	42ab      	cmp	r3, r5
   1d94c:	d101      	bne.n	1d952 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   1d94e:	442c      	add	r4, r5
   1d950:	e7e8      	b.n	1d924 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   1d952:	f06f 0015 	mvn.w	r0, #21
   1d956:	e7e9      	b.n	1d92c <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   1d958:	2000      	movs	r0, #0
   1d95a:	e7e7      	b.n	1d92c <entropy_cc3xx_rng_get_entropy+0x14>

0001d95c <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1d95c:	2200      	movs	r2, #0
{
   1d95e:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1d960:	4611      	mov	r1, r2
   1d962:	4610      	mov	r0, r2
   1d964:	f7fc f806 	bl	19974 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   1d968:	2800      	cmp	r0, #0
	}

	return 0;
}
   1d96a:	bf18      	it	ne
   1d96c:	f06f 0015 	mvnne.w	r0, #21
   1d970:	bd08      	pop	{r3, pc}

0001d972 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d972:	4770      	bx	lr

0001d974 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1d974:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1d978:	009b      	lsls	r3, r3, #2
   1d97a:	b29b      	uxth	r3, r3
   1d97c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d980:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1d984:	2200      	movs	r2, #0
   1d986:	601a      	str	r2, [r3, #0]
   1d988:	681b      	ldr	r3, [r3, #0]
}
   1d98a:	4770      	bx	lr

0001d98c <sys_clock_cycle_get_32>:
{
   1d98c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1d98e:	f7f8 ff0d 	bl	167ac <z_nrf_rtc_timer_read>
}
   1d992:	bd08      	pop	{r3, pc}

0001d994 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1d994:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1d996:	6843      	ldr	r3, [r0, #4]
   1d998:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   1d99a:	7a05      	ldrb	r5, [r0, #8]
   1d99c:	6844      	ldr	r4, [r0, #4]
   1d99e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1d9a2:	42a3      	cmp	r3, r4
   1d9a4:	d302      	bcc.n	1d9ac <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   1d9a6:	f06f 0001 	mvn.w	r0, #1
}
   1d9aa:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   1d9ac:	795c      	ldrb	r4, [r3, #5]
   1d9ae:	428c      	cmp	r4, r1
   1d9b0:	d001      	beq.n	1d9b6 <pinctrl_lookup_state+0x22>
		(*state)++;
   1d9b2:	3308      	adds	r3, #8
   1d9b4:	e7f0      	b.n	1d998 <pinctrl_lookup_state+0x4>
			return 0;
   1d9b6:	2000      	movs	r0, #0
   1d9b8:	e7f7      	b.n	1d9aa <pinctrl_lookup_state+0x16>

0001d9ba <hci_driver_close>:
{
   1d9ba:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   1d9bc:	f04f 30ff 	mov.w	r0, #4294967295
   1d9c0:	f04f 31ff 	mov.w	r1, #4294967295
   1d9c4:	f7f9 f93a 	bl	16c3c <multithreading_lock_acquire>
	if (err) {
   1d9c8:	4604      	mov	r4, r0
   1d9ca:	b920      	cbnz	r0, 1d9d6 <hci_driver_close+0x1c>
	err = sdc_disable();
   1d9cc:	f7e2 fd94 	bl	4f8 <sdc_disable>
	if (err) {
   1d9d0:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1d9d2:	f7f9 f93b 	bl	16c4c <multithreading_lock_release>
}
   1d9d6:	4620      	mov	r0, r4
   1d9d8:	bd10      	pop	{r4, pc}

0001d9da <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   1d9da:	f7f9 b983 	b.w	16ce4 <rand_prio_low_vector_get>

0001d9de <hci_driver_send>:
{
   1d9de:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1d9e0:	8a03      	ldrh	r3, [r0, #16]
{
   1d9e2:	4605      	mov	r5, r0
	if (!buf->len) {
   1d9e4:	b1bb      	cbz	r3, 1da16 <hci_driver_send+0x38>
	switch (type) {
   1d9e6:	7e03      	ldrb	r3, [r0, #24]
   1d9e8:	b9ab      	cbnz	r3, 1da16 <hci_driver_send+0x38>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d9ea:	f04f 30ff 	mov.w	r0, #4294967295
   1d9ee:	f04f 31ff 	mov.w	r1, #4294967295
   1d9f2:	f7f9 f923 	bl	16c3c <multithreading_lock_acquire>
	if (!errcode) {
   1d9f6:	4604      	mov	r4, r0
   1d9f8:	b958      	cbnz	r0, 1da12 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1d9fa:	68e8      	ldr	r0, [r5, #12]
   1d9fc:	f7f9 fb28 	bl	17050 <hci_internal_cmd_put>
   1da00:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1da02:	f7f9 f923 	bl	16c4c <multithreading_lock_release>
	if (errcode) {
   1da06:	b924      	cbnz	r4, 1da12 <hci_driver_send+0x34>
	receive_signal_raise();
   1da08:	f7f9 f980 	bl	16d0c <receive_signal_raise>
		net_buf_unref(buf);
   1da0c:	4628      	mov	r0, r5
   1da0e:	f7f8 f847 	bl	15aa0 <net_buf_unref>
}
   1da12:	4620      	mov	r0, r4
   1da14:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1da16:	f06f 0415 	mvn.w	r4, #21
   1da1a:	e7fa      	b.n	1da12 <hci_driver_send+0x34>

0001da1c <receive_work_handler>:
	hci_driver_receive_process();
   1da1c:	f7f9 ba8e 	b.w	16f3c <hci_driver_receive_process>

0001da20 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1da20:	4668      	mov	r0, sp
   1da22:	f020 0107 	bic.w	r1, r0, #7
   1da26:	468d      	mov	sp, r1
   1da28:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1da2a:	f7ed fdc5 	bl	b5b8 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1da2e:	f7f5 f90d 	bl	12c4c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1da32:	f7f5 f9f5 	bl	12e20 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1da36:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1da3a:	4685      	mov	sp, r0
   1da3c:	4770      	bx	lr

0001da3e <mpsl_low_prio_work_handler>:
{
   1da3e:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1da40:	f04f 31ff 	mov.w	r1, #4294967295
   1da44:	f04f 30ff 	mov.w	r0, #4294967295
   1da48:	f7f9 f8f8 	bl	16c3c <multithreading_lock_acquire>
	mpsl_low_priority_process();
   1da4c:	f7f2 fc6b 	bl	10326 <mpsl_low_priority_process>
}
   1da50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1da54:	f7f9 b8fa 	b.w	16c4c <multithreading_lock_release>

0001da58 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1da58:	4668      	mov	r0, sp
   1da5a:	f020 0107 	bic.w	r1, r0, #7
   1da5e:	468d      	mov	sp, r1
   1da60:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1da62:	f7ed fd1f 	bl	b4a4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1da66:	f7f5 f8f1 	bl	12c4c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1da6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1da6e:	4685      	mov	sp, r0
   1da70:	4770      	bx	lr

0001da72 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1da72:	4668      	mov	r0, sp
   1da74:	f020 0107 	bic.w	r1, r0, #7
   1da78:	468d      	mov	sp, r1
   1da7a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1da7c:	f7eb fa74 	bl	8f68 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1da80:	f7f5 f8e4 	bl	12c4c <_arch_isr_direct_pm>
   1da84:	f7f5 f9cc 	bl	12e20 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1da88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1da8c:	4685      	mov	sp, r0
   1da8e:	4770      	bx	lr

0001da90 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   1da90:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   1da92:	f7f2 fe1f 	bl	106d4 <mpsl_fem_init>

	return 0;
}
   1da96:	2000      	movs	r0, #0
   1da98:	bd08      	pop	{r3, pc}

0001da9a <nrfx_clock_stop>:
	switch (domain) {
   1da9a:	2801      	cmp	r0, #1
   1da9c:	d101      	bne.n	1daa2 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1da9e:	f7ee bc1f 	b.w	c2e0 <mpsl_clock_hfclk_release>
}
   1daa2:	4770      	bx	lr

0001daa4 <nrfx_clock_enable>:
}
   1daa4:	4770      	bx	lr

0001daa6 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1daa6:	f7ee ba25 	b.w	bef4 <MPSL_IRQ_CLOCK_Handler>

0001daaa <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1daaa:	f7fb bf0d 	b.w	198c8 <nrf_cc3xx_platform_init>

0001daae <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1daae:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1dab0:	f7f4 ff08 	bl	128c4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1dab4:	f7f4 ffdc 	bl	12a70 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1dab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1dabc:	f7fb bf04 	b.w	198c8 <nrf_cc3xx_platform_init>

0001dac0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1dac0:	4700      	bx	r0

0001dac2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1dac2:	f000 bc17 	b.w	1e2f4 <z_impl_k_busy_wait>

0001dac6 <nrf_gpio_reconfigure>:
{
   1dac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dac8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1daca:	a801      	add	r0, sp, #4
{
   1dacc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   1dad0:	4616      	mov	r6, r2
   1dad2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1dad4:	f7f9 ff8e 	bl	179f4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1dad8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1dada:	f1b6 0c00 	subs.w	ip, r6, #0
   1dade:	bf18      	it	ne
   1dae0:	f04f 0c01 	movne.w	ip, #1
   1dae4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1dae8:	1e0b      	subs	r3, r1, #0
   1daea:	bf18      	it	ne
   1daec:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1daee:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1daf0:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1daf4:	bf14      	ite	ne
   1daf6:	f04f 0c0c 	movne.w	ip, #12
   1dafa:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1dafe:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1db00:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1db04:	bf14      	ite	ne
   1db06:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   1db0a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1db0e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1db10:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1db14:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1db18:	bf14      	ite	ne
   1db1a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1db1e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1db22:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1db26:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1db2a:	b101      	cbz	r1, 1db2e <nrf_gpio_reconfigure+0x68>
   1db2c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1db2e:	b10e      	cbz	r6, 1db34 <nrf_gpio_reconfigure+0x6e>
   1db30:	7836      	ldrb	r6, [r6, #0]
   1db32:	0076      	lsls	r6, r6, #1
   1db34:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1db36:	b10d      	cbz	r5, 1db3c <nrf_gpio_reconfigure+0x76>
   1db38:	782d      	ldrb	r5, [r5, #0]
   1db3a:	00ad      	lsls	r5, r5, #2
   1db3c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1db3e:	b10c      	cbz	r4, 1db44 <nrf_gpio_reconfigure+0x7e>
   1db40:	7824      	ldrb	r4, [r4, #0]
   1db42:	0224      	lsls	r4, r4, #8
   1db44:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1db46:	b10f      	cbz	r7, 1db4c <nrf_gpio_reconfigure+0x86>
   1db48:	783f      	ldrb	r7, [r7, #0]
   1db4a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1db4c:	430c      	orrs	r4, r1
   1db4e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1db50:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   1db54:	b003      	add	sp, #12
   1db56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001db58 <nrf_gpio_cfg_sense_set>:
{
   1db58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1db5a:	f10d 030f 	add.w	r3, sp, #15
   1db5e:	9301      	str	r3, [sp, #4]
   1db60:	2300      	movs	r3, #0
{
   1db62:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1db66:	9300      	str	r3, [sp, #0]
   1db68:	461a      	mov	r2, r3
   1db6a:	4619      	mov	r1, r3
   1db6c:	f7ff ffab 	bl	1dac6 <nrf_gpio_reconfigure>
}
   1db70:	b005      	add	sp, #20
   1db72:	f85d fb04 	ldr.w	pc, [sp], #4

0001db76 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1db76:	f7fa baab 	b.w	180d0 <_DoInit>

0001db7a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1db7a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1db7c:	f7ff fffb 	bl	1db76 <SEGGER_RTT_Init>

	return 0;
}
   1db80:	2000      	movs	r0, #0
   1db82:	bd08      	pop	{r3, pc}

0001db84 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1db84:	4770      	bx	lr

0001db86 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1db86:	b140      	cbz	r0, 1db9a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1db88:	68c3      	ldr	r3, [r0, #12]
   1db8a:	7858      	ldrb	r0, [r3, #1]
   1db8c:	f010 0001 	ands.w	r0, r0, #1
   1db90:	bf1e      	ittt	ne
   1db92:	7818      	ldrbne	r0, [r3, #0]
   1db94:	fab0 f080 	clzne	r0, r0
   1db98:	0940      	lsrne	r0, r0, #5
}
   1db9a:	4770      	bx	lr

0001db9c <z_early_memset>:
	(void) memset(dst, c, n);
   1db9c:	f7ff ba31 	b.w	1d002 <memset>

0001dba0 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1dba0:	f7ff ba24 	b.w	1cfec <memcpy>

0001dba4 <k_heap_init>:
{
   1dba4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1dba6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1dbaa:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1dbae:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1dbb0:	f7fe bd7c 	b.w	1c6ac <sys_heap_init>

0001dbb4 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbb8:	b085      	sub	sp, #20
   1dbba:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1dbbe:	4607      	mov	r7, r0
   1dbc0:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1dbc2:	4650      	mov	r0, sl
   1dbc4:	4621      	mov	r1, r4
{
   1dbc6:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1dbc8:	f000 fb98 	bl	1e2fc <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1dbcc:	f1b4 3fff 	cmp.w	r4, #4294967295
   1dbd0:	bf08      	it	eq
   1dbd2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1dbd6:	4605      	mov	r5, r0
   1dbd8:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1dbda:	bf04      	itt	eq
   1dbdc:	f04f 35ff 	moveq.w	r5, #4294967295
   1dbe0:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1dbe4:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1dbe8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dbec:	f3ef 8411 	mrs	r4, BASEPRI
   1dbf0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbf4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1dbf8:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1dbfc:	464a      	mov	r2, r9
   1dbfe:	4641      	mov	r1, r8
   1dc00:	4638      	mov	r0, r7
   1dc02:	f7fe fcec 	bl	1c5de <sys_heap_aligned_alloc>
   1dc06:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1dc08:	f7fb fcca 	bl	195a0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1dc0c:	9b03      	ldr	r3, [sp, #12]
   1dc0e:	b13b      	cbz	r3, 1dc20 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1dc10:	f384 8811 	msr	BASEPRI, r4
   1dc14:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1dc18:	4618      	mov	r0, r3
   1dc1a:	b005      	add	sp, #20
   1dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1dc20:	1a28      	subs	r0, r5, r0
   1dc22:	eb66 0101 	sbc.w	r1, r6, r1
   1dc26:	2801      	cmp	r0, #1
   1dc28:	f171 0200 	sbcs.w	r2, r1, #0
   1dc2c:	dbf0      	blt.n	1dc10 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1dc2e:	e9cd 0100 	strd	r0, r1, [sp]
   1dc32:	465a      	mov	r2, fp
   1dc34:	4621      	mov	r1, r4
   1dc36:	4650      	mov	r0, sl
   1dc38:	f7fb f95c 	bl	18ef4 <z_pend_curr>
	__asm__ volatile(
   1dc3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc40:	f3ef 8411 	mrs	r4, BASEPRI
   1dc44:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc48:	f3bf 8f6f 	isb	sy
	return k;
   1dc4c:	e7d6      	b.n	1dbfc <k_heap_aligned_alloc+0x48>

0001dc4e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1dc4e:	b538      	push	{r3, r4, r5, lr}
   1dc50:	4604      	mov	r4, r0
   1dc52:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc56:	f3ef 8511 	mrs	r5, BASEPRI
   1dc5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1dc62:	f7fe fc84 	bl	1c56e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1dc66:	f104 000c 	add.w	r0, r4, #12
   1dc6a:	f000 fac8 	bl	1e1fe <z_unpend_all>
   1dc6e:	b130      	cbz	r0, 1dc7e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1dc70:	4629      	mov	r1, r5
   1dc72:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1dc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1dc7a:	f7fb b99f 	b.w	18fbc <z_reschedule>
	__asm__ volatile(
   1dc7e:	f385 8811 	msr	BASEPRI, r5
   1dc82:	f3bf 8f6f 	isb	sy
}
   1dc86:	bd38      	pop	{r3, r4, r5, pc}

0001dc88 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1dc88:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1dc8c:	4313      	orrs	r3, r2
   1dc8e:	f013 0303 	ands.w	r3, r3, #3
   1dc92:	d10c      	bne.n	1dcae <create_free_list+0x26>
	slab->free_list = NULL;
   1dc94:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1dc96:	6881      	ldr	r1, [r0, #8]
   1dc98:	4299      	cmp	r1, r3
   1dc9a:	d801      	bhi.n	1dca0 <create_free_list+0x18>
	return 0;
   1dc9c:	2000      	movs	r0, #0
   1dc9e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1dca0:	6941      	ldr	r1, [r0, #20]
   1dca2:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1dca4:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1dca6:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1dca8:	3301      	adds	r3, #1
		p += slab->block_size;
   1dcaa:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1dcac:	e7f3      	b.n	1dc96 <create_free_list+0xe>
		return -EINVAL;
   1dcae:	f06f 0015 	mvn.w	r0, #21
}
   1dcb2:	4770      	bx	lr

0001dcb4 <k_mem_slab_init>:
{
   1dcb4:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   1dcb6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   1dcba:	2300      	movs	r3, #0
	slab->buffer = buffer;
   1dcbc:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   1dcbe:	6183      	str	r3, [r0, #24]
{
   1dcc0:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   1dcc2:	f7ff ffe1 	bl	1dc88 <create_free_list>
	if (rc < 0) {
   1dcc6:	2800      	cmp	r0, #0
   1dcc8:	bfa8      	it	ge
   1dcca:	e9c4 4400 	strdge	r4, r4, [r4]
}
   1dcce:	bd10      	pop	{r4, pc}

0001dcd0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcd2:	4604      	mov	r4, r0
   1dcd4:	460d      	mov	r5, r1
	__asm__ volatile(
   1dcd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dcda:	f3ef 8611 	mrs	r6, BASEPRI
   1dcde:	f383 8812 	msr	BASEPRI_MAX, r3
   1dce2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1dce6:	6947      	ldr	r7, [r0, #20]
   1dce8:	b977      	cbnz	r7, 1dd08 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1dcea:	f000 fa42 	bl	1e172 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1dcee:	b158      	cbz	r0, 1dd08 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1dcf0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1dcf2:	6142      	str	r2, [r0, #20]
   1dcf4:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1dcf6:	f000 fa05 	bl	1e104 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1dcfa:	4631      	mov	r1, r6
   1dcfc:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1dd00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1dd04:	f7fb b95a 	b.w	18fbc <z_reschedule>
	**(char ***) mem = slab->free_list;
   1dd08:	682b      	ldr	r3, [r5, #0]
   1dd0a:	6962      	ldr	r2, [r4, #20]
   1dd0c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1dd0e:	682b      	ldr	r3, [r5, #0]
   1dd10:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1dd12:	69a3      	ldr	r3, [r4, #24]
   1dd14:	3b01      	subs	r3, #1
   1dd16:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1dd18:	f386 8811 	msr	BASEPRI, r6
   1dd1c:	f3bf 8f6f 	isb	sy
}
   1dd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dd22 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dd22:	f3ef 8005 	mrs	r0, IPSR
}
   1dd26:	3800      	subs	r0, #0
   1dd28:	bf18      	it	ne
   1dd2a:	2001      	movne	r0, #1
   1dd2c:	4770      	bx	lr

0001dd2e <z_impl_k_thread_name_set>:
}
   1dd2e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1dd32:	4770      	bx	lr

0001dd34 <k_thread_name_get>:
}
   1dd34:	2000      	movs	r0, #0
   1dd36:	4770      	bx	lr

0001dd38 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1dd38:	f7fb b952 	b.w	18fe0 <z_sched_start>

0001dd3c <z_pm_save_idle_exit>:
{
   1dd3c:	b508      	push	{r3, lr}
	pm_system_resume();
   1dd3e:	f7f4 fcb7 	bl	126b0 <pm_system_resume>
}
   1dd42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1dd46:	f7ff be14 	b.w	1d972 <sys_clock_idle_exit>

0001dd4a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1dd4a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1dd4e:	428b      	cmp	r3, r1
   1dd50:	d001      	beq.n	1dd56 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1dd52:	f7fb b8ed 	b.w	18f30 <z_set_prio>
}
   1dd56:	2000      	movs	r0, #0
   1dd58:	4770      	bx	lr

0001dd5a <z_impl_k_mutex_init>:
{
   1dd5a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1dd5c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1dd5e:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1dd62:	e9c3 3300 	strd	r3, r3, [r3]
}
   1dd66:	4770      	bx	lr

0001dd68 <queue_insert>:
{
   1dd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dd6c:	4699      	mov	r9, r3
   1dd6e:	4604      	mov	r4, r0
   1dd70:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1dd74:	460d      	mov	r5, r1
   1dd76:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1dd78:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1dd7c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1dd80:	f3ef 8711 	mrs	r7, BASEPRI
   1dd84:	f382 8812 	msr	BASEPRI_MAX, r2
   1dd88:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1dd8c:	b103      	cbz	r3, 1dd90 <queue_insert+0x28>
	return list->tail;
   1dd8e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1dd90:	4630      	mov	r0, r6
   1dd92:	f000 f9ee 	bl	1e172 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1dd96:	b158      	cbz	r0, 1ddb0 <queue_insert+0x48>
   1dd98:	2300      	movs	r3, #0
   1dd9a:	67c3      	str	r3, [r0, #124]	; 0x7c
   1dd9c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1dda0:	f000 f9b0 	bl	1e104 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1dda4:	4630      	mov	r0, r6
   1dda6:	4639      	mov	r1, r7
   1dda8:	f7fb f908 	bl	18fbc <z_reschedule>
		return 0;
   1ddac:	2000      	movs	r0, #0
   1ddae:	e00c      	b.n	1ddca <queue_insert+0x62>
	if (alloc) {
   1ddb0:	f1b9 0f00 	cmp.w	r9, #0
   1ddb4:	d01b      	beq.n	1ddee <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1ddb6:	2108      	movs	r1, #8
   1ddb8:	f7fb fd46 	bl	19848 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1ddbc:	b938      	cbnz	r0, 1ddce <queue_insert+0x66>
	__asm__ volatile(
   1ddbe:	f387 8811 	msr	BASEPRI, r7
   1ddc2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1ddc6:	f06f 000b 	mvn.w	r0, #11
}
   1ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1ddce:	2201      	movs	r2, #1
		anode->data = data;
   1ddd0:	f8c0 8004 	str.w	r8, [r0, #4]
   1ddd4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ddd6:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ddd8:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1dddc:	b95d      	cbnz	r5, 1ddf6 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ddde:	6822      	ldr	r2, [r4, #0]
   1dde0:	430a      	orrs	r2, r1
   1dde2:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1dde4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1dde6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1dde8:	b96a      	cbnz	r2, 1de06 <queue_insert+0x9e>
	list->tail = node;
   1ddea:	6060      	str	r0, [r4, #4]
}
   1ddec:	e00b      	b.n	1de06 <queue_insert+0x9e>
	node->next_and_flags = flags;
   1ddee:	f8c8 9000 	str.w	r9, [r8]
}
   1ddf2:	4640      	mov	r0, r8
   1ddf4:	e7ef      	b.n	1ddd6 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ddf6:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1ddf8:	2a03      	cmp	r2, #3
   1ddfa:	d810      	bhi.n	1de1e <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ddfc:	6001      	str	r1, [r0, #0]
	return list->tail;
   1ddfe:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1de00:	b939      	cbnz	r1, 1de12 <queue_insert+0xaa>
	list->head = node;
   1de02:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1de06:	2104      	movs	r1, #4
   1de08:	f104 0010 	add.w	r0, r4, #16
   1de0c:	f000 fbf2 	bl	1e5f4 <z_handle_obj_poll_events>
   1de10:	e7c8      	b.n	1dda4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1de12:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1de14:	f002 0203 	and.w	r2, r2, #3
   1de18:	4302      	orrs	r2, r0
   1de1a:	600a      	str	r2, [r1, #0]
   1de1c:	e7e5      	b.n	1ddea <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1de1e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1de22:	430a      	orrs	r2, r1
   1de24:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1de26:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1de28:	f002 0203 	and.w	r2, r2, #3
   1de2c:	ea40 0302 	orr.w	r3, r0, r2
   1de30:	602b      	str	r3, [r5, #0]
}
   1de32:	e7e8      	b.n	1de06 <queue_insert+0x9e>

0001de34 <z_queue_node_peek>:
{
   1de34:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1de36:	4604      	mov	r4, r0
   1de38:	b130      	cbz	r0, 1de48 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1de3a:	6802      	ldr	r2, [r0, #0]
   1de3c:	0793      	lsls	r3, r2, #30
   1de3e:	d003      	beq.n	1de48 <z_queue_node_peek+0x14>
		ret = anode->data;
   1de40:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1de42:	b109      	cbz	r1, 1de48 <z_queue_node_peek+0x14>
			k_free(anode);
   1de44:	f000 fbe4 	bl	1e610 <k_free>
}
   1de48:	4620      	mov	r0, r4
   1de4a:	bd10      	pop	{r4, pc}

0001de4c <z_impl_k_queue_init>:
	list->head = NULL;
   1de4c:	2300      	movs	r3, #0
	list->tail = NULL;
   1de4e:	e9c0 3300 	strd	r3, r3, [r0]
   1de52:	f100 0308 	add.w	r3, r0, #8
   1de56:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1de5a:	f100 0310 	add.w	r3, r0, #16
   1de5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1de62:	4770      	bx	lr

0001de64 <k_queue_append>:
{
   1de64:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1de66:	2301      	movs	r3, #1
   1de68:	9300      	str	r3, [sp, #0]
   1de6a:	2300      	movs	r3, #0
{
   1de6c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1de6e:	4619      	mov	r1, r3
   1de70:	f7ff ff7a 	bl	1dd68 <queue_insert>
}
   1de74:	b003      	add	sp, #12
   1de76:	f85d fb04 	ldr.w	pc, [sp], #4

0001de7a <k_queue_prepend>:
{
   1de7a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1de7c:	2300      	movs	r3, #0
{
   1de7e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1de80:	9300      	str	r3, [sp, #0]
   1de82:	4619      	mov	r1, r3
   1de84:	f7ff ff70 	bl	1dd68 <queue_insert>
}
   1de88:	b003      	add	sp, #12
   1de8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001de8e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1de8e:	b15a      	cbz	r2, 1dea8 <z_impl_k_sem_init+0x1a>
   1de90:	428a      	cmp	r2, r1
   1de92:	d309      	bcc.n	1dea8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1de94:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1de98:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1de9c:	e9c0 0000 	strd	r0, r0, [r0]
   1dea0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1dea4:	2000      	movs	r0, #0
   1dea6:	4770      	bx	lr
		return -EINVAL;
   1dea8:	f06f 0015 	mvn.w	r0, #21
}
   1deac:	4770      	bx	lr

0001deae <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1deae:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1deb0:	2301      	movs	r3, #1
   1deb2:	408b      	lsls	r3, r1
   1deb4:	ea22 0303 	bic.w	r3, r2, r3
   1deb8:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1deba:	fa22 f001 	lsr.w	r0, r2, r1
}
   1debe:	f000 0001 	and.w	r0, r0, #1
   1dec2:	4770      	bx	lr

0001dec4 <unschedule_locked>:
{
   1dec4:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1dec6:	2103      	movs	r1, #3
{
   1dec8:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1deca:	300c      	adds	r0, #12
   1decc:	f7ff ffef 	bl	1deae <flag_test_and_clear>
   1ded0:	4604      	mov	r4, r0
   1ded2:	b118      	cbz	r0, 1dedc <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1ded4:	f105 0010 	add.w	r0, r5, #16
   1ded8:	f000 f9c4 	bl	1e264 <z_abort_timeout>
}
   1dedc:	4620      	mov	r0, r4
   1dede:	bd38      	pop	{r3, r4, r5, pc}

0001dee0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1dee0:	b120      	cbz	r0, 1deec <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1dee2:	2200      	movs	r2, #0
   1dee4:	4611      	mov	r1, r2
   1dee6:	3088      	adds	r0, #136	; 0x88
   1dee8:	f000 b999 	b.w	1e21e <z_sched_wake>
}
   1deec:	4770      	bx	lr

0001deee <cancel_async_locked>:
{
   1deee:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1def0:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1def2:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1def6:	079b      	lsls	r3, r3, #30
{
   1def8:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1defa:	d416      	bmi.n	1df2a <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1defc:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1defe:	2102      	movs	r1, #2
   1df00:	300c      	adds	r0, #12
   1df02:	f7ff ffd4 	bl	1deae <flag_test_and_clear>
   1df06:	b180      	cbz	r0, 1df2a <cancel_async_locked+0x3c>
	return list->head;
   1df08:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1df0c:	b16a      	cbz	r2, 1df2a <cancel_async_locked+0x3c>
   1df0e:	4294      	cmp	r4, r2
   1df10:	d11d      	bne.n	1df4e <cancel_async_locked+0x60>
	return node->next;
   1df12:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1df14:	b99e      	cbnz	r6, 1df3e <cancel_async_locked+0x50>
   1df16:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   1df1a:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1df1e:	429c      	cmp	r4, r3
   1df20:	d101      	bne.n	1df26 <cancel_async_locked+0x38>
	list->tail = node;
   1df22:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   1df26:	2300      	movs	r3, #0
   1df28:	6023      	str	r3, [r4, #0]
	return *flagp;
   1df2a:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1df2c:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1df30:	bf1e      	ittt	ne
   1df32:	f043 0302 	orrne.w	r3, r3, #2
   1df36:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1df38:	f040 0002 	orrne.w	r0, r0, #2
}
   1df3c:	bd70      	pop	{r4, r5, r6, pc}
   1df3e:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1df40:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   1df44:	4294      	cmp	r4, r2
	list->tail = node;
   1df46:	bf08      	it	eq
   1df48:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   1df4c:	e7eb      	b.n	1df26 <cancel_async_locked+0x38>
	return node->next;
   1df4e:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1df50:	6812      	ldr	r2, [r2, #0]
   1df52:	e7db      	b.n	1df0c <cancel_async_locked+0x1e>

0001df54 <work_timeout>:
{
   1df54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1df56:	4604      	mov	r4, r0
	__asm__ volatile(
   1df58:	f04f 0340 	mov.w	r3, #64	; 0x40
   1df5c:	f3ef 8511 	mrs	r5, BASEPRI
   1df60:	f383 8812 	msr	BASEPRI_MAX, r3
   1df64:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1df68:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1df6a:	f1a0 0610 	sub.w	r6, r0, #16
   1df6e:	2103      	movs	r1, #3
   1df70:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1df72:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1df74:	f7ff ff9b 	bl	1deae <flag_test_and_clear>
   1df78:	b128      	cbz	r0, 1df86 <work_timeout+0x32>
		queue = dw->queue;
   1df7a:	69a3      	ldr	r3, [r4, #24]
   1df7c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1df7e:	a901      	add	r1, sp, #4
   1df80:	4630      	mov	r0, r6
   1df82:	f7fa fda7 	bl	18ad4 <submit_to_queue_locked>
	__asm__ volatile(
   1df86:	f385 8811 	msr	BASEPRI, r5
   1df8a:	f3bf 8f6f 	isb	sy
}
   1df8e:	b002      	add	sp, #8
   1df90:	bd70      	pop	{r4, r5, r6, pc}

0001df92 <k_work_init>:
{
   1df92:	b538      	push	{r3, r4, r5, lr}
   1df94:	4604      	mov	r4, r0
   1df96:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1df98:	2210      	movs	r2, #16
   1df9a:	2100      	movs	r1, #0
   1df9c:	f7ff f831 	bl	1d002 <memset>
   1dfa0:	6065      	str	r5, [r4, #4]
}
   1dfa2:	bd38      	pop	{r3, r4, r5, pc}

0001dfa4 <z_work_submit_to_queue>:
{
   1dfa4:	b513      	push	{r0, r1, r4, lr}
   1dfa6:	9001      	str	r0, [sp, #4]
   1dfa8:	4608      	mov	r0, r1
	__asm__ volatile(
   1dfaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dfae:	f3ef 8411 	mrs	r4, BASEPRI
   1dfb2:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfb6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1dfba:	a901      	add	r1, sp, #4
   1dfbc:	f7fa fd8a 	bl	18ad4 <submit_to_queue_locked>
	__asm__ volatile(
   1dfc0:	f384 8811 	msr	BASEPRI, r4
   1dfc4:	f3bf 8f6f 	isb	sy
}
   1dfc8:	b002      	add	sp, #8
   1dfca:	bd10      	pop	{r4, pc}

0001dfcc <k_work_submit_to_queue>:
{
   1dfcc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1dfce:	f7ff ffe9 	bl	1dfa4 <z_work_submit_to_queue>
	if (ret > 0) {
   1dfd2:	1e04      	subs	r4, r0, #0
   1dfd4:	dd09      	ble.n	1dfea <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1dfd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dfda:	f3ef 8011 	mrs	r0, BASEPRI
   1dfde:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfe2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dfe6:	f000 f8f4 	bl	1e1d2 <z_reschedule_irqlock>
}
   1dfea:	4620      	mov	r0, r4
   1dfec:	bd10      	pop	{r4, pc}

0001dfee <k_work_queue_init>:
{
   1dfee:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1dff0:	22a0      	movs	r2, #160	; 0xa0
   1dff2:	2100      	movs	r1, #0
   1dff4:	f7ff f805 	bl	1d002 <memset>
}
   1dff8:	bd08      	pop	{r3, pc}

0001dffa <k_work_init_delayable>:
{
   1dffa:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1dffc:	2230      	movs	r2, #48	; 0x30
{
   1dffe:	4604      	mov	r4, r0
   1e000:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1e002:	2100      	movs	r1, #0
   1e004:	f7fe fffd 	bl	1d002 <memset>
   1e008:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e00c:	6065      	str	r5, [r4, #4]
   1e00e:	60e3      	str	r3, [r4, #12]
}
   1e010:	bd38      	pop	{r3, r4, r5, pc}

0001e012 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1e012:	b538      	push	{r3, r4, r5, lr}
   1e014:	4604      	mov	r4, r0
   1e016:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e01a:	f3ef 8511 	mrs	r5, BASEPRI
   1e01e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e022:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1e026:	f7ff ff4d 	bl	1dec4 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1e02a:	4620      	mov	r0, r4
   1e02c:	f7ff ff5f 	bl	1deee <cancel_async_locked>
	__asm__ volatile(
   1e030:	f385 8811 	msr	BASEPRI, r5
   1e034:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1e038:	bd38      	pop	{r3, r4, r5, pc}

0001e03a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1e03a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e03e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e040:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e042:	2300      	movs	r3, #0
	node->prev = NULL;
   1e044:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e048:	4770      	bx	lr

0001e04a <unpend_thread_no_timeout>:
{
   1e04a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e04c:	f7ff fff5 	bl	1e03a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e050:	7b43      	ldrb	r3, [r0, #13]
   1e052:	f023 0302 	bic.w	r3, r3, #2
   1e056:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1e058:	2300      	movs	r3, #0
   1e05a:	6083      	str	r3, [r0, #8]
}
   1e05c:	bd08      	pop	{r3, pc}

0001e05e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1e05e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1e062:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1e066:	4283      	cmp	r3, r0
		return b2 - b1;
   1e068:	bf14      	ite	ne
   1e06a:	1ac0      	subne	r0, r0, r3
	return 0;
   1e06c:	2000      	moveq	r0, #0
}
   1e06e:	4770      	bx	lr

0001e070 <z_thread_timeout>:
{
   1e070:	b510      	push	{r4, lr}
   1e072:	4601      	mov	r1, r0
	__asm__ volatile(
   1e074:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e078:	f3ef 8411 	mrs	r4, BASEPRI
   1e07c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e080:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1e084:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1e088:	f013 0f28 	tst.w	r3, #40	; 0x28
   1e08c:	d10d      	bne.n	1e0aa <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1e08e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1e092:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1e094:	b10b      	cbz	r3, 1e09a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1e096:	f7ff ffd8 	bl	1e04a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e09a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1e09e:	f023 0314 	bic.w	r3, r3, #20
   1e0a2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1e0a6:	f7fa fe4d 	bl	18d44 <ready_thread>
	__asm__ volatile(
   1e0aa:	f384 8811 	msr	BASEPRI, r4
   1e0ae:	f3bf 8f6f 	isb	sy
}
   1e0b2:	bd10      	pop	{r4, pc}

0001e0b4 <add_to_waitq_locked>:
{
   1e0b4:	b538      	push	{r3, r4, r5, lr}
   1e0b6:	4604      	mov	r4, r0
   1e0b8:	460d      	mov	r5, r1
	unready_thread(thread);
   1e0ba:	f7fa fe77 	bl	18dac <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1e0be:	7b63      	ldrb	r3, [r4, #13]
   1e0c0:	f043 0302 	orr.w	r3, r3, #2
   1e0c4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1e0c6:	b1e5      	cbz	r5, 1e102 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1e0c8:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1e0ca:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e0cc:	429d      	cmp	r5, r3
   1e0ce:	d109      	bne.n	1e0e4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1e0d0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1e0d2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1e0d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e0d8:	606c      	str	r4, [r5, #4]
}
   1e0da:	e012      	b.n	1e102 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1e0dc:	686a      	ldr	r2, [r5, #4]
   1e0de:	4293      	cmp	r3, r2
   1e0e0:	d0f6      	beq.n	1e0d0 <add_to_waitq_locked+0x1c>
   1e0e2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e0e4:	2b00      	cmp	r3, #0
   1e0e6:	d0f3      	beq.n	1e0d0 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1e0e8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1e0ec:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1e0f0:	428a      	cmp	r2, r1
   1e0f2:	d0f3      	beq.n	1e0dc <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e0f4:	4291      	cmp	r1, r2
   1e0f6:	ddf1      	ble.n	1e0dc <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1e0f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e0fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1e0fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e100:	605c      	str	r4, [r3, #4]
}
   1e102:	bd38      	pop	{r3, r4, r5, pc}

0001e104 <z_ready_thread>:
{
   1e104:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e106:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e10a:	f3ef 8411 	mrs	r4, BASEPRI
   1e10e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e112:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1e116:	f7fa fe15 	bl	18d44 <ready_thread>
	__asm__ volatile(
   1e11a:	f384 8811 	msr	BASEPRI, r4
   1e11e:	f3bf 8f6f 	isb	sy
}
   1e122:	bd10      	pop	{r4, pc}

0001e124 <z_unpend_thread_no_timeout>:
{
   1e124:	b508      	push	{r3, lr}
	__asm__ volatile(
   1e126:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e12a:	f3ef 8111 	mrs	r1, BASEPRI
   1e12e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e132:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1e136:	f7ff ff88 	bl	1e04a <unpend_thread_no_timeout>
	__asm__ volatile(
   1e13a:	f381 8811 	msr	BASEPRI, r1
   1e13e:	f3bf 8f6f 	isb	sy
}
   1e142:	bd08      	pop	{r3, pc}

0001e144 <z_unpend1_no_timeout>:
{
   1e144:	b508      	push	{r3, lr}
   1e146:	4603      	mov	r3, r0
	__asm__ volatile(
   1e148:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e14c:	f3ef 8111 	mrs	r1, BASEPRI
   1e150:	f382 8812 	msr	BASEPRI_MAX, r2
   1e154:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1e158:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e15a:	4283      	cmp	r3, r0
   1e15c:	d007      	beq.n	1e16e <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   1e15e:	b108      	cbz	r0, 1e164 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1e160:	f7ff ff73 	bl	1e04a <unpend_thread_no_timeout>
	__asm__ volatile(
   1e164:	f381 8811 	msr	BASEPRI, r1
   1e168:	f3bf 8f6f 	isb	sy
}
   1e16c:	bd08      	pop	{r3, pc}
   1e16e:	2000      	movs	r0, #0
   1e170:	e7f8      	b.n	1e164 <z_unpend1_no_timeout+0x20>

0001e172 <z_unpend_first_thread>:
{
   1e172:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e174:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e178:	f3ef 8511 	mrs	r5, BASEPRI
   1e17c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e180:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1e184:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e186:	42a0      	cmp	r0, r4
   1e188:	d00d      	beq.n	1e1a6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1e18a:	b134      	cbz	r4, 1e19a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1e18c:	4620      	mov	r0, r4
   1e18e:	f7ff ff5c 	bl	1e04a <unpend_thread_no_timeout>
   1e192:	f104 0018 	add.w	r0, r4, #24
   1e196:	f000 f865 	bl	1e264 <z_abort_timeout>
	__asm__ volatile(
   1e19a:	f385 8811 	msr	BASEPRI, r5
   1e19e:	f3bf 8f6f 	isb	sy
}
   1e1a2:	4620      	mov	r0, r4
   1e1a4:	bd38      	pop	{r3, r4, r5, pc}
   1e1a6:	2400      	movs	r4, #0
   1e1a8:	e7f7      	b.n	1e19a <z_unpend_first_thread+0x28>

0001e1aa <z_unpend_thread>:
{
   1e1aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e1ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1b0:	f3ef 8411 	mrs	r4, BASEPRI
   1e1b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1b8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1e1bc:	f7ff ff45 	bl	1e04a <unpend_thread_no_timeout>
	__asm__ volatile(
   1e1c0:	f384 8811 	msr	BASEPRI, r4
   1e1c4:	f3bf 8f6f 	isb	sy
}
   1e1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e1cc:	3018      	adds	r0, #24
   1e1ce:	f000 b849 	b.w	1e264 <z_abort_timeout>

0001e1d2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e1d2:	4603      	mov	r3, r0
   1e1d4:	b920      	cbnz	r0, 1e1e0 <z_reschedule_irqlock+0xe>
   1e1d6:	f3ef 8205 	mrs	r2, IPSR
   1e1da:	b90a      	cbnz	r2, 1e1e0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1e1dc:	f7f4 bd64 	b.w	12ca8 <arch_swap>
   1e1e0:	f383 8811 	msr	BASEPRI, r3
   1e1e4:	f3bf 8f6f 	isb	sy
}
   1e1e8:	4770      	bx	lr

0001e1ea <z_reschedule_unlocked>:
	__asm__ volatile(
   1e1ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1ee:	f3ef 8011 	mrs	r0, BASEPRI
   1e1f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1f6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e1fa:	f7ff bfea 	b.w	1e1d2 <z_reschedule_irqlock>

0001e1fe <z_unpend_all>:
{
   1e1fe:	b538      	push	{r3, r4, r5, lr}
   1e200:	4605      	mov	r5, r0
	int need_sched = 0;
   1e202:	2000      	movs	r0, #0
	return list->head == list;
   1e204:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e206:	42a5      	cmp	r5, r4
   1e208:	d000      	beq.n	1e20c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e20a:	b904      	cbnz	r4, 1e20e <z_unpend_all+0x10>
}
   1e20c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e20e:	4620      	mov	r0, r4
   1e210:	f7ff ffcb 	bl	1e1aa <z_unpend_thread>
		z_ready_thread(thread);
   1e214:	4620      	mov	r0, r4
   1e216:	f7ff ff75 	bl	1e104 <z_ready_thread>
		need_sched = 1;
   1e21a:	2001      	movs	r0, #1
   1e21c:	e7f2      	b.n	1e204 <z_unpend_all+0x6>

0001e21e <z_sched_wake>:
{
   1e21e:	b538      	push	{r3, r4, r5, lr}
   1e220:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e224:	f3ef 8511 	mrs	r5, BASEPRI
   1e228:	f383 8812 	msr	BASEPRI_MAX, r3
   1e22c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1e230:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e232:	42a0      	cmp	r0, r4
   1e234:	d012      	beq.n	1e25c <z_sched_wake+0x3e>
		if (thread != NULL) {
   1e236:	b19c      	cbz	r4, 1e260 <z_sched_wake+0x42>
   1e238:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   1e23a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1e23c:	4620      	mov	r0, r4
   1e23e:	f7ff ff04 	bl	1e04a <unpend_thread_no_timeout>
   1e242:	f104 0018 	add.w	r0, r4, #24
   1e246:	f000 f80d 	bl	1e264 <z_abort_timeout>
			ready_thread(thread);
   1e24a:	4620      	mov	r0, r4
   1e24c:	f7fa fd7a 	bl	18d44 <ready_thread>
			ret = true;
   1e250:	2001      	movs	r0, #1
	__asm__ volatile(
   1e252:	f385 8811 	msr	BASEPRI, r5
   1e256:	f3bf 8f6f 	isb	sy
}
   1e25a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1e25c:	2000      	movs	r0, #0
   1e25e:	e7f8      	b.n	1e252 <z_sched_wake+0x34>
   1e260:	4620      	mov	r0, r4
   1e262:	e7f6      	b.n	1e252 <z_sched_wake+0x34>

0001e264 <z_abort_timeout>:
{
   1e264:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e266:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e26a:	f3ef 8411 	mrs	r4, BASEPRI
   1e26e:	f382 8812 	msr	BASEPRI_MAX, r2
   1e272:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1e276:	6803      	ldr	r3, [r0, #0]
   1e278:	b13b      	cbz	r3, 1e28a <z_abort_timeout+0x26>
			remove_timeout(to);
   1e27a:	f7fb f89d 	bl	193b8 <remove_timeout>
			ret = 0;
   1e27e:	2000      	movs	r0, #0
	__asm__ volatile(
   1e280:	f384 8811 	msr	BASEPRI, r4
   1e284:	f3bf 8f6f 	isb	sy
}
   1e288:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1e28a:	f06f 0015 	mvn.w	r0, #21
   1e28e:	e7f7      	b.n	1e280 <z_abort_timeout+0x1c>

0001e290 <z_get_next_timeout_expiry>:
{
   1e290:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e292:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e296:	f3ef 8411 	mrs	r4, BASEPRI
   1e29a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e29e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1e2a2:	f7fb f861 	bl	19368 <next_timeout>
	__asm__ volatile(
   1e2a6:	f384 8811 	msr	BASEPRI, r4
   1e2aa:	f3bf 8f6f 	isb	sy
}
   1e2ae:	bd10      	pop	{r4, pc}

0001e2b0 <z_set_timeout_expiry>:
{
   1e2b0:	b570      	push	{r4, r5, r6, lr}
   1e2b2:	4604      	mov	r4, r0
   1e2b4:	460d      	mov	r5, r1
	__asm__ volatile(
   1e2b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e2ba:	f3ef 8611 	mrs	r6, BASEPRI
   1e2be:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2c2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1e2c6:	f7fb f84f 	bl	19368 <next_timeout>
			      || (ticks <= next_to);
   1e2ca:	2801      	cmp	r0, #1
   1e2cc:	dd07      	ble.n	1e2de <z_set_timeout_expiry+0x2e>
   1e2ce:	42a0      	cmp	r0, r4
   1e2d0:	db05      	blt.n	1e2de <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1e2d2:	42a0      	cmp	r0, r4
   1e2d4:	4629      	mov	r1, r5
   1e2d6:	bfa8      	it	ge
   1e2d8:	4620      	movge	r0, r4
   1e2da:	f7f8 fbb9 	bl	16a50 <sys_clock_set_timeout>
	__asm__ volatile(
   1e2de:	f386 8811 	msr	BASEPRI, r6
   1e2e2:	f3bf 8f6f 	isb	sy
}
   1e2e6:	bd70      	pop	{r4, r5, r6, pc}

0001e2e8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1e2e8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1e2ea:	f7fb f959 	bl	195a0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e2ee:	bd08      	pop	{r3, pc}

0001e2f0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1e2f0:	f7fb b956 	b.w	195a0 <sys_clock_tick_get>

0001e2f4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1e2f4:	b108      	cbz	r0, 1e2fa <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1e2f6:	f7f5 badf 	b.w	138b8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1e2fa:	4770      	bx	lr

0001e2fc <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e2fc:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e300:	bf08      	it	eq
   1e302:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e306:	b538      	push	{r3, r4, r5, lr}
   1e308:	460c      	mov	r4, r1
   1e30a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e30c:	d014      	beq.n	1e338 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e30e:	4308      	orrs	r0, r1
   1e310:	d103      	bne.n	1e31a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1e312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1e316:	f7fb b943 	b.w	195a0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e31a:	f06f 0001 	mvn.w	r0, #1
   1e31e:	1b40      	subs	r0, r0, r5
   1e320:	f04f 33ff 	mov.w	r3, #4294967295
   1e324:	eb63 0101 	sbc.w	r1, r3, r1
   1e328:	2900      	cmp	r1, #0
   1e32a:	da04      	bge.n	1e336 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1e32c:	f7fb f938 	bl	195a0 <sys_clock_tick_get>
   1e330:	1940      	adds	r0, r0, r5
   1e332:	eb41 0104 	adc.w	r1, r1, r4
}
   1e336:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1e338:	f04f 30ff 	mov.w	r0, #4294967295
   1e33c:	4601      	mov	r1, r0
   1e33e:	e7fa      	b.n	1e336 <sys_clock_timeout_end_calc+0x3a>

0001e340 <k_timer_init>:
	timer->status = 0U;
   1e340:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1e342:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1e346:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1e34a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1e34e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1e352:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1e354:	6343      	str	r3, [r0, #52]	; 0x34
}
   1e356:	4770      	bx	lr

0001e358 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1e358:	b510      	push	{r4, lr}
   1e35a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1e35c:	f7ff ff82 	bl	1e264 <z_abort_timeout>

	if (inactive) {
   1e360:	b9b0      	cbnz	r0, 1e390 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1e362:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e364:	b10b      	cbz	r3, 1e36a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1e366:	4620      	mov	r0, r4
   1e368:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1e36a:	f104 0018 	add.w	r0, r4, #24
   1e36e:	f7ff fee9 	bl	1e144 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1e372:	b168      	cbz	r0, 1e390 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1e374:	f7ff fec6 	bl	1e104 <z_ready_thread>
	__asm__ volatile(
   1e378:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e37c:	f3ef 8011 	mrs	r0, BASEPRI
   1e380:	f383 8812 	msr	BASEPRI_MAX, r3
   1e384:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1e388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e38c:	f7ff bf21 	b.w	1e1d2 <z_reschedule_irqlock>
   1e390:	bd10      	pop	{r4, pc}

0001e392 <add_event>:
{
   1e392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e394:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e396:	e9d0 1300 	ldrd	r1, r3, [r0]
   1e39a:	4288      	cmp	r0, r1
   1e39c:	4604      	mov	r4, r0
   1e39e:	d105      	bne.n	1e3ac <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1e3a0:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1e3a2:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1e3a6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e3a8:	6065      	str	r5, [r4, #4]
   1e3aa:	e01d      	b.n	1e3e8 <add_event+0x56>
	if ((pending == NULL) ||
   1e3ac:	2b00      	cmp	r3, #0
   1e3ae:	d0f7      	beq.n	1e3a0 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e3b0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e3b2:	b100      	cbz	r0, 1e3b6 <add_event+0x24>
   1e3b4:	3860      	subs	r0, #96	; 0x60
   1e3b6:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e3ba:	4639      	mov	r1, r7
   1e3bc:	f7ff fe4f 	bl	1e05e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e3c0:	2800      	cmp	r0, #0
   1e3c2:	dced      	bgt.n	1e3a0 <add_event+0xe>
	return list->head == list;
   1e3c4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e3c6:	42b4      	cmp	r4, r6
   1e3c8:	d0ea      	beq.n	1e3a0 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e3ca:	2e00      	cmp	r6, #0
   1e3cc:	d0e8      	beq.n	1e3a0 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e3ce:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e3d0:	b101      	cbz	r1, 1e3d4 <add_event+0x42>
   1e3d2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1e3d4:	4638      	mov	r0, r7
   1e3d6:	f7ff fe42 	bl	1e05e <z_sched_prio_cmp>
   1e3da:	2800      	cmp	r0, #0
   1e3dc:	dd05      	ble.n	1e3ea <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1e3de:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e3e0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1e3e4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e3e6:	6075      	str	r5, [r6, #4]
}
   1e3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1e3ea:	6863      	ldr	r3, [r4, #4]
   1e3ec:	429e      	cmp	r6, r3
   1e3ee:	d0d7      	beq.n	1e3a0 <add_event+0xe>
   1e3f0:	6836      	ldr	r6, [r6, #0]
   1e3f2:	e7ea      	b.n	1e3ca <add_event+0x38>

0001e3f4 <register_events>:
{
   1e3f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1e3f8:	2500      	movs	r5, #0
{
   1e3fa:	468b      	mov	fp, r1
   1e3fc:	4614      	mov	r4, r2
   1e3fe:	461f      	mov	r7, r3
   1e400:	4682      	mov	sl, r0
	int events_registered = 0;
   1e402:	462e      	mov	r6, r5
	event->poller = NULL;
   1e404:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1e406:	455d      	cmp	r5, fp
   1e408:	db02      	blt.n	1e410 <register_events+0x1c>
}
   1e40a:	4630      	mov	r0, r6
   1e40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e410:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e414:	f3ef 8911 	mrs	r9, BASEPRI
   1e418:	f383 8812 	msr	BASEPRI_MAX, r3
   1e41c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1e420:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1e424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e428:	3b01      	subs	r3, #1
   1e42a:	2b07      	cmp	r3, #7
   1e42c:	d80f      	bhi.n	1e44e <register_events+0x5a>
   1e42e:	e8df f003 	tbb	[pc, r3]
   1e432:	041e      	.short	0x041e
   1e434:	0e0e0a0e 	.word	0x0e0e0a0e
   1e438:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1e43a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e43e:	689b      	ldr	r3, [r3, #8]
   1e440:	b12b      	cbz	r3, 1e44e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1e442:	2302      	movs	r3, #2
   1e444:	e020      	b.n	1e488 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1e446:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e44a:	681b      	ldr	r3, [r3, #0]
   1e44c:	bb8b      	cbnz	r3, 1e4b2 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1e44e:	bb47      	cbnz	r7, 1e4a2 <register_events+0xae>
   1e450:	7823      	ldrb	r3, [r4, #0]
   1e452:	b333      	cbz	r3, 1e4a2 <register_events+0xae>
	switch (event->type) {
   1e454:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1e458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e45c:	3b01      	subs	r3, #1
   1e45e:	2b07      	cmp	r3, #7
   1e460:	d830      	bhi.n	1e4c4 <register_events+0xd0>
   1e462:	e8df f003 	tbb	[pc, r3]
   1e466:	2833      	.short	0x2833
   1e468:	2f2f282f 	.word	0x2f2f282f
   1e46c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1e46e:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e472:	689b      	ldr	r3, [r3, #8]
   1e474:	2b00      	cmp	r3, #0
   1e476:	d0ea      	beq.n	1e44e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1e478:	2301      	movs	r3, #1
   1e47a:	e005      	b.n	1e488 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1e47c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e480:	6a1b      	ldr	r3, [r3, #32]
   1e482:	2b00      	cmp	r3, #0
   1e484:	d0e3      	beq.n	1e44e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1e486:	2310      	movs	r3, #16
	event->state |= state;
   1e488:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1e48c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1e490:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1e494:	430b      	orrs	r3, r1
   1e496:	f363 3294 	bfi	r2, r3, #14, #7
   1e49a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1e49e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1e4a2:	f389 8811 	msr	BASEPRI, r9
   1e4a6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1e4aa:	3501      	adds	r5, #1
   1e4ac:	f10a 0a14 	add.w	sl, sl, #20
   1e4b0:	e7a9      	b.n	1e406 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1e4b2:	2304      	movs	r3, #4
   1e4b4:	e7e8      	b.n	1e488 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1e4b6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1e4ba:	4622      	mov	r2, r4
   1e4bc:	4651      	mov	r1, sl
   1e4be:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1e4c0:	f7ff ff67 	bl	1e392 <add_event>
	event->poller = poller;
   1e4c4:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1e4c8:	3601      	adds	r6, #1
   1e4ca:	e7ea      	b.n	1e4a2 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1e4cc:	f8da 0010 	ldr.w	r0, [sl, #16]
   1e4d0:	4622      	mov	r2, r4
   1e4d2:	4651      	mov	r1, sl
   1e4d4:	e7f4      	b.n	1e4c0 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1e4d6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1e4da:	4622      	mov	r2, r4
   1e4dc:	4651      	mov	r1, sl
   1e4de:	3024      	adds	r0, #36	; 0x24
   1e4e0:	e7ee      	b.n	1e4c0 <register_events+0xcc>

0001e4e2 <signal_poll_event>:
{
   1e4e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1e4e6:	6884      	ldr	r4, [r0, #8]
{
   1e4e8:	4605      	mov	r5, r0
   1e4ea:	460e      	mov	r6, r1
	if (poller != NULL) {
   1e4ec:	b144      	cbz	r4, 1e500 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1e4ee:	7863      	ldrb	r3, [r4, #1]
   1e4f0:	2b01      	cmp	r3, #1
   1e4f2:	d12e      	bne.n	1e552 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1e4f4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e4f8:	f013 0302 	ands.w	r3, r3, #2
   1e4fc:	d10a      	bne.n	1e514 <signal_poll_event+0x32>
		poller->is_polling = false;
   1e4fe:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1e500:	68eb      	ldr	r3, [r5, #12]
   1e502:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1e506:	4316      	orrs	r6, r2
	event->poller = NULL;
   1e508:	2000      	movs	r0, #0
	event->state |= state;
   1e50a:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   1e50e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1e510:	60eb      	str	r3, [r5, #12]
	return retcode;
   1e512:	e03e      	b.n	1e592 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1e514:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1e518:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e51c:	bf08      	it	eq
   1e51e:	f112 0f02 	cmneq.w	r2, #2
   1e522:	d032      	beq.n	1e58a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e524:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1e528:	4640      	mov	r0, r8
   1e52a:	f7ff fe3e 	bl	1e1aa <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e52e:	2e08      	cmp	r6, #8
   1e530:	bf0c      	ite	eq
   1e532:	f06f 0303 	mvneq.w	r3, #3
   1e536:	2300      	movne	r3, #0
   1e538:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e53a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e53e:	06db      	lsls	r3, r3, #27
   1e540:	d109      	bne.n	1e556 <signal_poll_event+0x74>
   1e542:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1e546:	b937      	cbnz	r7, 1e556 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1e548:	4640      	mov	r0, r8
   1e54a:	f7ff fddb 	bl	1e104 <z_ready_thread>
		poller->is_polling = false;
   1e54e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1e550:	e7d6      	b.n	1e500 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1e552:	2b02      	cmp	r3, #2
   1e554:	d001      	beq.n	1e55a <signal_poll_event+0x78>
		poller->is_polling = false;
   1e556:	2300      	movs	r3, #0
   1e558:	e7d1      	b.n	1e4fe <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1e55a:	7823      	ldrb	r3, [r4, #0]
   1e55c:	2b00      	cmp	r3, #0
   1e55e:	d0cf      	beq.n	1e500 <signal_poll_event+0x1e>
   1e560:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1e564:	2f00      	cmp	r7, #0
   1e566:	d0f2      	beq.n	1e54e <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1e568:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1e56c:	f1a4 0914 	sub.w	r9, r4, #20
   1e570:	f104 0014 	add.w	r0, r4, #20
   1e574:	f7ff fe76 	bl	1e264 <z_abort_timeout>
		twork->poll_result = 0;
   1e578:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1e57c:	4649      	mov	r1, r9
   1e57e:	4638      	mov	r0, r7
   1e580:	f7ff fd10 	bl	1dfa4 <z_work_submit_to_queue>
		poller->is_polling = false;
   1e584:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1e588:	e7ba      	b.n	1e500 <signal_poll_event+0x1e>
		poller->is_polling = false;
   1e58a:	2300      	movs	r3, #0
   1e58c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1e58e:	f06f 000a 	mvn.w	r0, #10
}
   1e592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e596 <clear_event_registrations>:
	while (num_events--) {
   1e596:	2314      	movs	r3, #20
{
   1e598:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e59a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1e59e:	2400      	movs	r4, #0
	switch (event->type) {
   1e5a0:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   1e5a4:	b901      	cbnz	r1, 1e5a8 <clear_event_registrations+0x12>
}
   1e5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1e5a8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1e5ac:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1e5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e5b4:	2b08      	cmp	r3, #8
   1e5b6:	f1a0 0714 	sub.w	r7, r0, #20
   1e5ba:	d80c      	bhi.n	1e5d6 <clear_event_registrations+0x40>
   1e5bc:	fa26 f303 	lsr.w	r3, r6, r3
   1e5c0:	07db      	lsls	r3, r3, #31
   1e5c2:	d508      	bpl.n	1e5d6 <clear_event_registrations+0x40>
	return node->next != NULL;
   1e5c4:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e5c8:	b12b      	cbz	r3, 1e5d6 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1e5ca:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1e5ce:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1e5d0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1e5d2:	e940 4405 	strd	r4, r4, [r0, #-20]
   1e5d6:	f382 8811 	msr	BASEPRI, r2
   1e5da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e5de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5e2:	f3ef 8211 	mrs	r2, BASEPRI
   1e5e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5ea:	f3bf 8f6f 	isb	sy
   1e5ee:	3901      	subs	r1, #1
   1e5f0:	4638      	mov	r0, r7
   1e5f2:	e7d7      	b.n	1e5a4 <clear_event_registrations+0xe>

0001e5f4 <z_handle_obj_poll_events>:
{
   1e5f4:	4603      	mov	r3, r0
	return list->head == list;
   1e5f6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e5f8:	4283      	cmp	r3, r0
   1e5fa:	d008      	beq.n	1e60e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1e5fc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e600:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e602:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e604:	2300      	movs	r3, #0
	node->prev = NULL;
   1e606:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e60a:	f7ff bf6a 	b.w	1e4e2 <signal_poll_event>
}
   1e60e:	4770      	bx	lr

0001e610 <k_free>:
	if (ptr != NULL) {
   1e610:	b120      	cbz	r0, 1e61c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1e612:	1f01      	subs	r1, r0, #4
   1e614:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e618:	f7ff bb19 	b.w	1dc4e <k_heap_free>
}
   1e61c:	4770      	bx	lr

0001e61e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1e61e:	4770      	bx	lr
